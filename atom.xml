<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一位可可爱爱的编橙爱好者</title>
  <icon>https://www.gravatar.com/avatar/560d60bc4bbfec4b10e3ea23f4d15430</icon>
  <subtitle>欢迎来到爱的小屋</subtitle>
  <link href="https://a2914475618.github.io/atom.xml" rel="self"/>
  
  <link href="https://a2914475618.github.io/"/>
  <updated>2021-04-02T07:48:56.148Z</updated>
  <id>https://a2914475618.github.io/</id>
  
  <author>
    <name>Lu sir</name>
    <email>2914475618@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git基础</title>
    <link href="https://a2914475618.github.io/2021/03/31/postgit%E5%9F%BA%E7%A1%80/"/>
    <id>https://a2914475618.github.io/2021/03/31/postgit%E5%9F%BA%E7%A1%80/</id>
    <published>2021-03-31T07:24:29.000Z</published>
    <updated>2021-04-02T07:48:56.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git基础（更新中）"><a href="#Git基础（更新中）" class="headerlink" title="Git基础（更新中）"></a>Git基础（更新中）</h1><ul><li>源代码版本控制git（追踪文件的变更）</li><li>有案可查、有迹可循</li><li>备案：Repoistory</li><li>多人协作</li><li>用Github平台是git的代名词，git必不可少，GitHub类似的平台，可以自己搭建</li><li>Github被微软收购，开源</li></ul><h2 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h2><p>Git本地有三个工作区域</p><ol><li>工作目录（Woriking Directory)</li><li>暂存区(Stage/Index)</li><li>资源库(Repository或Git Directory)</li></ol><p>远程有Git仓库（Remote Directory)文件在这四个区域之间的转换关系如下：</p><p><img src="https://i.loli.net/2021/04/02/iCLae6SMxGjWn9E.png" alt="W_X1HWCT_IILQY8QS_BCSO3.png"></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="https://i.loli.net/2021/04/02/8NhsXOdKCTQ5x72.png" alt="L4__0_QQPGEBE~I_0L79EGO.png"></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p><img src="https://i.loli.net/2021/04/02/IKpbuiX6JWvMCfH.png" alt="_@IX4_ECATUSX__U_@_41EY.png"></p><p>Git项目搭建</p><h3 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h3><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p>![<del>O</del>H8`V5C6@RQN2U1Y02_38.png](<a href="https://i.loli.net/2021/04/02/W7AlewmphXKut69.png">https://i.loli.net/2021/04/02/W7AlewmphXKut69.png</a>)</p><h3 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h3><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库$ git init</span><br></pre></td></tr></table></figure><p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 克隆一个项目和它的整个代码历史(版本信息)$ git clone [url]  # https:&#x2F;&#x2F;gitee.com&#x2F;kuangstudy&#x2F;openclass.git</span><br></pre></td></tr></table></figure><h3 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li><li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#查看指定文件状态git status [filename]</span><br><span class="line">#查看所有文件状态git status</span><br><span class="line"># git add .                  添加所有文件到暂存区# git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span><br></pre></td></tr></table></figure><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#为注释*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！!lib.txt     #但lib.txt除外&#x2F;temp        #仅忽略项目根目录下的TODO文件,不包括其它目录tempbuild&#x2F;       #忽略build&#x2F;目录下的所有文件doc&#x2F;*.txt    #会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br></pre></td></tr></table></figure><h2 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h2><h3 id="IDEA中用Git"><a href="#IDEA中用Git" class="headerlink" title="IDEA中用Git"></a>IDEA中用Git</h3><p>1、新建项目，绑定git。</p><p>注意观察idea中的变化</p><p>2、修改文件，使用IDEA操作git。</p><ul><li>添加到暂存区</li><li>commit 提交</li><li>push到远程仓库</li></ul><p>3、提交测试</p><h3 id="在VS中用Git"><a href="#在VS中用Git" class="headerlink" title="在VS中用Git"></a>在VS中用Git</h3><p>要先去设置VS自带的GIT，然后创建</p><p><img src="https://i.loli.net/2021/03/31/KW5Xo9mgrRbZwfn.png" alt="image.png"></p><p>可以在VS中CLONE别人的项目，拉取</p><p><img src="https://i.loli.net/2021/03/31/tp9r32SNQFoaBY6.png" alt="image.png"></p><p>克隆他人的项目以后，可以push到服务器进行同步，需要他人的授权才行</p><p>也就是需要他人将你的用户名添加到他的合作者里</p><p>授权在Github,邀请合作</p><p><img src="https://i.loli.net/2021/03/31/dMqRI9ALrP1O5sf.png" alt="image.png"></p><h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><p>两个人都对项目的同一个地方进行了修改</p><p>需要人工来进行处理，可以合并，可以采用远程<img src="https://i.loli.net/2021/03/31/8Cf9G2STiHuYbUa.png" alt="image.png"></p><h2 id="git命令行："><a href="#git命令行：" class="headerlink" title="git命令行："></a>git命令行：</h2><h3 id="cmd常用DOS命令"><a href="#cmd常用DOS命令" class="headerlink" title="cmd常用DOS命令"></a>cmd常用DOS命令</h3><ol><li>dir显示当前文件夹下的所有内容</li><li>cd进入到目录</li><li>改盘直接输(C：)</li><li>md GitSample 创建文件夹GitSample</li><li>DOS命令不能直接从一个盘转到另一个盘，需要先改盘，见.3</li><li>set 查看所有环境变量：—环境变量：相当于全局变量</li><li>dir /？显示目录中的文件和子目录列表</li><li>dir /AH显示所有隐藏的文件</li><li>type 显示文件的内容</li><li>type nul &gt; test.txt(管道命令将一个空的内容输入到我们想创建的文件里)</li><li>cd .. 返回上一级目录</li><li>notopad  test.txt 用记事本添加内容</li><li>type 和more都可以显示文件里的内容</li><li>echo 查看环境变量</li><li>管道符号&gt;输入到哪个文件夹（echo &gt; xr.txt）</li><li>clear Screen 清理屏幕上之前的消息</li></ol><h3 id="基本的LINUX命令"><a href="#基本的LINUX命令" class="headerlink" title="基本的LINUX命令"></a>基本的LINUX命令</h3><p>pwd：显示当前所在目录路径</p><p>clear：清屏</p><p>Is（II）：列出当前目录中的所有文件，(II)更加详细</p><p>touch+文件名：新建一个文件</p><p>rm：删除一个文件</p><p>mkdir：创建一个文件夹</p><p>rm-r:删除一个文件夹</p><p>rm-rf：格式化（切勿在LINUX)中尝试</p><p>mv +文件名+文件夹：移动文件</p><p>history：查看历史命令</p><p>help：查看帮助</p><p>exit：退出</p><p>#表示注释</p><h3 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h3><p>git config -L 当前项目下关于GIT所有的配置</p><p>git config –system –list   系统的配置</p><p>git config –global –list    自己配置的</p><p>git config –global  user.name””</p><p>git config –global  user.email””</p><p>git –version ：查看git是否安装 版本号（下载VS会自动安装）</p><p>git  init 创建一个空的仓库</p><p>git status  查看现在的状态</p><p>git add 往仓库中添加需要被跟踪（track）的文件</p><p>git commit  -m”init” 将变化提交到仓库中，如果忘记加m就需要面对LINUX的文本编辑器         退出：ESC+:+wq</p><p>git clone 克隆</p><p>git conmmit -a””全部提交</p><p>git config 显示所有配置</p><p>关键字：change / untracked / unstaged / staged/ commit</p><ul><li>没有add的内容（不是文件）不会被track和stage：每一次commit之前都需要add （参数：-a，可以跳过暂存直接提交 ）</li><li>没有被track和stage的内容不会被commit</li><li>但被track的文件改动（change）会被跟踪（track）</li></ul><p>忽略不需要被track的文件：.gitignore。查看被git管理的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files</span><br></pre></td></tr></table></figure><p><strong>常用命令</strong></p><p>查看更改（<em>和Repoistory相比</em>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff             #尚未添加到stage的变更：比较工作区和仓库</span><br><span class="line">git diff --staged    #已经添加到stage，尚未提交的变更：比较staged和repository</span><br></pre></td></tr></table></figure><p>查看历史提交</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git log &lt;filename&gt;        #某个文件的历史记录</span><br><span class="line">git log -p -2 --stat      #最近两次的提交，包含差异和统计信息</span><br><span class="line">git log --since=2.weeks   #最近两周以内的提交</span><br><span class="line">git log -Sagain           #内容中包含again的提交</span><br><span class="line">git log --grep init       #message log中包含init的提交 <span class="built_in">global</span> regular expression print</span><br><span class="line">git log --pretty=oneline   #一次提交只显示一行</span><br><span class="line">git log --pretty=format:&quot;%h - %an %cd : %s&quot;   #指定格式 hash / author name / commit date / subject</span><br></pre></td></tr></table></figure><p><strong>标签</strong></p><p>打标签：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0                       #轻量级</span><br><span class="line">git tag -a v1.0 [-m &quot;&lt;message&gt;&quot;]   #加注释</span><br><span class="line">git tag -a v1.1 &lt;commit_hash_id&gt;   #在&lt;commit_hash_id&gt;上补打标签</span><br></pre></td></tr></table></figure><p>查看标签：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag [-l &lt;seek_tag_part&gt;] #显示现有的标签</span><br><span class="line">git show &lt;tag&gt;               #显示&lt;tag&gt;标签详细信息</span><br></pre></td></tr></table></figure><p>删除标签：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tag_name&gt;</span><br></pre></td></tr></table></figure><p>迁出标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;tag_name&gt;</span><br></pre></td></tr></table></figure><p><strong>其他操作（慎重）</strong></p><p>删除文件</p><ul><li>del（普通删除） + add + commit</li><li>git rm <file_name> + commit</li></ul><p>参数：–cached，可以在删除repository的同时保留一份工作区 untracked的副本</p><p>重命名</p><ul><li>如果直接（用操作系统）重命名文件，会导致git认为该文件为“新文件”，无法记录之前的log （<em>和文档不符……再尝试</em>）</li><li>git mv<old> <new></li></ul><p>撤销</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend      #合并两次提交（修复上一次提交）</span><br><span class="line">git reset HEAD &lt;file&gt;   #从暂存区中移出</span><br><span class="line">git checkout -- &lt;file&gt;  #撤销（工作区上）文件上的更改，类似于undo/ctrl+z</span><br></pre></td></tr></table></figure><p><em>体会：暂存区的意义**？</em></p><p><strong>远程仓库管理</strong></p><p>为什么需要？多人协作。</p><p>首先，你要有一个远程仓库！（<em>无法在本地通过git命令在远程创建一个仓库</em>）</p><ul><li>建议：使用github（延伸：局域网中可以直接使用文件协议，也可以自己搭建服务器，使用https、ssl、git等协议）</li><li>注意：要么clone（fork本质上就是clone）到本地（空？）文件夹，要么push到远程的“空”仓库，以确保两个仓库是“一致”的。不能把A仓库push到B仓库……</li></ul><p>然后，在本地（local）<strong>仓库</strong>和远程（remote）<strong>仓库</strong>之间同步（sync）：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clone    #克隆，把远程仓库（包含历史记录，不仅是最新版本）复制到本地</span><br><span class="line">fetch    #获取远程仓库里（别人提交的）未同步的更新信息，并存放到本地仓库</span><br><span class="line">merge    #将fetch得到的更新同步到工作区（分支合并）</span><br><span class="line">pull     #=fetch+merge</span><br><span class="line">push     #把本地仓库中的改动推送到远程仓库</span><br></pre></td></tr></table></figure><p>remote管理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote [-v]                     # 显示管理的远程仓库</span><br><span class="line">git remote add &lt;remote_name&gt; &lt;url&gt;  # 将&lt;url&gt;添加进远程仓库管理，本地名为&lt;remote_name&gt;</span><br><span class="line">git remote show &lt;remote_name&gt;       # 显示&lt;remote_name&gt;的详细信息</span><br><span class="line">git remote rename &lt;old&gt; &lt;new&gt;       # 重命名</span><br><span class="line">git remote rm &lt;remote_name&gt;         #删除远程仓库的管理</span><br></pre></td></tr></table></figure><p>推送标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;tag_name&gt;    #将标签推送到远程仓库</span><br></pre></td></tr></table></figure><p>分支</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch                         #显示所有分支 --merged --no-merged</span><br><span class="line">git branch &lt;branch_name&gt;           #创建新分支&lt;branch_name&gt;</span><br><span class="line">git checkout [-b] &lt;branch_name&gt;    #切换到分支&lt;branch_name&gt;</span><br><span class="line">git merge &lt;branch_name&gt;            #在当前分支上合并&lt;branch_name&gt;</span><br><span class="line">git branch -d &lt;branch_name&gt;        #删除（delete）不需要的&lt;branch_name&gt;</span><br></pre></td></tr></table></figure><p><strong>跟踪分支</strong>：</p><p>基于远程分支创建的本地分支会自动成为跟踪分支，即与远程分支直接关联的本地分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv  #查看跟踪的远程分支</span><br></pre></td></tr></table></figure><p>比较：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new_branch_name&gt; &lt;remote&gt;&#x2F;&lt;branch_name&gt;#能指定新创建分支的名字</span><br><span class="line">git checkout --track  &lt;remote&gt;&#x2F;&lt;branch_name&gt;#指定需要跟踪的远程分支名字</span><br><span class="line">git checkout &lt;branch_name&gt;#如果本地没有远程分支对应的分支，自动创建并跟踪</span><br></pre></td></tr></table></figure><p>思考：这两条命令的本质是什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;   #从暂存区中移出</span><br><span class="line">git checkout -- &lt;file&gt;  #撤销（工作区上）文件上的更改，类似于undo&#x2F;ctrl+z</span><br></pre></td></tr></table></figure><p>命令：git reset 后可指定版本号，进行一个完整的reset操作：</p><p><em>复习：工作区 （work directory） =&gt; 暂存区（stage/index） =&gt; 仓库（repoistory）</em></p><ol><li>移动HEAD所指向的目标/分支（checkout是修改HEAD本身）：实质是撤销最近一次git commit命令，但不改变暂存区和工作区（– soft），可以继续commit</li><li>更新索引（–mixed：默认），将修改移出暂存区</li><li>更改工作区（–hard：谨慎使用）</li></ol><p>注意：git reset 仅在当前分支有效（不能跨分支操作）</p><p><a href="https://segmentfault.com/a/1190000006185954">比较reset和checkout</a>：</p><p><img src="http://17bang.ren/Images/Summary/2019/6/30/1/git-checkout-reset.png" alt="img"></p><p><strong>推荐</strong>：git revert HEAD[^] | <log_number></p><p>将撤销操作当成一次提交保存，而不会真的删除一次提交。</p><p><strong>帮助</strong>（help）</p><ul><li>git help <verb></li><li>git verb –help</li></ul><h2 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p><p><img src="https://i.loli.net/2021/04/02/SiVmZ7DH3IFNCjw.png" alt="_8_RHDDDMB8X_35M__1C__H.png"></p><p><img src="https://i.loli.net/2021/04/02/RSVDyChq9GUtu42.png" alt="WVCH_G5S_LZY0LCXN9U@XNE.png"></p><p>git分支中常用指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支git branch</span><br><span class="line"># 列出所有远程分支git branch -r</span><br><span class="line"># 新建一个分支，但依然停留在当前分支git branch [branch-name]</span><br><span class="line"># 新建一个分支，并切换到该分支git checkout -b [branch]</span><br><span class="line"># 合并指定分支到当前分支$ git merge [branch]</span><br><span class="line"># 删除分支$ git branch -d [branch-name]</span><br><span class="line"># 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p><h2 id="视频推荐"><a href="#视频推荐" class="headerlink" title="视频推荐"></a>视频推荐</h2><p><a href="https://space.bilibili.com/55410301/video?keyword=git//%E5%AD%A6%E5%88%B0%E5%91%BD%E4%BB%A4%E8%A1%8C">https://space.bilibili.com/55410301/video?keyword=git//学到命令行</a></p><p><a href="https://www.bilibili.com/video/BV1FE411P7B3?p=14//%E5%AD%A6%E5%AE%8C">https://www.bilibili.com/video/BV1FE411P7B3?p=14//学完</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学完Git的基础后应该掌握Git一些基本的命令，在以后的工作中不断学习，精益求精。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git基础（更新中）&quot;&gt;&lt;a href=&quot;#Git基础（更新中）&quot; class=&quot;headerlink&quot; title=&quot;Git基础（更新中）&quot;&gt;&lt;/a&gt;Git基础（更新中）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;源代码版本控制git（追踪文件的变更）&lt;/li&gt;
&lt;li&gt;有案可</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="git 版本控制" scheme="https://a2914475618.github.io/tags/git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈mvc</title>
    <link href="https://a2914475618.github.io/2021/03/30/post%E6%B5%85%E8%B0%88mvc/"/>
    <id>https://a2914475618.github.io/2021/03/30/post%E6%B5%85%E8%B0%88mvc/</id>
    <published>2021-03-30T11:11:36.000Z</published>
    <updated>2021-03-31T07:11:21.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mvc学习记录（更新中）"><a href="#mvc学习记录（更新中）" class="headerlink" title="mvc学习记录（更新中）"></a>mvc学习记录（更新中）</h1><p>该笔记结构杂，不推荐观看</p><h2 id="MVC零碎记录"><a href="#MVC零碎记录" class="headerlink" title="MVC零碎记录"></a>MVC零碎记录</h2><ul><li><p>mvc本质上是一个类库程序，没有入口函数</p></li><li><p>global.asax与app_start合在一起用的，做到项目启动配置的文件</p></li><li><p>global里的application start 只在application开始（启动iis）的时候运行一次，所以如果改动了application_start（）里调用的内容，需要重启iis</p></li><li><p>packages.config指示项目加载哪些References里的Nugit的DLL程序集</p></li><li><p>web.config配置文件</p></li><li><p>一个controller可以有若干个Action</p></li><li><p>mvc靠约定主导的，默认去找控制器同名VIEW下的页面</p></li><li><p>controller继承基类controller</p></li><li><p>添加1.[httpGet]2.[httpPost] 标记</p></li><li><p>mvc的起点是global，</p></li><li><p>global调用了app_start的文件</p></li><li><p>路由里面也可以添加限制constrans 如@”\d+”要求id必须为数字</p></li><li><p>constrans覆盖了id optional</p></li><li><p>也可以在Action上面添加[Route(参数)]标签，类似于[httppost]，要使用route-attribute的话，要在route配置文件里里添加routes.MapMvcAttributeRoutes();</p></li><li><p>Action的返回值是ActionResult</p></li><li><p>mvc和core的对比：没有@page声明所以需要通过mvc框架来实现，controller到action到view</p></li><li><p>htmlhelper生成html标签：</p></li><li><p>@using(html.brginform()){</p></li><li><p>@html.label(“username”)//不推荐</p></li><li><p>@html.labelfor(m=&gt;m.username)//推荐使用LAMBDA表达式</p></li><li><p>}</p></li><li><p>ACTION里面的参数可以Int enum 等</p></li><li><p>最强的是参数为model，model绑定 ，默认将 前台用户输入的数据通过Model传到后台</p></li><li><p>要想在MVC中给标签加Style，在Htmlhelper后面加样式</p></li><li><p>@html。textbox（”name”,” “,new{style=”color:blue;”, @class=”red”}）</p></li><li><p>@html.dropdownlistfor(m=&gt;m.InviterSelected,new SelectList(Model.InviterOptions.id,”Id”,”Name”,2,new int []{1}),”——“,null)</p></li><li><p>//2为选中的ID，选中项，new的数组是DISABLE不显示的项</p></li><li><p>lambda表达式必须指定简单类型，不能用复杂类型</p></li><li><p>给视图指定MODEL的时候应写成@model记得是小写</p></li><li><p>用for的原因是有利于后台绑定，foreach绑定的NAME为item.属性，这样后台就没有办法知道你绑定是谁，如果只是呈现的话可以用foreach但是向后台传值的话用FOR</p></li><li><p>按HTTP协议，CHECKBOX没选中，就不往后台传值（而不是往后台传FALSE），mvc通过<input  type="hidden" value="fasle">获得true/false的值，勾选就可以false</p></li><li><p>站内的重定向用RedirectToAction(“Index”,”Home”)，站外的用Redirect</p></li><li><p>操作系统不是企业应用（鸿蒙操作系统）</p></li><li><p>企业应用：复杂，数据库，用户界面，业务逻辑</p></li></ul><h2 id="三层架构："><a href="#三层架构：" class="headerlink" title="三层架构："></a>三层架构：</h2><ul><li>数据层：DAL：完成数据的持久化</li><li>展示层：UI：和用户交互</li><li>业务层：BLL：进行业务</li><li>关系：</li><li>ui-&gt;bll-&gt;dal-&gt;database</li><li>注意：</li><li>只允许上层调用下层，下层不能调用上层</li><li>相邻层之间才能交互，不允许跨层交互</li><li>三层项目隔离，通过REFERENCES引用</li><li>引用是单向的</li><li>为什么需要分层？</li><li>微服务不好</li><li>方便项目组织维护</li><li>前后端分离</li><li>DTO（DATA TRANSFERE object）：数据运转对象，用于数据传递的对象,是一个实体 </li></ul><h2 id="特别声明："><a href="#特别声明：" class="headerlink" title="特别声明："></a>特别声明：</h2><p>里面的内容都是我学习中一些不曾了解的记录，方便我日后进行资料的搜集以及复习</p><p>未完待续。。。</p><p>更新时间：</p><p>2021/3/31/15：00</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mvc学习记录（更新中）&quot;&gt;&lt;a href=&quot;#mvc学习记录（更新中）&quot; class=&quot;headerlink&quot; title=&quot;mvc学习记录（更新中）&quot;&gt;&lt;/a&gt;mvc学习记录（更新中）&lt;/h1&gt;&lt;p&gt;该笔记结构杂，不推荐观看&lt;/p&gt;
&lt;h2 id=&quot;MVC零碎</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="笔记" scheme="https://a2914475618.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linq查询基础</title>
    <link href="https://a2914475618.github.io/2021/03/30/postLinq%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80/"/>
    <id>https://a2914475618.github.io/2021/03/30/postLinq%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80/</id>
    <published>2021-03-30T08:26:18.000Z</published>
    <updated>2021-03-30T10:42:56.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LINQ（语言集成查询"><a href="#LINQ（语言集成查询" class="headerlink" title="LINQ（语言集成查询)"></a>LINQ（语言集成查询)</h1><p>学后感悟：个人感觉与数据库sql查询语法类似，只是语法书写规则不同（跟sql总体感觉相反）但是还有在细节上有些区别，比如多了let关键词，当然可能是我阅历尚浅，LINQ的强大远远不止这些。</p><h2 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h2><ul><li>将查询功能集成到 C# 语言</li><li>LINQ 系列技术提供了针对对象 (LINQ to Objects)、关系数据库 (LINQ to SQL) 和 XML (LINQ to XML) 的一致查询体验</li><li>采用声明性查询语言，对数据源进行筛选、排序、分组</li></ul><h2 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h2><ul><li>SQL Server 数据库、XML 文档、ADO.NET 数据集以及支持 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.ienumerable">IEnumerable</a> 或泛型 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ienumerable-1">IEnumerable</a> 接口的任何对象集合。 此外，第三方也为许多 Web 服务和其他数据库实现提供了 LINQ 支持</li></ul><h2 id="查询操作步骤："><a href="#查询操作步骤：" class="headerlink" title="查询操作步骤："></a>查询操作步骤：</h2><ul><li><p>获取数据源。</p></li><li><p>创建查询。</p></li><li><p>执行查询。</p></li><li><p>代码示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">IntroToLINQ</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// The Three Parts of a LINQ Query:</span></span><br><span class="line">        <span class="comment">// 1. Data source.</span></span><br><span class="line">        <span class="built_in">int</span>[] numbers = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">7</span>] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. Query creation.</span></span><br><span class="line">        <span class="comment">// numQuery is an IEnumerable&lt;int&gt;</span></span><br><span class="line">        <span class="keyword">var</span> numQuery =</span><br><span class="line">            <span class="keyword">from</span> num <span class="keyword">in</span> numbers</span><br><span class="line">            <span class="keyword">where</span> (num % <span class="number">2</span>) == <span class="number">0</span></span><br><span class="line">            <span class="keyword">select</span> num;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Query execution.</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">int</span> num <span class="keyword">in</span> numQuery)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;&#123;0,1&#125; &quot;</span>, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据源："><a href="#数据源：" class="headerlink" title="数据源："></a>数据源：</h3><ul><li>支持 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ienumerable-1">IEnumerable</a> 或派生接口（如泛型 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.iqueryable-1">IQueryable</a>）的类型称为可查询类型</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ienumerable-1?view=net-5.0">https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.ienumerable-1?view=net-5.0</a></li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.iqueryable-1?view=net-5.0">https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.iqueryable-1?view=net-5.0</a></li></ul><h3 id="创建查询："><a href="#创建查询：" class="headerlink" title="创建查询："></a>创建查询：</h3><ul><li>运用查询表达式，包括from,where,select</li><li>from指定数据源</li><li>where应用筛选器</li><li>select指定返回的元素类型</li></ul><h3 id="查询表达式："><a href="#查询表达式：" class="headerlink" title="查询表达式："></a>查询表达式：</h3><ul><li><blockquote><p>查询表达式必须以 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/from-clause">from</a> 子句开头，且必须以 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/select-clause">select</a> 或 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/group-clause">group</a> 子句结尾。 在第一个 <code>from</code> 子句与最后一个 <code>select</code> 或 <code>group</code> 子句之间，可以包含以下这些可选子句中的一个或多个：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/where-clause">where</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/orderby-clause">orderby</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/join-clause">join</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/let-clause">let</a>，甚至是其他 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/from-clause">from</a> 子句。 还可以使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/into">into</a> 关键字，使 <code>join</code> 或 <code>group</code> 子句的结果可以充当相同查询表达式中的其他查询子句的源</p></blockquote></li></ul><h4 id="查询变量"><a href="#查询变量" class="headerlink" title="查询变量"></a>查询变量</h4><h5 id="显示类型化"><a href="#显示类型化" class="headerlink" title="显示类型化"></a>显示类型化</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Data source.</span></span><br><span class="line">    <span class="built_in">int</span>[] scores = &#123; <span class="number">90</span>, <span class="number">71</span>, <span class="number">82</span>, <span class="number">93</span>, <span class="number">75</span>, <span class="number">82</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query Expression.</span></span><br><span class="line">    IEnumerable&lt;<span class="built_in">int</span>&gt; scoreQuery = <span class="comment">//query variable</span></span><br><span class="line">        <span class="keyword">from</span> score <span class="keyword">in</span> scores <span class="comment">//required</span></span><br><span class="line">        <span class="keyword">where</span> score &gt; <span class="number">80</span> <span class="comment">// optional</span></span><br><span class="line">        <span class="keyword">orderby</span> score <span class="keyword">descending</span> <span class="comment">// optional</span></span><br><span class="line">        <span class="keyword">select</span> score; <span class="comment">//must end with select or group</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute the query to produce the results</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">int</span> testScore <span class="keyword">in</span> scoreQuery)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(testScore);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Outputs: 93 90 82 82</span></span><br></pre></td></tr></table></figure><p>还有</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> highestScore =</span><br><span class="line">    (<span class="keyword">from</span> score <span class="keyword">in</span> scores</span><br><span class="line">     <span class="keyword">select</span> score)</span><br><span class="line">    .Max();</span><br><span class="line"></span><br><span class="line"><span class="comment">// or split the expression</span></span><br><span class="line">IEnumerable&lt;<span class="built_in">int</span>&gt; scoreQuery =</span><br><span class="line">    <span class="keyword">from</span> score <span class="keyword">in</span> scores</span><br><span class="line">    <span class="keyword">select</span> score;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> highScore = scoreQuery.Max();</span><br><span class="line"><span class="comment">// the following returns the same result</span></span><br><span class="line"><span class="built_in">int</span> highScore = scores.Max();</span><br><span class="line"></span><br><span class="line">List&lt;City&gt; largeCitiesList =</span><br><span class="line">    (<span class="keyword">from</span> country <span class="keyword">in</span> countries</span><br><span class="line">     <span class="keyword">from</span> city <span class="keyword">in</span> country.Cities</span><br><span class="line">     <span class="keyword">where</span> city.Population &gt; <span class="number">10000</span></span><br><span class="line">     <span class="keyword">select</span> city)</span><br><span class="line">       .ToList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// or split the expression</span></span><br><span class="line">IEnumerable&lt;City&gt; largeCitiesQuery =</span><br><span class="line">    <span class="keyword">from</span> country <span class="keyword">in</span> countries</span><br><span class="line">    <span class="keyword">from</span> city <span class="keyword">in</span> country.Cities</span><br><span class="line">    <span class="keyword">where</span> city.Population &gt; <span class="number">10000</span></span><br><span class="line">    <span class="keyword">select</span> city;</span><br><span class="line"></span><br><span class="line">List&lt;City&gt; largeCitiesList2 = largeCitiesQuery.ToList();</span><br></pre></td></tr></table></figure><h5 id="隐式类型化（用var关键词创建）"><a href="#隐式类型化（用var关键词创建）" class="headerlink" title="隐式类型化（用var关键词创建）"></a>隐式类型化（用var关键词创建）</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use of var is optional here and in all queries.</span></span><br><span class="line"><span class="comment">// queryCities is an IEnumerable&lt;City&gt; just as</span></span><br><span class="line"><span class="comment">// when it is explicitly typed.</span></span><br><span class="line"><span class="keyword">var</span> queryCities =</span><br><span class="line">    <span class="keyword">from</span> city <span class="keyword">in</span> cities</span><br><span class="line">    <span class="keyword">where</span> city.Population &gt; <span class="number">100000</span></span><br><span class="line">    <span class="keyword">select</span> city;</span><br></pre></td></tr></table></figure><h4 id="开始查询查询表达式"><a href="#开始查询查询表达式" class="headerlink" title="开始查询查询表达式"></a>开始查询查询表达式</h4><p>查询表达式以from开头，指定数据源以及范围变量，当然，查询表达式可能会包含多个 <code>from</code> 子句。 在源序列中的每个元素本身是集合或包含集合时，可使用其他 <code>from</code> 子句。 例如，假设具有 <code>Country</code> 对象的集合，其中每个对象都包含名为 <code>Cities</code> 的 <code>City</code> 对象集合。 若要查询每个 <code>Country</code> 中的 <code>City</code> 对象，请使用两个 <code>from</code> 子句，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;City&gt; cityQuery =</span><br><span class="line">    <span class="keyword">from</span> country <span class="keyword">in</span> countries</span><br><span class="line">    <span class="keyword">from</span> city <span class="keyword">in</span> country.Cities</span><br><span class="line">    <span class="keyword">where</span> city.Population &gt; <span class="number">10000</span></span><br><span class="line">    <span class="keyword">select</span> city;</span><br></pre></td></tr></table></figure><h4 id="结束查询表达式"><a href="#结束查询表达式" class="headerlink" title="结束查询表达式"></a>结束查询表达式</h4><p>通常以group子句或select子句结尾</p><h5 id="group子句"><a href="#group子句" class="headerlink" title="group子句"></a>group子句</h5><p>可以按指定的键进行分组生成新的序列</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> queryCountryGroups =</span><br><span class="line">    <span class="keyword">from</span> country <span class="keyword">in</span> countries</span><br><span class="line">    <span class="keyword">group</span> country <span class="keyword">by</span> country.Name[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h5 id="select子句"><a href="#select子句" class="headerlink" title="select子句"></a>select子句</h5><p>select子句可以按照条件生成所有其他类型的序列</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;Country&gt; sortedQuery =</span><br><span class="line">    <span class="keyword">from</span> country <span class="keyword">in</span> countries</span><br><span class="line">    <span class="keyword">orderby</span> country.Area</span><br><span class="line">    <span class="keyword">select</span> country;</span><br></pre></td></tr></table></figure><p>特殊用法：<code>select</code> 子句可以用于将源数据转换为新类型的序列。 此转换也称为投影 </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Here var is required because the query</span></span><br><span class="line"><span class="comment">// produces an anonymous type.</span></span><br><span class="line"><span class="keyword">var</span> queryNameAndPop =</span><br><span class="line">    <span class="keyword">from</span> country <span class="keyword">in</span> countries</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">new</span> &#123; Name = country.Name, Pop = country.Population &#125;;</span><br></pre></td></tr></table></figure><h4 id="查询相关关键字："><a href="#查询相关关键字：" class="headerlink" title="查询相关关键字："></a>查询相关关键字：</h4><h5 id="where"><a href="#where" class="headerlink" title="where"></a>where</h5><p>基于由逻辑 AND 和 OR 运算符（<code>&amp;&amp;</code> 或 <code>||</code>）分隔的一个或多个布尔表达式筛选源元素</p><h5 id="into"><a href="#into" class="headerlink" title="into"></a>into</h5><p>创建临时标识符，将 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/group-clause">group</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/join-clause">join</a> 或 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/select-clause">select</a> 子句的结果存储至新标识符</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">IntoSample1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a data source.</span></span><br><span class="line">        <span class="built_in">string</span>[] words = &#123; <span class="string">&quot;apples&quot;</span>, <span class="string">&quot;blueberries&quot;</span>, <span class="string">&quot;oranges&quot;</span>, <span class="string">&quot;bananas&quot;</span>, <span class="string">&quot;apricots&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the query.</span></span><br><span class="line">        <span class="keyword">var</span> wordGroups1 =</span><br><span class="line">            <span class="keyword">from</span> w <span class="keyword">in</span> words</span><br><span class="line">            <span class="keyword">group</span> w <span class="keyword">by</span> w[<span class="number">0</span>] <span class="keyword">into</span> fruitGroup</span><br><span class="line">            <span class="keyword">where</span> fruitGroup.Count() &gt;= <span class="number">2</span></span><br><span class="line">            <span class="keyword">select</span> <span class="keyword">new</span> &#123; FirstLetter = fruitGroup.Key, Words = fruitGroup.Count() &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Execute the query. Note that we only iterate over the groups,</span></span><br><span class="line">        <span class="comment">// not the items in each group</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> wordGroups1)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot; &#123;0&#125; has &#123;1&#125; elements.&quot;</span>, item.FirstLetter, item.Words);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console window open in debug mode</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">   a has 2 elements.</span></span><br><span class="line"><span class="comment">   b has 2 elements.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="order-by子句"><a href="#order-by子句" class="headerlink" title="order by子句"></a>order by子句</h5><p>进行排序的关键字ascending升序（默认），descending降序</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">OrderbySample1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// Create a delicious data source.</span></span><br><span class="line">        <span class="built_in">string</span>[] fruits = &#123; <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;blueberry&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Query for ascending sort.</span></span><br><span class="line">        IEnumerable&lt;<span class="built_in">string</span>&gt; sortAscendingQuery =</span><br><span class="line">            <span class="keyword">from</span> fruit <span class="keyword">in</span> fruits</span><br><span class="line">            <span class="keyword">orderby</span> fruit <span class="comment">//&quot;ascending&quot; is default</span></span><br><span class="line">            <span class="keyword">select</span> fruit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Query for descending sort.</span></span><br><span class="line">        IEnumerable&lt;<span class="built_in">string</span>&gt; sortDescendingQuery =</span><br><span class="line">            <span class="keyword">from</span> w <span class="keyword">in</span> fruits</span><br><span class="line">            <span class="keyword">orderby</span> w <span class="keyword">descending</span></span><br><span class="line">            <span class="keyword">select</span> w;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Execute the query.</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Ascending:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> sortAscendingQuery)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Execute the query.</span></span><br><span class="line">        Console.WriteLine(Environment.NewLine + <span class="string">&quot;Descending:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> sortDescendingQuery)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep the console window open in debug mode.</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">Ascending:</span></span><br><span class="line"><span class="comment">apple</span></span><br><span class="line"><span class="comment">blueberry</span></span><br><span class="line"><span class="comment">cherry</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Descending:</span></span><br><span class="line"><span class="comment">cherry</span></span><br><span class="line"><span class="comment">blueberry</span></span><br><span class="line"><span class="comment">apple</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="join子句"><a href="#join子句" class="headerlink" title="join子句"></a>join子句</h5><p>用于将来自不同源序列并且在对象模型中没有直接关系的元素相关联</p><p>类似于sql数据库中的几种连接方式，有</p><p>内部连接</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> innerJoinQuery =</span><br><span class="line">    <span class="keyword">from</span> category <span class="keyword">in</span> categories</span><br><span class="line">    <span class="keyword">join</span> prod <span class="keyword">in</span> products <span class="keyword">on</span> category.ID <span class="keyword">equals</span> prod.CategoryID</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">new</span> &#123; ProductName = prod.Name, Category = category.Name &#125;; <span class="comment">//produces flat sequence</span></span><br></pre></td></tr></table></figure><p>分组连接</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> innerGroupJoinQuery2 =</span><br><span class="line">    <span class="keyword">from</span> category <span class="keyword">in</span> categories</span><br><span class="line">    <span class="keyword">join</span> prod <span class="keyword">in</span> products <span class="keyword">on</span> category.ID <span class="keyword">equals</span> prod.CategoryID <span class="keyword">into</span> prodGroup</span><br><span class="line">    <span class="keyword">from</span> prod2 <span class="keyword">in</span> prodGroup</span><br><span class="line">    <span class="keyword">where</span> prod2.UnitPrice &gt; <span class="number">2.50</span>M</span><br><span class="line">    <span class="keyword">select</span> prod2;</span><br></pre></td></tr></table></figure><p>左外部连接</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> leftOuterJoinQuery =</span><br><span class="line">    <span class="keyword">from</span> category <span class="keyword">in</span> categories</span><br><span class="line">    <span class="keyword">join</span> prod <span class="keyword">in</span> products <span class="keyword">on</span> category.ID <span class="keyword">equals</span> prod.CategoryID <span class="keyword">into</span> prodGroup</span><br><span class="line">    <span class="keyword">from</span> item <span class="keyword">in</span> prodGroup.DefaultIfEmpty(<span class="keyword">new</span> Product &#123; Name = String.Empty, CategoryID = <span class="number">0</span> &#125;)</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">new</span> &#123; CatName = category.Name, ProdName = item.Name &#125;;</span><br></pre></td></tr></table></figure><h5 id="let子句"><a href="#let子句" class="headerlink" title="let子句"></a>let子句</h5><p>使用 <code>let</code> 子句可将表达式（如方法调用）的结果存储在新范围变量中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>[] names = &#123; <span class="string">&quot;Svetlana Omelchenko&quot;</span>, <span class="string">&quot;Claire O&#x27;Donnell&quot;</span>, <span class="string">&quot;Sven Mortensen&quot;</span>, <span class="string">&quot;Cesar Garcia&quot;</span> &#125;;</span><br><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; queryFirstNames =</span><br><span class="line">    <span class="keyword">from</span> name <span class="keyword">in</span> names</span><br><span class="line">    <span class="keyword">let</span> firstName = name.Split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">select</span> firstName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> queryFirstNames)</span><br><span class="line">    Console.Write(s + <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//Output: Svetlana Claire Sven Cesar</span></span><br></pre></td></tr></table></figure><h5 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h5><p><code>equals</code> 上下文关键字用于在查询表达式的 <code>join</code> 子句中比较两个序列的元素</p><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p>微软官方文档<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/linq/">https://docs.microsoft.com/zh-cn/dotnet/csharp/linq/</a></p><h2 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LINQ（语言集成查询&quot;&gt;&lt;a href=&quot;#LINQ（语言集成查询&quot; class=&quot;headerlink&quot; title=&quot;LINQ（语言集成查询)&quot;&gt;&lt;/a&gt;LINQ（语言集成查询)&lt;/h1&gt;&lt;p&gt;学后感悟：个人感觉与数据库sql查询语法类似，只是语法书写规则不</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Linq语法" scheme="https://a2914475618.github.io/tags/Linq%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>表达式求值初探</title>
    <link href="https://a2914475618.github.io/2021/03/30/post%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E5%88%9D%E6%8E%A2/"/>
    <id>https://a2914475618.github.io/2021/03/30/post%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E5%88%9D%E6%8E%A2/</id>
    <published>2021-03-30T06:04:09.000Z</published>
    <updated>2021-03-30T06:23:43.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表达式求值问题"><a href="#表达式求值问题" class="headerlink" title="表达式求值问题"></a>表达式求值问题</h1><ul><li>要求：根据运算符的优先级计算表达式的问题</li><li>解法关键:分别用OPTR栈存放运算符，用OPND栈存放数值，分别设计运算符比较的方法以及计算方法，只有当输入的符号小于栈顶符号的优先级的时候，就取出OPND的两个数进行运算，否则就直接入栈。</li><li>实现语言：C语言</li><li>2021.3.20/14:00/实现基本框架，还有一些小的瑕疵，有待改正</li></ul><p>话不多说直接上代码</p><h2 id="Stack-Sq-cpp"><a href="#Stack-Sq-cpp" class="headerlink" title="Stack_Sq.cpp"></a>Stack_Sq.cpp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Stack_Size 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StackElementType char</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">StackElementType elem[Stack_Size];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125;SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void InitStack(SeqStack *S);</span></span><br><span class="line"><span class="comment">int IsEmpty(SeqStack *S);</span></span><br><span class="line"><span class="comment">int IsFull(SeqStack *S);</span></span><br><span class="line"><span class="comment">int Push(SeqStack *S, StackElementType x);</span></span><br><span class="line"><span class="comment">int Pop(SeqStack *S, StackElementType *x);</span></span><br><span class="line"><span class="comment">int GetTop(SeqStack *S,StackElementType *x);*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将S初始化为一个空栈</span></span><br><span class="line">S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断栈S是否为空栈，是返回TRUE，否则返回FALSE </span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断栈S是否已满，是返回TRUE，否则返回FALSE </span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==Stack_Size<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SeqStack *S, StackElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将数据元素x进栈S，若栈S已满，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==Stack_Size<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">S-&gt;top++;</span><br><span class="line">S-&gt;elem[S-&gt;top]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SeqStack *S, StackElementType *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将栈S的栈顶元素出栈，通过x返回</span></span><br><span class="line">    <span class="comment">// 若栈S为空，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">*x=S-&gt;elem[S-&gt;top];</span><br><span class="line">S-&gt;top--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">GetTop</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 取栈S的栈顶元素，通过x返回</span></span><br><span class="line">    <span class="comment">// 若栈S为空，返回FALSE，否则返回TRUE</span></span><br><span class="line">    StackElementType x;</span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x=S-&gt;elem[S-&gt;top];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNumber</span><span class="params">(<span class="keyword">char</span> ch1)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">c=ch1-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">In</span><span class="params">(StackElementType c)</span></span>&#123;<span class="comment">//判断是否为操作符 </span></span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;+&#x27;</span>||c==<span class="string">&#x27;-&#x27;</span>||c==<span class="string">&#x27;*&#x27;</span>||c==<span class="string">&#x27;/&#x27;</span>||c==<span class="string">&#x27;#&#x27;</span>||c==<span class="string">&#x27;(&#x27;</span>||c==<span class="string">&#x27;)&#x27;</span>||c==<span class="string">&#x27;[&#x27;</span>||c==<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Execute</span><span class="params">(StackElementType a, StackElementType x, StackElementType b)</span></span>&#123;<span class="comment">//进行运算的函数 </span></span><br><span class="line"><span class="keyword">int</span> c,d;</span><br><span class="line">c=GetNumber(a);</span><br><span class="line">d=GetNumber(b);</span><br><span class="line">     <span class="keyword">switch</span> (x)&#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">         <span class="keyword">return</span> c+d;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">         <span class="keyword">return</span> c-d;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">         <span class="keyword">return</span> c*d;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">         <span class="keyword">return</span> c/d;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Compare</span><span class="params">(<span class="keyword">char</span> ch1,<span class="keyword">char</span> ch2)</span></span>&#123;<span class="comment">//巧妙的比较了运算符的大小</span></span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">2</span>][<span class="number">5</span>]=&#123;&#123;<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;[&#x27;</span>&#125;,&#123;<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;]&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> i,j,num1,num2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i][j]==ch1) num1=j;</span><br><span class="line"><span class="keyword">if</span>(ch[i][j]==ch2) num2=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num1==num2) <span class="keyword">return</span> <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> num1&gt;num2?<span class="string">&#x27;&gt;&#x27;</span>:<span class="string">&#x27;&lt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Stack-go-cpp"><a href="#Stack-go-cpp" class="headerlink" title="Stack_go.cpp"></a>Stack_go.cpp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Stack_Sq.cpp&quot;</span></span></span><br><span class="line">SeqStack OPTR;</span><br><span class="line">SeqStack OPND;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ExpEvaluation</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch,c,op,a,b,r;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">InitStack(&amp;OPTR);</span><br><span class="line">InitStack(&amp;OPND);</span><br><span class="line">Push(&amp;OPTR,<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch!=<span class="string">&#x27;#&#x27;</span>||GetTop(&amp;OPTR)!=<span class="string">&#x27;#&#x27;</span>)&#123;<span class="comment">//判断结束</span></span><br><span class="line"><span class="keyword">if</span>(!In(ch)) &#123;<span class="comment">//是操作数的话 </span></span><br><span class="line"><span class="comment">//n=GetNumber(ch);//将字符转换为数字 </span></span><br><span class="line">Push(&amp;OPND,ch);</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(Compare(ch,GetTop(&amp;OPTR)))&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:Push(&amp;OPTR,ch);</span><br><span class="line">ch=getchar();<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;)&#x27;</span>&amp;&amp;GetTop(&amp;OPTR)==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">Pop(&amp;OPTR,&amp;c);</span><br><span class="line">ch=getchar();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:Pop(&amp;OPTR,&amp;op);</span><br><span class="line">Pop(&amp;OPND,&amp;b);</span><br><span class="line">Pop(&amp;OPND,&amp;a);</span><br><span class="line">r=Execute(a,op,b);</span><br><span class="line">Push(&amp;OPND,Execute(a,op,b));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> GetTop(&amp;OPND);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ExpEvaluation());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>代码的正确性还不能得到保证，需要进一步的Debug！但是大致的框架是正确的！可以在评论区与我多多交流</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;表达式求值问题&quot;&gt;&lt;a href=&quot;#表达式求值问题&quot; class=&quot;headerlink&quot; title=&quot;表达式求值问题&quot;&gt;&lt;/a&gt;表达式求值问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;要求：根据运算符的优先级计算表达式的问题&lt;/li&gt;
&lt;li&gt;解法关键:分别用OPTR栈存</summary>
      
    
    
    
    <category term="学习记录" scheme="https://a2914475618.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="表达式求值 C语言" scheme="https://a2914475618.github.io/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC-C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>蒙提霍尔问题</title>
    <link href="https://a2914475618.github.io/2021/03/28/post%E8%92%99%E6%8F%90%E9%9C%8D%E5%B0%94%E9%97%AE%E9%A2%98/"/>
    <id>https://a2914475618.github.io/2021/03/28/post%E8%92%99%E6%8F%90%E9%9C%8D%E5%B0%94%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-28T12:27:05.000Z</published>
    <updated>2021-03-28T12:46:00.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蒙提霍尔选门问题（求证概率问题）"><a href="#蒙提霍尔选门问题（求证概率问题）" class="headerlink" title="蒙提霍尔选门问题（求证概率问题）"></a>蒙提霍尔选门问题（求证概率问题）</h1><blockquote><p>三门问题（Monty Hall problem）亦称为蒙提霍尔问题、蒙特霍问题或蒙提霍尔悖论，大致出自美国的电视游戏节目Let’s Make a Deal。问题名字来自该节目的主持人蒙提·霍尔（Monty Hall）。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门后面则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后会问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门会否增加参赛者赢得汽车的机率。如果严格按照上述的条件，那么答案是会。不换门的话，赢得汽车的几率是1/3。换门的话，赢得汽车的几率是2/3。</p></blockquote><h2 id="通过用C语言模拟10000次选门求概率"><a href="#通过用C语言模拟10000次选门求概率" class="headerlink" title="通过用C语言模拟10000次选门求概率"></a>通过用C语言模拟10000次选门求概率</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*蒙提霍尔问题 三扇门选汽车</span></span><br><span class="line"><span class="comment">1.用结构体类型定义三扇门，用结构类型数组初始化</span></span><br><span class="line"><span class="comment">2.模拟一个人用随机数选择3个下标其中一个</span></span><br><span class="line"><span class="comment">3.然后对于另外两扇门进行选择</span></span><br><span class="line"><span class="comment">①分别对另外两个对象判定所存对象是否为山羊，将对象是山羊的结构体下标屏蔽</span></span><br><span class="line"><span class="comment">若两扇门均是山羊，用随机数任选其中一扇</span></span><br><span class="line"><span class="comment">4.①不改变原来的选择 </span></span><br><span class="line"><span class="comment">②改变原来的选择</span></span><br><span class="line"><span class="comment">5.若所选是汽车，则累加器加1，每种情况分别执行10000次，最后输出两种情况的概率。 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> car;</span><br><span class="line">&#125;Car;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">Car icar[<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">0</span>&#125;,&#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为车 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iscar</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(icar[j].car==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择门 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">choice</span><span class="params">(<span class="keyword">int</span> *p1)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j,k;</span><br><span class="line"></span><br><span class="line"><span class="comment">//srand((unsigned)(time(NULL)));</span></span><br><span class="line"><span class="keyword">int</span>  i=(<span class="keyword">int</span>)rand()%<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==i) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!iscar(j)) &#123;</span><br><span class="line">k=j;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">*p1=i;</span><br><span class="line">*(p1+<span class="number">1</span>)=k;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//坚持原来的选择 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">result1</span><span class="params">(<span class="keyword">int</span> *p2)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">i=*p2;</span><br><span class="line"><span class="keyword">if</span>(iscar(i)) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更改选择 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">result2</span><span class="params">(<span class="keyword">int</span> *p3)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">i=*p3;</span><br><span class="line">j=*(p3+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(k==i||k==j) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span>(iscar(k)) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行10000次以后计算概率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span>)(time(<span class="literal">NULL</span>)));</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">double</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(c--!=<span class="number">0</span>)&#123;</span><br><span class="line">choice(a);</span><br><span class="line">i=result1(a);</span><br><span class="line">j=result2(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;坚持原来的选择的概率为:%f\n&quot;</span>,i/<span class="number">1000000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;更改后选择的概率为:%f&quot;</span>,j/<span class="number">1000000</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//int a[2];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">go();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如图:</p><p><img src="https://i.loli.net/2021/03/28/yMprwWSXEDg3etl.png" alt="image.png"></p><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>本人的做法着实有点复杂，如有不对的地方望指正，在评论区与我交流交流吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;蒙提霍尔选门问题（求证概率问题）&quot;&gt;&lt;a href=&quot;#蒙提霍尔选门问题（求证概率问题）&quot; class=&quot;headerlink&quot; title=&quot;蒙提霍尔选门问题（求证概率问题）&quot;&gt;&lt;/a&gt;蒙提霍尔选门问题（求证概率问题）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;三</summary>
      
    
    
    
    <category term="学习记录" scheme="https://a2914475618.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="蒙提霍尔选门 概率求证" scheme="https://a2914475618.github.io/tags/%E8%92%99%E6%8F%90%E9%9C%8D%E5%B0%94%E9%80%89%E9%97%A8-%E6%A6%82%E7%8E%87%E6%B1%82%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>扑克牌发牌问题</title>
    <link href="https://a2914475618.github.io/2021/03/28/post%E9%87%8D%E5%81%9A%E6%89%91%E5%85%8B%E7%89%8C%E5%8F%91%E7%89%8C%E9%97%AE%E9%A2%98/"/>
    <id>https://a2914475618.github.io/2021/03/28/post%E9%87%8D%E5%81%9A%E6%89%91%E5%85%8B%E7%89%8C%E5%8F%91%E7%89%8C%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-28T12:14:44.000Z</published>
    <updated>2021-03-28T12:24:21.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扑克牌问题"><a href="#扑克牌问题" class="headerlink" title="扑克牌问题"></a>扑克牌问题</h1><blockquote><p>要求：52张扑克牌中给4位玩家各发13张牌，然后将4位玩家手中的13张牌分别从小到大理牌后输出。说明：假定梅花最小，方块次小，红桃次大，黑桃最大。<br>程序中用结构体表示一张扑克牌的花色和牌点（见下面），程序除了main函数外，希望发牌、理牌、显示牌各编一个函数。<br>typedef struct<br>{  int suit; // 花色  1..4<br>  int rank; // 牌点  2..14<br>} Poker;</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*扑克牌发牌问题 </span></span><br><span class="line"><span class="comment">1.定义一个结构体类型，存放牌的花色和牌点</span></span><br><span class="line"><span class="comment">2.定义一个结构体类型的数组，存放52张牌</span></span><br><span class="line"><span class="comment">3.定义两个数组分别存放存放花色和牌点 </span></span><br><span class="line"><span class="comment">4.初始化牌面： 用循环输出结构体类型中存放的牌面 </span></span><br><span class="line"><span class="comment">5.发牌函数：用随机函数 交换函数交换数组中牌的位置 </span></span><br><span class="line"><span class="comment">6.理牌函数：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *tosuit[<span class="number">4</span>]=&#123;<span class="string">&quot;梅花&quot;</span>,<span class="string">&quot;方块&quot;</span>,<span class="string">&quot;红桃&quot;</span>,<span class="string">&quot;黑桃&quot;</span>&#125;; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *torank[<span class="number">13</span>]=&#123;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;J&quot;</span>,<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;A&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> suit;</span><br><span class="line"><span class="keyword">int</span> rank;</span><br><span class="line">&#125;Poker;</span><br><span class="line">Poker poker[<span class="number">52</span>];</span><br><span class="line"><span class="comment">//初始化牌</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ini</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;初始的52张牌分别为:&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">52</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">13</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(j=0;j&lt;4;j++)&#123;</span></span><br><span class="line"><span class="comment">for(k=0;k&lt;13;k++)&#123;</span></span><br><span class="line"><span class="comment">*/</span>poker[i].suit=i/<span class="number">13</span>;</span><br><span class="line">poker[i].rank=i%<span class="number">13</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s-&quot;</span>,tosuit[poker[i].suit]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,torank[poker[i].rank]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//洗牌</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Poker *a,Poker *b)</span></span>&#123;</span><br><span class="line">Poker temp1;</span><br><span class="line">temp1.suit=a-&gt;suit;</span><br><span class="line">temp1.rank=a-&gt;rank;</span><br><span class="line">a-&gt;suit=b-&gt;suit;</span><br><span class="line">a-&gt;rank=b-&gt;rank;</span><br><span class="line">b-&gt;suit=temp1.suit;</span><br><span class="line">b-&gt;rank=temp1.rank;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Poker *temp;</span></span><br><span class="line"><span class="comment">a=b;</span></span><br><span class="line"><span class="comment">b=temp;</span></span><br><span class="line"><span class="comment">temp=a;</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发牌 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span>)(time(<span class="literal">NULL</span>)));</span><br><span class="line"><span class="keyword">int</span> a,b,c=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">while</span>(c--!=<span class="number">0</span>)&#123;</span><br><span class="line">a=(<span class="keyword">int</span>)rand()%<span class="number">52</span>;</span><br><span class="line">b=(<span class="keyword">int</span>)rand()%<span class="number">52</span>;</span><br><span class="line">swap(&amp;poker[a],&amp;poker[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//理牌 </span></span><br><span class="line"><span class="comment">//选择法排序 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort1</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k,j;</span><br><span class="line"><span class="keyword">for</span>(i=m;i&lt;n;i++)&#123;</span><br><span class="line">k=i;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(((poker[k].suit*<span class="number">100</span>)+poker[k].rank)&gt;((poker[j].suit*<span class="number">100</span>)+poker[j].rank)) &#123;</span><br><span class="line">k=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k!=i)&#123;</span><br><span class="line">swap(&amp;poker[k],&amp;poker[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort2</span><span class="params">()</span></span>&#123;</span><br><span class="line">sort1(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">sort1(<span class="number">13</span>,<span class="number">25</span>);</span><br><span class="line">sort1(<span class="number">26</span>,<span class="number">38</span>);</span><br><span class="line">sort1(<span class="number">39</span>,<span class="number">51</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*void sort()&#123;</span></span><br><span class="line"><span class="comment">int i,k,j,l;</span></span><br><span class="line"><span class="comment">for(i=0;i&lt;52;i+=13)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(l=0;l&lt;13;l++)&#123;</span></span><br><span class="line"><span class="comment">k=i;</span></span><br><span class="line"><span class="comment">for(j=i+1;j&lt;=(i+12);j++)&#123;</span></span><br><span class="line"><span class="comment">if((poker[l].suit*10+poker[l].rank)&lt;poker[j].suit*10+poker[j].rank) &#123;</span></span><br><span class="line"><span class="comment">k=j;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(k!=i)&#123;</span></span><br><span class="line"><span class="comment">swap(&amp;poker[k],&amp;poker[i]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//显示牌</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d号玩家的牌为:\n&quot;</span>,k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=k*<span class="number">13</span>;i&lt;((k+<span class="number">1</span>)*<span class="number">13</span>);i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s-&quot;</span>,tosuit[poker[i].suit]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,torank[poker[i].rank]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ini();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">deal();</span><br><span class="line">sort2();</span><br><span class="line">show();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h1><h2 id="方法不止此一种，敬请大佬在评论区与我交流。。。"><a href="#方法不止此一种，敬请大佬在评论区与我交流。。。" class="headerlink" title="方法不止此一种，敬请大佬在评论区与我交流。。。"></a>方法不止此一种，敬请大佬在评论区与我交流。。。</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;扑克牌问题&quot;&gt;&lt;a href=&quot;#扑克牌问题&quot; class=&quot;headerlink&quot; title=&quot;扑克牌问题&quot;&gt;&lt;/a&gt;扑克牌问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;要求：52张扑克牌中给4位玩家各发13张牌，然后将4位玩家手中的13张牌分别从小到大理牌后</summary>
      
    
    
    
    <category term="学习记录" scheme="https://a2914475618.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="扑克牌发牌问题" scheme="https://a2914475618.github.io/tags/%E6%89%91%E5%85%8B%E7%89%8C%E5%8F%91%E7%89%8C%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>括号匹配问题</title>
    <link href="https://a2914475618.github.io/2021/03/28/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>https://a2914475618.github.io/2021/03/28/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-28T04:18:03.000Z</published>
    <updated>2021-03-28T05:49:15.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h1><ul><li>要求：一个字符串中的括号{,[,(,),,],}，只有左右括号成对出现，并且顺序正确，即括号匹配。</li><li>实现语言：C语言</li></ul><h2 id="1-用栈顶解决法"><a href="#1-用栈顶解决法" class="headerlink" title="1.用栈顶解决法"></a>1.用栈顶解决法</h2><p>算法思想：</p><ul><li>根据栈的特点先进后出，设置一个栈<ol><li> 若读入左括号，直接入栈，等待匹配的右括号</li><li>若读入右括号，与栈顶的左括号类型相同则匹配，并将栈顶左括号出栈</li><li>若输入序列已经读尽，而栈中还有等待匹配的左括号，或者读入了一个右括号，栈中无匹配的左括号，都是false</li><li>当输入序列和栈中同时为空的时候，括号完全匹配</li></ol></li></ul><p>具体实现算法：</p><p>1.Stack_Sq.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Stack_Size 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StackElementType char</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">StackElementType elem[Stack_Size];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125;SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void InitStack(SeqStack *S);</span></span><br><span class="line"><span class="comment">int IsEmpty(SeqStack *S);</span></span><br><span class="line"><span class="comment">int IsFull(SeqStack *S);</span></span><br><span class="line"><span class="comment">int Push(SeqStack *S, StackElementType x);</span></span><br><span class="line"><span class="comment">int Pop(SeqStack *S, StackElementType *x);</span></span><br><span class="line"><span class="comment">int GetTop(SeqStack *S,StackElementType *x);*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将S初始化为一个空栈</span></span><br><span class="line">S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断栈S是否为空栈，是返回TRUE，否则返回FALSE </span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断栈S是否已满，是返回TRUE，否则返回FALSE </span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==Stack_Size<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SeqStack *S, StackElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将数据元素x进栈S，若栈S已满，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==Stack_Size<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">S-&gt;top++;</span><br><span class="line">S-&gt;elem[S-&gt;top]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SeqStack *S, StackElementType *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将栈S的栈顶元素出栈，通过x返回</span></span><br><span class="line">    <span class="comment">// 若栈S为空，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">*x=S-&gt;elem[S-&gt;top];</span><br><span class="line">S-&gt;top--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop</span><span class="params">(SeqStack *S,StackElementType *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 取栈S的栈顶元素，通过x返回</span></span><br><span class="line">    <span class="comment">// 若栈S为空，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">*x=S-&gt;elem[S-&gt;top];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.BrackerMatch.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Stack_Sq.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BracketMatch</span><span class="params">(<span class="keyword">char</span> *str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input a string:&quot;</span>);  gets(str);</span><br><span class="line">    <span class="keyword">switch</span>( BracketMatch(str) )</span><br><span class="line">    &#123;   <span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">printf</span>(<span class="string">&quot;成功匹配!&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">printf</span>(<span class="string">&quot;左括号多余!&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">&quot;右括号多余!&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;对应的左右括号不匹配!&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();  getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Match</span><span class="params">(<span class="keyword">char</span> ch1,<span class="keyword">char</span> ch2)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断左括号ch1和右ch2是否匹配，匹配返回TRUE，否则返回FALSE</span></span><br><span class="line"><span class="comment">//将所有括号按照顺序放在数组里，对应括号的下标之和为6 </span></span><br><span class="line"><span class="keyword">char</span> temp[]=<span class="string">&quot;&#123;[(?)]&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> i,j,k,sum;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;<span class="comment">//循环遍历找到与传进来参数相同的括号所对应的下标 </span></span><br><span class="line"><span class="keyword">if</span>(temp[i]==ch1) j=i;</span><br><span class="line"><span class="keyword">if</span>(temp[i]==ch2) k=i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">sum=j+k;</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//判断是否为匹配的括号 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BracketMatch</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// str[]中为输入的字符串，利用堆栈技术来检查该字符串中的括号是否匹配</span></span><br><span class="line">    SeqStack S;  <span class="keyword">int</span> i;  <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    InitStack(&amp;S);<span class="comment">//置空栈</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; str[i]!=<span class="string">&#x27;\0&#x27;</span>; i++)   <span class="comment">// 对字符串中的字符逐一扫描</span></span><br><span class="line">    &#123;   <span class="keyword">switch</span>(str[i])</span><br><span class="line">        &#123;   <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>: Push(&amp;S,str[i]);  <span class="keyword">break</span>;<span class="comment">//入栈</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>: <span class="keyword">if</span> ( IsEmpty(&amp;S) )  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                      GetTop(&amp;S,&amp;ch);<span class="comment">//取栈顶元素</span></span><br><span class="line">                      <span class="keyword">if</span> ( Match(ch,str[i]) )  <span class="comment">// 用Match判断两个括号是否匹配</span></span><br><span class="line">                          Pop(&amp;S,&amp;ch);         <span class="comment">// 已匹配的左括号出栈</span></span><br><span class="line">                      <span class="keyword">else</span>  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ( IsEmpty(&amp;S)? <span class="number">0</span> : <span class="number">1</span> ); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-数组求解法（伪栈法）"><a href="#2-数组求解法（伪栈法）" class="headerlink" title="2.数组求解法（伪栈法）"></a>2.数组求解法（伪栈法）</h2><p>算法思想：</p><ul><li>引进数组Stack（存放读入的括号），数组S（存放字符串），数组Temp（存放6个括号）</li><li>逐个处理字符串中的字符，在S中若是左括号，直接放入数组Stack，等待相匹配的同类右括号出现</li><li>若是右括号，并且数组Stack中没有等待匹配的左括号，即不匹配</li><li>若是右括号且与最后放入的Stack的左括号类型相同，则匹配，并且将匹配的左括号删除，否则不匹配</li><li>当字符串S处理完，若Stack中无括号即匹配成功，否则不匹配</li></ul><p>具体算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> S[<span class="number">81</span>],Temp[]=<span class="string">&quot;&#123;[(?)]&#125;&quot;</span>;<span class="comment">//Temp[3]中的符号可以任意指定，这样做的好处是为了让匹配的括号下标之和为6</span></span><br><span class="line">    <span class="keyword">int</span> Stack[<span class="number">40</span>],top,right,i,j,k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;INPUT your string:&quot;</span>);</span><br><span class="line">    gets(S);</span><br><span class="line">    top=<span class="number">-1</span>;<span class="comment">//用来存放在Stack数组中下标，即栈顶下标，取栈顶元素值匹配</span></span><br><span class="line">    right=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;S[i]!=<span class="string">&#x27;0&#x27;</span>&amp;&amp;right;i++)&#123;</span><br><span class="line">        k=<span class="number">3</span>;j=<span class="number">-1</span>;<span class="comment">//k用来存放对应符号的下标</span></span><br><span class="line">        <span class="keyword">while</span>(k==<span class="number">3</span>&amp;&amp;j&lt;<span class="number">6</span>)<span class="comment">//k=3说明字符不是括号</span></span><br><span class="line">            <span class="keyword">if</span>(S[i]==Temp[++j]) k=j;<span class="comment">//将左右括号准换为对应的下标</span></span><br><span class="line">        <span class="keyword">if</span>(k&lt;<span class="number">3</span>)Stack[++top]=k;<span class="comment">//是左括号将其放入数组</span></span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">3</span>)<span class="keyword">if</span>(top&lt;<span class="number">0</span>||(Stack[top])+k)!=<span class="number">6</span>) right=<span class="number">0</span>;<span class="comment">//右括号，但是不匹配</span></span><br><span class="line">       <span class="keyword">else</span> top--;<span class="comment">//匹配并删除左括号在数组Stack中的下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    right=(right&amp;&amp;top&lt;<span class="number">0</span>);<span class="comment">//数组中没有多余括号并且括号匹配</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,(right?<span class="string">&quot;匹配成功&quot;</span>:<span class="string">&quot;匹配不成功&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>小伙伴们有什么问题可以在评论区和我交流哟！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;括号匹配问题&quot;&gt;&lt;a href=&quot;#括号匹配问题&quot; class=&quot;headerlink&quot; title=&quot;括号匹配问题&quot;&gt;&lt;/a&gt;括号匹配问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;要求：一个字符串中的括号{,[,(,),,],}，只有左右括号成对出现，并且顺序正确，即括号匹配</summary>
      
    
    
    
    <category term="算法问题 数据结构" scheme="https://a2914475618.github.io/categories/%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="括号匹配 算法 C语言" scheme="https://a2914475618.github.io/tags/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D-%E7%AE%97%E6%B3%95-C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>EF6CodeFirst</title>
    <link href="https://a2914475618.github.io/2021/03/27/EF6codefirst/"/>
    <id>https://a2914475618.github.io/2021/03/27/EF6codefirst/</id>
    <published>2021-03-27T07:05:10.000Z</published>
    <updated>2021-03-28T12:57:52.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EF6CodeFirst"><a href="#EF6CodeFirst" class="headerlink" title="EF6CodeFirst"></a>EF6CodeFirst</h1><h2 id="什么是CodeFirst？"><a href="#什么是CodeFirst？" class="headerlink" title="什么是CodeFirst？"></a>什么是CodeFirst？</h2><p><img src="https://www.entityframeworktutorial.net/images/EF5/code-first.png" alt="img"></p><ul><li>EF API通过域类配置创建数据库</li><li>开发工作流程:<img src="https://www.entityframeworktutorial.net/images/codefirst/dev-workflow.png" alt="img"></li><li>创建或者修改所需类——&gt;使用流利的API或者数据注释属性配置这些类——&gt;使用自动迁移或者基于代码的迁移创建或者更新数据库模式</li></ul><h2 id="安装EF实体框架"><a href="#安装EF实体框架" class="headerlink" title="安装EF实体框架"></a>安装EF实体框架</h2><p>右键单击解决方案资源管理器中的项目，然后选择**”管理NuGet包”**，搜索Entity Framework</p><h2 id="实体框架中的数据库初始化"><a href="#实体框架中的数据库初始化" class="headerlink" title="实体框架中的数据库初始化"></a>实体框架中的数据库初始化</h2><ul><li><p>基于上下文类基本构造函数中传递的参数的数据库初始化流程，参数源自DBContext<img src="https://www.entityframeworktutorial.net/images/codefirst/database-init-fg1.PNG" alt="img"></p></li><li><p>由上图可知，上下文基本构造器有以下参数</p><ol><li>无参数</li><li>数据库名字</li><li>连接字符串的名称</li></ol><p>1.无参数：如果您没有指定上下文类基础构造器中的参数，则它会在您本地的 SQLEXPRESS 服务器中创建一个数据库，其名称与您的 {名称空间]相匹配，EF将创建SchoolDatalayer.Context的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace SchoolDataLayer</span><br><span class="line">  &#123;</span><br><span class="line">    public class Context: DbContext </span><br><span class="line">      &#123;</span><br><span class="line">        public Context(): base()</span><br><span class="line">          &#123;</span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.数据库名称:如果您指定了数据库名称参数，则Code First 将创建一个数据库，其中包含您在本地 SQLEXPRESS 数据库服务器中指定的基础构造器中指定的名称，EF将创建MyschoolDB数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace SchoolDataLayer</span><br><span class="line">&#123;</span><br><span class="line">    public class Context: DbContext </span><br><span class="line">    &#123;</span><br><span class="line">        public Context(): base(&quot;MySchoolDB&quot;) </span><br><span class="line">        &#123;</span><br><span class="line">                   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.连接串名称:以在应用.config 或 web.配置中定义连接字符串，并在上下文类的基本构造器中指定以”name+”开头的连接字符串名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace SchoolDataLayer</span><br><span class="line">&#123;</span><br><span class="line">    public class Context: DbContext </span><br><span class="line">    &#123;</span><br><span class="line">        public SchoolDBContext() : base(&quot;name&#x3D;SchoolDBConnectionString&quot;) </span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用配置为</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;connectionStrings&gt;</span><br><span class="line">    &lt;<span class="keyword">add</span> name=<span class="string">&quot;SchoolDBConnectionString&quot;</span> </span><br><span class="line">    connectionString=<span class="string">&quot;Data Source=.;Initial Catalog=SchoolDB-ByConnectionString;Integrated Security=true&quot;</span> </span><br><span class="line">    providerName=<span class="string">&quot;System.Data.SqlClient&quot;</span>/&gt;</span><br><span class="line">    &lt;/connectionStrings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据库初始化策略"><a href="#数据库初始化策略" class="headerlink" title="数据库初始化策略"></a>数据库初始化策略</h2><p>有四种初始化策略：</p><ul><li><h3 id="CreateDatabaseIfNotExists"><a href="#CreateDatabaseIfNotExists" class="headerlink" title="CreateDatabaseIfNotExists"></a>CreateDatabaseIfNotExists</h3></li><li><h3 id="DropCreateDatabaseIfModelChanges-常用"><a href="#DropCreateDatabaseIfModelChanges-常用" class="headerlink" title="DropCreateDatabaseIfModelChanges(常用)"></a>DropCreateDatabaseIfModelChanges(常用)</h3></li><li><h3 id="DropCreateDatabaseAlways"><a href="#DropCreateDatabaseAlways" class="headerlink" title="DropCreateDatabaseAlways"></a>DropCreateDatabaseAlways</h3></li><li><p>Custom DB Initializer（自定义初始化器）</p></li></ul><p>①要使用初始化策略，可以使用以下的初始化器：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolDBContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"><span class="string">&quot;SchoolDBConnectionString&quot;</span></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Database.SetInitializer&lt;SchoolDBContext&gt;(<span class="keyword">new</span> CreateDatabaseIfNotExists&lt;SchoolDBContext&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Database.SetInitializer&lt;SchoolDBContext&gt;(new DropCreateDatabaseIfModelChanges&lt;SchoolDBContext&gt;());</span></span><br><span class="line">        <span class="comment">//Database.SetInitializer&lt;SchoolDBContext&gt;(new DropCreateDatabaseAlways&lt;SchoolDBContext&gt;());</span></span><br><span class="line">        <span class="comment">//Database.SetInitializer&lt;SchoolDBContext&gt;(new SchoolDBInitializer());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Database.SetInitializer<testContext>(null);//关闭数据初始化器</p><p>②可以通过继承其中一个初始化器创建自定义 DB 初始化器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolDBInitializer</span> :  <span class="title">CreateDatabaseIfNotExists</span>&lt;<span class="title">SchoolDBContext</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Seed</span>(<span class="params">SchoolDBContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Seed(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="在配置文件中设置初始化器"><a href="#在配置文件中设置初始化器" class="headerlink" title="在配置文件中设置初始化器"></a>在配置文件中设置初始化器</h3><p>默认初始化器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;appSettings&gt;</span><br><span class="line">    &lt;<span class="keyword">add</span> key=<span class="string">&quot;DatabaseInitializerForType SchoolDataLayer.SchoolDBContext, SchoolDataLayer&quot;</span>         </span><br><span class="line">        <span class="keyword">value</span>=<span class="string">&quot;System.Data.Entity.DropCreateDatabaseAlways`1[[SchoolDataLayer.SchoolDBContext, SchoolDataLayer]], EntityFramework&quot;</span> /&gt;</span><br><span class="line">    &lt;/appSettings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>设置自定义数据库初始化器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;appSettings&gt;    </span><br><span class="line">    &lt;<span class="keyword">add</span> key=<span class="string">&quot;DatabaseInitializerForType SchoolDataLayer.SchoolDBContext, SchoolDataLayer&quot;</span></span><br><span class="line">            <span class="keyword">value</span>=<span class="string">&quot;SchoolDataLayer.SchoolDBInitializer, SchoolDataLayer&quot;</span> /&gt;</span><br><span class="line">    &lt;/appSettings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="实体框架配置域类"><a href="#实体框架配置域类" class="headerlink" title="实体框架配置域类"></a>实体框架配置域类</h2><ol><li>数据注释属性(Data Annotation Attributes)</li><li>流利的API(Fluent API)</li></ol><h3 id="数据注释属性"><a href="#数据注释属性" class="headerlink" title="数据注释属性"></a>数据注释属性</h3><h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations.Schema;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Table(<span class="meta-string">&quot;StudentMaster&quot;</span>, Schema=<span class="meta-string">&quot;Admin&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[Table(string name, Properties:[Schema = string])</strong></p><p>用于指定Student类生成的表名，持有者Admin<img src="https://www.entityframeworktutorial.net/images/codefirst/table-attribute.png" alt="img"></p><h4 id="列"><a href="#列" class="headerlink" title="列"></a>列</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">     </span><br><span class="line">    [<span class="meta">Column(<span class="meta-string">&quot;Name&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime? DateOfBirth &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span>[] Photo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Weight &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[Column (string name, Properties:[Order = int],[TypeName = string])</strong></p><p>用于指定列在数据库中表的名字，索引，列的数据类型<img src="https://www.entityframeworktutorial.net/images/efcore/column-attribute1.png" alt="img" style="zoom:33%;" /></p><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><p>覆盖默认以ID或者含有id为主键的约定</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    [<span class="meta">Column(Order=1)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentKey &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">     </span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    [<span class="meta">Column(Order=2)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> AdmissionNum &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在EF6中，Colum该属性将在数据库中创建复合主键列</p><h4 id="NotMapped"><a href="#NotMapped" class="headerlink" title="NotMapped"></a>NotMapped</h4><p>用于不想让该属性映射在数据库里，从而数据库不会为其创建列</p><p>EF 也不会为没有获取者或设置器的属性创建列，例如</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> City &#123; <span class="keyword">get</span>&#123; <span class="keyword">return</span> StudentName;&#125;  &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">set</span>&#123; _age = <span class="keyword">value</span>;&#125;  &#125;</span><br></pre></td></tr></table></figure><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><p><strong>[ForeignKey(name string)]</strong></p><p>一个标准对应多个学生</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    [<span class="meta">ForeignKey(<span class="meta-string">&quot;Standard&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StandardRefId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Standard Standard &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Standard</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StandardId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StandardName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InverseProperty"><a href="#InverseProperty" class="headerlink" title="InverseProperty"></a>InverseProperty</h4><p>防止因为多个导航属性，EF无法确定关系的另一端，可以借用Foreignkey</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Course</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CourseId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CourseName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ForeignKey(<span class="meta-string">&quot;OnlineTeacher&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? OnlineTeacherId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Teacher OnlineTeacher &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ForeignKey(<span class="meta-string">&quot;ClassRoomTeacher&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? ClassRoomTeacherId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Teacher ClassRoomTeacher &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TeacherId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">InverseProperty(<span class="meta-string">&quot;OnlineTeacher&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Course&gt; OnlineCourses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">InverseProperty(<span class="meta-string">&quot;ClassRoomTeacher&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Course&gt; ClassRoomCourses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required</h4><p>要求必填</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MaxLength（最大长）"><a href="#MaxLength（最大长）" class="headerlink" title="MaxLength（最大长）"></a>MaxLength（最大长）</h4><h4 id="StringLength-字符串长度"><a href="#StringLength-字符串长度" class="headerlink" title="StringLength(字符串长度)"></a>StringLength(字符串长度)</h4><h4 id="Timestamp（时间戳）"><a href="#Timestamp（时间戳）" class="headerlink" title="Timestamp（时间戳）"></a>Timestamp（时间戳）</h4><h4 id="DatabaseGenerated（数据库生成选项）"><a href="#DatabaseGenerated（数据库生成选项）" class="headerlink" title="DatabaseGenerated（数据库生成选项）"></a>DatabaseGenerated（数据库生成选项）</h4><p>DatabaseGeneratedOption.None</p><ul><li><p>向 ID 属性（而不是数据库生成的值）提供自己的值，请使用这个选项</p></li><li><p> 数据库不生成值.</p></li></ul>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Course</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.None)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CourseId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CourseName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DatabaseGeneratedOption.Identity</p><ul><li><p>可以使用该选项将非键（非 ID） 属性标记为 DB 生成的属性，让此属性无法更新</p></li><li><p>数据库在插入行时生成值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Course</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CourseId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CourseName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.Identity)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> RecordNum &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>DatabaseGeneratedOption.Computed</p><ul><li><p>Computed选项只是告诉EF不要更新您的列,因为您将自己在DB端计算一个值.然后EF将从您的数据库中返回新计算的值(在您的情况下为“未设置”)</p></li><li><p>数据库在插入或更新行时生成值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime? DateOfBirth &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Weight &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.Computed)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime CreatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h4 id="ConcurrencyCheck"><a href="#ConcurrencyCheck" class="headerlink" title="ConcurrencyCheck"></a>ConcurrencyCheck</h4><ul><li>处理数据库数据级乐观并发，可以使用ConcurrencyCheck特性</li><li><a href="https://www.entityframeworktutorial.net/code-first/TimeStamp-dataannotations-attribute-in-code-first.aspx">Timestamp</a>属性只能应用于单个字数阵列属性，而该属性可以应用于任何数据类型的任意数量的属性</li></ul><h3 id="Fluent-API"><a href="#Fluent-API" class="headerlink" title="Fluent API"></a>Fluent API</h3><blockquote><p>DbModelBuilder类充当流利的 API，我们可以使用该类来配置许多不同的东西。它提供的配置选项多于数据注释属性。流利的 API 配置了实体框架 6 中模型的以下方面：</p><ol><li><p>全模型配置：配置默认的 Schema、映射中要排除的实体等。</p></li><li><p>实体配置：将实体配置为表和关系映射，例如主键、索引、表名称、一对一、一对多、多对多等。</p></li><li><p>属性配置：将属性配置为列映射，例如列名称、可用性、外键、数据类型、并发列等。</p><p>常用的Fluent API方法<br>配置                      Fluent API方法                    作用<br>架构相关配置    HasDefaultSchema()    数据库的默认架构</p><pre><code>                        ComplexType()    把一个类配置为复杂类型</code></pre><p>实体相关配置       HasIndex()    实体的的索引</p><pre><code>                            HasKey()    实体的主键（可其实现复合主键，[Key]在EF core中不能实现复合主键）                           HasMany()    1对多的或者 多对多关系                         HasOptional()    一个可选的关系，这样配置会在数据库中生成一个可空的外键                        HasRequired()    一个必有的关系，这样配置会在数据库中生成一个不能为空的外键                         Ignore()    实体或者实体的属性不映射到数据库                        Map()    设置一些优先的配置                  MapToStoredProcedures()    实体的CUD操作使用存储过程                     ToTable()    为实体设置表名</code></pre><p>属性相关配置      HasColumnAnnotation()    给属性设置注释</p><pre><code>                        IsRequired()    在调用SaveChanges()方法时，属性不能为空                        IsOptional()    可选的，在数据库生成可空的列                        HasParameterName()    配置用于该属性的存储过程的参数名                    HasDatabaseGeneratedOption()    配置数据库中对应列的值怎样生成的，如计算，自增等                        HasColumnOrder()    配置数据库中对应列的排列顺序                        HasColumnType()    配置数据库中对应列的数据类型                            HasColumnName()    配置数据库中对应列的列名                        IsConcurrencyToken()    配置数据库中对应列用于乐观并发检测</code></pre><p>注：不用全部了解，要用的时候网上查就行</p></li></ol></blockquote><blockquote><ul><li><p>设置主键<br>modelBuilder.Entity<x>().HasKey(t =&gt; t.Name);</p></li><li><p>设置联合主键<br>modelBuilder.Entity<x>().HasKey(t =&gt;new{t.Name,t.ID} );</p></li><li><p>取消数据库字段标识（取消自动增长）<br>modelBuilder.Entity<x>().Property(t=&gt;t.Id).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);</p></li><li><p>设置数据库字段标识（自动增长）<br>modelBuilder.Entity<Teacher>().Property(t =&gt;t.Id).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);</p></li><li><p>设置字段最大长度<br>modelBuilder.Entity<ClassA>().Property(t =&gt; t.Name).HasMaxLength(100);</p></li><li><p>设置字段为必需<br>modelBuilder.Entity<ClassA>().Property(t =&gt;t.Id).IsRequired();</p></li><li><p>属性不映射到数据库<br>modelBuilder.Entity<ClassA>().Ignore(t =&gt; t.A);</p></li><li><p>将属性指定数据库列名：<br>modelBuilder.Entity<ClassA>() .Property(t =&gt; t.A) .HasColumnName(“A_a”);</p></li><li><p>级联删除（数据库默认是不级联删除的）<br>modelBuilder.Entity<Course>().HasRequired(t =&gt; t.Department).WithMany(t =&gt; t.Courses).HasForeignKey(d =&gt; d.DepartmentID).WillCascadeOnDelete();</p></li><li><p>设置为Timestamp<br>modelBuilder.Entity<OfficeAssignment>() .Property(t =&gt; t.Timestamp) .IsRowVersion();</p></li><li><p>表1对0..1(Instructor实体可以包含零个或一个OfficeAssignment)<br>modelBuilder.Entity<OfficeAssignment>().HasRequired(t =&gt; t.Instructor).WithOptional(t =&gt; t.OfficeAssignment);</p></li><li><p>表1对1<br>modelBuilder.Entity<Instructor>().HasRequired(t =&gt; t.OfficeAssignment).WithRequiredPrincipal(t =&gt; t.Instructor);</p></li><li><p>表1对n（Department为主表）<br>modelBuilder.Entity<Staff>() .HasRequired(c =&gt; c.Department) .WithMany(t =&gt; t.Staffs)</p></li><li><p>指定外键名（指定表Staff中的字段DepartmentID为外键）<br>modelBuilder.Entity<Staff>() .HasRequired(c =&gt; c.Department) .WithMany(t =&gt; t.Staffs) .Map(m =&gt; m.MapKey(“DepartmentID”));</p></li><li><p>表n对n<br>modelBuilder.Entity<Course>()<br>.HasMany(t =&gt; t.Instructors)<br>.WithMany(t =&gt; t.Courses)</p></li><li><p>表n对n指定连接表名及列名<br>modelBuilder.Entity<Course>()<br>.HasMany(t =&gt; t.Instructors)<br>.WithMany(t =&gt; t.Courses)<br>.Map(m =&gt;<br>{<br>m.ToTable(“CourseInstructor”);<br>m.MapLeftKey(“CourseID”);<br>m.MapRightKey(“InstructorID”);<br>});</p></li></ul></blockquote><h4 id="实体映射"><a href="#实体映射" class="headerlink" title="实体映射"></a>实体映射</h4><h5 id="配置默认模式为管理员模式"><a href="#配置默认模式为管理员模式" class="headerlink" title="配置默认模式为管理员模式"></a>配置默认模式为管理员模式</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//Configure default schema</span></span><br><span class="line">        modelBuilder.HasDefaultSchema(<span class="string">&quot;Admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="将实体映射到表，设置表名"><a href="#将实体映射到表，设置表名" class="headerlink" title="将实体映射到表，设置表名"></a>将实体映射到表，设置表名</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CodeFirst_FluentAPI_Tutorials</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//Configure default schema</span></span><br><span class="line">            modelBuilder.HasDefaultSchema(<span class="string">&quot;Admin&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">//Map entity to table</span></span><br><span class="line">            modelBuilder.Entity&lt;Student&gt;().ToTable(<span class="string">&quot;StudentInfo&quot;</span>);</span><br><span class="line">            modelBuilder.Entity&lt;Standard&gt;().ToTable(<span class="string">&quot;StandardInfo&quot;</span>,<span class="string">&quot;dbo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实体映射到数据库中的多个表"><a href="#实体映射到数据库中的多个表" class="headerlink" title="实体映射到数据库中的多个表"></a>实体映射到数据库中的多个表</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CodeFirst_FluentAPI_Tutorials</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            modelBuilder.Entity&lt;Student&gt;().Map(m =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                m.Properties(p =&gt; <span class="keyword">new</span> &#123; p.StudentId, p.StudentName&#125;);</span><br><span class="line">                m.ToTable(<span class="string">&quot;StudentInfo&quot;</span>);</span><br><span class="line">            &#125;).Map(m =&gt; &#123;</span><br><span class="line">                m.Properties(p =&gt; <span class="keyword">new</span> &#123; p.StudentId, p.Height, p.Weight, p.Photo, p.DateOfBirth&#125;);</span><br><span class="line">                m.ToTable(<span class="string">&quot;StudentInfoDetail&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            modelBuilder.Entity&lt;Standard&gt;().ToTable(<span class="string">&quot;StandardInfo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性映射"><a href="#属性映射" class="headerlink" title="属性映射"></a>属性映射</h4><p>使用流利的 API，您可以更改相应的列名称、类型、大小、空或否、主键、外键、并发列等</p><h5 id="配置主键和复合主键"><a href="#配置主键和复合主键" class="headerlink" title="配置主键和复合主键"></a>配置主键和复合主键</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//Configure primary key</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;().HasKey&lt;<span class="built_in">int</span>&gt;(s =&gt; s.StudentKey);</span><br><span class="line">        modelBuilder.Entity&lt;Standard&gt;().HasKey&lt;<span class="built_in">int</span>&gt;(s =&gt; s.StandardKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Configure composite primary key  复合主键</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;().HasKey&lt;<span class="built_in">int</span>&gt;(s =&gt; <span class="keyword">new</span> &#123; s.StudentKey, s.StudentName &#125;); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="配置列名称、类型和顺序"><a href="#配置列名称、类型和顺序" class="headerlink" title="配置列名称、类型和顺序"></a>配置列名称、类型和顺序</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//Configure Column</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                    .Property(p =&gt; p.DateOfBirth)<span class="comment">//指定哪列</span></span><br><span class="line">                    .HasColumnName(<span class="string">&quot;DoB&quot;</span>)<span class="comment">//列名</span></span><br><span class="line">                    .HasColumnOrder(<span class="number">3</span>)<span class="comment">//对应列的排列顺序</span></span><br><span class="line">                    .HasColumnType(<span class="string">&quot;datetime2&quot;</span>);<span class="comment">//对应列的数据类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置可不可空"><a href="#配置可不可空" class="headerlink" title="配置可不可空"></a>配置可不可空</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">            <span class="comment">//Configure Null Column</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.Heigth)</span><br><span class="line">                .IsOptional();<span class="comment">//可空</span></span><br><span class="line">                        </span><br><span class="line">            <span class="comment">//Configure NotNull Column</span></span><br><span class="line">            modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.Weight)</span><br><span class="line">                .IsRequired();<span class="comment">//不可空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置列长"><a href="#配置列长" class="headerlink" title="配置列长"></a>配置列长</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//Set StudentName column size to 50</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.StudentName)</span><br><span class="line">                .HasMaxLength(<span class="number">50</span>);</span><br><span class="line">                        </span><br><span class="line">        <span class="comment">//Set StudentName column size to 50 and change datatype to nchar </span></span><br><span class="line">        <span class="comment">//IsFixedLength() change datatype from nvarchar to nchar</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.StudentName)</span><br><span class="line">                .HasMaxLength(<span class="number">50</span>).IsFixedLength();</span><br><span class="line">                        </span><br><span class="line">        <span class="comment">//Set size decimal(2,2)</span></span><br><span class="line">            modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.Height)</span><br><span class="line">                .HasPrecision(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用HasMaxLength()方法配置列的大小，IsFixedLength()方法会将列的类型从nvarchar转到nchar.HasPrecision()可以配置decimal数据类型的属性的精度。</p><h5 id="配置并发列"><a href="#配置并发列" class="headerlink" title="配置并发列"></a>配置并发列</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class SchoolContext: DbContext </span><br><span class="line">&#123;</span><br><span class="line">    public SchoolDBContext(): base() </span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DbSet&lt;Student&gt; Students &#123; get; set; &#125;</span><br><span class="line">    public DbSet&lt;Standard&gt; Standards &#123; get; set; &#125;</span><br><span class="line">        </span><br><span class="line">    protected override void OnModelCreating(DbModelBuilder modelBuilder)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;Set StudentName as concurrency column</span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p &#x3D;&gt; p.StudentName)</span><br><span class="line">                .IsConcurrencyToken();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentName列是并发列，所以更新和删除的时候，这个列名将会在where子句中。<br>你同样可以使用IsRowVersion()来配置并发列，只不过这个IsRowVersion()只能用在byte[]数组类型的属性上。</p><h2 id="配置一对一"><a href="#配置一对一" class="headerlink" title="配置一对一"></a>配置一对一</h2><h3 id="使用数据注释属性配置一对零或一关系"><a href="#使用数据注释属性配置一对零或一关系" class="headerlink" title="使用数据注释属性配置一对零或一关系"></a>使用数据注释属性配置一对零或一关系</h3><p>当一个表的主键在关系数据库（如 SQL 服务器）中成为另一个表中的 PK 和 FK 时，就会发生一对零或一关系。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> StudentAddress Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentAddress</span> </span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ForeignKey(<span class="meta-string">&quot;Student&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentAddressId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Address1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Address2 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> City &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Zipcode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> State &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Country &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> Student Student &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用流利的-API-配置一对零或一关系"><a href="#使用流利的-API-配置一对零或一关系" class="headerlink" title="使用流利的 API 配置一对零或一关系"></a>使用流利的 API 配置一对零或一关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected override void OnModelCreating(DbModelBuilder modelBuilder)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Configure Student &amp; StudentAddress entity</span><br><span class="line">    modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .HasOptional(s &#x3D;&gt; s.Address) &#x2F;&#x2F; Mark Address property optional in Student entity</span><br><span class="line">                .WithRequired(ad &#x3D;&gt; ad.Student); &#x2F;&#x2F; mark Student property as required in StudentAddress entity. Cannot save StudentAddress without Student</span><br></pre></td></tr></table></figure><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EF6CodeFirst&quot;&gt;&lt;a href=&quot;#EF6CodeFirst&quot; class=&quot;headerlink&quot; title=&quot;EF6CodeFirst&quot;&gt;&lt;/a&gt;EF6CodeFirst&lt;/h1&gt;&lt;h2 id=&quot;什么是CodeFirst？&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="EF6codefirst" scheme="https://a2914475618.github.io/tags/EF6codefirst/"/>
    
  </entry>
  
  <entry>
    <title>来聆听我的故事吧</title>
    <link href="https://a2914475618.github.io/2021/03/27/postAbout-Me/"/>
    <id>https://a2914475618.github.io/2021/03/27/postAbout-Me/</id>
    <published>2021-03-26T16:00:00.000Z</published>
    <updated>2021-03-27T04:35:23.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a><strong>About Me</strong></h1><h2 id="Who-am-I"><a href="#Who-am-I" class="headerlink" title="Who am I ?"></a>Who am I ?</h2><ul><li><em>在下是一名有着有趣灵魂的大二学长，写博客的初衷也是觉得有趣，日后会在博客上分享一些心情随笔以及技术文档</em></li><li><em>我平常的爱好就是听听Music啦，打打Ball啦，当然我在Game上也是一个genius，有志同道合的朋友欢迎与我多多交流呀</em></li></ul><h2 id="Contact-Me："><a href="#Contact-Me：" class="headerlink" title="Contact Me："></a>Contact Me：</h2><p><em><a href="mailto:&#50;&#x39;&#x31;&#x34;&#x34;&#55;&#x35;&#54;&#49;&#56;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#50;&#x39;&#x31;&#x34;&#x34;&#55;&#x35;&#54;&#49;&#56;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;</a>(非诚勿扰呀呀呀！！！)</em></p><h2 id="For-this-site："><a href="#For-this-site：" class="headerlink" title="For this site："></a>For this site：</h2><p><em>这是小生私人的博客小屋</em></p><h2 id="Special-version："><a href="#Special-version：" class="headerlink" title="Special version："></a>Special version：</h2><ul><li><em>第一篇博客还是略显生疏，如有叨扰，敬请原谅</em></li><li><em>以后一定会越来越好的呀</em></li><li><em>最后希望看到这个博客的童鞋温柔半两，从容一生</em></li></ul><h2 id="Wish："><a href="#Wish：" class="headerlink" title="Wish："></a>Wish：</h2><p><em>我还要一个人走很长很长的路。但我告诉自己，风来自很远的地方。去去也无妨。</em></p>]]></content>
    
    
    <summary type="html">写一些自己的兴趣爱好,关于我自己的一些小故事，作为我的第一个博客</summary>
    
    
    
    <category term="关于我" scheme="https://a2914475618.github.io/categories/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    
    
    <category term="Me" scheme="https://a2914475618.github.io/tags/Me/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://a2914475618.github.io/2021/03/24/hello-world/"/>
    <id>https://a2914475618.github.io/2021/03/24/hello-world/</id>
    <published>2021-03-24T05:56:49.202Z</published>
    <updated>2021-03-27T04:25:22.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你好呀，欢迎来到我的世界！"><a href="#你好呀，欢迎来到我的世界！" class="headerlink" title="你好呀，欢迎来到我的世界！"></a><em><strong>你好呀，欢迎来到我的世界！</strong></em></h1><blockquote><p> ​                                        <strong>生如夏花</strong></p><p> ​                                                             –泰戈尔《飞鸟集》</p><p> ​                    我听见回声，来自山谷和心间</p><p> ​                    以寂寞的镰刀收割空旷的灵魂</p><p> ​                    不断地重复决绝，又重复幸福</p><p> ​                            终有绿洲摇曳在沙漠</p><p> ​                                    我相信自己</p><p> ​                    生来如同璀璨的夏日之花</p><p> ​                            不凋不败，妖冶如火</p><p> ​                    承受心跳的负荷和呼吸的累赘</p><p> ​                                    乐此不疲</p><p> ​                    我听见音乐，来自月光和胴体</p><p> ​                    辅极端的诱饵捕获飘渺的唯美</p><p> ​                    一生充盈着激烈，又充盈着纯然</p><p> ​                            总有回忆贯穿于世间</p><p> ​                                    我相信自己</p><p> ​                        死时如同静美的秋日落叶</p><p> ​                        不盛不乱，姿态如烟</p><p> ​                    即便枯萎也保留丰肌清骨的傲然</p><p> ​                                        玄之又玄</p><p> ​                        我听见爱情，我相信爱情</p><p> ​                        爱情是一潭挣扎的蓝藻</p><p> ​                            如同一阵凄微的风</p><p> ​                            穿过我失血的静脉</p><p> ​                                驻守岁月的信念</p><p> ​                            我相信一切能够听见</p><p> ​                    甚至预见离散，遇见另一个自己</p><p> ​                            而有些瞬间无法把握</p><p> ​                    任凭东走西顾，逝去的必然不返</p><p> ​                                请看我头置簪花，</p><p> ​                            一路走来一路盛开</p><p> ​                                频频遗漏一些，</p><p> ​                            又深陷风霜雨雪的感动</p><p> ​                            般若波罗蜜，一声一声</p><p> ​                            生如夏花，死如秋叶</p><p> ​                                还在乎拥有什么</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;你好呀，欢迎来到我的世界！&quot;&gt;&lt;a href=&quot;#你好呀，欢迎来到我的世界！&quot; class=&quot;headerlink&quot; title=&quot;你好呀，欢迎来到我的世界！&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;strong&gt;你好呀，欢迎来到我的世界！&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;&lt;bl</summary>
      
    
    
    
    <category term="诗歌分享" scheme="https://a2914475618.github.io/categories/%E8%AF%97%E6%AD%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="飞鸟" scheme="https://a2914475618.github.io/tags/%E9%A3%9E%E9%B8%9F/"/>
    
  </entry>
  
</feed>
