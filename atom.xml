<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一位可可爱爱的编橙爱好者</title>
  <icon>https://www.gravatar.com/avatar/560d60bc4bbfec4b10e3ea23f4d15430</icon>
  <subtitle>欢迎来到爱的小屋</subtitle>
  <link href="https://github.com/a2914475618/a2914475618.githup.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/a2914475618/a2914475618.githup.io.git/"/>
  <updated>2021-03-28T05:49:15.772Z</updated>
  <id>https://github.com/a2914475618/a2914475618.githup.io.git/</id>
  
  <author>
    <name>Lu sir</name>
    <email>2914475618@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>括号匹配问题</title>
    <link href="https://github.com/a2914475618/a2914475618.githup.io.git/2021/03/28/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>https://github.com/a2914475618/a2914475618.githup.io.git/2021/03/28/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-28T04:18:03.000Z</published>
    <updated>2021-03-28T05:49:15.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h1><ul><li>要求：一个字符串中的括号{,[,(,),,],}，只有左右括号成对出现，并且顺序正确，即括号匹配。</li><li>实现语言：C语言</li></ul><h2 id="1-用栈顶解决法"><a href="#1-用栈顶解决法" class="headerlink" title="1.用栈顶解决法"></a>1.用栈顶解决法</h2><p>算法思想：</p><ul><li>根据栈的特点先进后出，设置一个栈<ol><li> 若读入左括号，直接入栈，等待匹配的右括号</li><li>若读入右括号，与栈顶的左括号类型相同则匹配，并将栈顶左括号出栈</li><li>若输入序列已经读尽，而栈中还有等待匹配的左括号，或者读入了一个右括号，栈中无匹配的左括号，都是false</li><li>当输入序列和栈中同时为空的时候，括号完全匹配</li></ol></li></ul><p>具体实现算法：</p><p>1.Stack_Sq.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Stack_Size 50</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> StackElementType char</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">StackElementType elem[Stack_Size];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125;SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void InitStack(SeqStack *S);</span></span><br><span class="line"><span class="comment">int IsEmpty(SeqStack *S);</span></span><br><span class="line"><span class="comment">int IsFull(SeqStack *S);</span></span><br><span class="line"><span class="comment">int Push(SeqStack *S, StackElementType x);</span></span><br><span class="line"><span class="comment">int Pop(SeqStack *S, StackElementType *x);</span></span><br><span class="line"><span class="comment">int GetTop(SeqStack *S,StackElementType *x);*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将S初始化为一个空栈</span></span><br><span class="line">S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断栈S是否为空栈，是返回TRUE，否则返回FALSE </span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断栈S是否已满，是返回TRUE，否则返回FALSE </span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==Stack_Size<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SeqStack *S, StackElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将数据元素x进栈S，若栈S已满，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==Stack_Size<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">S-&gt;top++;</span><br><span class="line">S-&gt;elem[S-&gt;top]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SeqStack *S, StackElementType *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将栈S的栈顶元素出栈，通过x返回</span></span><br><span class="line">    <span class="comment">// 若栈S为空，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">*x=S-&gt;elem[S-&gt;top];</span><br><span class="line">S-&gt;top--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop</span><span class="params">(SeqStack *S,StackElementType *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 取栈S的栈顶元素，通过x返回</span></span><br><span class="line">    <span class="comment">// 若栈S为空，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">*x=S-&gt;elem[S-&gt;top];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.BrackerMatch.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Stack_Sq.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BracketMatch</span><span class="params">(<span class="keyword">char</span> *str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input a string:&quot;</span>);  gets(str);</span><br><span class="line">    <span class="keyword">switch</span>( BracketMatch(str) )</span><br><span class="line">    &#123;   <span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">printf</span>(<span class="string">&quot;成功匹配!&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">printf</span>(<span class="string">&quot;左括号多余!&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">&quot;右括号多余!&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;对应的左右括号不匹配!&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();  getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Match</span><span class="params">(<span class="keyword">char</span> ch1,<span class="keyword">char</span> ch2)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断左括号ch1和右ch2是否匹配，匹配返回TRUE，否则返回FALSE</span></span><br><span class="line"><span class="comment">//将所有括号按照顺序放在数组里，对应括号的下标之和为6 </span></span><br><span class="line"><span class="keyword">char</span> temp[]=<span class="string">&quot;&#123;[(?)]&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> i,j,k,sum;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;<span class="comment">//循环遍历找到与传进来参数相同的括号所对应的下标 </span></span><br><span class="line"><span class="keyword">if</span>(temp[i]==ch1) j=i;</span><br><span class="line"><span class="keyword">if</span>(temp[i]==ch2) k=i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">sum=j+k;</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//判断是否为匹配的括号 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BracketMatch</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// str[]中为输入的字符串，利用堆栈技术来检查该字符串中的括号是否匹配</span></span><br><span class="line">    SeqStack S;  <span class="keyword">int</span> i;  <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">    InitStack(&amp;S);<span class="comment">//置空栈</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; str[i]!=<span class="string">&#x27;\0&#x27;</span>; i++)   <span class="comment">// 对字符串中的字符逐一扫描</span></span><br><span class="line">    &#123;   <span class="keyword">switch</span>(str[i])</span><br><span class="line">        &#123;   <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>: Push(&amp;S,str[i]);  <span class="keyword">break</span>;<span class="comment">//入栈</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>: <span class="keyword">if</span> ( IsEmpty(&amp;S) )  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                      GetTop(&amp;S,&amp;ch);<span class="comment">//取栈顶元素</span></span><br><span class="line">                      <span class="keyword">if</span> ( Match(ch,str[i]) )  <span class="comment">// 用Match判断两个括号是否匹配</span></span><br><span class="line">                          Pop(&amp;S,&amp;ch);         <span class="comment">// 已匹配的左括号出栈</span></span><br><span class="line">                      <span class="keyword">else</span>  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ( IsEmpty(&amp;S)? <span class="number">0</span> : <span class="number">1</span> ); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-数组求解法（伪栈法）"><a href="#2-数组求解法（伪栈法）" class="headerlink" title="2.数组求解法（伪栈法）"></a>2.数组求解法（伪栈法）</h2><p>算法思想：</p><ul><li>引进数组Stack（存放读入的括号），数组S（存放字符串），数组Temp（存放6个括号）</li><li>逐个处理字符串中的字符，在S中若是左括号，直接放入数组Stack，等待相匹配的同类右括号出现</li><li>若是右括号，并且数组Stack中没有等待匹配的左括号，即不匹配</li><li>若是右括号且与最后放入的Stack的左括号类型相同，则匹配，并且将匹配的左括号删除，否则不匹配</li><li>当字符串S处理完，若Stack中无括号即匹配成功，否则不匹配</li></ul><p>具体算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> S[<span class="number">81</span>],Temp[]=<span class="string">&quot;&#123;[(?)]&#125;&quot;</span>;<span class="comment">//Temp[3]中的符号可以任意指定，这样做的好处是为了让匹配的括号下标之和为6</span></span><br><span class="line">    <span class="keyword">int</span> Stack[<span class="number">40</span>],top,right,i,j,k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;INPUT your string:&quot;</span>);</span><br><span class="line">    gets(S);</span><br><span class="line">    top=<span class="number">-1</span>;<span class="comment">//用来存放在Stack数组中下标，即栈顶下标，取栈顶元素值匹配</span></span><br><span class="line">    right=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;S[i]!=<span class="string">&#x27;0&#x27;</span>&amp;&amp;right;i++)&#123;</span><br><span class="line">        k=<span class="number">3</span>;j=<span class="number">-1</span>;<span class="comment">//k用来存放对应符号的下标</span></span><br><span class="line">        <span class="keyword">while</span>(k==<span class="number">3</span>&amp;&amp;j&lt;<span class="number">6</span>)<span class="comment">//k=3说明字符不是括号</span></span><br><span class="line">            <span class="keyword">if</span>(S[i]==Temp[++j]) k=j;<span class="comment">//将左右括号准换为对应的下标</span></span><br><span class="line">        <span class="keyword">if</span>(k&lt;<span class="number">3</span>)Stack[++top]=k;<span class="comment">//是左括号将其放入数组</span></span><br><span class="line">        <span class="keyword">if</span>(k&gt;<span class="number">3</span>)<span class="keyword">if</span>(top&lt;<span class="number">0</span>||(Stack[top])+k)!=<span class="number">6</span>) right=<span class="number">0</span>;<span class="comment">//右括号，但是不匹配</span></span><br><span class="line">       <span class="keyword">else</span> top--;<span class="comment">//匹配并删除左括号在数组Stack中的下标</span></span><br><span class="line">    &#125;</span><br><span class="line">    right=(right&amp;&amp;top&lt;<span class="number">0</span>);<span class="comment">//数组中没有多余括号并且括号匹配</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,(right?<span class="string">&quot;匹配成功&quot;</span>:<span class="string">&quot;匹配不成功&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>小伙伴们有什么问题可以在评论区和我交流哟！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;括号匹配问题&quot;&gt;&lt;a href=&quot;#括号匹配问题&quot; class=&quot;headerlink&quot; title=&quot;括号匹配问题&quot;&gt;&lt;/a&gt;括号匹配问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;要求：一个字符串中的括号{,[,(,),,],}，只有左右括号成对出现，并且顺序正确，即括号匹配</summary>
      
    
    
    
    <category term="算法问题 数据结构" scheme="https://github.com/a2914475618/a2914475618.githup.io.git/categories/%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="括号匹配 算法 C语言" scheme="https://github.com/a2914475618/a2914475618.githup.io.git/tags/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D-%E7%AE%97%E6%B3%95-C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>EF6CodeFirst</title>
    <link href="https://github.com/a2914475618/a2914475618.githup.io.git/2021/03/27/EF6codefirst/"/>
    <id>https://github.com/a2914475618/a2914475618.githup.io.git/2021/03/27/EF6codefirst/</id>
    <published>2021-03-27T07:05:10.000Z</published>
    <updated>2021-03-27T11:15:23.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EF6CodeFirst"><a href="#EF6CodeFirst" class="headerlink" title="EF6CodeFirst"></a>EF6CodeFirst</h1><h2 id="什么是CodeFirst？"><a href="#什么是CodeFirst？" class="headerlink" title="什么是CodeFirst？"></a>什么是CodeFirst？</h2><p><img src="https://www.entityframeworktutorial.net/images/EF5/code-first.png" alt="img"></p><ul><li>EF API通过域类配置创建数据库</li><li>开发工作流程:<img src="https://www.entityframeworktutorial.net/images/codefirst/dev-workflow.png" alt="img"></li><li>创建或者修改所需类——&gt;使用流利的API或者数据注释属性配置这些类——&gt;使用自动迁移或者基于代码的迁移创建或者更新数据库模式</li></ul><h2 id="安装EF实体框架"><a href="#安装EF实体框架" class="headerlink" title="安装EF实体框架"></a>安装EF实体框架</h2><p>右键单击解决方案资源管理器中的项目，然后选择**”管理NuGet包”**，搜索Entity Framework</p><h2 id="实体框架中的数据库初始化"><a href="#实体框架中的数据库初始化" class="headerlink" title="实体框架中的数据库初始化"></a>实体框架中的数据库初始化</h2><ul><li><p>基于上下文类基本构造函数中传递的参数的数据库初始化流程，参数源自DBContext<img src="https://www.entityframeworktutorial.net/images/codefirst/database-init-fg1.PNG" alt="img"></p></li><li><p>由上图可知，上下文基本构造器有以下参数</p><ol><li>无参数</li><li>数据库名字</li><li>连接字符串的名称</li></ol><p>1.无参数：如果您没有指定上下文类基础构造器中的参数，则它会在您本地的 SQLEXPRESS 服务器中创建一个数据库，其名称与您的 {名称空间]相匹配，EF将创建SchoolDatalayer.Context的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace SchoolDataLayer</span><br><span class="line">  &#123;</span><br><span class="line">    public class Context: DbContext </span><br><span class="line">      &#123;</span><br><span class="line">        public Context(): base()</span><br><span class="line">          &#123;</span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.数据库名称:如果您指定了数据库名称参数，则Code First 将创建一个数据库，其中包含您在本地 SQLEXPRESS 数据库服务器中指定的基础构造器中指定的名称，EF将创建MyschoolDB数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace SchoolDataLayer</span><br><span class="line">&#123;</span><br><span class="line">    public class Context: DbContext </span><br><span class="line">    &#123;</span><br><span class="line">        public Context(): base(&quot;MySchoolDB&quot;) </span><br><span class="line">        &#123;</span><br><span class="line">                   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.连接串名称:以在应用.config 或 web.配置中定义连接字符串，并在上下文类的基本构造器中指定以”name+”开头的连接字符串名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace SchoolDataLayer</span><br><span class="line">&#123;</span><br><span class="line">    public class Context: DbContext </span><br><span class="line">    &#123;</span><br><span class="line">        public SchoolDBContext() : base(&quot;name&#x3D;SchoolDBConnectionString&quot;) </span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用配置为</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;connectionStrings&gt;</span><br><span class="line">    &lt;<span class="keyword">add</span> name=<span class="string">&quot;SchoolDBConnectionString&quot;</span> </span><br><span class="line">    connectionString=<span class="string">&quot;Data Source=.;Initial Catalog=SchoolDB-ByConnectionString;Integrated Security=true&quot;</span> </span><br><span class="line">    providerName=<span class="string">&quot;System.Data.SqlClient&quot;</span>/&gt;</span><br><span class="line">    &lt;/connectionStrings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据库初始化策略"><a href="#数据库初始化策略" class="headerlink" title="数据库初始化策略"></a>数据库初始化策略</h2><p>有四种初始化策略：</p><ul><li><h3 id="CreateDatabaseIfNotExists"><a href="#CreateDatabaseIfNotExists" class="headerlink" title="CreateDatabaseIfNotExists"></a>CreateDatabaseIfNotExists</h3></li><li><h3 id="DropCreateDatabaseIfModelChanges-常用"><a href="#DropCreateDatabaseIfModelChanges-常用" class="headerlink" title="DropCreateDatabaseIfModelChanges(常用)"></a>DropCreateDatabaseIfModelChanges(常用)</h3></li><li><h3 id="DropCreateDatabaseAlways"><a href="#DropCreateDatabaseAlways" class="headerlink" title="DropCreateDatabaseAlways"></a>DropCreateDatabaseAlways</h3></li><li><p>Custom DB Initializer（自定义初始化器）</p></li></ul><p>①要使用初始化策略，可以使用以下的初始化器：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolDBContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"><span class="string">&quot;SchoolDBConnectionString&quot;</span></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Database.SetInitializer&lt;SchoolDBContext&gt;(<span class="keyword">new</span> CreateDatabaseIfNotExists&lt;SchoolDBContext&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Database.SetInitializer&lt;SchoolDBContext&gt;(new DropCreateDatabaseIfModelChanges&lt;SchoolDBContext&gt;());</span></span><br><span class="line">        <span class="comment">//Database.SetInitializer&lt;SchoolDBContext&gt;(new DropCreateDatabaseAlways&lt;SchoolDBContext&gt;());</span></span><br><span class="line">        <span class="comment">//Database.SetInitializer&lt;SchoolDBContext&gt;(new SchoolDBInitializer());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Database.SetInitializer<testContext>(null);//关闭数据初始化器</p><p>②可以通过继承其中一个初始化器创建自定义 DB 初始化器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolDBInitializer</span> :  <span class="title">CreateDatabaseIfNotExists</span>&lt;<span class="title">SchoolDBContext</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Seed</span>(<span class="params">SchoolDBContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Seed(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="在配置文件中设置初始化器"><a href="#在配置文件中设置初始化器" class="headerlink" title="在配置文件中设置初始化器"></a>在配置文件中设置初始化器</h3><p>默认初始化器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;appSettings&gt;</span><br><span class="line">    &lt;<span class="keyword">add</span> key=<span class="string">&quot;DatabaseInitializerForType SchoolDataLayer.SchoolDBContext, SchoolDataLayer&quot;</span>         </span><br><span class="line">        <span class="keyword">value</span>=<span class="string">&quot;System.Data.Entity.DropCreateDatabaseAlways`1[[SchoolDataLayer.SchoolDBContext, SchoolDataLayer]], EntityFramework&quot;</span> /&gt;</span><br><span class="line">    &lt;/appSettings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>设置自定义数据库初始化器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;appSettings&gt;    </span><br><span class="line">    &lt;<span class="keyword">add</span> key=<span class="string">&quot;DatabaseInitializerForType SchoolDataLayer.SchoolDBContext, SchoolDataLayer&quot;</span></span><br><span class="line">            <span class="keyword">value</span>=<span class="string">&quot;SchoolDataLayer.SchoolDBInitializer, SchoolDataLayer&quot;</span> /&gt;</span><br><span class="line">    &lt;/appSettings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="实体框架配置域类"><a href="#实体框架配置域类" class="headerlink" title="实体框架配置域类"></a>实体框架配置域类</h2><ol><li>数据注释属性(Data Annotation Attributes)</li><li>流利的API(Fluent API)</li></ol><h3 id="数据注释属性"><a href="#数据注释属性" class="headerlink" title="数据注释属性"></a>数据注释属性</h3><h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations.Schema;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Table(<span class="meta-string">&quot;StudentMaster&quot;</span>, Schema=<span class="meta-string">&quot;Admin&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[Table(string name, Properties:[Schema = string])</strong></p><p>用于指定Student类生成的表名，持有者Admin<img src="https://www.entityframeworktutorial.net/images/codefirst/table-attribute.png" alt="img"></p><h4 id="列"><a href="#列" class="headerlink" title="列"></a>列</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">     </span><br><span class="line">    [<span class="meta">Column(<span class="meta-string">&quot;Name&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime? DateOfBirth &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span>[] Photo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Weight &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[Column (string name, Properties:[Order = int],[TypeName = string])</strong></p><p>用于指定列在数据库中表的名字，索引，列的数据类型<img src="https://www.entityframeworktutorial.net/images/efcore/column-attribute1.png" alt="img" style="zoom:33%;" /></p><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><p>覆盖默认以ID或者含有id为主键的约定</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    [<span class="meta">Column(Order=1)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentKey &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">     </span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    [<span class="meta">Column(Order=2)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> AdmissionNum &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在EF6中，Colum该属性将在数据库中创建复合主键列</p><h4 id="NotMapped"><a href="#NotMapped" class="headerlink" title="NotMapped"></a>NotMapped</h4><p>用于不想让该属性映射在数据库里，从而数据库不会为其创建列</p><p>EF 也不会为没有获取者或设置器的属性创建列，例如</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> City &#123; <span class="keyword">get</span>&#123; <span class="keyword">return</span> StudentName;&#125;  &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">set</span>&#123; _age = <span class="keyword">value</span>;&#125;  &#125;</span><br></pre></td></tr></table></figure><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><p><strong>[ForeignKey(name string)]</strong></p><p>一个标准对应多个学生</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    [<span class="meta">ForeignKey(<span class="meta-string">&quot;Standard&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StandardRefId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Standard Standard &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Standard</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StandardId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StandardName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InverseProperty"><a href="#InverseProperty" class="headerlink" title="InverseProperty"></a>InverseProperty</h4><p>防止因为多个导航属性，EF无法确定关系的另一端，可以借用Foreignkey</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Course</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CourseId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CourseName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ForeignKey(<span class="meta-string">&quot;OnlineTeacher&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? OnlineTeacherId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Teacher OnlineTeacher &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ForeignKey(<span class="meta-string">&quot;ClassRoomTeacher&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? ClassRoomTeacherId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Teacher ClassRoomTeacher &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TeacherId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">InverseProperty(<span class="meta-string">&quot;OnlineTeacher&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Course&gt; OnlineCourses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">InverseProperty(<span class="meta-string">&quot;ClassRoomTeacher&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Course&gt; ClassRoomCourses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required</h4><p>要求必填</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MaxLength（最大长）"><a href="#MaxLength（最大长）" class="headerlink" title="MaxLength（最大长）"></a>MaxLength（最大长）</h4><h4 id="StringLength-字符串长度"><a href="#StringLength-字符串长度" class="headerlink" title="StringLength(字符串长度)"></a>StringLength(字符串长度)</h4><h4 id="Timestamp（时间戳）"><a href="#Timestamp（时间戳）" class="headerlink" title="Timestamp（时间戳）"></a>Timestamp（时间戳）</h4><h4 id="DatabaseGenerated（数据库生成选项）"><a href="#DatabaseGenerated（数据库生成选项）" class="headerlink" title="DatabaseGenerated（数据库生成选项）"></a>DatabaseGenerated（数据库生成选项）</h4><p>DatabaseGeneratedOption.None</p><ul><li><p>向 ID 属性（而不是数据库生成的值）提供自己的值，请使用这个选项</p></li><li><p> 数据库不生成值.</p></li></ul>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Course</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.None)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CourseId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CourseName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DatabaseGeneratedOption.Identity</p><ul><li><p>可以使用该选项将非键（非 ID） 属性标记为 DB 生成的属性，让此属性无法更新</p></li><li><p>数据库在插入行时生成值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Course</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CourseId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CourseName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.Identity)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> RecordNum &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>DatabaseGeneratedOption.Computed</p><ul><li><p>Computed选项只是告诉EF不要更新您的列,因为您将自己在DB端计算一个值.然后EF将从您的数据库中返回新计算的值(在您的情况下为“未设置”)</p></li><li><p>数据库在插入或更新行时生成值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime? DateOfBirth &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Weight &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.Computed)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime CreatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><h4 id="ConcurrencyCheck"><a href="#ConcurrencyCheck" class="headerlink" title="ConcurrencyCheck"></a>ConcurrencyCheck</h4><ul><li>处理数据库数据级乐观并发，可以使用ConcurrencyCheck特性</li><li><a href="https://www.entityframeworktutorial.net/code-first/TimeStamp-dataannotations-attribute-in-code-first.aspx">Timestamp</a>属性只能应用于单个字数阵列属性，而该属性可以应用于任何数据类型的任意数量的属性</li></ul><h3 id="Fluent-API"><a href="#Fluent-API" class="headerlink" title="Fluent API"></a>Fluent API</h3><blockquote><p>DbModelBuilder类充当流利的 API，我们可以使用该类来配置许多不同的东西。它提供的配置选项多于数据注释属性。流利的 API 配置了实体框架 6 中模型的以下方面：</p><ol><li><p>全模型配置：配置默认的 Schema、映射中要排除的实体等。</p></li><li><p>实体配置：将实体配置为表和关系映射，例如主键、索引、表名称、一对一、一对多、多对多等。</p></li><li><p>属性配置：将属性配置为列映射，例如列名称、可用性、外键、数据类型、并发列等。</p><p>常用的Fluent API方法<br>配置                      Fluent API方法                    作用<br>架构相关配置    HasDefaultSchema()    数据库的默认架构</p><pre><code>                        ComplexType()    把一个类配置为复杂类型</code></pre><p>实体相关配置       HasIndex()    实体的的索引</p><pre><code>                            HasKey()    实体的主键（可其实现复合主键，[Key]在EF core中不能实现复合主键）                           HasMany()    1对多的或者 多对多关系                         HasOptional()    一个可选的关系，这样配置会在数据库中生成一个可空的外键                        HasRequired()    一个必有的关系，这样配置会在数据库中生成一个不能为空的外键                         Ignore()    实体或者实体的属性不映射到数据库                        Map()    设置一些优先的配置                  MapToStoredProcedures()    实体的CUD操作使用存储过程                     ToTable()    为实体设置表名</code></pre><p>属性相关配置      HasColumnAnnotation()    给属性设置注释</p><pre><code>                        IsRequired()    在调用SaveChanges()方法时，属性不能为空                        IsOptional()    可选的，在数据库生成可空的列                        HasParameterName()    配置用于该属性的存储过程的参数名                    HasDatabaseGeneratedOption()    配置数据库中对应列的值怎样生成的，如计算，自增等                        HasColumnOrder()    配置数据库中对应列的排列顺序                        HasColumnType()    配置数据库中对应列的数据类型                            HasColumnName()    配置数据库中对应列的列名                        IsConcurrencyToken()    配置数据库中对应列用于乐观并发检测</code></pre><p>注：不用全部了解，要用的时候网上查就行</p></li></ol></blockquote><blockquote><ul><li><p>设置主键<br>modelBuilder.Entity<x>().HasKey(t =&gt; t.Name);</p></li><li><p>设置联合主键<br>modelBuilder.Entity<x>().HasKey(t =&gt;new{t.Name,t.ID} );</p></li><li><p>取消数据库字段标识（取消自动增长）<br>modelBuilder.Entity<x>().Property(t=&gt;t.Id).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);</p></li><li><p>设置数据库字段标识（自动增长）<br>modelBuilder.Entity<Teacher>().Property(t =&gt;t.Id).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);</p></li><li><p>设置字段最大长度<br>modelBuilder.Entity<ClassA>().Property(t =&gt; t.Name).HasMaxLength(100);</p></li><li><p>设置字段为必需<br>modelBuilder.Entity<ClassA>().Property(t =&gt;t.Id).IsRequired();</p></li><li><p>属性不映射到数据库<br>modelBuilder.Entity<ClassA>().Ignore(t =&gt; t.A);</p></li><li><p>将属性指定数据库列名：<br>modelBuilder.Entity<ClassA>() .Property(t =&gt; t.A) .HasColumnName(“A_a”);</p></li><li><p>级联删除（数据库默认是不级联删除的）<br>modelBuilder.Entity<Course>().HasRequired(t =&gt; t.Department).WithMany(t =&gt; t.Courses).HasForeignKey(d =&gt; d.DepartmentID).WillCascadeOnDelete();</p></li><li><p>设置为Timestamp<br>modelBuilder.Entity<OfficeAssignment>() .Property(t =&gt; t.Timestamp) .IsRowVersion();</p></li><li><p>表1对0..1(Instructor实体可以包含零个或一个OfficeAssignment)<br>modelBuilder.Entity<OfficeAssignment>().HasRequired(t =&gt; t.Instructor).WithOptional(t =&gt; t.OfficeAssignment);</p></li><li><p>表1对1<br>modelBuilder.Entity<Instructor>().HasRequired(t =&gt; t.OfficeAssignment).WithRequiredPrincipal(t =&gt; t.Instructor);</p></li><li><p>表1对n（Department为主表）<br>modelBuilder.Entity<Staff>() .HasRequired(c =&gt; c.Department) .WithMany(t =&gt; t.Staffs)</p></li><li><p>指定外键名（指定表Staff中的字段DepartmentID为外键）<br>modelBuilder.Entity<Staff>() .HasRequired(c =&gt; c.Department) .WithMany(t =&gt; t.Staffs) .Map(m =&gt; m.MapKey(“DepartmentID”));</p></li><li><p>表n对n<br>modelBuilder.Entity<Course>()<br>.HasMany(t =&gt; t.Instructors)<br>.WithMany(t =&gt; t.Courses)</p></li><li><p>表n对n指定连接表名及列名<br>modelBuilder.Entity<Course>()<br>.HasMany(t =&gt; t.Instructors)<br>.WithMany(t =&gt; t.Courses)<br>.Map(m =&gt;<br>{<br>m.ToTable(“CourseInstructor”);<br>m.MapLeftKey(“CourseID”);<br>m.MapRightKey(“InstructorID”);<br>});</p></li></ul></blockquote><h4 id="实体映射"><a href="#实体映射" class="headerlink" title="实体映射"></a>实体映射</h4><h5 id="配置默认模式为管理员模式"><a href="#配置默认模式为管理员模式" class="headerlink" title="配置默认模式为管理员模式"></a>配置默认模式为管理员模式</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//Configure default schema</span></span><br><span class="line">        modelBuilder.HasDefaultSchema(<span class="string">&quot;Admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="将实体映射到表，设置表名"><a href="#将实体映射到表，设置表名" class="headerlink" title="将实体映射到表，设置表名"></a>将实体映射到表，设置表名</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CodeFirst_FluentAPI_Tutorials</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//Configure default schema</span></span><br><span class="line">            modelBuilder.HasDefaultSchema(<span class="string">&quot;Admin&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">            <span class="comment">//Map entity to table</span></span><br><span class="line">            modelBuilder.Entity&lt;Student&gt;().ToTable(<span class="string">&quot;StudentInfo&quot;</span>);</span><br><span class="line">            modelBuilder.Entity&lt;Standard&gt;().ToTable(<span class="string">&quot;StandardInfo&quot;</span>,<span class="string">&quot;dbo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实体映射到数据库中的多个表"><a href="#实体映射到数据库中的多个表" class="headerlink" title="实体映射到数据库中的多个表"></a>实体映射到数据库中的多个表</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CodeFirst_FluentAPI_Tutorials</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            modelBuilder.Entity&lt;Student&gt;().Map(m =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                m.Properties(p =&gt; <span class="keyword">new</span> &#123; p.StudentId, p.StudentName&#125;);</span><br><span class="line">                m.ToTable(<span class="string">&quot;StudentInfo&quot;</span>);</span><br><span class="line">            &#125;).Map(m =&gt; &#123;</span><br><span class="line">                m.Properties(p =&gt; <span class="keyword">new</span> &#123; p.StudentId, p.Height, p.Weight, p.Photo, p.DateOfBirth&#125;);</span><br><span class="line">                m.ToTable(<span class="string">&quot;StudentInfoDetail&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            modelBuilder.Entity&lt;Standard&gt;().ToTable(<span class="string">&quot;StandardInfo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性映射"><a href="#属性映射" class="headerlink" title="属性映射"></a>属性映射</h4><p>使用流利的 API，您可以更改相应的列名称、类型、大小、空或否、主键、外键、并发列等</p><h5 id="配置主键和复合主键"><a href="#配置主键和复合主键" class="headerlink" title="配置主键和复合主键"></a>配置主键和复合主键</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//Configure primary key</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;().HasKey&lt;<span class="built_in">int</span>&gt;(s =&gt; s.StudentKey);</span><br><span class="line">        modelBuilder.Entity&lt;Standard&gt;().HasKey&lt;<span class="built_in">int</span>&gt;(s =&gt; s.StandardKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Configure composite primary key  复合主键</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;().HasKey&lt;<span class="built_in">int</span>&gt;(s =&gt; <span class="keyword">new</span> &#123; s.StudentKey, s.StudentName &#125;); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="配置列名称、类型和顺序"><a href="#配置列名称、类型和顺序" class="headerlink" title="配置列名称、类型和顺序"></a>配置列名称、类型和顺序</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//Configure Column</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                    .Property(p =&gt; p.DateOfBirth)<span class="comment">//指定哪列</span></span><br><span class="line">                    .HasColumnName(<span class="string">&quot;DoB&quot;</span>)<span class="comment">//列名</span></span><br><span class="line">                    .HasColumnOrder(<span class="number">3</span>)<span class="comment">//对应列的排列顺序</span></span><br><span class="line">                    .HasColumnType(<span class="string">&quot;datetime2&quot;</span>);<span class="comment">//对应列的数据类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置可不可空"><a href="#配置可不可空" class="headerlink" title="配置可不可空"></a>配置可不可空</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">            <span class="comment">//Configure Null Column</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.Heigth)</span><br><span class="line">                .IsOptional();<span class="comment">//可空</span></span><br><span class="line">                        </span><br><span class="line">            <span class="comment">//Configure NotNull Column</span></span><br><span class="line">            modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.Weight)</span><br><span class="line">                .IsRequired();<span class="comment">//不可空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置列长"><a href="#配置列长" class="headerlink" title="配置列长"></a>配置列长</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchoolContext</span>: <span class="title">DbContext</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolDBContext</span>(<span class="params"></span>): <span class="title">base</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Standard&gt; Standards &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//Set StudentName column size to 50</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.StudentName)</span><br><span class="line">                .HasMaxLength(<span class="number">50</span>);</span><br><span class="line">                        </span><br><span class="line">        <span class="comment">//Set StudentName column size to 50 and change datatype to nchar </span></span><br><span class="line">        <span class="comment">//IsFixedLength() change datatype from nvarchar to nchar</span></span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.StudentName)</span><br><span class="line">                .HasMaxLength(<span class="number">50</span>).IsFixedLength();</span><br><span class="line">                        </span><br><span class="line">        <span class="comment">//Set size decimal(2,2)</span></span><br><span class="line">            modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p =&gt; p.Height)</span><br><span class="line">                .HasPrecision(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用HasMaxLength()方法配置列的大小，IsFixedLength()方法会将列的类型从nvarchar转到nchar.HasPrecision()可以配置decimal数据类型的属性的精度。</p><h5 id="配置并发列"><a href="#配置并发列" class="headerlink" title="配置并发列"></a>配置并发列</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class SchoolContext: DbContext </span><br><span class="line">&#123;</span><br><span class="line">    public SchoolDBContext(): base() </span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DbSet&lt;Student&gt; Students &#123; get; set; &#125;</span><br><span class="line">    public DbSet&lt;Standard&gt; Standards &#123; get; set; &#125;</span><br><span class="line">        </span><br><span class="line">    protected override void OnModelCreating(DbModelBuilder modelBuilder)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;Set StudentName as concurrency column</span><br><span class="line">        modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .Property(p &#x3D;&gt; p.StudentName)</span><br><span class="line">                .IsConcurrencyToken();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentName列是并发列，所以更新和删除的时候，这个列名将会在where子句中。<br>你同样可以使用IsRowVersion()来配置并发列，只不过这个IsRowVersion()只能用在byte[]数组类型的属性上。</p><h2 id="配置一对一"><a href="#配置一对一" class="headerlink" title="配置一对一"></a>配置一对一</h2><h3 id="使用数据注释属性配置一对零或一关系"><a href="#使用数据注释属性配置一对零或一关系" class="headerlink" title="使用数据注释属性配置一对零或一关系"></a>使用数据注释属性配置一对零或一关系</h3><p>当一个表的主键在关系数据库（如 SQL 服务器）中成为另一个表中的 PK 和 FK 时，就会发生一对零或一关系。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> StudentAddress Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentAddress</span> </span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ForeignKey(<span class="meta-string">&quot;Student&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentAddressId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Address1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Address2 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> City &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Zipcode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> State &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Country &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> Student Student &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用流利的-API-配置一对零或一关系"><a href="#使用流利的-API-配置一对零或一关系" class="headerlink" title="使用流利的 API 配置一对零或一关系"></a>使用流利的 API 配置一对零或一关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected override void OnModelCreating(DbModelBuilder modelBuilder)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Configure Student &amp; StudentAddress entity</span><br><span class="line">    modelBuilder.Entity&lt;Student&gt;()</span><br><span class="line">                .HasOptional(s &#x3D;&gt; s.Address) &#x2F;&#x2F; Mark Address property optional in Student entity</span><br><span class="line">                .WithRequired(ad &#x3D;&gt; ad.Student); &#x2F;&#x2F; mark Student property as required in StudentAddress entity. Cannot save StudentAddress without Student</span><br></pre></td></tr></table></figure><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EF6CodeFirst&quot;&gt;&lt;a href=&quot;#EF6CodeFirst&quot; class=&quot;headerlink&quot; title=&quot;EF6CodeFirst&quot;&gt;&lt;/a&gt;EF6CodeFirst&lt;/h1&gt;&lt;h2 id=&quot;什么是CodeFirst？&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="技术文档" scheme="https://github.com/a2914475618/a2914475618.githup.io.git/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="EF6codefirst" scheme="https://github.com/a2914475618/a2914475618.githup.io.git/tags/EF6codefirst/"/>
    
  </entry>
  
  <entry>
    <title>来聆听我的故事吧</title>
    <link href="https://github.com/a2914475618/a2914475618.githup.io.git/2021/03/27/postAbout-Me/"/>
    <id>https://github.com/a2914475618/a2914475618.githup.io.git/2021/03/27/postAbout-Me/</id>
    <published>2021-03-26T16:00:00.000Z</published>
    <updated>2021-03-27T04:35:23.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a><strong>About Me</strong></h1><h2 id="Who-am-I"><a href="#Who-am-I" class="headerlink" title="Who am I ?"></a>Who am I ?</h2><ul><li><em>在下是一名有着有趣灵魂的大二学长，写博客的初衷也是觉得有趣，日后会在博客上分享一些心情随笔以及技术文档</em></li><li><em>我平常的爱好就是听听Music啦，打打Ball啦，当然我在Game上也是一个genius，有志同道合的朋友欢迎与我多多交流呀</em></li></ul><h2 id="Contact-Me："><a href="#Contact-Me：" class="headerlink" title="Contact Me："></a>Contact Me：</h2><p><em><a href="mailto:&#x32;&#57;&#49;&#52;&#x34;&#x37;&#x35;&#x36;&#49;&#x38;&#64;&#113;&#x71;&#46;&#x63;&#111;&#x6d;">&#x32;&#57;&#49;&#52;&#x34;&#x37;&#x35;&#x36;&#49;&#x38;&#64;&#113;&#x71;&#46;&#x63;&#111;&#x6d;</a>(非诚勿扰呀呀呀！！！)</em></p><h2 id="For-this-site："><a href="#For-this-site：" class="headerlink" title="For this site："></a>For this site：</h2><p><em>这是小生私人的博客小屋</em></p><h2 id="Special-version："><a href="#Special-version：" class="headerlink" title="Special version："></a>Special version：</h2><ul><li><em>第一篇博客还是略显生疏，如有叨扰，敬请原谅</em></li><li><em>以后一定会越来越好的呀</em></li><li><em>最后希望看到这个博客的童鞋温柔半两，从容一生</em></li></ul><h2 id="Wish："><a href="#Wish：" class="headerlink" title="Wish："></a>Wish：</h2><p><em>我还要一个人走很长很长的路。但我告诉自己，风来自很远的地方。去去也无妨。</em></p>]]></content>
    
    
    <summary type="html">写一些自己的兴趣爱好,关于我自己的一些小故事，作为我的第一个博客</summary>
    
    
    
    <category term="关于我" scheme="https://github.com/a2914475618/a2914475618.githup.io.git/categories/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    
    
    <category term="Me" scheme="https://github.com/a2914475618/a2914475618.githup.io.git/tags/Me/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/a2914475618/a2914475618.githup.io.git/2021/03/24/hello-world/"/>
    <id>https://github.com/a2914475618/a2914475618.githup.io.git/2021/03/24/hello-world/</id>
    <published>2021-03-24T05:56:49.202Z</published>
    <updated>2021-03-27T04:25:22.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你好呀，欢迎来到我的世界！"><a href="#你好呀，欢迎来到我的世界！" class="headerlink" title="你好呀，欢迎来到我的世界！"></a><em><strong>你好呀，欢迎来到我的世界！</strong></em></h1><blockquote><p> ​                                        <strong>生如夏花</strong></p><p> ​                                                             –泰戈尔《飞鸟集》</p><p> ​                    我听见回声，来自山谷和心间</p><p> ​                    以寂寞的镰刀收割空旷的灵魂</p><p> ​                    不断地重复决绝，又重复幸福</p><p> ​                            终有绿洲摇曳在沙漠</p><p> ​                                    我相信自己</p><p> ​                    生来如同璀璨的夏日之花</p><p> ​                            不凋不败，妖冶如火</p><p> ​                    承受心跳的负荷和呼吸的累赘</p><p> ​                                    乐此不疲</p><p> ​                    我听见音乐，来自月光和胴体</p><p> ​                    辅极端的诱饵捕获飘渺的唯美</p><p> ​                    一生充盈着激烈，又充盈着纯然</p><p> ​                            总有回忆贯穿于世间</p><p> ​                                    我相信自己</p><p> ​                        死时如同静美的秋日落叶</p><p> ​                        不盛不乱，姿态如烟</p><p> ​                    即便枯萎也保留丰肌清骨的傲然</p><p> ​                                        玄之又玄</p><p> ​                        我听见爱情，我相信爱情</p><p> ​                        爱情是一潭挣扎的蓝藻</p><p> ​                            如同一阵凄微的风</p><p> ​                            穿过我失血的静脉</p><p> ​                                驻守岁月的信念</p><p> ​                            我相信一切能够听见</p><p> ​                    甚至预见离散，遇见另一个自己</p><p> ​                            而有些瞬间无法把握</p><p> ​                    任凭东走西顾，逝去的必然不返</p><p> ​                                请看我头置簪花，</p><p> ​                            一路走来一路盛开</p><p> ​                                频频遗漏一些，</p><p> ​                            又深陷风霜雨雪的感动</p><p> ​                            般若波罗蜜，一声一声</p><p> ​                            生如夏花，死如秋叶</p><p> ​                                还在乎拥有什么</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;你好呀，欢迎来到我的世界！&quot;&gt;&lt;a href=&quot;#你好呀，欢迎来到我的世界！&quot; class=&quot;headerlink&quot; title=&quot;你好呀，欢迎来到我的世界！&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;strong&gt;你好呀，欢迎来到我的世界！&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;&lt;bl</summary>
      
    
    
    
    <category term="诗歌分享" scheme="https://github.com/a2914475618/a2914475618.githup.io.git/categories/%E8%AF%97%E6%AD%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="飞鸟" scheme="https://github.com/a2914475618/a2914475618.githup.io.git/tags/%E9%A3%9E%E9%B8%9F/"/>
    
  </entry>
  
</feed>
