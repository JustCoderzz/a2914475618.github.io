<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一位可可爱爱的编橙爱好者</title>
  <icon>https://www.gravatar.com/avatar/560d60bc4bbfec4b10e3ea23f4d15430</icon>
  <subtitle>欢迎来到爱的小屋</subtitle>
  <link href="https://a2914475618.github.io/atom.xml" rel="self"/>
  
  <link href="https://a2914475618.github.io/"/>
  <updated>2021-09-25T05:50:37.050Z</updated>
  <id>https://a2914475618.github.io/</id>
  
  <author>
    <name>Lu sir</name>
    <email>2914475618@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>For My Love</title>
    <link href="https://a2914475618.github.io/2021/09/25/My-Love/"/>
    <id>https://a2914475618.github.io/2021/09/25/My-Love/</id>
    <published>2021-09-25T05:34:35.000Z</published>
    <updated>2021-09-25T05:50:37.050Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to real.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
    <category term="love" scheme="https://a2914475618.github.io/tags/love/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://a2914475618.github.io/2021/09/22/Maven/"/>
    <id>https://a2914475618.github.io/2021/09/22/Maven/</id>
    <published>2021-09-22T02:21:58.000Z</published>
    <updated>2021-09-24T07:36:20.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><blockquote><p>pom.xml</p><p>​      |</p><p>POM  (Project Object Model)  项目对象模型</p><p>​     |</p><p>依赖管理   (Dependency)</p><p>​    |</p><p>本地   </p><p>​    |</p><p> 私服    </p><p>   |</p><p> 中央仓库</p><p>核心：POM   依赖管理   项目构建生命周期 (包含无数的插件，maven自带)</p><p>好处：开发结构统一</p></blockquote><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ol><li>需要配置MAVEN_HOME</li><li>测试   mvn</li></ol><h2 id="Maven基础知识"><a href="#Maven基础知识" class="headerlink" title="Maven基础知识"></a>Maven基础知识</h2><h3 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1.仓库"></a>1.仓库</h3><p>存储资源，包含各种jar包</p><p>本地仓库配置  在conf文件夹下有一个settting.xml文件，修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;LocalRepository&gt;你想要放置的目录&lt;&#x2F;LocalRepository&gt;</span><br></pre></td></tr></table></figure><h3 id="2-坐标"><a href="#2-坐标" class="headerlink" title="2.坐标"></a>2.坐标</h3><p>maven中定位资源的位置</p><ol><li>groupId   定义隶属于组织名称</li><li>artifactId   当前项目的名称</li><li>version    项目版本号</li><li>packaging   定义项目的打包方式</li></ol><h2 id="IDEA中使用Maven"><a href="#IDEA中使用Maven" class="headerlink" title="IDEA中使用Maven"></a>IDEA中使用Maven</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h1&gt;&lt;h2 id=&quot;什么是Maven&quot;&gt;&lt;a href=&quot;#什么是Maven&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="Maven" scheme="https://a2914475618.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="https://a2914475618.github.io/2021/09/22/Java%E5%9F%BA%E7%A1%80/"/>
    <id>https://a2914475618.github.io/2021/09/22/Java%E5%9F%BA%E7%A1%80/</id>
    <published>2021-09-22T02:21:58.000Z</published>
    <updated>2021-09-23T08:32:27.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="易混淆知识点"><a href="#易混淆知识点" class="headerlink" title="易混淆知识点"></a>易混淆知识点</h2><blockquote><ol><li><p>List 是一个有序集合，可以存放重复的数据 (有序：存进是什么顺序，取出时还是什么顺序)</p><pre><code>    (1).ArrayList 底层是数组适合查询，不适合增删元素。    (2).LiskedList 底层是双向链表适合增删元素，不适合查询操作。    (3).Vector 底层和ArrayList相同，但是Vector是线程安全的，效率较低很少使用</code></pre></li><li><p>Set 是一个无序集合，不允许放重复的数据 (无序不可重复，存进和取出的顺序不一样)</p><pre><code>    (1).HashSet 底层是哈希表/散列表    (2).TreeSet 继承sartedSet接口（无需不可重复，但存进去的元素可以按照元素的大小自动排序）</code></pre></li><li><p>Map 是一个无序集合，以键值对的方式存放数据，键对象不允许重复，值对象可以重复。</p></li></ol><p>​        (1).HashMap实现不同步，线程不安全。 HashTable线程安全</p><p>​        (2).HashMap中的key-value都是存储在Entry中的。</p><p>​        (3).HashMap可以存null键和null值，不保证元素的顺序恒久不变，它的底层使用的是数组和链表，通过hashCode()方法和equals方法保证键的唯一性</p></blockquote><h2 id="数据类型使用"><a href="#数据类型使用" class="headerlink" title="数据类型使用"></a>数据类型使用</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ol><li><p>length()  获取长度</p></li><li><p>charAt(int index) 获取某个位置的字符</p></li><li><p>indexOf(char  ch)   返回某个字符第一次出现的位置</p><p>indexOf(char  ch,int  fromIndex)   从某个位置开始查询</p><p>LastIndexOf(char  index)    从最后查询某个字符出现的位置</p></li><li><p>boolean contains(str)   是否有字串</p></li><li><p>boolean  isEmpty()   判断长度是否为0</p></li><li><p>boolean  startWith(str)  是否以指定内容开头</p></li><li><p>boolean  endsWith(str)   是否以指定内容结尾</p></li><li><p>boolean  equals(str)    判断字符串内容是否相同</p></li><li><p>char[]  toCharArray()   将字符串转为字符数组</p></li><li><p>valueOf(int)  将基本类型转为字符串</p></li><li><p>String  replace(oldchar,newchar)</p></li><li><p>String split(regex)</p></li><li><p>String substring(begin)</p></li><li><p>String substring(begin,end)</p></li><li><p>toUpperCase()  大写</p></li><li><p>toLowerCase()  小写</p></li><li><p>trim()  去除多个空格</p></li><li><p>compareTo(String)  对两个字符串进行自然顺序的比较</p></li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ol><li><p>add(Object e) 向ArrayList集合中添加元素</p></li><li><p>size()   返回ArrayList集合中元素个数</p></li><li><p>get(int index)  返回集合中对应位置的元素</p></li><li><p>add(int index,Object e) 向指定位置添加元素</p></li><li><p>set(int i ,Object e) 将索引i位置替换为e并返回替代的元素</p></li><li><p>clear() 清空集合中的元素</p></li><li><p>isEmpty() 判断集合容器是否为空</p></li><li><p>iterator()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">Iterator&lt;String&gt; iterator=list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>contains(Object o) 判断集合中是否含有指定元素</p></li><li><p>remove(int index)  移除列表中指定位置的元素，并返回</p></li><li><p>remove(Object o) 移除指定元素</p></li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ol><li>put(key,value)  将映射存到Map集合中</li><li>get(Object o)  返回指定键所映射的值，没有key对应的值则返回null,即获取Key对应的value</li><li>size()   返回Map集合中数据数量</li><li>clear()  清空Map集合</li><li>isEmpty()  判断集合中是否有数据</li><li>remove(Object key) 移除</li><li>values()  返回Map集合中所有value组成的Collection数据类型</li><li>keySet()  返回Map集合中所有key组成的Set集合</li><li>entrySet()  将Map集合每个key-value转换为一个Entry对象并返回由所有的Entry对象组成的Set集合</li><li>iterator迭代器<ol><li>与get方法结合</li><li>与entry对象结合</li></ol></li></ol><h3 id="如何选择集合类型"><a href="#如何选择集合类型" class="headerlink" title="如何选择集合类型"></a>如何选择集合类型</h3><blockquote><p>是否是键值对象形式:<br>是：Map<br>键是否需要排序:<br>是：TreeMap<br>否：HashMap<br>不知道，就使用HashMap。<br>　　 否：Collection<br>元素是否唯一:<br>是：Set<br>元素是否需要排序:<br>是：TreeSet<br>否：HashSet<br>不知道，就使用HashSet　<br>否：List<br>要安全吗:<br>是：Vector(其实我们也不用它,后面我们讲解了多线程以后，我在给你回顾用谁)<br>否：ArrayList或者LinkedList<br>增删多：LinkedList<br>查询多：ArrayList<br>不知道，就使用ArrayList</p></blockquote><h2 id="类型相互转换"><a href="#类型相互转换" class="headerlink" title="类型相互转换"></a>类型相互转换</h2><ol><li><p>char 转换为 String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = String.valueOf(<span class="string">&#x27;c&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>String 转换为 char</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回指定位置的字符</span></span><br><span class="line">String.charAt(index)</span><br><span class="line"><span class="comment">//包含整个String的字符数组</span></span><br><span class="line">String.toCharArray()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h1&gt;&lt;h2 id=&quot;易混淆知识点&quot;&gt;&lt;a href=&quot;#易混淆知识点&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="Java基础" scheme="https://a2914475618.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring mvc</title>
    <link href="https://a2914475618.github.io/2021/09/20/Spring-mvc/"/>
    <id>https://a2914475618.github.io/2021/09/20/Spring-mvc/</id>
    <published>2021-09-20T08:21:15.000Z</published>
    <updated>2021-09-24T08:09:32.847Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="spring mvc" scheme="https://a2914475618.github.io/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://a2914475618.github.io/2021/09/18/spring/"/>
    <id>https://a2914475618.github.io/2021/09/18/spring/</id>
    <published>2021-09-18T00:53:50.000Z</published>
    <updated>2021-09-22T13:28:31.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote><p>Ioc(反转控制)  和  Aop</p><p>方便解耦</p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.springtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/18 - 19:24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext ctx=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        User user=ctx.getBean(<span class="string">&quot;user&quot;</span>,User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.go();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lusir.springtest.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IOC概念"><a href="#IOC概念" class="headerlink" title="IOC概念"></a>IOC概念</h2><blockquote><p>对象创建和对象之间的调用过程，交给spring管理</p></blockquote><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><blockquote><p>核心：</p><ol><li>xml解析</li><li>工厂模式<ul><li>利用第三个类来创建对象</li></ul></li><li>反射</li></ol></blockquote><p>Ioc解耦过程</p><blockquote><ol><li>用xml配置文件，配置创建的对象</li><li>创建工厂类，在类中</li><li>通过反射创建对象</li></ol></blockquote><p>Ioc接口</p><blockquote><ol><li><p>Ioc思想基于IOC完成，Ioc容器底层就是对象工厂</p></li><li><p>spring提供IOC容器实现两种方式</p><ul><li>BeanFactory:IOC容器基本实现，是Spring内部使用的接口，不提供给开发人员使用——加载配置文件的时候不会创建对象，在获取对象时 才会取创建对象</li><li>ApplicationContext：是BeanFactory接口的子接口，提供更多强大的功能，一般由开发人员使用——在加载配置文件的时候就会把文件对象进行创建</li></ul></li></ol></blockquote><p>Ioc操作Bean管理</p><blockquote><ol><li>Bean管理指的是两个操作</li><li>Spring创建对象</li><li>spring注入属性</li></ol></blockquote><blockquote><p>实现方式两种</p><p>1.xml配置文件方式</p><p>2.注解方式</p></blockquote><p>xml创建对象默认执行无参数构造方法</p><blockquote><p>注入属性</p><ol><li><p>set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name指的属性的名字  value指的属性的值  ref是引用对象</span><br></pre></td></tr></table></figure><p>也可以使用P命名空间</p></li><li><p>构造参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">//name 参数名   </span><br></pre></td></tr></table></figure></li></ol><p>注入的三种数据类型</p><ol><li><p>普通数据类型  value</p></li><li><p>引用数据类型  ref</p></li><li><p>集合数据类型   list  map  props set ref引用</p><p>ref标签在集合中注入对象属性</p><p>提取list集合属性注入  引入util</p></li></ol><p>注入空值字面量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reason&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性值包含特殊值符号  写在CDate里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;adress&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入其他配置文件</p><ul><li><p>可以根据层来拆xml   可以根据业务来拆xml</p></li><li><p>在主文件引入其他模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resourve</span>=<span class="string">&quot;xxxxx.xml&quot;</span>  /<span class="attr">import</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="Aop概念"><a href="#Aop概念" class="headerlink" title="Aop概念"></a>Aop概念</h2><blockquote><p>面向切面编程   将各个部分隔离</p><p>不通过修改源代码的方式，在主干里添加功能</p></blockquote><h3 id="底层原理-1"><a href="#底层原理-1" class="headerlink" title="底层原理"></a>底层原理</h3><blockquote><p>使用动态代理</p></blockquote><blockquote><p>两种情况下</p><ol><li><p>有接口，jdk动态代理</p><p>创建接口实现类的代理对象  增强类的方法</p></li><li><p>没有接口，CGLIB动态代理</p><p>创建当前类子类的代理对象  来增强类的方法</p></li></ol></blockquote><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><blockquote><p>proxy类   </p><p>newProxyInstance方法   </p><p>方法参数</p><ol><li><p>类加载器</p></li><li><p>增强方法所在的类，这个类实现的接口，支持多个接口</p></li><li><p>实现InvocationHandler接口，创建代理对象，写增强的方法</p></li><li><p>```java<br>Proxy.newProxyInstance(类加载器，代理对象的类，实现InnocationHandler接口的类)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">   </span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">   </span><br><span class="line">import java.util.Arrays;</span><br><span class="line">   </span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author lusir</span><br><span class="line"> * @date 2021&#x2F;9&#x2F;21 - 16:00</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Class[] interfaces&#x3D;&#123;UserDao.class&#125;;</span><br><span class="line">        UserImpl userDao&#x3D;new  UserImpl();</span><br><span class="line">        &#x2F;&#x2F;</span><br><span class="line">        UserDao u&#x3D;(UserDao) Proxy.newProxyInstance(main.class.getClassLoader(),interfaces,new UserDaoProxy(userDao));</span><br><span class="line">        u.add(1,3);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    static class UserDaoProxy implements InvocationHandler&#123;</span><br><span class="line">         Object obj;</span><br><span class="line">        UserDaoProxy (Object obj)&#123;</span><br><span class="line">            this.obj&#x3D;obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">            &#x2F;&#x2F;方法之前</span><br><span class="line">            System.out.println(&quot;这是在方法之前执行的.....&quot;+method.getName()+&quot;传递的参数是&quot;+ Arrays.toString(args));</span><br><span class="line">            &#x2F;&#x2F;执行</span><br><span class="line">           Object res&#x3D;method.invoke(obj,args);</span><br><span class="line">            &#x2F;&#x2F;执行后</span><br><span class="line">            System.out.println(&quot;方法执行完毕.....&quot;);</span><br><span class="line">            return res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/21 - 15:59</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/21 - 15:58</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><blockquote><ol><li><p>连接点</p><p>类里面哪些方法可以被增强，这些方法是连接点</p></li><li><p>切入点</p><p>实际被增强的方法，成为切入点</p></li><li><p>通知（增强）</p><p>实际增强的逻辑部分为通知</p><p>通知类型</p><ol><li>前置通知  方法前</li><li>后置通知  方法后</li><li>环绕通知   方法前后</li><li>异常通知     </li><li>最终通知   finally</li></ol></li><li><p>切面</p><p>把通知应用到切入点的过程</p></li></ol></blockquote><h3 id="AOP操作"><a href="#AOP操作" class="headerlink" title="AOP操作"></a>AOP操作</h3><blockquote><p>用AspectJ实现Aop操作</p><p>AspectJ  独立Aop框架  一般把他和Spring框架一起使用</p><p>实现方式：</p><ol><li>基于XML配置</li><li>基于注解（经常使用）</li></ol><p>切入点表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：对哪个类中的哪个方法进行增强</span><br><span class="line">结构：execution([权限修饰符][返回类型][类的全路径]，[方法名称],([参数列表]))</span><br><span class="line">eg：</span><br><span class="line">execution(* com.lusir.dao.UserDao.add(..))</span><br><span class="line">..表示参数</span><br><span class="line">eg：所有方法增强</span><br><span class="line">execution(* com.lusir.dao.UserDao.*(..))</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="Aop操作（AspectJ注解）"><a href="#Aop操作（AspectJ注解）" class="headerlink" title="Aop操作（AspectJ注解）"></a>Aop操作（AspectJ注解）</h3><blockquote><ol><li><p>创建类，在类里面定义方法</p></li><li><p>创建增强类（编写增强逻辑）</p><p>在增强类里面创建方法，让不同的方法代表不同的通知类型</p></li><li><p>进行通知的配置</p><ol><li>在spring配置文件中，开启注解扫描</li><li>使用注解创建User和UserProxy对象</li><li>在增强类里面添加注解@Aspect</li><li>在spring配置文件中开启生成代理对象</li></ol></li><li><p>配置不同类型的通知</p><ol><li>Before注解表示作为前置通知 ，里面写切入点表达式</li><li>After 后置通知</li><li>AfterReturning  最终通知</li><li>AftrThrowing  异常通知</li><li>Around  环绕通知</li></ol></li><li><p>公共切入点抽取</p><ol><li>加入Pointcut注解</li></ol></li><li><p>有多个增强类对同一个方法增强，设置增强类优先级</p><ol><li>在增强类上添加注解@Order(数字值)，值越小，优先级越高</li></ol></li></ol></blockquote><h2 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><blockquote><p>id  唯一标识</p><p>class   全类名</p><p>scope 指定bean个数   作用域</p><ol><li><p>singleton  默认  单例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例化个数为1</span><br><span class="line">实例化时机：spring核心文件被加载时，实例化配置的Bean实例</span><br><span class="line">bean的生命周期：</span><br><span class="line">   对象创建：当应用加载，创建容器时，对象就被创建了</span><br><span class="line">   对象运行：只要容器在，对象就一直活着</span><br><span class="line">   对象销毁：当应用卸载，销毁容器时，对象就被销毁了</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>prototype  多例的    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例化个数为多个</span><br><span class="line">实例化时机：调用getBean()时实例化BEAN</span><br><span class="line">bean的生命周期：</span><br><span class="line">   对象创建：使用对象时创建按新的实例</span><br><span class="line">   对象运行：只要对象在使用，对象就一直活着</span><br><span class="line">   对象销毁：当对象长时间不用时，被JAVA的垃圾回收器回收了</span><br></pre></td></tr></table></figure></li></ol><p>Bean的生命周期配置：</p><ol><li>init-method  指定初始化方法</li><li>destory-method  指定销毁时方法</li></ol><p>Bean实例化方式</p><ol><li><p>工厂静态方式实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lusir.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>工厂实例方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;全类名&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>无参构造(最常用)</p></li></ol><p>Bean的依赖注入</p><ol><li>构造方法</li><li>set方法</li></ol><p>Bean的分类</p><ol><li><p>普通Bean   在XML中定义什么返回什么</p></li><li><p>工厂Bean</p><p>创建类，让这个类作为工厂bean，实现接口FactoryBean   getObject方法</p><p>实现接口方法，在实现的方法定义返回的bean类型</p></li></ol></blockquote><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><blockquote><ol><li>通过构造器创建Bean实例（无参数构造）</li><li>为bean的属性设置值和对其他bean引用（调用set方法）</li><li>调用bean的初始化的方法（需要进行配值）</li><li>bean使用</li><li>容器关闭时，销毁bean的方法<ol><li>init-method  指定初始化方法</li><li>destory-method  指定销毁时方法</li></ol></li></ol></blockquote><h4 id="Spring自动装配"><a href="#Spring自动装配" class="headerlink" title="Spring自动装配"></a>Spring自动装配</h4><blockquote><p>根据指定装配规则，Spring自动将匹配的属性值注入,</p><p>aotowire可以实现自动装配</p><p>两个参数  byName  byType (相同类型的会出现问题)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;全类名&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="外部文件注入"><a href="#外部文件注入" class="headerlink" title="外部文件注入"></a>外部文件注入</h2><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;.property文件&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//加上表达式  $&#123;property文件的key值&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Spring相关Api"><a href="#Spring相关Api" class="headerlink" title="Spring相关Api"></a>Spring相关Api</h2><blockquote><ol><li><p>ClassPathXmlApplicationContext</p><p>从类的根路径下加载配置文件</p></li><li><p>FileSystemXmlApplicationContext</p><p>从磁盘路径上加载配置文件   绝对地址</p></li><li><p>AnnotationConfigApplicationContext</p><p>使用注解配置容器时，用此类来创建spring容器</p></li></ol><p>getBean()</p><ol><li>参数1   string id</li><li>参数2   Class 类型</li></ol></blockquote><h2 id="Spring配置数据源"><a href="#Spring配置数据源" class="headerlink" title="Spring配置数据源"></a>Spring配置数据源</h2><h2 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h2><h3 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h3><p>注解可以作用在类上，方法上面，属性上面</p><p>注解目的：让配置更加简洁</p><blockquote><p>注解扫描：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.aaaa&quot;</span>&gt;</span>&lt;/context :component-scan&gt;</span><br></pre></td></tr></table></figure><p>@Componeent   创建对象</p><p>@Controller  在WEB层实例化BEAN</p><p>@Autowired//按照数据类型从Spring容器中进行匹配的</p><p>@Qualifier(“Name”)//按照id </p><p>@Resource(name=”userDao”)//相当于上面两个相加</p><p>@Value(“”)//设置普通类型    另外一种使用方法  Value(“${jdbc.driver}”)</p><p>@Scope//设置bean范围</p><p>@PostConstruct  bean 的初始方法</p><p>@PreDestroy  bean的销毁方法</p></blockquote><h3 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h3><blockquote><p>专门创建一个Spring核心配置类，替代xml配置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210920130417.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标志该类是Spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//&lt;import resource=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCofiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span>  <span class="comment">//Spring会将当前方法的返回值以指定名称存储到Spring容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring-Web环境集成"><a href="#Spring-Web环境集成" class="headerlink" title="Spring Web环境集成"></a>Spring Web环境集成</h2><blockquote><p>ServletContextListener监听Web应用的启动</p><p>spring 提供了应用上下文的工具  ContextLoaderListener</p><ol><li>在web.xml种配置ContextLoaderListener监听器（导入spring-web坐标）</li><li>使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Ioc(反转控制)  和  Aop&lt;/p&gt;
&lt;p&gt;方便解耦&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Spring" scheme="https://a2914475618.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java web</title>
    <link href="https://a2914475618.github.io/2021/09/14/Java-web/"/>
    <id>https://a2914475618.github.io/2021/09/14/Java-web/</id>
    <published>2021-09-14T06:36:56.000Z</published>
    <updated>2021-09-25T05:53:04.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h1><blockquote><p>后期学习路径</p><p>ssm框架  简化web开发的经典框架</p><p>spring boot 简化spring 开发的框架</p><p>spring cloud：微服务开发解决方案</p><p>各种中间件技术：</p><ol><li>redis</li><li>mongodb</li><li>ra’bbi’tmq</li><li>elasticSearch</li></ol><p>容器技术：</p><p>Docker</p><p>业务解决方案</p></blockquote><h2 id="java知识内容补充"><a href="#java知识内容补充" class="headerlink" title="java知识内容补充"></a>java知识内容补充</h2><h3 id="junit单元测试"><a href="#junit单元测试" class="headerlink" title="junit单元测试"></a>junit单元测试</h3><blockquote><p>黑盒测试：关注结果是否正确</p><p>白盒测试：关注程序具体的执行流程</p></blockquote><p>junit：白盒测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;步骤</span><br><span class="line">1.定义一个测试类 名字为 class+Test</span><br><span class="line"></span><br><span class="line">2.定义一个测试方法：可以独立运行</span><br><span class="line">方法名：testADdd</span><br><span class="line">返回值：void</span><br><span class="line">参数列表：空参</span><br><span class="line">3.给方法加@Test</span><br><span class="line">4.导入junit依赖环境</span><br></pre></td></tr></table></figure><blockquote><p>断言：我断言的结果为多少</p><p>Assert.assertEquals</p><p>如果测试的结果与我断言的相同，则测试成功，否则错误</p><p> 注解：</p><p>@Test     单元测试注解</p><p>@Before  在所有的测试方法之前先执行</p><p>@After    在所有的测试方法执行完成后，都会自动执行该方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.junit.CalcTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.go.clac.clac;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.regexp.internal.RESyntaxException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 15:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;close...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clac a=<span class="keyword">new</span> clac();</span><br><span class="line">        <span class="keyword">int</span> result=a.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testDel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clac b=<span class="keyword">new</span> clac();</span><br><span class="line">        <span class="keyword">int</span> result=b.del(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>框架设计的灵魂</p><p>框架：半成品软件，简化编码</p><p>反射：将类的各个组成部分封装为其他对象。这就是反射机制</p><ul><li>好处：在程序运行中，操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ul><p>获取class对象的方式：</p><ol><li>class.forName(“全类名”)：将字节码加载进内存，返回class对象   多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li><li>类名.class:通过类名的属性 class来获取  多用于参数的传递</li><li>对象.getClass:getclass()在object对象中定义   多用于对象的获取字节码的方式</li></ol></blockquote><h4 id="获取class的对象"><a href="#获取class的对象" class="headerlink" title="获取class的对象"></a>获取class的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 16:02</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.通过全类名获取</span></span><br><span class="line">        Class cls1=Class.forName(<span class="string">&quot;cn.go.demo1.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//2.类名.class</span></span><br><span class="line">        Class cls2=Person.class;</span><br><span class="line">        <span class="comment">//3.对象.getClass</span></span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">        Class cls3=p.getClass();</span><br><span class="line">        <span class="keyword">if</span> (cls3 == cls1) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cls1==cls2)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">true</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结论</span></span><br><span class="line">同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，无论通过那种方式获取的<span class="class"><span class="keyword">class</span>对象都是同一个</span></span><br></pre></td></tr></table></figure><h4 id="class的获取Field方法"><a href="#class的获取Field方法" class="headerlink" title="class的获取Field方法"></a>class的获取Field方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>field[] getFields() 获取所有Public修饰的成员变量</span><br><span class="line"><span class="number">2.</span> <span class="function">field <span class="title">getField</span><span class="params">(string name)</span> 获取其中一个field</span></span><br><span class="line"><span class="function">3.field[] <span class="title">getDeclaredFields</span><span class="params">()</span> 获取所有的成员变量，不考虑修饰符  包括Public</span></span><br><span class="line"><span class="function">4.field <span class="title">getDeclaredField</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"><span class="comment">//私有的不能直接访问  需要忽略访问权限修饰的安全检查</span></span></span><br><span class="line"><span class="function">a.<span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span><span class="comment">//暴力反射  a是一个类的属性字段</span></span></span><br><span class="line"><span class="function"><span class="comment">//带declared  需要通过setAccessible(true) 暴力反射</span></span></span><br><span class="line"><span class="function">获取值 get</span></span><br><span class="line"><span class="function">设置值 set</span></span><br></pre></td></tr></table></figure><h4 id="class的获取Constructor方法"><a href="#class的获取Constructor方法" class="headerlink" title="class的获取Constructor方法"></a>class的获取Constructor方法</h4><blockquote><p>获取构造方法门</p><p>Constructor getConstructors(…paramterTypes)</p><p>得到构造器后可以用她创建对象</p><p>construct.newInstance()</p><p>class.newInstance()</p></blockquote><h4 id="class的获取Methods的方法"><a href="#class的获取Methods的方法" class="headerlink" title="class的获取Methods的方法"></a>class的获取Methods的方法</h4><blockquote><p>获取Method</p><p>Method obj=personClass.getMethod(“eat” )</p><p>执行方法    .invoke()</p><p>Person p =new Person()</p><p>obj.invoke(p)</p><p>获取方法名</p><p>.getName()</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><blockquote><p>写一个框架类，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行    其中任意方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 17:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实现</span></span><br><span class="line"><span class="comment">//    1.配置文件</span></span><br><span class="line"><span class="comment">//    2.反射</span></span><br><span class="line"><span class="comment">//    步骤</span></span><br><span class="line"><span class="comment">//    将需要创建的对象的全类名和需要执行的方法定义在配置文件中</span></span><br><span class="line"><span class="comment">//    在程序中加载读取配置文件</span></span><br><span class="line"><span class="comment">//    使用反射技术来加载类文件进内存</span></span><br><span class="line"><span class="comment">//    创建对象</span></span><br><span class="line"><span class="comment">//    执行方法</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line"><span class="comment">//        1.加载配置文件</span></span><br><span class="line">        Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//        2.获取class目录下的配置文件</span></span><br><span class="line"><span class="comment">//        loader 类加载器</span></span><br><span class="line">        ClassLoader loader=ReflectTest.class.getClassLoader();</span><br><span class="line"><span class="comment">//        3.获取字节流</span></span><br><span class="line">        InputStream is=loader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line"><span class="comment">//        4.调用加载</span></span><br><span class="line">        pro.load(is);</span><br><span class="line"><span class="comment">//        5.获取配置文件中的数据</span></span><br><span class="line">        String className=pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName=pro.getProperty(<span class="string">&quot;methodsName&quot;</span>);</span><br><span class="line"><span class="comment">//        6.加载该类进内存</span></span><br><span class="line">        Class cls=Class.forName(className);</span><br><span class="line"><span class="comment">//        7.创建对象</span></span><br><span class="line">        Object obj=cls.newInstance();</span><br><span class="line"><span class="comment">//        8.获取方法对象</span></span><br><span class="line">        Method meth=cls.getMethod(methodName);</span><br><span class="line"><span class="comment">//        9.执行方法</span></span><br><span class="line">        meth.invoke(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><blockquote><p>Annotation </p><p>使用注解   @注解名称</p><p>1.编译检查  @override  检查该方法是否重写了父类的方法</p><p>2.编写文档    javadoc 命令</p><p>3.代码分析   使用反射</p></blockquote><h4 id="jdk内置注解"><a href="#jdk内置注解" class="headerlink" title="jdk内置注解"></a>jdk内置注解</h4><blockquote><p>@override</p><p>@oeprecated    表示已过时</p><p>@SuppressWarnings:   压制警告</p><p>@SuppressWarnings(“all”) 一般放在类上</p></blockquote><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><blockquote><p>格式：</p><ol><li>元注解</li><li>public @interface 注解名称{}</li></ol><p>public interface MyAnno extends Java.lang.annotation.Annotation{}</p><p>注解本质上就是一个接口，该接口默认继承</p><p>属性：接口中的抽象方法</p><p>属性的返回值有下列取值：</p><ol><li>基本数据类型</li><li>string</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ol><p>定义了属性，在使用时需要给属性赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">show2</span><span class="params">()</span> <span class="keyword">default</span> &quot;lisi&quot;</span>;</span><br><span class="line">    <span class="function">Person <span class="title">per</span><span class="params">()</span></span>;  <span class="comment">//Person  为枚举类型</span></span><br><span class="line">    <span class="function">MyAnno <span class="title">anno2</span><span class="params">()</span></span>;<span class="comment">//MyAnno  注解</span></span><br><span class="line">    String[] show3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@MyAnno(show1&#x3D;1,show2&#x3D;&quot;zhangsan&quot;)</span><br><span class="line">public class Worker &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;其他同理</span><br></pre></td></tr></table></figure><p>若定义了default  则调用时可以不赋值</p><p>数组赋值时，用{}包裹</p></blockquote><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><blockquote><p>@Target:描述能够作用的位置</p><p>@Retention:描述注解被保留的阶段</p><p>@Documented:描述注解是否被抽取到api文档中</p><p>@Inherited:描述注解是否被子类继承 子类自动继承</p></blockquote><h4 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h4><p>在程序中使用（解析）注解：获取注解中定义的属性值</p><blockquote><p>使用注解可以来代替配置文件</p><p>步骤：</p><ol><li>获取注解定义的位置的对象（class,method,field)</li><li>获取指定的的注解 getAnnotation(class)</li><li>调用注解中的抽象方法获取配置的属性值</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pro(className=&quot;cn.itcast.anno.demo&quot;,methodName=&quot;show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class test=AnnoTest.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取注解对象</span></span><br><span class="line">        Pro an=test.getAnnotation(pro.class);</span><br><span class="line">        </span><br><span class="line">        String className=an.className;</span><br><span class="line">        String methodName=an.methodName;</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        System.out.println(methodName);</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单测试的框架"><a href="#简单测试的框架" class="headerlink" title="简单测试的框架"></a>简单测试的框架</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.go.clac.clac;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 19:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Check</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        1.创建计算器对象</span></span><br><span class="line">        clac c=<span class="keyword">new</span> clac();</span><br><span class="line"><span class="comment">//        2.创建字节码文件对象</span></span><br><span class="line">        Class cls=c.getClass();</span><br><span class="line"><span class="comment">//        3.获取该类所有的方法</span></span><br><span class="line">        Method[] methods=cls.getMethods();</span><br><span class="line">        <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent((Check.class)))&#123; <span class="comment">//判断是否有check注解</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(c);<span class="comment">//执行方法</span></span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"><span class="comment">//                    捕获异常</span></span><br><span class="line">                    number ++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><blockquote><p>net start mysql</p><p>net stop mysql</p></blockquote><h3 id="mySql登录"><a href="#mySql登录" class="headerlink" title="mySql登录"></a>mySql登录</h3><blockquote><p>mysql -u root -p root </p><p>mysql -ip -u root -p 密码 </p><p>mysql –host=ip –user=root –password=root</p></blockquote><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><blockquote><p>结构化查询语言</p><p>操作所有的关系型数据库的规则</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;show databases  查看有哪些数据库</span><br></pre></td></tr></table></figure><blockquote><p>sql 语句以分号结尾</p><p>三种注释</p><p>*单行注释  –注释内容 或者 #内容</p><p><em>多行注释   /</em> *  注释内容    */</p><p>DDL(操作数据库、表)</p><p>DQL(查询表中的数据)</p><p>DML(增删改表中的数据)</p><p>DCL(授权)‘</p><p>show create database 数据库名称 </p><p>//查询某个数据库的字符集</p></blockquote><h4 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建数据库</span><br><span class="line">create database db1;</span><br><span class="line">&#x2F;&#x2F;加条件判断</span><br><span class="line">create database if not exists db1;</span><br><span class="line">&#x2F;&#x2F;创建数据库时指定字符集</span><br><span class="line">create database db3 character set gbk;</span><br><span class="line">&#x2F;&#x2F;同时写</span><br><span class="line">cteate databse  if not exists db2 character set gbk;</span><br><span class="line">&#x2F;&#x2F;修改数据库的字符集</span><br><span class="line">alter database db3 character set utf8;</span><br><span class="line">&#x2F;&#x2F;删除数据库</span><br><span class="line">drop database db3;</span><br><span class="line">&#x2F;&#x2F;加入判断</span><br><span class="line">drop database if exists db3;</span><br><span class="line">&#x2F;&#x2F;查询当前正在使用的数据库</span><br><span class="line">select database()</span><br><span class="line">&#x2F;&#x2F;使用数据库</span><br><span class="line">use db1;</span><br></pre></td></tr></table></figure><h4 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>查询数据库中所有表的名称</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询表结构</span><br><span class="line"><span class="keyword">desc</span> 表名</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>创建表  最后一列不需要逗号</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">列名<span class="number">1</span> 数据类型<span class="number">1</span>；</span><br><span class="line">列名<span class="number">2</span> 数据类型<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line">)；   </span><br><span class="line"><span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>) 小数点最后最大<span class="number">5</span>位，保留两位</span><br><span class="line"><span class="type">timestamp</span> 时间戳类型 若没赋值，则默认使用当前系统时间</span><br><span class="line"><span class="type">varchar</span>(<span class="number">20</span>) 指定最大字符长度</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>复制表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu <span class="keyword">like</span> student; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu rename <span class="keyword">to</span> student;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改表的字符集</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="type">character</span> <span class="keyword">set</span> 字符集名称;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>添加一列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span>  列名 数据类型</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改列名称 类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 列名 新列名 新数据类型；</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 新数据类型;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="操作表中的数据"><a href="#操作表中的数据" class="headerlink" title="操作表中的数据"></a>操作表中的数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>添加数据</span><br><span class="line"><span class="keyword">insert</span>  <span class="type">int</span> 表名 (列名<span class="number">1</span>，列名<span class="number">2.</span>..) <span class="keyword">values</span> (value1,value2...)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除数据</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line">若没加条件则删除所有数据 不推荐使用</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表，在创建一个一摸一样的空表  类似于删除表中所有数据</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> stu;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改数据</span><br><span class="line">update 表名 <span class="keyword">set</span> 列名<span class="number">1</span><span class="operator">=</span>value1,列名<span class="number">2</span><span class="operator">=</span>value2 <span class="keyword">where</span> 条件</span><br><span class="line">如果不加条件，则修改表中所有的数据</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询表中记录的格式</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> 表名列表</span><br><span class="line"><span class="keyword">where</span> 条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组字段</span><br><span class="line"><span class="keyword">having</span> 分组之后的条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序字段</span><br><span class="line">limit 分页限定</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>去重 <span class="keyword">distinct</span></span><br><span class="line">如果有<span class="keyword">Null</span>参与的计算，结果都是<span class="keyword">null</span></span><br><span class="line"><span class="keyword">select</span> name,chinese,math,IFNULL(chinese,<span class="number">0</span>)<span class="operator">+</span>IFNULL(math,<span class="number">0</span>) <span class="keyword">as</span> 别名 <span class="keyword">from</span> student</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>通过IFNULL(字段,默认值) 可以设置计算时的默认值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><blockquote><p>Java dataBase Connectivity  java 数据库连接</p><p>Jdbc本质：定义了操作所有关系型数据库的规则 定义了一套接口</p><p>实现类：数据库驱动</p></blockquote><p>步骤</p><blockquote><p>1.导入驱动Jar包</p><p>2.注册驱动</p><p>3.获取数据库连接对象 Connection</p><p>4.定义 sql</p><p>5.获取执行sql语句的对象 statement</p><p>6.执行sql，接受返回的结果</p><p>7.处理结果</p><p>8.释放资源</p></blockquote><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/15 - 17:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Javadbcon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line"><span class="comment">//        注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//        获取数据库连接对象</span></span><br><span class="line">        Connection con=DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="comment">//        定义sql语句</span></span><br><span class="line">        String  sql=<span class="string">&quot;update test set age=100 where id=1&quot;</span>;</span><br><span class="line"><span class="comment">//        获取执行sql的对象    Statement</span></span><br><span class="line">        Statement statement=con.createStatement();</span><br><span class="line"><span class="comment">//        执行sql方法</span></span><br><span class="line">        <span class="keyword">int</span> count=statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"><span class="comment">//        释放资源</span></span><br><span class="line">        con.close();</span><br><span class="line">        statement.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="详解操作对象"><a href="#详解操作对象" class="headerlink" title="详解操作对象"></a>详解操作对象</h3><h4 id="1-DriverManager"><a href="#1-DriverManager" class="headerlink" title="1.DriverManager"></a>1.DriverManager</h4><blockquote><p>驱动管理对象</p><p>功能：</p><ol><li>注册驱动  告诉程序该使用哪一个数据库驱动jar</li><li>通过 Class.forName(“com.mysql.jdbc.Driver”)</li><li>mysql5之后的驱动jar包可以省略  因为jar包里已经配置了</li><li>获取数据库连接</li><li>getConnection(String url,String user,String password)</li><li>url:指定连接的路径   语法 ：jdbc:mysql://ip地址(域名):端口号/数据库名称</li></ol></blockquote><h4 id="2-Connection"><a href="#2-Connection" class="headerlink" title="2.Connection"></a>2.Connection</h4><blockquote><p>数据库连接对象</p><p>1.获取执行sql的对象</p><p>Statement createStatement() </p><p>2.管理事务</p><ol><li>开启事务  setAutoCommit(boolean autoCommit) 设置参数位false </li><li>提交事务 commit()</li><li>回滚事务 rollback()</li></ol></blockquote><h4 id="3-Statement"><a href="#3-Statement" class="headerlink" title="3.Statement"></a>3.Statement</h4><blockquote><p>执行sql的对象   </p><p>执行静态sql  参数给定值</p><ol><li><p>execute(sql) 可以执行任何sql</p></li><li><p>executeUpdate(sql) 可以执行dml(curd)语句  ddl语句(create 表 ,alter,drop)很少</p><p>返回值：返回的是影响的行数，可以通过返回值判断是否执行成功</p></li><li><p>executeQuery(sql) 查询查询语句  </p><p>返回值：结果集对象</p></li><li><p>释放资源应该放在finnally</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">statement.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(con!=<span class="keyword">null</span>)&#123;</span><br><span class="line">con.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>4.ResultSet</p><blockquote><p>结果集对象</p><p>封装查询结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游标向下移动一行</span></span><br><span class="line">next()</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">getInt(参数)</span><br><span class="line">    <span class="number">1.</span><span class="keyword">int</span> 代表列的编号 从<span class="number">1</span>开始</span><br><span class="line">    <span class="number">2.</span>string 列的名称 </span><br><span class="line">getString(参数)</span><br><span class="line">   同理</span><br></pre></td></tr></table></figure><p>方法的返回值是 ResultSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string sql=<span class="string">&quot;select * from table&quot;</span></span><br><span class="line">statement =con.createStatement();</span><br><span class="line">re=statement.executeQuery(sql)<span class="comment">//返回的是结果集</span></span><br><span class="line"><span class="comment">//处理结果</span></span><br><span class="line">rs.next();</span><br><span class="line"><span class="keyword">int</span> id=rs.getInt(<span class="number">1</span>);</span><br><span class="line">String name=rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(id)</span><br><span class="line">System.out.println(name)</span><br></pre></td></tr></table></figure><p>使用时的注意：</p><ol><li>游标向下一行</li><li>判断是否有数据</li><li>获取数据</li></ol><p>next（）方法返回布尔值</p><p>正确使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(rs.next())&#123;</span><br><span class="line">int id&#x3D;rs.getInt(1);</span><br><span class="line">String name&#x3D;rs.getString(&quot;name&quot;);</span><br><span class="line">System.out.println(id)</span><br><span class="line">System.out.println(name)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;打印出所有的行的值</span><br></pre></td></tr></table></figure></blockquote><h5 id="抽取jdbc工具类"><a href="#抽取jdbc工具类" class="headerlink" title="抽取jdbc工具类"></a>抽取jdbc工具类</h5><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///db1</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>JDBCUtils类</p><blockquote><p>获取src路径下的文件的方式     ClassLoader()类加载器</p><p>Properties pro=new Properties();</p><p>ClassLoader loader=JDBCUtils.class.getClassLoader();<br>//        3.获取字节流<br>   Url res=loader.getResourceAsStream(“jdbc.properties”);</p><p>String path=res.getPath();</p><p>pro.load(new FileReader(path))</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建Properties集合类。</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res  = classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">           <span class="comment">// System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span></span><br><span class="line">            <span class="comment">//2. 加载文件</span></span><br><span class="line">           <span class="comment">// pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            <span class="comment">//4. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-PreparedSteatment"><a href="#5-PreparedSteatment" class="headerlink" title="5.PreparedSteatment"></a>5.PreparedSteatment</h4><blockquote><p>执行sql对象 更加强大</p><p>执行动态sql  </p></blockquote><h5 id="Sql注入问题"><a href="#Sql注入问题" class="headerlink" title="Sql注入问题"></a>Sql注入问题</h5><blockquote><p>在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</p><ol><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a<pre><code>     2. sql：select * from user where username = &#39;fhdsjkf&#39; and password = &#39;a&#39; or &#39;a&#39; = &#39;a&#39; </code></pre></li></ol><p>解决sql注入问题：使用PreparedStatement对象来解决</p><p>预编译的SQL：参数使用?作为占位符  给问号赋值就行</p><ol start="4"><li><p>步骤：</p><pre><code>     1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar     2. 注册驱动     3. 获取数据库连接对象 Connection     4. 定义sql         * 注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;     5. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql)      6. 给？赋值：         * 方法： setXxx(参数1,参数2)             * 参数1：？的位置编号 从1 开始             * 参数2：？的值     7. 执行sql，接受返回结果，不需要传递sql语句     8. 处理结果     9. 释放资源</code></pre><ol start="5"><li>注意：后期都会使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol></li></ol></blockquote><p>使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：</span></span><br><span class="line"><span class="comment"> * * 需求：</span></span><br><span class="line"><span class="comment"> * 1. 通过键盘录入用户名和密码</span></span><br><span class="line"><span class="comment"> * 2. 判断用户是否登录成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo9</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.键盘录入，接受用户名和密码</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">new</span> JDBCDemo9().login2(username, password);</span><br><span class="line">        <span class="comment">//3.判断结果，输出不同语句</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username ,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || password == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt =  <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user where username = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+password+<span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4.执行查询</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">           <span class="comment">/* if(rs.next())&#123;//如果有下一行，则返回true</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">           <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,stmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法,使用PreparedStatement实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login2</span><span class="params">(String username ,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || password == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt =  <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给?赋值</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>,username);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">//4.执行查询,不需要传递sql</span></span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">           <span class="comment">/* if(rs.next())&#123;//如果有下一行，则返回true</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,pstmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jdbc控制事务"><a href="#jdbc控制事务" class="headerlink" title="jdbc控制事务"></a>jdbc控制事务</h3><blockquote><ol><li><p>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p></li><li><p>操作：</p><ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li><p>使用Connection对象来管理事务</p><ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt1 = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="comment">//2.1 张三 - 500</span></span><br><span class="line">            String sql1 = <span class="string">&quot;update account set balance = balance - ? where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//2.2 李四 + 500</span></span><br><span class="line">            String sql2 = <span class="string">&quot;update account set balance = balance + ? where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql对象</span></span><br><span class="line">            pstmt1 = conn.prepareStatement(sql1);</span><br><span class="line">            pstmt2 = conn.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">//4. 设置参数</span></span><br><span class="line">            pstmt1.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt1.setInt(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            pstmt2.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt2.setInt(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            pstmt1.executeUpdate();</span><br><span class="line">            <span class="comment">// 手动制造异常</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            pstmt2.executeUpdate();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(pstmt1,conn);</span><br><span class="line">            JDBCUtils.close(pstmt2,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><blockquote><p>解决资源浪费</p><p>池子   容器   存放数据库连接的容器</p><ol><li><p>概念：其实就是一个容器(集合)，存放数据库连接的容器。</p><pre><code> 当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</code></pre></li><li><p>好处：</p><ol><li>节约资源</li><li>用户访问高效</li></ol></li><li><p>实现：</p><ol><li><p>标准接口：DataSource   javax.sql包下的</p><ol><li>方法：<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li></ol></li><li><p>一般我们不去实现它，有数据库厂商来实现</p><ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol></li></ol></blockquote><h4 id="C3p0"><a href="#C3p0" class="headerlink" title="C3p0"></a>C3p0</h4><blockquote><p>C3P0：数据库连接池技术</p><ul><li>步骤：<ol><li>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，<ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li>定义配置文件：<ul><li>名称： c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li>创建核心对象 数据库连接池对象 ComboPooledDataSource</li><li>获取连接： getConnection</li></ol></li><li>代码：<br>   //1.创建数据库连接池对象<br>   DataSource ds  = new ComboPooledDataSource();<br>   //2. 获取连接对象<br>   Connection conn = ds.getConnection();</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * c3p0演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       <span class="comment">/* //1. 获取DataSource，使用默认配置</span></span><br><span class="line"><span class="comment">        DataSource ds  = new ComboPooledDataSource();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //2.获取连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int i = 1; i &lt;= 11 ; i++) &#123;</span></span><br><span class="line"><span class="comment">            Connection conn = ds.getConnection();</span></span><br><span class="line"><span class="comment">            System.out.println(i+&quot;:&quot;+conn);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            if(i == 5)&#123;</span></span><br><span class="line"><span class="comment">                conn.close();//归还连接到连接池中</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//testNamedConfig();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testNamedConfig</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.1 获取DataSource，使用指定名称配置</span></span><br><span class="line">        DataSource ds  = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;otherc3p0&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            Connection conn = ds.getConnection();</span><br><span class="line">            System.out.println(i+<span class="string">&quot;:&quot;</span>+conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Druid数据库连接池实现"><a href="#Druid数据库连接池实现" class="headerlink" title="Druid数据库连接池实现"></a>Druid数据库连接池实现</h4><blockquote><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p><ol><li>步骤：<ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol></li></ol><ul><li>代码：<br>   //3.加载配置文件<br>   Properties pro = new Properties();<br>   InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(“druid.properties”);<br>   pro.load(is);<br>   //4.获取连接池对象<br>   DataSource ds = DruidDataSourceFactory.createDataSource(pro);<br>   //5.获取连接<br>   Connection conn = ds.getConnection();</li></ul><ol start="2"><li>定义工具类<ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li></ol></blockquote><h5 id="数据库连接池工具类"><a href="#数据库连接池工具类" class="headerlink" title="数据库连接池工具类"></a>数据库连接池工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.定义成员变量 DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">       <span class="comment">/* if(stmt != null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                stmt.close();</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(conn != null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                conn.close();//归还连接</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">       close(<span class="keyword">null</span>,stmt,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs , Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><blockquote><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p><p>步骤：</p><ol><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li>queryForList():查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li>query():查询结果，将结果封装为JavaBean对象<ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JdbcTemplate入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.创建JDBCTemplate对象</span></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">        <span class="comment">//3.调用方法</span></span><br><span class="line">        String sql = <span class="string">&quot;update account set balance = 5000 where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">3</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Junit单元测试，可以让方法独立执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取JDBCTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 修改1号数据的 salary 为 10000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 定义sql</span></span><br><span class="line">        String sql = <span class="string">&quot;update emp set salary = 10000 where id = 1001&quot;</span>;</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 添加一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>, <span class="string">&quot;郭靖&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.删除刚才添加的记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from emp where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.查询id为1001的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp where id = ? or id = ?&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Emp <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String ename = rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> job_id = rs.getInt(<span class="string">&quot;job_id&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> mgr = rs.getInt(<span class="string">&quot;mgr&quot;</span>);</span><br><span class="line">                Date joindate = rs.getDate(<span class="string">&quot;joindate&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> salary = rs.getDouble(<span class="string">&quot;salary&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> bonus = rs.getDouble(<span class="string">&quot;bonus&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> dept_id = rs.getInt(<span class="string">&quot;dept_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setEname(ename);</span><br><span class="line">                emp.setJob_id(job_id);</span><br><span class="line">                emp.setMgr(mgr);</span><br><span class="line">                emp.setJoindate(joindate);</span><br><span class="line">                emp.setSalary(salary);</span><br><span class="line">                emp.setBonus(bonus);</span><br><span class="line">                emp.setDept_id(dept_id);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7. 查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select count(id) from emp&quot;</span>;</span><br><span class="line">        Long total = template.queryForObject(sql, Long.class);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><blockquote><p>可拓展标记语言</p><p>标签自定义</p><p>功能：</p><ol><li>存储数据</li><li>作为配置文件</li><li>在网络中传输</li><li>跨平台</li></ol></blockquote><blockquote><p>概念：Extensible Markup Language 可扩展标记语言</p><ul><li><p>可扩展：标签都是自定义的。 <user>  <student></p></li><li><p>功能</p><ul><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li><p>xml与html的区别</p><ol><li>xml标签都是自定义的，html标签是预定义。</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据</li></ol></li><li><p>w3c:万维网联盟</p></li></ul><ol><li>语法：</li></ol><ul><li><p>基本语法：</p><ol><li>xml文档的后缀名 .xml</li><li>xml第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号(单双都可)引起来</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol></li><li><p>快速入门：</p>  <?xml version='1.0' ?>  <users>      <user id='1'>          <name>zhangsan</name>          <age>23</age>          <gender>male</gender>          <br/>      </user>                            <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>  </users></li><li><p>组成部分：</p><ol><li><p>文档声明</p><ol><li>格式：<?xml 属性列表 ?></li><li>属性列表：<ul><li>version：版本号，必须的属性</li><li>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</li><li>standalone：是否独立<ul><li>取值：<ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul></li></ul></li></ol></li><li><p>指令(了解)：结合css的</p><ul><li><?xml-stylesheet type="text/css" href="a.css" ?></li></ul></li><li><p>标签：标签名称自定义的</p><ul><li>规则：<ul><li>名称可以包含字母、数字以及其他的字符 </li><li>名称不能以数字或者标点符号开始 </li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始 </li><li>名称不能包含空格 </li></ul></li></ul></li><li><p>属性：</p><p> id属性值唯一</p></li><li><p>文本：</p></li></ol><ul><li><p>CDATA区：在该区域中的数据会被原样展示</p><ul><li>格式：  <![CDATA[ 数据 ]]></li></ul></li><li><p>约束：规定xml文档的书写规则</p><ul><li><p>作为框架的使用者(程序员)：</p><ol><li>能够在xml中引入约束文档</li><li>能够简单的读懂约束文档</li></ol></li><li><p>分类：</p><ol><li><p>DTD:一种简单的约束技术</p></li><li><p>Schema:一种复杂的约束技术</p><p>DTD：</p></li></ol><ul><li><p>引入dtd文档到xml文档中</p><pre><code>* 内部dtd：将约束规则定义在xml文档中* 外部dtd：将约束的规则定义在外部的dtd文件中    * 本地：&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;    * 网络：&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></pre><p>Schema:</p><pre><code>* 引入：        1.填写xml文档的根元素        2.引入xsi前缀.  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;        3.引入xsd文件命名空间.  xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;        4.为每一个xsd约束声明一个前缀,作为标识  xmlns=&quot;http://www.itcast.cn/xml&quot; </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://www.itcast.cn/xml&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.itcast.cn/xml  student.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></blockquote><blockquote><ul><li>xml常见的解析器：<ol><li>JAXP：sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li>PULL：Android操作系统内置的解析器，sax方式的。</li></ol><ul><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。<ul><li>快速入门：<ul><li>步骤：<ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li></ul></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">     String path = JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line">     <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">     Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">     <span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">     Elements elements = document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">     System.out.println(elements.size());</span><br><span class="line">     <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">     Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">     <span class="comment">//3.2获取数据</span></span><br><span class="line">     String name = element.text();</span><br><span class="line">     System.out.println(name);</span><br></pre></td></tr></table></figure><ul><li>对象的使用：<pre><code>  1. Jsoup：工具类，可以解析html或xml文档，返回Document      * parse：解析html或xml文档，返回Document          * parse(File in, String charsetName)：解析xml或html文件的。          * parse(String html)：解析xml或html字符串          * parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象  可以用来爬虫  2. Document：文档对象。代表内存中的dom树      * 获取Element对象          * getElementById(String id)：根据id属性值获取唯一的element对象          * getElementsByTag(String tagName)：根据标签名称获取元素对象集合          * getElementsByAttribute(String key)：根据属性名称获取元素对象集合          * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合  3. Elements：元素Element对象的集合。可以当做 ArrayList&lt;Element&gt;来使用  4. Element：元素对象      1. 获取子元素对象          * getElementById(String id)：根据id属性值获取唯一的element对象          * getElementsByTag(String tagName)：根据标签名称获取元素对象集合          * getElementsByAttribute(String key)：根据属性名称获取元素对象集合          * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合  2. 获取属性值      * String attr(String key)：根据属性名称获取属性值  3. 获取文本内容      * String text():获取文本内容      * String html():获取标签体的所有内容(包括字标签的字符串内容)                                                                                                                    Node：节点对象  * 是Document和Element的父类</code></pre></li></ul></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* 快捷查询方式：</span><br><span class="line"><span class="number">1.</span> selector:选择器</span><br><span class="line">* 使用的方法：<span class="function">Elements<span class="title">select</span><span class="params">(String cssQuery)</span></span></span><br><span class="line"><span class="function">* 语法：参考Selector类中定义的语法</span></span><br><span class="line"><span class="function">2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</span></span><br><span class="line"><span class="function">* 使用Jsoup的Xpath需要额外导入jar包。</span></span><br><span class="line"><span class="function">* 查询w3cshool参考手册，使用xpath的语法完成查询</span></span><br><span class="line"><span class="function">* 代码：</span></span><br><span class="line"><span class="function"><span class="comment">//1.获取student.xml的path</span></span></span><br><span class="line"><span class="function">        String path </span>= JsoupDemo6.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.结合xpath语法查询</span></span><br><span class="line">        <span class="comment">//4.1查询所有student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">&quot;//student&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2查询所有student标签下的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">&quot;//student/name&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3查询student标签下带有id属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">&quot;//student/name[@id]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line"></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">&quot;//student/name[@id=&#x27;itcast&#x27;]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote><ul><li>常见的java相关的web服务器软件：<ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">* JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</span><br><span class="line"></span><br><span class="line">* Tomcat：web服务器软件</span><br><span class="line">1. 下载：http:&#x2F;&#x2F;tomcat.apache.org&#x2F;</span><br><span class="line">2. 安装：解压压缩包即可。</span><br><span class="line">* 注意：安装目录建议不要有中文和空格</span><br><span class="line">3. 卸载：删除目录就行了</span><br><span class="line">4. 启动：</span><br><span class="line">* bin&#x2F;startup.bat ,双击运行该文件即可</span><br><span class="line">* 访问：浏览器输入：http:&#x2F;&#x2F;localhost:8080 回车访问自己</span><br><span class="line">  http:&#x2F;&#x2F;别人的ip:8080 访问别人</span><br><span class="line"></span><br><span class="line">* 可能遇到的问题：</span><br><span class="line">1. 黑窗口一闪而过：</span><br><span class="line">* 原因： 没有正确配置JAVA_HOME环境变量</span><br><span class="line">* 解决方案：正确配置JAVA_HOME环境变量</span><br><span class="line"></span><br><span class="line">2. 启动报错：</span><br><span class="line">1. 暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</span><br><span class="line">* netstat -ano</span><br><span class="line">2. 温柔：修改自身的端口号</span><br><span class="line">* conf&#x2F;server.xml</span><br><span class="line">* &lt;Connector port&#x3D;&quot;8888&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">               connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">               redirectPort&#x3D;&quot;8445&quot; &#x2F;&gt;</span><br><span class="line">* 一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</span><br><span class="line">* 好处：在访问时，就不用输入端口号</span><br><span class="line">5. 关闭：</span><br><span class="line">1. 正常关闭：</span><br><span class="line">* bin&#x2F;shutdown.bat</span><br><span class="line">* ctrl+c</span><br><span class="line">2. 强制关闭：</span><br><span class="line">* 点击启动窗口的×</span><br><span class="line">6. 配置:</span><br><span class="line">* 部署项目的方式：</span><br><span class="line">1. 直接将项目放到webapps目录下即可。</span><br><span class="line">* &#x2F;hello：项目的访问路径--&gt;虚拟目录</span><br><span class="line">* 简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</span><br><span class="line">* war包会自动解压缩</span><br><span class="line"></span><br><span class="line">2. 配置conf&#x2F;server.xml文件</span><br><span class="line">在&lt;Host&gt;标签体中配置</span><br><span class="line">&lt;Context docBase&#x3D;&quot;D:\hello&quot; path&#x3D;&quot;&#x2F;hehe&quot; &#x2F;&gt;</span><br><span class="line">* docBase:项目存放的路径</span><br><span class="line">* path：虚拟目录</span><br><span class="line"></span><br><span class="line">3. 在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写</span><br><span class="line">&lt;Context docBase&#x3D;&quot;D:\hello&quot; &#x2F;&gt;</span><br><span class="line">* 虚拟目录：xml文件的名称</span><br><span class="line"></span><br><span class="line">* 静态项目和动态项目：</span><br><span class="line">* 目录结构</span><br><span class="line">* java动态项目的目录结构：</span><br><span class="line">-- 项目的根目录</span><br><span class="line">-- WEB-INF目录：</span><br><span class="line">-- web.xml：web项目的核心配置文件</span><br><span class="line">-- classes目录：放置字节码文件的目录</span><br><span class="line">-- lib目录：放置依赖的jar包</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><blockquote><p>server  applet</p><p>Servlet 就是一个接口，定义了浏览器访问到的规则</p><p>快速入门：</p><ol><li><p>创建JavaEE项目</p></li><li><p>定义一个类，实现Servlet接口</p><ul><li>public class ServletDemo1 implements Servlet</li></ul></li><li><p>实现接口中的抽象方法</p></li><li><p>配置Servlet</p><p>  在web.xml中配置：</p> <!--配置Servlet --> <servlet>     <servlet-name>demo1</servlet-name>     <servlet-class>cn.itcast.web.servlet.ServletDemo1</servlet-class> </servlet>          <servlet-mapping>     <servlet-name>demo1</servlet-name>     <url-pattern>/demo1</url-pattern> </servlet-mapping></li></ol><ul><li><p>执行原理：</p><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容。</li><li>如果有，则在找到对应的<servlet-class>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li><li><p>Servlet中的生命周期方法：</p><ol><li>被创建：执行init方法，只执行一次</li></ol><ul><li><p>Servlet什么时候被创建？</p><ul><li><p>默认情况下，第一次被访问时，Servlet被创建</p></li><li><p>可以配置执行Servlet的创建时机。</p><ul><li><p>在<servlet>标签下配置</p><ol><li><p>第一次被访问时，创建</p><pre><code>   * &lt;load-on-startup&gt;的值为负数</code></pre><p>   在服务器启动时，创建</p><ul><li><load-on-startup>的值为0或正整数</li></ul></li></ol></li></ul></li></ul></li></ul></li></ul><pre><code>    * Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的        * 多个用户同时访问时，可能存在线程安全问题。        * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值                2. 提供服务：执行service方法，执行多次    * 每次访问Servlet时，Service方法都会被调用一次。3. 被销毁：执行destroy方法，只执行一次    * Servlet被销毁时执行。服务器关闭时，Servlet被销毁    * 只有服务器正常关闭时，才会执行destroy方法。    * destroy方法在Servlet被销毁之前执行，一般用于释放资源<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">* Servlet3<span class="number">.0</span>：</span><br><span class="line">* 好处：</span><br><span class="line">* 支持注解配置。可以不需要web.xml了。</span><br><span class="line">                </span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1.</span> 创建JavaEE项目，选择Servlet的版本<span class="number">3.0</span>以上，可以不创建web.xml</span><br><span class="line"><span class="number">2.</span> 定义一个类，实现Servlet接口</span><br><span class="line"><span class="number">3.</span> 复写方法</span><br><span class="line"><span class="number">4.</span> 在类上使用<span class="meta">@WebServlet</span>注解，进行配置</span><br><span class="line">* <span class="meta">@WebServlet(&quot;资源路径&quot;)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line">                </span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line">                </span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line">                </span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">                </span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">                </span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">                </span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">                </span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">idead与tomcat的相关配置</span><br><span class="line">1. IDEA会为每一个tomcat部署的项目单独建立一份配置文件</span><br><span class="line">* 查看控制台的log：Using CATALINA_BASE:   &quot;C:\Users\fqy\.IntelliJIdea2018.1\system\tomcat\_itcast&quot;</span><br><span class="line">                </span><br><span class="line">2. 工作空间项目    和     tomcat部署的web项目</span><br><span class="line">* tomcat真正访问的是“tomcat部署的web项目”，&quot;tomcat部署的web项目&quot;对应着&quot;工作空间项目&quot; 的web目录下的所有资源</span><br><span class="line">* WEB-INF目录下的资源不能被浏览器直接访问。</span><br><span class="line">3. 断点调试：使用&quot;小虫子&quot;启动 dubug 启动</span><br></pre></td></tr></table></figure></code></pre></blockquote><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><pre><code>1. request对象和response对象的原理    1. request和response对象是由服务器创建的。我们来使用它们    2. request对象是来获取请求消息，response对象是来设置响应消息2. request对象继承体系结构：        ServletRequest        --    接口        |    继承    HttpServletRequest    -- 接口        |    实现    org.apache.catalina.connector.RequestFacade 类(tomcat)3. request功能：    1. 获取请求消息数据        1. 获取请求行数据            * GET /day14/demo1?name=zhangsan HTTP/1.1            * 方法：                1. 获取请求方式 ：GET                    * String getMethod()                  2. (*)获取虚拟目录：/day14                    * String getContextPath()                3. 获取Servlet路径: /demo1                    * String getServletPath()                4. 获取get方式请求参数：name=zhangsan                    * String getQueryString()                5. (*)获取请求URI：/day14/demo1                    * String getRequestURI():        /day14/demo1                    * StringBuffer getRequestURL()  :http://localhost/day14/demo1                    * URL:统一资源定位符 ： http://localhost/day14/demo1    中华人民共和国                    * URI：统一资源标识符 : /day14/demo1                    共和国                                6. 获取协议及版本：HTTP/1.1                    * String getProtocol()                7. 获取客户机的IP地址：                    * String getRemoteAddr()                        2. 获取请求头数据            * 方法：                * (*)String getHeader(String name):通过请求头的名称获取请求头的值                * Enumeration&lt;String&gt; getHeaderNames():获取所有的请求头名称                    3. 获取请求体数据:            * 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数            * 步骤：                1. 获取流对象                    *  BufferedReader getReader()：获取字符输入流，只能操作字符数据                    *  ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据                        * 在文件上传知识点后讲解                2. 再从流对象中拿数据</code></pre><p>​                </p><pre><code>    2. 其他功能：        1. 获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数            1. String getParameter(String name):根据参数名称获取参数值    username=zs&amp;password=123            2. String[] getParameterValues(String name):根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game            3. Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称            4. Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合            * 中文乱码问题：                * get方式：tomcat 8 已经将get方式乱码问题解决了                * post方式：会乱码                    * 解决：在获取参数前，设置request的编码request.setCharacterEncoding(&quot;utf-8&quot;)        2. 请求转发：一种在服务器内部的资源跳转方式            1. 步骤：                1. 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)                2. 使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response)             2. 特点：                1. 浏览器地址栏路径不发生变化                2. 只能转发到当前服务器内部资源中。                3. 转发是一次请求(f12发现只有一次请求，多个资源中使用同一个请求)        3. 共享数据：            * 域对象：一个有作用范围的对象，可以在范围内共享数据            * request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据 记住是请求转发            * 方法：                1. void setAttribute(String name,Object obj):存储数据                2. Object getAttitude(String name):通过键获取值                3. void removeAttribute(String name):通过键移除键值对        4. 获取ServletContext：            * ServletContext getServletContext()</code></pre><blockquote><p>BeanUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; map=req.getParamenterMap();</span><br><span class="line">User loginUser=<span class="keyword">new</span> User();</span><br><span class="line">BeanUtils.populate(loginUsers,map)<span class="comment">//可以将post里的所有参数自动放进实体类里</span></span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></blockquote><h4 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h4><pre><code>* 用户登录案例需求：    1.编写login.html登录页面        username &amp; password 两个输入框    2.使用Druid数据库连接池技术,操作mysql，day14数据库中user表    3.使用JdbcTemplate技术封装JDBC    4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您    5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* 分析</span><br><span class="line"></span><br><span class="line">* 开发步骤</span><br><span class="line">1. 创建项目，导入html页面，配置文件，jar包</span><br><span class="line">2. 创建数据库环境</span><br><span class="line">CREATE DATABASE day14;</span><br><span class="line">USE day14;</span><br><span class="line">CREATE TABLE USER(</span><br><span class="line"></span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(32) UNIQUE NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(32) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">3. 创建包cn.itcast.domain,创建类User</span><br><span class="line">package cn.itcast.domain;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 用户的实体类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    private int id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br></pre></td></tr></table></figure><pre><code>            public int getId() &#123;                return id;            &#125;                    public void setId(int id) &#123;                this.id = id;            &#125;                    public String getUsername() &#123;                return username;            &#125;                    public void setUsername(String username) &#123;                this.username = username;            &#125;                    public String getPassword() &#123;                return password;            &#125;                    public void setPassword(String password) &#123;                this.password = password;            &#125;                    @Override            public String toString() &#123;                return &quot;User&#123;&quot; +                        &quot;id=&quot; + id +                        &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +                        &quot;, password=&#39;&quot; + password + &#39;\&#39;&#39; +                        &#39;&#125;&#39;;            &#125;        &#125;    4. 创建包cn.itcast.util,编写工具类JDBCUtils        package cn.itcast.util;        import com.alibaba.druid.pool.DruidDataSourceFactory;                import javax.sql.DataSource;        import javax.xml.crypto.Data;        import java.io.IOException;        import java.io.InputStream;        import java.sql.Connection;        import java.sql.SQLException;        import java.util.Properties;                /**         * JDBC工具类 使用Durid连接池         */        public class JDBCUtils &#123;                    private static DataSource ds ;                    static &#123;                        try &#123;                    //1.加载配置文件                    Properties pro = new Properties();                    //使用ClassLoader加载配置文件，获取字节输入流                    InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);                    pro.load(is);                            //2.初始化连接池对象                    ds = DruidDataSourceFactory.createDataSource(pro);                        &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125; catch (Exception e) &#123;                    e.printStackTrace();                &#125;            &#125;                    /**             * 获取连接池对象             */            public static DataSource getDataSource()&#123;                return ds;            &#125;</code></pre><p>​            </p><pre><code>            /**             * 获取连接Connection对象             */            public static Connection getConnection() throws SQLException &#123;                return  ds.getConnection();            &#125;        &#125;    5. 创建包cn.itcast.dao,创建类UserDao,提供login方法                package cn.itcast.dao;        import cn.itcast.domain.User;        import cn.itcast.util.JDBCUtils;        import org.springframework.dao.DataAccessException;        import org.springframework.jdbc.core.BeanPropertyRowMapper;        import org.springframework.jdbc.core.JdbcTemplate;                /**         * 操作数据库中User表的类         */        public class UserDao &#123;                    //声明JDBCTemplate对象共用            private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());                    /**             * 登录方法             * @param loginUser 只有用户名和密码             * @return user包含用户全部数据,没有查询到，返回null             */            public User login(User loginUser)&#123;                try &#123;                    //1.编写sql                    String sql = &quot;select * from user where username = ? and password = ?&quot;;                    //2.调用query方法                    User user = template.queryForObject(sql,                            new BeanPropertyRowMapper&lt;User&gt;(User.class),                            loginUser.getUsername(), loginUser.getPassword());</code></pre><p>​            </p><pre><code>                    return user;                &#125; catch (DataAccessException e) &#123;                    e.printStackTrace();//记录日志                    return null;                &#125;            &#125;        &#125;        6. 编写cn.itcast.web.servlet.LoginServlet类        package cn.itcast.web.servlet;        import cn.itcast.dao.UserDao;        import cn.itcast.domain.User;                import javax.servlet.ServletException;        import javax.servlet.annotation.WebServlet;        import javax.servlet.http.HttpServlet;        import javax.servlet.http.HttpServletRequest;        import javax.servlet.http.HttpServletResponse;        import java.io.IOException;        @WebServlet(&quot;/loginServlet&quot;)        public class LoginServlet extends HttpServlet </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取请求参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">//3.封装user对象</span></span><br><span class="line">        User loginUser = <span class="keyword">new</span> User();</span><br><span class="line">        loginUser.setUsername(username);</span><br><span class="line">        loginUser.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用UserDao的login方法</span></span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        User user = dao.login(loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断user</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/failServlet&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="comment">//存储数据</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            <span class="comment">//转发</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/successServlet&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 编写FailServlet和SuccessServlet类</span><br><span class="line"><span class="meta">@WebServlet(&quot;/successServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取request域中共享的user对象</span></span><br><span class="line">        User user = (User) request.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//给页面写一句话</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置编码</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;登录成功！&quot;</span>+user.getUsername()+<span class="string">&quot;,欢迎您&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br></pre></td></tr></table></figure><pre><code>        @WebServlet(&quot;/failServlet&quot;)        public class FailServlet extends HttpServlet &#123;            protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;                //给页面写一句话                        //设置编码                response.setContentType(&quot;text/html;charset=utf-8&quot;);                //输出                response.getWriter().write(&quot;登录失败，用户名或密码错误&quot;);                    &#125;                    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;                this.doPost(request,response);            &#125;        &#125;    8. login.html中form表单的action路径的写法        * 虚拟目录+Servlet的资源路径    9. BeanUtils工具类，简化数据封装        * 用于封装JavaBean的        1. JavaBean：标准的Java类            1. 要求：                1. 类必须被public修饰                2. 必须提供空参的构造器                3. 成员变量必须使用private修饰                4. 提供公共setter和getter方法            2. 功能：封装数据        2. 概念：            成员变量：            属性：setter和getter方法截取后的产物                例如：getUsername() --&gt; Username--&gt; username        3. 方法：            1. setProperty()            2. getProperty()            3. populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</code></pre><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>今日内容</p><pre><code>1. HTTP协议：响应消息2. Response对象3. ServletContext对象</code></pre><p> HTTP协议：</p><pre><code>1. 请求消息：客户端发送给服务器端的数据    * 数据格式：        1. 请求行        2. 请求头        3. 请求空行        4. 请求体2. 响应消息：服务器端发送给客户端的数据    * 数据格式：        1. 响应行            1. 组成：协议/版本 响应状态码 状态码描述            2. 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。                1. 状态码都是3位数字                 2. 分类：                    1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码                    2. 2xx：成功。代表：200                    3. 3xx：重定向。代表：302(重定向)，304(访问缓存)                    4. 4xx：客户端错误。                        * 代表：                            * 404（请求路径没有对应的资源）                             * 405：请求方式没有对应的doXxx方法                    5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</code></pre><p>​                    </p><pre><code>        2. 响应头：            1. 格式：头名称： 值            2. 常见的响应头：                1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式                2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据                    * 值：                        * in-line:默认值,在当前页面内打开                        * attachment;filename=xxx：以附件形式打开响应体。文件下载        3. 响应空行        4. 响应体:传输的数据     响应字符串格式        HTTP/1.1 200 OK        Content-Type: text/html;charset=UTF-8        Content-Length: 101        Date: Wed, 06 Jun 2018 07:08:42 GMT        &lt;html&gt;          &lt;head&gt;            &lt;title&gt;$Title$&lt;/title&gt;          &lt;/head&gt;          &lt;body&gt;          hello , response          &lt;/body&gt;        &lt;/html&gt;</code></pre><p>Response对象</p><pre><code>* 功能：设置响应消息    1. 设置响应行        1. 格式：HTTP/1.1 200 ok        2. 设置状态码：setStatus(int sc)     2. 设置响应头：setHeader(String name, String value)             3. 设置响应体：        * 使用步骤：            1. 获取输出流                * 字符输出流：PrintWriter getWriter()                * 字节输出流：ServletOutputStream getOutputStream()            2. 使用输出流，将数据输出到客户端浏览器* 案例：    1. 完成重定向        * 重定向：资源跳转的方式        * 代码实现：            //1. 设置状态码为302            response.setStatus(302);            //2.设置响应头location            response.setHeader(&quot;location&quot;,&quot;/day15/responseDemo2&quot;);            //简单的重定向方法            response.sendRedirect(&quot;/day15/responseDemo2&quot;);        * 重定向的特点:redirect            1. 地址栏发生变化            2. 重定向可以访问其他站点(服务器)的资源            3. 重定向是两次请求。不能使用request对象来共享数据        * 转发的特点：forward            1. 转发地址栏路径不变            2. 转发只能访问当前服务器下的资源            3. 转发是一次请求，可以使用request对象来共享数据                * forward 和  redirect 区别                    * 路径写法：            1. 路径分类                1. 相对路径：通过相对路径不可以确定唯一资源                    * 如：./index.html                    * 不以/开头，以.开头路径                    * 规则：找到当前资源和目标资源之间的相对位置关系                        * ./：当前目录                        * ../:后退一级目录                2. 绝对路径：通过绝对路径可以确定唯一资源                    * 如：http://localhost/day15/responseDemo2        /day15/responseDemo2                    * 以/开头的路径                    * 规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出                        * 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)                            * 建议虚拟目录动态获取：request.getContextPath()                            * &lt;a&gt; , &lt;form&gt; 重定向...                        * 给服务器使用：不需要加虚拟目录                            * 转发路径</code></pre><p>​<br>​                        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> 服务器输出字符数据到浏览器</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1.</span> 获取字符输出流</span><br><span class="line"><span class="number">2.</span> 输出数据</span><br><span class="line"></span><br><span class="line">* 注意：</span><br><span class="line">* 乱码问题：</span><br><span class="line"><span class="number">1.</span> PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-<span class="number">8859</span>-<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 设置该流的默认编码</span><br><span class="line"><span class="number">3.</span> 告诉浏览器响应体使用的编码</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单的形式，设置编码，是在获取流之前设置</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="number">3.</span> 服务器输出字节数据到浏览器</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1.</span> 获取字节输出流   response.getOutputStream()</span><br><span class="line"><span class="number">2.</span> 输出数据   .write(<span class="string">&quot;hello&quot;</span>,getBytes())</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 验证码</span><br><span class="line"><span class="number">1.</span> 本质：图片</span><br><span class="line"><span class="number">2.</span> 目的：防止恶意表单注册</span><br></pre></td></tr></table></figure><p>ServletContext对象：</p><pre><code>1. 概念：代表整个web应用，可以和程序的容器(服务器)来通信2. 获取：    1. 通过request对象获取        request.getServletContext();    2. 通过HttpServlet获取        this.getServletContext();3. 功能：    1. 获取MIME类型：        * MIME类型:在互联网通信过程中定义的一种文件数据类型            * 格式： 大类型/小类型   text/html        image/jpeg        * 获取：String getMimeType(String file)      2. 域对象：共享数据        1. setAttribute(String name,Object value)        2. getAttribute(String name)        3. removeAttribute(String name)        * ServletContext对象范围：所有用户所有请求的数据  甚至换一个浏览器打开也能访问，用它我们需要谨慎，作用时间长，范围大，数据会一直驻留在服务器里    3. 获取文件的真实(服务器)路径        1. 方法：String getRealPath(String path)               String b = context.getRealPath(&quot;/b.txt&quot;);//web目录下资源访问             System.out.println(b);                String c = context.getRealPath(&quot;/WEB-INF/c.txt&quot;);//WEB-INF目录下的资源访问            System.out.println(c);                String a = context.getRealPath(&quot;/WEB-INF/classes/a.txt&quot;);//src目录下的资源访问            src下的文件会加载到WEB-INF下的classes文件夹中            System.out.println(a);</code></pre><p>案例：</p><pre><code>* 文件下载需求：    1. 页面显示超链接    2. 点击超链接后弹出下载提示框    3. 完成图片文件下载* 分析：    1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求    2. 任何资源都必须弹出下载提示框    3. 使用响应头设置资源的打开方式：        * content-disposition:attachment;filename=xxx* 步骤：    1. 定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename    2. 定义Servlet        1. 获取文件名称        2. 使用字节输入流加载文件进内存        3. 指定response的响应头： content-disposition:attachment;filename=xxx        4. 将数据写出到response输出流* 问题：    * 中文文件问题        * 解决思路：            1. 获取客户端使用的浏览器版本信息            2. 根据不同的版本信息，设置filename的编码方式不同</code></pre><h4 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/checkCodeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一对象，在内存中图片(验证码图片对象)</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();<span class="comment">//画笔对象</span></span><br><span class="line">        g.setColor(Color.PINK);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2画边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width - <span class="number">1</span>,height - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">&quot;&quot;</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片输出到页面展示</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>,response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="案例：文件下载"><a href="#案例：文件下载" class="headerlink" title="案例：文件下载"></a>案例：文件下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.web.utils.DownLoadUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/downloadServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求参数，文件名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">&quot;/img/&quot;</span> + filename);</span><br><span class="line">        <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>,mimeType);</span><br><span class="line">        <span class="comment">//3.2设置响应头打开方式:content-disposition</span></span><br><span class="line">        <span class="comment">//解决中文文件名问题</span></span><br><span class="line">        <span class="comment">//1.获取user-agent请求头、</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Web&quot;&gt;&lt;a href=&quot;#Java-Web&quot; class=&quot;headerlink&quot; title=&quot;Java Web&quot;&gt;&lt;/a&gt;Java Web&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;后期学习路径&lt;/p&gt;
&lt;p&gt;ssm框架  简化web开发的经典框架</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="java web" scheme="https://a2914475618.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>windows Dos批处理脚本</title>
    <link href="https://a2914475618.github.io/2021/09/13/windows-Dos%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>https://a2914475618.github.io/2021/09/13/windows-Dos%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-09-13T05:34:22.000Z</published>
    <updated>2021-09-22T13:29:02.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dos批处理脚本学习"><a href="#Dos批处理脚本学习" class="headerlink" title="Dos批处理脚本学习"></a>Dos批处理脚本学习</h1><h2 id="入门概述"><a href="#入门概述" class="headerlink" title="入门概述"></a>入门概述</h2><blockquote><p>batch file 批处理文件使用cmd.exe执行</p><p>脚本以bat为后缀</p><p>使用一系列内置命令进行自动化操作</p><p>例如： 匹配规则删除文件    新建文件、日志等   甚至可以创建计算机病毒 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;默认关闭显示的盘符信息</span><br><span class="line">@echo off</span><br><span class="line">&#x2F;&#x2F;输出内容</span><br><span class="line">echo hello world</span><br><span class="line">&#x2F;&#x2F;暂停 否则看不到控制台</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">内置命令</span><br><span class="line">&#x2F;&#x2F;查看当前网络的配置信息</span><br><span class="line">ipconfig</span><br><span class="line">&#x2F;&#x2F;清屏</span><br><span class="line">cls</span><br><span class="line">&#x2F;&#x2F;查看当前目录文件</span><br><span class="line">dir</span><br><span class="line">&#x2F;&#x2F;查看文件内容</span><br><span class="line">type</span><br><span class="line">type a.txt</span><br><span class="line">&#x2F;&#x2F;常用内置工具命令</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;lpl_lpl_lpl&#x2F;article&#x2F;details&#x2F;87775506</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;klchang&#x2F;p&#x2F;4771101.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部命令</span><br><span class="line">&#x2F;&#x2F;例如python  java等相关命令  mongo</span><br></pre></td></tr></table></figure><h2 id="运算操作"><a href="#运算操作" class="headerlink" title="运算操作"></a>运算操作</h2><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令模式  set &#x2F;a 1+2</span><br><span class="line">&#x2F;&#x2F;执行1+2  &#x2F;a代表算术运算</span><br><span class="line">文本模式</span><br><span class="line">@echo off</span><br><span class="line">set &#x2F;a var&#x3D;1+2</span><br><span class="line">echo %var%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="重定向运算"><a href="#重定向运算" class="headerlink" title="重定向运算"></a>重定向运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 代表将结果存储的位置 会覆盖内容</span><br><span class="line">&gt;&gt; 不会覆盖内容  追加</span><br><span class="line">echo &quot;hellow&quot; &gt; a.txt 会创建一个a.txt同时将内容写入</span><br><span class="line">用type 查看内容</span><br><span class="line"></span><br><span class="line">&lt;  右边内容覆盖调左边的内容</span><br><span class="line">&lt;&lt; 右边内容添加到左边的内容后</span><br></pre></td></tr></table></figure><h3 id="多命令运算"><a href="#多命令运算" class="headerlink" title="多命令运算"></a>多命令运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;具有短路  第一个命令执行错误则第二个命令也不会执行</span><br><span class="line">&amp;&amp;   eg：aaaa &amp;&amp; ipconfig</span><br><span class="line">&#x2F;&#x2F;或  第一个执行则第二个也不会执行 短路</span><br><span class="line">||</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="管道操作"><a href="#管道操作" class="headerlink" title="管道操作"></a>管道操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;  | 管道符号</span><br><span class="line">A | B  A的输出等于B的输入</span><br><span class="line">dir | find &quot;.txt&quot; </span><br><span class="line">&#x2F;&#x2F;dir的输出等于 find查找的输入</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;netstat -an  输出当前所有的网络连接</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;主命令 子命令 参数 操作 选项</span><br><span class="line">net user test test &#x2F; add  添加用户  拒绝访问</span><br><span class="line">&#x2F;?  &#x2F;help  获取详细的帮助信息</span><br></pre></td></tr></table></figure><h3 id="批处理文件参数传递"><a href="#批处理文件参数传递" class="headerlink" title="批处理文件参数传递"></a>批处理文件参数传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.bat文件接受参数使用%num</span><br><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">echo %admin</span><br><span class="line">echo %password</span><br><span class="line">net user %admin %password &#x2F;add</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">执行</span><br><span class="line">1.bat zhangsan 123456</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过rem 命令添加注释</span><br></pre></td></tr></table></figure><h3 id="炫酷命令提示符"><a href="#炫酷命令提示符" class="headerlink" title="炫酷命令提示符"></a>炫酷命令提示符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">color 设置默认的控制台前景和背景颜色</span><br><span class="line">color &#x2F;? 查看帮助颜色的相关内容</span><br><span class="line">只能设置单次的颜色</span><br><span class="line">&#x2F;&#x2F;设置标题</span><br><span class="line">title 设置命令提示窗口的标题</span><br></pre></td></tr></table></figure><h3 id="时间相关命令"><a href="#时间相关命令" class="headerlink" title="时间相关命令"></a>时间相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date &#x2F;t  显示当前时间</span><br><span class="line">time &#x2F;t   显示详细时间 包括秒</span><br></pre></td></tr></table></figure><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start 启动一个窗口</span><br><span class="line">start 1.bat 启动这个批处理程序</span><br><span class="line">start &#x2F;b 不会新建一个窗口</span><br><span class="line">start &#x2F;? 查看相关的帮助信息</span><br></pre></td></tr></table></figure><h3 id="调用其他Bat文件"><a href="#调用其他Bat文件" class="headerlink" title="调用其他Bat文件"></a>调用其他Bat文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call 调用其他的批处理文件程序</span><br><span class="line">call 2.bat</span><br><span class="line">调用文件中不能进行参数的传递</span><br></pre></td></tr></table></figure><h3 id="任务列表查看命令"><a href="#任务列表查看命令" class="headerlink" title="任务列表查看命令"></a>任务列表查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasklist 查看本地或者远程上运行的进程列表</span><br><span class="line">tasklist &#x2F;fi &quot;pie eq 12352&quot;  筛选出Pid为12352的</span><br><span class="line">其他内容为 查看  tasklist &#x2F;?</span><br></pre></td></tr></table></figure><h3 id="任务关闭命令"><a href="#任务关闭命令" class="headerlink" title="任务关闭命令"></a>任务关闭命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">taskkill 使用该工具按照进程id 或映像名称终止任务</span><br><span class="line">taskkill &#x2F;? 查看帮助</span><br></pre></td></tr></table></figure><h3 id="文件夹结构查看命令"><a href="#文件夹结构查看命令" class="headerlink" title="文件夹结构查看命令"></a>文件夹结构查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tree  查看文件夹的结构</span><br><span class="line">tree &#x2F;a</span><br><span class="line">tree &#x2F;f 显示子文件</span><br><span class="line">tree 也可以在后面跟上path 指定目录</span><br></pre></td></tr></table></figure><h3 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br><span class="line">shutdown &#x2F;?</span><br><span class="line">shutdown &#x2F;i 打开可视化界面 执行远程主机的关机操作</span><br><span class="line">shutdown &#x2F;p 关闭本地计算机</span><br></pre></td></tr></table></figure><h3 id="计划任务命令"><a href="#计划任务命令" class="headerlink" title="计划任务命令"></a>计划任务命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">at 22：00 &quot;notopad.exe&quot;</span><br><span class="line">通过at指定时间</span><br><span class="line">at 查看有哪些计划任务</span><br><span class="line">at 编号 &#x2F;delete  删除计划任务</span><br></pre></td></tr></table></figure><h3 id="批处理环境变量"><a href="#批处理环境变量" class="headerlink" title="批处理环境变量"></a>批处理环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set</span><br><span class="line">通过set可以获取系统中的一下环境变量</span><br><span class="line">echo %OS%</span><br></pre></td></tr></table></figure><h2 id="文件夹或文件相关命令"><a href="#文件夹或文件相关命令" class="headerlink" title="文件夹或文件相关命令"></a>文件夹或文件相关命令</h2><h3 id="目录浏览"><a href="#目录浏览" class="headerlink" title="目录浏览"></a>目录浏览</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br><span class="line">查看当前目录</span><br><span class="line">dir &#x2F;A 查看所有的文件 包括隐藏文件</span><br><span class="line">dir &#x2F;？查看帮助信息</span><br></pre></td></tr></table></figure><h3 id="目录新建与删除"><a href="#目录新建与删除" class="headerlink" title="目录新建与删除"></a>目录新建与删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">mkdir &#x2F;a&#x2F;b&#x2F;c创建多级目录</span><br><span class="line">简写 md</span><br><span class="line"></span><br><span class="line">rmdir删除目录</span><br><span class="line">简写rd</span><br><span class="line">rmdir  &#x2F;s 删除一个目录树</span><br><span class="line">&#x2F;q  安静模式  不进行提示</span><br><span class="line">redir  test</span><br></pre></td></tr></table></figure><h3 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd  </span><br><span class="line">.当前目录</span><br><span class="line">..上一级目录</span><br></pre></td></tr></table></figure><h3 id="目录重命名"><a href="#目录重命名" class="headerlink" title="目录重命名"></a>目录重命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ren 重命名</span><br><span class="line">rename</span><br><span class="line">ren test test1 重命名为test1</span><br><span class="line">ren path name1 name2</span><br><span class="line">如果为当前目录下  则不用夹path</span><br></pre></td></tr></table></figure><h3 id="目录复制"><a href="#目录复制" class="headerlink" title="目录复制"></a>目录复制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy</span><br><span class="line">copy test2 test1 将test2中的文件复制到test1中</span><br></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del</span><br><span class="line">del path  *.txt 删除该路径下所有的txt文件</span><br></pre></td></tr></table></figure><h3 id="文件移动"><a href="#文件移动" class="headerlink" title="文件移动"></a>文件移动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move</span><br><span class="line">移动文件并重命名文件和目录</span><br></pre></td></tr></table></figure><h2 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h2><h3 id="用户操作命令"><a href="#用户操作命令" class="headerlink" title="用户操作命令"></a>用户操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br><span class="line">&#x2F;&#x2F;创建并修改计算机上的用户账户</span><br><span class="line">net user &#x2F;add 新增</span><br><span class="line">net user &#x2F;delete 删除</span><br></pre></td></tr></table></figure><h3 id="用户组操作命令"><a href="#用户组操作命令" class="headerlink" title="用户组操作命令"></a>用户组操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net localgroup  admin指的是用户</span><br><span class="line">net localgruop user admin &#x2F;delete 删除</span><br><span class="line">net localgroup administrators admin  &#x2F;add 添加</span><br></pre></td></tr></table></figure><h3 id="网络联通检测命令"><a href="#网络联通检测命令" class="headerlink" title="网络联通检测命令"></a>网络联通检测命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ping</span><br><span class="line">ping www.baidu.com  </span><br><span class="line">ping 127.0.0.1  用来检测本地ip协议栈是否运行正常</span><br></pre></td></tr></table></figure><h3 id="网络连接命令"><a href="#网络连接命令" class="headerlink" title="网络连接命令"></a>网络连接命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 进行端口连接 和主机的测试</span><br></pre></td></tr></table></figure><h3 id="路由信息查看命令"><a href="#路由信息查看命令" class="headerlink" title="路由信息查看命令"></a>路由信息查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tracert</span><br><span class="line">tracert 192.168.0.1</span><br><span class="line">tracert www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="网络适配器命令"><a href="#网络适配器命令" class="headerlink" title="网络适配器命令"></a>网络适配器命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><h3 id="ARP信息命令"><a href="#ARP信息命令" class="headerlink" title="ARP信息命令"></a>ARP信息命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp</span><br><span class="line">显示和修改地址解析协议（arp）使用的ip到物理的地址转换表</span><br></pre></td></tr></table></figure><h2 id="条件判断结构"><a href="#条件判断结构" class="headerlink" title="条件判断结构"></a>条件判断结构</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set var&#x3D;hello</span><br><span class="line">if %var%&#x3D;&#x3D;hello (echo ok) else (echo no)</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;去掉请按任意键继续</span><br><span class="line">pause&gt;nul 输出到空设备</span><br></pre></td></tr></table></figure><h3 id="文件是否存在判断"><a href="#文件是否存在判断" class="headerlink" title="文件是否存在判断"></a>文件是否存在判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exist 判断是否存在</span><br><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">rem 用来判断当前文件是否存在</span><br><span class="line">if exist C:\\.... (echo ok) else (echo no)</span><br><span class="line"></span><br><span class="line">pause&gt;nul</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;eg:1  for &#x2F;d %%名称 in (路径&#x2F;*) do具体操作</span><br><span class="line">for &#x2F;d %%a in (*) do echo %%a</span><br><span class="line">&#x2F;&#x2F;eg:2</span><br><span class="line">for &#x2F;d %%a in (*) do if %%a&#x3D;&#x3D;test rd %%a</span><br><span class="line"></span><br><span class="line">for只会遍历文件夹或者目录  不会遍历文件</span><br></pre></td></tr></table></figure><h3 id="遍历目录和子目录下文件"><a href="#遍历目录和子目录下文件" class="headerlink" title="遍历目录和子目录下文件"></a>遍历目录和子目录下文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;r &quot;目录路径&quot; %%v in (匹配规则 例如*.py) </span><br><span class="line">do 执行操作 %%v</span><br></pre></td></tr></table></figure><h3 id="遍历数字"><a href="#遍历数字" class="headerlink" title="遍历数字"></a>遍历数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;L %%v in (start,step,end) do 具体操作</span><br></pre></td></tr></table></figure><h3 id="遍历文件内容"><a href="#遍历文件内容" class="headerlink" title="遍历文件内容"></a>遍历文件内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;f %%v in(文件名) do 具体操作</span><br></pre></td></tr></table></figure><h2 id="virus脚本分析"><a href="#virus脚本分析" class="headerlink" title="virus脚本分析"></a>virus脚本分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:loop</span><br><span class="line">md virus</span><br><span class="line">cd virus</span><br><span class="line">goto loop</span><br><span class="line">pause&gt;nul</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="交互操作"><a href="#交互操作" class="headerlink" title="交互操作"></a>交互操作</h2><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">goto跳转语句</span><br><span class="line"></span><br><span class="line">:first &#x2F;&#x2F;命名代码块</span><br><span class="line">set &#x2F;p opt&#x3D;</span><br><span class="line">if %opt%&#x3D;&#x3D;1 goto one</span><br><span class="line">if %opt%&#x3D;&#x3D;2 goto two</span><br><span class="line">echo Invalid option</span><br><span class="line">goto first</span><br><span class="line"></span><br><span class="line">:one</span><br><span class="line">echo your choice one</span><br><span class="line">pause&gt;nul</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:two</span><br><span class="line">echo your choice two</span><br><span class="line">pause&gt;nul</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="计划执行"><a href="#计划执行" class="headerlink" title="计划执行"></a>计划执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at 10:00 AM &#x2F;every:SU,M,TU,W,TH,F,SA &quot;C:\1.bat&quot;</span><br><span class="line">也可以设置定时关机</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dos批处理脚本学习&quot;&gt;&lt;a href=&quot;#Dos批处理脚本学习&quot; class=&quot;headerlink&quot; title=&quot;Dos批处理脚本学习&quot;&gt;&lt;/a&gt;Dos批处理脚本学习&lt;/h1&gt;&lt;h2 id=&quot;入门概述&quot;&gt;&lt;a href=&quot;#入门概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="bat批处理" scheme="https://a2914475618.github.io/tags/bat%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://a2914475618.github.io/2021/09/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://a2914475618.github.io/2021/09/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-09-12T11:32:53.000Z</published>
    <updated>2021-09-22T13:32:17.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出现1个</span><br><span class="line"></span><br><span class="line">d?代表d字符要出现一次或者0次,也就是d可有可无</span><br><span class="line">*匹配0个或者多个字符   ab*c 代表b可以没有也可以出现多次</span><br><span class="line">+匹配出现1次以上的字符  ab+c  代表的是b至少有一个的匹配</span><br><span class="line">&#123;&#125;可以指定出现的次数  &#123;2&#125; 字符出现2次  &#123;2，6&#125;字符出现2到6次  a&#123;2,&#125; 两次以上</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;出现多个</span><br><span class="line">()可以指定重复的字符串 (ab)+   ab至少出现1次以上</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;或运算符</span><br><span class="line">a(b|c)  代表匹配的   ab  或者  ac</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符类</span><br><span class="line">[] 代表匹配的字符只能取自他们</span><br><span class="line">[abc]+  代表匹配a 或  b  或  c</span><br><span class="line">[a-z]+  代表匹配所有的小写字母</span><br><span class="line">[a-zA-Z0-9] 代表匹配所有的字母和数字</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  ^ 字符</span><br><span class="line">代表匹配除了^以外的其他字符</span><br><span class="line">[^0-9]+ 代表所有的非数字字符(包括换行符)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;元字符</span><br><span class="line">\d  代表数字字符</span><br><span class="line">\D  代表非数字字符</span><br><span class="line">\w  代表单词字符 也就是所有的英文  数字  下划线</span><br><span class="line">\W  代表非单词字符</span><br><span class="line">\s  代表空白符  同时包含TAB  和换行符</span><br><span class="line">\S  代表非空白字符</span><br><span class="line">\b  字符的边界</span><br><span class="line">.  代表任意字符 但不包含换行符 </span><br><span class="line">^会匹配行首</span><br><span class="line">$匹配行尾</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;贪婪与懒惰匹配</span><br><span class="line">&lt;.+&gt; 会匹配整个span标签</span><br><span class="line"></span><br><span class="line">&lt;span&gt;111&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">需要改成 懒惰匹配</span><br><span class="line">&lt;.+?&gt;就只会匹配一个span标签</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="正则" scheme="https://a2914475618.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://a2914475618.github.io/2021/09/11/postredis/"/>
    <id>https://a2914475618.github.io/2021/09/11/postredis/</id>
    <published>2021-09-11T13:09:08.000Z</published>
    <updated>2021-09-22T13:30:44.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><blockquote><p>nosql  不仅仅是sql   </p><p>这种类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展 （属性字段太多，100000个字段）</p><p>数据之间无关系，容易扩展，在架构层面上带来了可扩展的能力</p><p>rdbs 关系数据库   acid  关系数据库的特性  bson josn的二进制流（mongodb）中</p><p>nosql  键值对存储  </p><p>高速缓存 强悍的是Memcache    数据类型丰富 redis</p><p> redis 的印象           1.kv 键值对      2.   cache缓存       3.persistence持久化</p><p>互联网3v  volume 海量   variety  多样   velocity  实时  </p><p>3高   高并发   高可扩    高性能</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;nosql  不仅仅是sql   &lt;/p&gt;
&lt;p&gt;这种类型的数据存储不需要固定的模式，无需</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="redis" scheme="https://a2914475618.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>node.js</title>
    <link href="https://a2914475618.github.io/2021/09/07/node-js/"/>
    <id>https://a2914475618.github.io/2021/09/07/node-js/</id>
    <published>2021-09-07T07:02:09.000Z</published>
    <updated>2021-09-11T13:07:04.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="①静态服务器创建"><a href="#①静态服务器创建" class="headerlink" title="①静态服务器创建"></a>①静态服务器创建</h2><ul><li>通过fs模块读取文件</li><li>通过http模块创建web服务</li><li>通过Path模块来获取后缀</li><li>通过url模块来解析参数</li></ul><h3 id="common-js"><a href="#common-js" class="headerlink" title="common.js"></a>common.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getMime = <span class="function"><span class="keyword">function</span> (<span class="params">extname</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (extname) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.html&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.css&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;text/css&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.js&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getFileMime = <span class="function"><span class="keyword">function</span> (<span class="params">extname</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./data/mime.json&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                reject(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> mimeObj=<span class="built_in">JSON</span>.parse(data.toString());</span><br><span class="line">            <span class="comment">// console.log(mimeObj[extname]);</span></span><br><span class="line">            resolve(mimeObj[extname]);</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">exports.getFileMime = function (extname) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    var data=fs.readFileSync(&#x27;./data/mime.json&#x27;); //同步方法</span></span><br><span class="line"><span class="comment">    let mimeObj=JSON.parse(data.toString());   </span></span><br><span class="line"><span class="comment">    return mimeObj[extname];    </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common=<span class="built_in">require</span>(<span class="string">&#x27;./module/common.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//1、获取地址</span></span><br><span class="line">    <span class="keyword">let</span> pathname=url.parse(req.url).pathname;    </span><br><span class="line">    pathname=pathname==<span class="string">&#x27;/&#x27;</span>?<span class="string">&#x27;/index.html&#x27;</span>:pathname;    </span><br><span class="line">    <span class="keyword">let</span> extname=path.extname(pathname);</span><br><span class="line"> <span class="comment">//2、通过fs模块读取文件</span></span><br><span class="line">    <span class="keyword">if</span>(pathname!=<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./static&#x27;</span>+pathname,<span class="keyword">async</span> (err,data)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;                </span><br><span class="line">                res.writeHead(<span class="number">404</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span>&#125;);  </span><br><span class="line">                res.end(<span class="string">&#x27;404这个页面不存在&#x27;</span>);               </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> mime=<span class="keyword">await</span> common.getFileMime(extname);</span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span>+mime+<span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span>&#125;);  </span><br><span class="line">            res.end(data);            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="②EJS模板引擎"><a href="#②EJS模板引擎" class="headerlink" title="②EJS模板引擎"></a>②EJS模板引擎</h2><p>通过npm i ejs 安装</p><p>动态渲染页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ejs.renderFile(path,&#123;&#125;,(err,data)&#x3D;&gt;&#123;</span><br><span class="line">res.writerHead(200,&#123;&#39;Content-Type&#39;:&#39;text&#x2F;htmlcharset&#x3D;&quot;utf-8&quot;&#125;);</span><br><span class="line">res.end(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;% &#39;脚本&#39; 标签，用于流程控制，无输出。</span><br><span class="line">&lt;%_ 删除其前面的空格符</span><br><span class="line">&lt;%&#x3D; 输出数据到模板（输出是转义 HTML 标签）</span><br><span class="line">&lt;%- 输出非转义的数据到模板</span><br><span class="line">&lt;%# 注释标签，不执行、不输出内容</span><br><span class="line">&lt;%% 输出字符串 &#39;&lt;%&#39;</span><br><span class="line">%&gt; 一般结束标签</span><br><span class="line">-%&gt; 删除紧随其后的换行符</span><br><span class="line">_%&gt; 将结束标签后面的空格符删除</span><br></pre></td></tr></table></figure><p>文档地址：<a href="https://ejs.bootcss.com/#install">EJS – 嵌入式 JavaScript 模板引擎 | EJS 中文文档 (bootcss.com)</a></p><h2 id="③路由封装"><a href="#③路由封装" class="headerlink" title="③路由封装"></a>③路由封装</h2><h3 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">&#x27;./module/routes&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建静态web服务</span></span><br><span class="line">    routes.static(req, res, <span class="string">&#x27;static&#x27;</span>);</span><br><span class="line">    <span class="comment">//路由</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.parse(req.url).pathname.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>);      </span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/news      pathname=news  </span></span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/login      pathname=login  </span></span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/xxxx      pathname=xxxx   app.xxxx不存在 </span></span><br><span class="line">    <span class="keyword">let</span> extname = path.extname(pathname);</span><br><span class="line">    <span class="keyword">if</span> (!extname) &#123;   <span class="comment">//如果有后缀名的话让静态web服务去处理 </span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            routes[pathname](req, res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            routes[<span class="string">&#x27;error&#x27;</span>](req, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="routes-js"><a href="#routes-js" class="headerlink" title="routes.js"></a>routes.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有方法</span></span><br><span class="line"><span class="keyword">let</span> getFileMime = <span class="function"><span class="keyword">function</span> (<span class="params">extname</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = fs.readFileSync(<span class="string">&#x27;./data/mime.json&#x27;</span>); <span class="comment">//同步方法</span></span><br><span class="line">    <span class="keyword">let</span> mimeObj = <span class="built_in">JSON</span>.parse(data.toString());</span><br><span class="line">    <span class="keyword">return</span> mimeObj[extname];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = &#123;</span><br><span class="line">    <span class="keyword">static</span>: <span class="function">(<span class="params">req, res,staticPath</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//1、获取地址</span></span><br><span class="line">        <span class="keyword">let</span> pathname = url.parse(req.url).pathname;      </span><br><span class="line">        <span class="keyword">let</span> extname = path.extname(pathname);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//2、通过fs模块读取文件</span></span><br><span class="line">        <span class="keyword">if</span> (pathname != <span class="string">&#x27;/favicon.ico&#x27;</span> &amp;&amp; extname) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> data = fs.readFileSync(<span class="string">&#x27;./&#x27;</span> + staticPath + pathname);</span><br><span class="line">                <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                    <span class="keyword">let</span> mime = getFileMime(extname);</span><br><span class="line">                    res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span> + mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">                    res.end(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    login: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      ejs.renderFile(<span class="string">&#x27;./views/form.ejs&#x27;</span>,&#123;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">        res.end(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    news: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;       </span><br><span class="line">        res.end(<span class="string">&#x27;news&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    doLogin:<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;       </span><br><span class="line">         <span class="comment">//获取post传值        </span></span><br><span class="line">         <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">         req.on(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">             postData+=chunk;</span><br><span class="line">         &#125;)</span><br><span class="line">         req.on(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(postData);</span><br><span class="line">            res.end(postData);</span><br><span class="line">         &#125;)</span><br><span class="line">         </span><br><span class="line">    &#125;,<span class="attr">error</span>:<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.login(&#x27;req&#x27;,&#x27;res&#x27;)</span></span><br><span class="line"><span class="comment">// app[&#x27;login&#x27;](&#x27;req&#x27;,&#x27;res&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=app;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="④原生node-js封装express框架"><a href="#④原生node-js封装express框架" class="headerlink" title="④原生node.js封装express框架"></a>④原生node.js封装express框架</h2><h3 id="app-js-2"><a href="#app-js-2" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app=<span class="built_in">require</span>(<span class="string">&#x27;./module/route&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册web服务</span></span><br><span class="line">http.createServer(app).listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">app.static(<span class="string">&quot;static&quot;</span>);    <span class="comment">//修改默认静态web目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line">app.get(<span class="string">&#x27;/login&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27; &#125;);</span></span><br><span class="line">    <span class="comment">// res.end(&#x27;执行登录操作&#x27;);</span></span><br><span class="line">    ejs.renderFile(<span class="string">&quot;./views/form.ejs&quot;</span>,&#123;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        res.send(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/doLogin&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">    res.send(req.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="route-js"><a href="#route-js" class="headerlink" title="route.js"></a>route.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展res</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeRes</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    res.send = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据后缀名获取文件类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileMime</span>(<span class="params">extname</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = fs.readFileSync(<span class="string">&#x27;./data/mime.json&#x27;</span>); <span class="comment">//同步方法</span></span><br><span class="line">    <span class="keyword">let</span> mimeObj = <span class="built_in">JSON</span>.parse(data.toString());</span><br><span class="line">    <span class="keyword">return</span> mimeObj[extname];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态web服务的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initStatic</span>(<span class="params">req, res, staticPath</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、获取地址</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.parse(req.url).pathname;</span><br><span class="line">    <span class="comment">// pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span></span><br><span class="line">    <span class="keyword">let</span> extname = path.extname(pathname);</span><br><span class="line">    <span class="comment">//2、通过fs模块读取文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (extname) &#123;  <span class="comment">//如果有后缀名用静态web服务处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data = fs.readFileSync(<span class="string">&#x27;./&#x27;</span> + staticPath + pathname);</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                <span class="keyword">let</span> mime = getFileMime(extname);</span><br><span class="line">                res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span> + mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">                res.end(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> G = &#123;</span><br><span class="line">        _get: &#123;&#125;,</span><br><span class="line">        _post: &#123;&#125;,</span><br><span class="line">        staticPath: <span class="string">&#x27;static&#x27;</span> <span class="comment">//，默认静态web目录</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> app = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//扩展res的方法</span></span><br><span class="line">        changeRes(res);</span><br><span class="line">        <span class="comment">//配置静态web服务</span></span><br><span class="line">        initStatic(req, res, G.staticPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> pathname = url.parse(req.url).pathname;</span><br><span class="line">        <span class="comment">//获取请求类型</span></span><br><span class="line">        <span class="keyword">let</span> method = req.method.toLowerCase();</span><br><span class="line">        <span class="built_in">console</span>.log(method);</span><br><span class="line">        <span class="keyword">let</span> extname = path.extname(pathname);</span><br><span class="line">        <span class="keyword">if</span> (!extname) &#123;  <span class="comment">//如果有后缀名用静态web处理</span></span><br><span class="line">            <span class="keyword">if</span> (G[<span class="string">&#x27;_&#x27;</span> + method][pathname]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method == <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">                    G[<span class="string">&#x27;_&#x27;</span> + method][pathname](req, res);  <span class="comment">//执行方法</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//post  获取post的数据 把它绑定到req.body</span></span><br><span class="line">                    <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                    req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">                        postData += chunk;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        req.body = postData;</span><br><span class="line">                        G[<span class="string">&#x27;_&#x27;</span> + method][pathname](req, res);  <span class="comment">//执行方法</span></span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.writeHead(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">                res.end(<span class="string">&#x27;页面不存在&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get请求</span></span><br><span class="line">    app.get = <span class="function"><span class="keyword">function</span> (<span class="params">str, cb</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//注册方法</span></span><br><span class="line">        G._get[str] = cb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//post请求</span></span><br><span class="line">    app.post = <span class="function"><span class="keyword">function</span> (<span class="params">str, cb</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//注册方法</span></span><br><span class="line">        G._post[str] = cb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置静态web服务目录</span></span><br><span class="line">    app.static = <span class="function"><span class="keyword">function</span> (<span class="params">staticPath</span>) </span>&#123;</span><br><span class="line">        G.staticPath = staticPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = server();</span><br></pre></td></tr></table></figure><h2 id="⑤MongoDb"><a href="#⑤MongoDb" class="headerlink" title="⑤MongoDb"></a>⑤MongoDb</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>NoSql   不仅仅是Sql</li><li>没有行列概念、用Json存储数据</li><li>集合相当于表，文档相当于行</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">use db <span class="operator">/</span><span class="operator">/</span>使用数据库,添加一条数据后创建数据库</span><br><span class="line"><span class="keyword">show</span> dbs <span class="operator">/</span><span class="operator">/</span>查看有哪些数据库</span><br><span class="line">db.user.insert&lt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:20&#125;&gt;//插入数据</span><br><span class="line"><span class="keyword">show</span> collections <span class="operator">/</span><span class="operator">/</span>查看有哪些表</span><br><span class="line">db.user.find()<span class="operator">/</span><span class="operator">/</span>查看表中有哪些数据</span><br><span class="line">db.dropDatabase() <span class="operator">/</span><span class="operator">/</span>删除数据库</span><br><span class="line">db.user.drop()<span class="operator">/</span><span class="operator">/</span>删除表</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.find(&#123;&quot;age&quot;:20&#125;)//查找年龄等于20的数据</span><br><span class="line">db.user.distinct(&quot;name&quot;)<span class="operator">/</span><span class="operator">/</span>过滤到name中的重复数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:22&#125;&#125;)//年龄大于22的数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$lt:22&#125;&#125;)//小于22的数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gte:25&#125;&#125;)//年龄大于等于25的数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$lte:22&#125;&#125;)//年龄小于等于22的数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:22,$lt:30&#125;&#125;)//年龄大于22,小于30的数据</span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/zhang/&#125;)//模糊查询，包含zhang</span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/^zh/&#125;)//模糊查询，以zh开头的</span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/zh$/&#125;)//模糊查询，以zh结尾的</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.find(&#123;&#125;,&#123;name:1&#125;)//只显示name这一列</span><br><span class="line">db.user.find().sort(&#123;&quot;age&quot;:1&#125;)//升序</span><br><span class="line">db.user.find().sort(&#123;&quot;age&quot;:-1&#125;)//降序</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:10,&quot;name&quot;:&quot;张三&quot;&#125;)//年龄为10并且姓名为张三的数据</span><br><span class="line">db.user.find().limit(<span class="number">5</span>)<span class="operator">/</span><span class="operator">/</span>查询前<span class="number">5</span>条数据</span><br><span class="line">db.user.find().<span class="keyword">skip</span>(<span class="number">10</span>)<span class="operator">/</span><span class="operator">/</span>跳过<span class="number">10</span>条数据</span><br><span class="line">db.user.find.skip(<span class="number">2</span>).limit(<span class="number">2</span>)<span class="operator">/</span><span class="operator">/</span>查询第三条和第四条数据  用于分页</span><br><span class="line">db.user.find.<span class="built_in">count</span>()<span class="operator">/</span><span class="operator">/</span>统计数量</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:22&#125;&#125;).count()//统计年龄大于22的数据</span><br><span class="line">db.user.find(&#123;$or:[&#123;&quot;age&quot;:20&#125;,&#123;&quot;age&quot;:21&#125;]&#125;)//年龄等于20或者等于21的数据</span><br><span class="line">db.user.findOne()<span class="operator">/</span><span class="operator">/</span>只查询第一条数据</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.update(&#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;,&#123;$set:&#123;&quot;name&quot;:&quot;张三&quot;&#125;&#125;)//更新数据 前一个是查询的条件</span><br><span class="line">db.user.update(&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:20&#125;,&#123;$set:&#123;&quot;sex&quot;:&quot;男&quot;&#125;&#125;)//增加列</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>不出现$<span class="keyword">set</span>则为完整替换，即代表整条数据被替换</span><br><span class="line">db.user.update(&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:20&#125;,&#123;$set:&#123;&quot;sex&quot;:&quot;男&quot;&#125;&#125;,multi:true)//一次性替换多条数据</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.remove(&#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;)//删除姓名为zhangsan 的数据</span><br><span class="line">db.user.remove(&#123;&quot;age&quot;:12&#125;,&#123;justOne:true&#125;)//删除年龄为12的数据,justOne仅删除第一条的数据</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="查询具体的执行时间"><a href="#查询具体的执行时间" class="headerlink" title="查询具体的执行时间"></a>查询具体的执行时间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find().explain(&quot;executionStats&quot;)</span><br></pre></td></tr></table></figure><h4 id="索引基本操作"><a href="#索引基本操作" class="headerlink" title="索引基本操作"></a>索引基本操作</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.ensureIndex(&#123;&quot;name&quot;:1&#125;)//创建索引  1是升序 -1是降序</span><br><span class="line">db.user.getIndexes()<span class="operator">/</span><span class="operator">/</span>查看当前表是否有索引</span><br><span class="line">db.user.dropIndex(&#123;&quot;name&quot;:1&#125;)//删除索引</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>复合索引</span><br><span class="line">db.user.ensureIndex(&#123;&quot;name&quot;:1,&quot;age&quot;:1&#125;)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>唯一索引</span><br><span class="line">db.user.ensureIndex(&#123;&quot;name&quot;:1&#125;,&#123;&quot;unique&quot;:true&#125;)</span><br></pre></td></tr></table></figure><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ues admin</span><br><span class="line"><span class="keyword">show</span> users<span class="operator">/</span><span class="operator">/</span>查看有哪些角色 root超级管理员 dbOwner数据库管理员</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">              <span class="keyword">user</span>:<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">              pwd:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">              roles:[&#123;role:&#x27;root&#x27;,db:&#x27;admin&#x27;&#125;]</span><br><span class="line">              &#125;)</span><br><span class="line">db.dropUser()<span class="operator">/</span><span class="operator">/</span>删除管理员</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;修改mongodb数据库配置文件mongod.cfg</span><br><span class="line">&#x2F;&#x2F;配置</span><br><span class="line">security:</span><br><span class="line">authorization:enabled</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重启Mongodb</span><br><span class="line">cmd+services.msc</span><br><span class="line">重启服务</span><br><span class="line">mongo admin -u 用户名 -p 密码</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.updateUser(&#39;admin&#39;,&#123;pwd:&quot;password&quot;&#125;)&#x2F;&#x2F;修改用户名密码</span><br><span class="line">db.auth(&quot;admin&quot;,&quot;password&quot;)&#x2F;&#x2F;密码认证</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="聚合管道"><a href="#聚合管道" class="headerlink" title="聚合管道"></a>聚合管道</h3><p>使用聚合管道可以对集合中的文档进行变换和组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$project  增加、删除、重命名字段    select</span><br><span class="line">$match    条件匹配。只满足条件的文档才能进入下一阶段  having where</span><br><span class="line">$limit    限制结果的数量  </span><br><span class="line">$skip     跳过文档数量  </span><br><span class="line">$sort     条件排序 order by</span><br><span class="line">$group    条件组合结果   group by</span><br><span class="line">$lookup   用于引入其他集合的数据 表关联查询  join</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>$project 查出所需的两列，过滤其他信息</span><br><span class="line">db.order.aggregate([&#123;</span><br><span class="line">$project:&#123;order_id:1,trade_no:1&#125;</span><br><span class="line">&#125;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$math  相当于find里面的参数，查询条件  价格大于<span class="number">90</span></span><br><span class="line">db.order.aggregate([&#123;</span><br><span class="line">$project:&#123;order_id:1,trade_no:1&#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    $match:&#123;&quot;price&quot;:&#123;$gte:90&#125;&#125;</span><br><span class="line">                    &#125;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$<span class="keyword">group</span>   进行分组和统计</span><br><span class="line">db.order_item.aggregate([&#123;</span><br><span class="line">    $group:&#123;_id:&quot;$order_id&quot;,total:&#123;$sum:&quot;$num&quot;&#125;&#125;</span><br><span class="line">                         &#125;])</span><br><span class="line">                         </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>sort     升序或者降序排列</span><br><span class="line">db.order.aggregate([&#123;</span><br><span class="line">$project:&#123;order_id:1,trade_no:1&#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    $match:&#123;&quot;price&quot;:&#123;$gte:90&#125;&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     $sort:&#123;&quot;all_price&quot;:-1&#125;               </span><br><span class="line">                    &#125;])</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$limit    限制返回几条数据</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$<span class="keyword">skip</span>    跳过几条数据</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$lookup   表关联</span><br><span class="line">db.order.aggregate([&#123;</span><br><span class="line">$lookup:&#123;</span><br><span class="line">              <span class="keyword">from</span>:&quot;order_item&quot;,</span><br><span class="line">              localField:&quot;order_id&quot;,</span><br><span class="line">              foreignField:&quot;order_id&quot;,</span><br><span class="line">              <span class="keyword">as</span>:&quot;items&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">&#125;])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="备份和还原"><a href="#备份和还原" class="headerlink" title="备份和还原"></a>备份和还原</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;备份</span><br><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class="line">&#x2F;&#x2F;导入</span><br><span class="line">mongorestore -h dbhost -d dbname dbdirectory</span><br><span class="line">若有用户名和密码则在dbname 后面加入 -u username -p pwd</span><br></pre></td></tr></table></figure><h2 id="⑥node-js操作mongodb"><a href="#⑥node-js操作mongodb" class="headerlink" title="⑥node.js操作mongodb"></a>⑥node.js操作mongodb</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;安装模块</span><br><span class="line">npm install mongodb --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; MongoClient &#125; = <span class="built_in">require</span>(<span class="string">&quot;mongodb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义连接数据库地址</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;mongodb://127.0.0.1:27017/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义操作数据库</span></span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">&quot;testdb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化MongoClient 传入数据库连接地址</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">client.connect(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功&quot;</span>)</span><br><span class="line">  <span class="keyword">let</span> db = client.db(dbName)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找数据</span></span><br><span class="line">    db.collection(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    .find(&#123;&#125;)<span class="comment">//在此处写查找条件</span></span><br><span class="line">    .toArray(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">      <span class="comment">//关闭数据库</span></span><br><span class="line">      client.close()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//增加数据</span></span><br><span class="line">     db.collection(<span class="string">&#x27;user&#x27;</span>).insertOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;老王&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">50</span>&#125;,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(err)&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(err)</span><br><span class="line">             <span class="keyword">return</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;增加成功&quot;</span>)</span><br><span class="line">         client.close()</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改数据</span></span><br><span class="line">    db.collection(<span class="string">&#x27;user&#x27;</span>).updateOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">12</span>&#125;&#125;,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;修改成功&quot;</span>)</span><br><span class="line">        client.close()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除数据</span></span><br><span class="line">    db.collection(<span class="string">&quot;user&quot;</span>).deleteOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">        client.close()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./module/route&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; MongoClient &#125; = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;mongodb://localhost:27017&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">&#x27;itying&#x27;</span>;</span><br><span class="line"><span class="comment">// const client = new MongoClient(url,&#123; useUnifiedTopology: true &#125;);</span></span><br><span class="line"><span class="comment">//注册web服务</span></span><br><span class="line">http.createServer(app).listen(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">// app.static(&quot;public&quot;);    //修改默认静态web目录</span></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    MongoClient.connect(url,&#123; <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err, client</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        db.collection(<span class="string">&quot;user&quot;</span>).find(&#123;&#125;).toArray(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;            </span><br><span class="line">            client.close();</span><br><span class="line">            ejs.renderFile(<span class="string">&quot;./views/index.ejs&quot;</span>, &#123;</span><br><span class="line">                list: result</span><br><span class="line">            &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                res.send(data);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/register&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    ejs.renderFile(<span class="string">&quot;./views/register.ejs&quot;</span>,&#123;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        res.send(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/doRegister&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// name=zhangsan&amp;age=13</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     &quot;name&quot;:&quot;zhangsan&quot;,</span></span><br><span class="line">    <span class="comment">//     &quot;age&quot;:13</span></span><br><span class="line">    <span class="comment">// &#125;    </span></span><br><span class="line">    <span class="keyword">let</span> body=querystring.parse(req.body);</span><br><span class="line">    MongoClient.connect(url,&#123; <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;,<span class="function">(<span class="params">err,client</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> db=client.db(dbName);</span><br><span class="line"></span><br><span class="line">        db.collection(<span class="string">&quot;user&quot;</span>).insertOne(body,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;增加数据成功&quot;</span>);</span><br><span class="line">            res.send(<span class="string">&quot;增加数据成功&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="⑦express框架"><a href="#⑦express框架" class="headerlink" title="⑦express框架"></a>⑦express框架</h2><h3 id="使用express"><a href="#使用express" class="headerlink" title="使用express"></a>使用express</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;安装express</span><br><span class="line">cnpm i express --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;你好 express&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/article&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;新闻页面&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/register&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  <span class="comment">//get:显示数据</span></span><br><span class="line">    res.send(<span class="string">&quot;注册页面&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/doLogin&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;   <span class="comment">//post:增加数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行登录&quot;</span>)</span><br><span class="line">    res.send(<span class="string">&quot;执行登录&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.put(<span class="string">&quot;/editUser&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  <span class="comment">//put：主要用于修改数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;修改用户&quot;</span>)</span><br><span class="line">    res.send(<span class="string">&quot;修改用户&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.delete(<span class="string">&quot;/deleteUser&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  <span class="comment">//delete：主要用于删除数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行删除&quot;</span>)</span><br><span class="line">    res.send(<span class="string">&quot;执行删除&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由里面配置多级目录  http://localhost:3000/admin/user/edit</span></span><br><span class="line">app.get(<span class="string">&quot;/admin/user/add&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;admin user add&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/admin/user/edit&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;admin user  edit&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态路由  配置路由的时候也要注意顺序</span></span><br><span class="line">app.get(<span class="string">&quot;/article/add&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;article add&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/article/:id&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id=req.params[<span class="string">&quot;id&quot;</span>]    <span class="comment">//获取动态路由</span></span><br><span class="line">    res.send(<span class="string">&quot;动态路由&quot;</span>+id)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//get 传值  http://localhost:3000/product?id=123&amp;cid=123</span></span><br><span class="line">app.get(<span class="string">&quot;/product&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> query = req.query   <span class="comment">//获取get传值</span></span><br><span class="line">    <span class="built_in">console</span>.log(query)</span><br><span class="line">    res.send(<span class="string">&quot;product-&quot;</span>+query.id)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h3 id="express-ejs-静态文件托管"><a href="#express-ejs-静态文件托管" class="headerlink" title="express+ejs+静态文件托管"></a>express+ejs+静态文件托管</h3><ul><li>express默认集成了ejs</li></ul><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.在 app.js 的头上定义 ejs:,代码如下: </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var ejs = require(&#x27;ejs&#x27;); </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.注册 html 模板引擎代码如下： </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">app.engine(&#x27;html&#x27;,ejs.__express);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.将模板引擎换成 html 代码如下:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">app.set(&#x27;view engine&#x27;, &#x27;html&#x27;); </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.修改模板文件的后缀为.html。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.engine(<span class="string">&quot;html&quot;</span>,ejs.__express)</span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;html&quot;</span>)</span><br><span class="line"><span class="comment">//配置静态web目录</span></span><br><span class="line">app.use(express.static(<span class="string">&quot;static&quot;</span>))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title = <span class="string">&quot;你好ejs&quot;</span>;</span><br><span class="line">    res.render(<span class="string">&quot;index&quot;</span>,&#123;</span><br><span class="line">        title:title</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/news&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userinfo=&#123;</span><br><span class="line">        username:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        age:<span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> article=<span class="string">&quot;&lt;h3&gt;我是一个h3&lt;/h3&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> list=[<span class="string">&quot;1111&quot;</span>,<span class="string">&quot;22222&quot;</span>,<span class="string">&quot;3333333&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newsList=[</span><br><span class="line">        &#123;</span><br><span class="line">            title:<span class="string">&quot;新闻1111&quot;</span>,          </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            title:<span class="string">&quot;新闻122222&quot;</span>,          </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            title:<span class="string">&quot;新闻33331&quot;</span>,          </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            title:<span class="string">&quot;新闻44444&quot;</span>,          </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    res.render(<span class="string">&quot;news&quot;</span>,&#123; <span class="comment">//渲染模板，内置ejs</span></span><br><span class="line">        userinfo:userinfo,</span><br><span class="line">        article:article,</span><br><span class="line">        flag:<span class="literal">true</span>,</span><br><span class="line">        score:<span class="number">60</span>,</span><br><span class="line">        list:list,</span><br><span class="line">        newsList:newsList</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>news.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;base.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;绑定数据111&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;&lt;%&#x3D;userinfo.username%&gt;---&lt;%&#x3D;userinfo.age%&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&lt;%&#x3D;article%&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&lt;%-article%&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;条件判断&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%if(flag&#x3D;&#x3D;true)&#123;%&gt;</span><br><span class="line">        &lt;strong&gt;flag&#x3D;true&lt;&#x2F;strong&gt;</span><br><span class="line">    &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%if(score&gt;&#x3D;60)&#123;%&gt;</span><br><span class="line">        &lt;p&gt;及格&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;%&#125;else&#123;%&gt;</span><br><span class="line">       不及格</span><br><span class="line">    &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;循环遍历&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;%for(let i&#x3D;0;i&lt;list.length;i++)&#123;%&gt;</span><br><span class="line">            &lt;li&gt;&lt;%&#x3D;list[i]%&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;%&#125;%&gt;        </span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;%for(let i&#x3D;0;i&lt;newsList.length;i++)&#123;%&gt;</span><br><span class="line">            &lt;li&gt;&lt;%&#x3D;newsList[i].title%&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;%&#125;%&gt;        </span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%- include(&#39;footer.html&#39;) %&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>footer.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer&gt;</span><br><span class="line">    &lt;h1&gt;公共的底部&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;footer&gt;</span><br></pre></td></tr></table></figure><h3 id="express中间件"><a href="#express中间件" class="headerlink" title="express中间件"></a>express中间件</h3><blockquote><p>中间件就是匹配路由之前或者匹配路由完成做的一系列的操作。中间件中如果想往下匹配的话，那么需要写next()</p></blockquote><h4 id="1-应用级中间件"><a href="#1-应用级中间件" class="headerlink" title="1.应用级中间件"></a>1.应用级中间件</h4><p>常用于权限权限判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、应用级中间件 (用于权限判断)</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())    </span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-路由级中间件"><a href="#2-路由级中间件" class="headerlink" title="2.路由级中间件"></a>2.路由级中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//2、路由级中间件(用的比较少)</span></span><br><span class="line">app.get(<span class="string">&quot;/news/add&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// res.send(&quot;执行增加新闻&quot;)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行增加新闻&quot;</span>)</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-错误处理中间件"><a href="#3-错误处理中间件" class="headerlink" title="3.错误处理中间件"></a>3.错误处理中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3、错误处理中间件  /css/base.css 处理404</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">   res.status(<span class="number">404</span>).send(<span class="string">&quot;404&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-内置中间件"><a href="#4-内置中间件" class="headerlink" title="4.内置中间件"></a>4.内置中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//4、内置中间件</span></span><br><span class="line">app.use(express.static(<span class="string">&quot;static&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="5-第三方中间件"><a href="#5-第三方中间件" class="headerlink" title="5.第三方中间件"></a>5.第三方中间件</h4><p>有很多很多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取post传过来的数据</span></span><br><span class="line"><span class="comment">1、cnpm install body-parser --save</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、var bodyParser = require(&#x27;body-parser&#x27;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、配置中间件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    app.use(bodyParser.json())</span></span><br><span class="line"><span class="comment">4、接收post数据</span></span><br><span class="line"><span class="comment">    req.body</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.engine(<span class="string">&quot;html&quot;</span>,ejs.__express)</span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;html&quot;</span>)</span><br><span class="line"><span class="comment">//配置静态web目录</span></span><br><span class="line">app.use(express.static(<span class="string">&quot;static&quot;</span>))</span><br><span class="line"><span class="comment">//配置第三方中间件</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">// req.query 获取get传值</span></span><br><span class="line">   res.render(<span class="string">&quot;login&quot;</span>,&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/doLogin&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">// req.body 获取post传值</span></span><br><span class="line">   <span class="keyword">var</span> body = req.body;</span><br><span class="line">   <span class="built_in">console</span>.log(body)</span><br><span class="line">   res.send(<span class="string">&quot;执行提交&quot;</span>+body.username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h3 id="express-cookie使用"><a href="#express-cookie使用" class="headerlink" title="express cookie使用"></a>express cookie使用</h3><ul><li>同浏览器同域名下数据共享</li><li>http无状态协议</li><li>页面间共享登录人信息</li><li>根据你浏览的商品，将商品存在cookie中，推荐相近的商品给你</li><li>购物车功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装cnpminstlalcookie-parser--save</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>引入varcookieParser=<span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>设置中间件app.use(cookieParser());</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>设置cookieres.cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">900000</span>,<span class="attr">httpOnly</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>获取cookiereq.cookies.namejs</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/937314f5f21e8809ba3ee0739d72797.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br><span class="line"><span class="comment">//配置cookieParser中间件</span></span><br><span class="line">app.use(cookieParser(<span class="string">&quot;ityingaaa&quot;</span>))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  </span><br><span class="line">    <span class="comment">//设置cookie  如果cookie没有过期的话，关闭浏览器后重新打开,cookie不会销毁</span></span><br><span class="line">    <span class="comment">// res.cookie(&quot;username&quot;,&quot;zhangsan&quot;,&#123;maxAge:1000*60*60&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// res.cookie(&quot;username&quot;,&quot;zhangsan&quot;,&#123;maxAge:1000*60*60,path:&quot;/article&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//多个域名共享cookie  aaa.itying.com   bbb.itying.com </span></span><br><span class="line">    <span class="comment">// res.cookie(&quot;username&quot;,&quot;zhangsan1111&quot;,&#123;maxAge:1000*60*60,domain:&quot;.itying.com&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中文cookie</span></span><br><span class="line">    <span class="comment">// res.cookie(&quot;username&quot;,&quot;张三&quot;,&#123;maxAge:1000*60*60&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cookie的加密   </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1、配置中间件的时候需要传入加密的参数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    app.use(cookieParser(&quot;itying&quot;))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2、 res.cookie(&quot;username&quot;,&quot;zhangsan&quot;,&#123;maxAge:1000*60*60,signed:true&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3、req.signedCookies</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    res.cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="attr">signed</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    res.send(<span class="string">&quot;你好 express aaa&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/article&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取cookie</span></span><br><span class="line">    <span class="keyword">let</span> username=req.cookies.username;</span><br><span class="line">    <span class="built_in">console</span>.log(username)</span><br><span class="line">    res.send(<span class="string">&quot;新闻页面--&quot;</span>+username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/user&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="comment">//获取cookie</span></span><br><span class="line">     <span class="keyword">let</span> username=req.cookies.username;</span><br><span class="line">     <span class="built_in">console</span>.log(username)     </span><br><span class="line">    res.send(<span class="string">&quot;用户--&quot;</span>+username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/product&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取加密的cookie</span></span><br><span class="line">    <span class="keyword">let</span> username=req.signedCookies.username</span><br><span class="line">    <span class="built_in">console</span>.log(username)     </span><br><span class="line">   res.send(<span class="string">&quot;product--&quot;</span>+username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h3 id="express-session使用"><a href="#express-session使用" class="headerlink" title="express session使用"></a>express session使用</h3><ul><li>记录客户状态的机制</li><li>保存在服务端</li><li>发送第一次请求时，创建session对象，生成key,value键值对，将key给客户端，客户端访问服务端时携带key，找到对应的value</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*session的使用：</span></span><br><span class="line"><span class="comment">https://www.npmjs.com/package/express-session</span></span><br><span class="line"><span class="comment">1、cnpm install express-session --save</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、const session = require(&#x27;express-session&#x27;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、配置session的中间件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">app.use(session(&#123;</span></span><br><span class="line"><span class="comment">    secret: &#x27;this is session&#x27;, //服务器端生成 session 的签名</span></span><br><span class="line"><span class="comment">    name:&quot;itying&quot;, //修改session对应cookie的名称</span></span><br><span class="line"><span class="comment">    resave: false, //强制保存 session 即使它并没有变化</span></span><br><span class="line"><span class="comment">    saveUninitialized: true, //强制将未初始化的 session 存储</span></span><br><span class="line"><span class="comment">    cookie: &#123; </span></span><br><span class="line"><span class="comment">        maxAge:1000*60*30,</span></span><br><span class="line"><span class="comment">        secure: false  // true 表示只有https协议才能访问cookie  </span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    rolling:true  //在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span></span><br><span class="line"><span class="comment">&#125;))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、使用</span></span><br><span class="line"><span class="comment"> 设置： req.session.username=&quot;张三&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 获取：req.session.username</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"> 删除session  req.session.username=&quot;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="comment">//配置session的中间件</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: <span class="string">&#x27;this is session&#x27;</span>, <span class="comment">//服务器端生成 session 的签名</span></span><br><span class="line">    name:<span class="string">&quot;itying&quot;</span>, <span class="comment">//修改session对应cookie的名称</span></span><br><span class="line">    resave: <span class="literal">false</span>, <span class="comment">//强制保存 session 即使它并没有变化</span></span><br><span class="line">    saveUninitialized: <span class="literal">true</span>, <span class="comment">//强制将未初始化的 session 存储</span></span><br><span class="line">    cookie: &#123; </span><br><span class="line">        maxAge:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">30</span>,</span><br><span class="line">        secure: <span class="literal">false</span>  <span class="comment">// true 表示只有https协议才能访问cookie  </span></span><br><span class="line">    &#125;,</span><br><span class="line">    rolling:<span class="literal">true</span>  <span class="comment">//在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取seesion</span></span><br><span class="line">    <span class="keyword">if</span>(req.session.username || req.session.age)&#123;</span><br><span class="line">        res.send(req.session.username+<span class="string">&quot;--&quot;</span>+req.session.age+<span class="string">&quot;-已登录&quot;</span>)        </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.send(<span class="string">&quot;没有登录&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  </span><br><span class="line">    <span class="comment">//设置seesion</span></span><br><span class="line">    req.session.username=<span class="string">&quot;张三&quot;</span></span><br><span class="line">    req.session.age=<span class="number">20</span></span><br><span class="line">    res.send(<span class="string">&quot;执行登录&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/loginOut&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  </span><br><span class="line">    <span class="comment">//1、设置session的过期时间为0  (它会把所有的session都销毁)</span></span><br><span class="line">    <span class="comment">// req.session.cookie.maxAge=0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、销毁指定session</span></span><br><span class="line">    <span class="comment">// req.session.username=&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、销毁session  destroy</span></span><br><span class="line"></span><br><span class="line">    req.session.destroy()</span><br><span class="line"></span><br><span class="line">    res.send(<span class="string">&quot;退出登录&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h4 id="将session保存在数据库中"><a href="#将session保存在数据库中" class="headerlink" title="将session保存在数据库中"></a>将session保存在数据库中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">session保存在数据库里面</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;connect-mongo</span><br><span class="line"></span><br><span class="line">1、配置express-session</span><br><span class="line"></span><br><span class="line">2、安装connect-mongo </span><br><span class="line">    cnpm i connect-mongo --save</span><br><span class="line"></span><br><span class="line">3、引入</span><br><span class="line">const MongoStore &#x3D; require(&#39;connect-mongo&#39;)(session);</span><br><span class="line"></span><br><span class="line">4、配置中间件</span><br><span class="line">    app.use(session(&#123;</span><br><span class="line">        secret: &#39;this is session&#39;, &#x2F;&#x2F;服务器端生成 session 的签名</span><br><span class="line">        name:&quot;itying&quot;, &#x2F;&#x2F;修改session对应cookie的名称</span><br><span class="line">        resave: false, &#x2F;&#x2F;强制保存 session 即使它并没有变化</span><br><span class="line">        saveUninitialized: true, &#x2F;&#x2F;强制将未初始化的 session 存储</span><br><span class="line">        cookie: &#123; </span><br><span class="line">            maxAge:1000*60*30,</span><br><span class="line">            secure: false  &#x2F;&#x2F; true 表示只有https协议才能访问cookie  </span><br><span class="line">        &#125;,</span><br><span class="line">        rolling:true,  &#x2F;&#x2F;在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span><br><span class="line">        store: new MongoStore(&#123;</span><br><span class="line">            url: &#39;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;shop&#39;,      </span><br><span class="line">            touchAfter: 24 * 3600 &#x2F;&#x2F; 不管发出了多少请求 在24小时内只更新一次session， 除非你改变了这个session </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;connect-redis</span><br><span class="line"></span><br><span class="line">    https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;connect-mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const express &#x3D; require(&#39;express&#39;)</span><br><span class="line">const session &#x3D; require(&#39;express-session&#39;)</span><br><span class="line">const MongoStore &#x3D; require(&#39;connect-mongo&#39;)(session);</span><br><span class="line">const app&#x3D;express()</span><br><span class="line">&#x2F;&#x2F;配置session的中间件</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: &#39;this is session&#39;, &#x2F;&#x2F;服务器端生成 session 的签名</span><br><span class="line">    name:&quot;itying&quot;, &#x2F;&#x2F;修改session对应cookie的名称</span><br><span class="line">    resave: false, &#x2F;&#x2F;强制保存 session 即使它并没有变化</span><br><span class="line">    saveUninitialized: true, &#x2F;&#x2F;强制将未初始化的 session 存储</span><br><span class="line">    cookie: &#123; </span><br><span class="line">        maxAge:1000*60*30,</span><br><span class="line">        secure: false  &#x2F;&#x2F; true 表示只有https协议才能访问cookie  </span><br><span class="line">    &#125;,</span><br><span class="line">    rolling:true,  &#x2F;&#x2F;在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span><br><span class="line">    store: new MongoStore(&#123;</span><br><span class="line">        url: &#39;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;shop&#39;,      </span><br><span class="line">        touchAfter: 24 * 3600 &#x2F;&#x2F; 不管发出了多少请求 在24小时内只更新一次session， 除非你改变了这个session </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.get(&quot;&#x2F;&quot;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;获取seesion</span><br><span class="line">    if(req.session.username || req.session.age)&#123;</span><br><span class="line">        res.send(req.session.username+&quot;--&quot;+req.session.age+&quot;-已登录&quot;)        </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        res.send(&quot;没有登录&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&quot;&#x2F;login&quot;,(req,res)&#x3D;&gt;&#123;  </span><br><span class="line">    &#x2F;&#x2F;设置seesion</span><br><span class="line">    req.session.username&#x3D;&quot;张三&quot;</span><br><span class="line">    req.session.age&#x3D;20</span><br><span class="line">    res.send(&quot;执行登录&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&quot;&#x2F;loginOut&quot;,(req,res)&#x3D;&gt;&#123;  </span><br><span class="line">    &#x2F;&#x2F;1、设置session的过期时间为0  (它会把所有的session都销毁)</span><br><span class="line">    &#x2F;&#x2F; req.session.cookie.maxAge&#x3D;0</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;2、销毁指定session</span><br><span class="line">    &#x2F;&#x2F; req.session.username&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;3、销毁session  destroy</span><br><span class="line"></span><br><span class="line">    req.session.destroy()</span><br><span class="line"></span><br><span class="line">    res.send(&quot;退出登录&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure><h3 id="express路由模块化"><a href="#express路由模块化" class="headerlink" title="express路由模块化"></a>express路由模块化</h3><p>使用express模块化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router=express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;res.send(<span class="string">&#x27;用户列表&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/add,function(req,res)&#123;res.send(&#x27;</span>增加用户<span class="string">&#x27;)&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">router.get(&#x27;</span>/edit,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;res.send(<span class="string">&#x27;修改用户&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=router</span><br></pre></td></tr></table></figure><p>挂载模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user=<span class="built_in">require</span>(<span class="string">&#x27;./routes/user)//...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app.use(&#x27;</span>/user,user)</span><br></pre></td></tr></table></figure><h3 id="multer上传文件"><a href="#multer上传文件" class="headerlink" title="multer上传文件"></a>multer上传文件</h3><p>单文件上传</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> tools=&#123;</span><br><span class="line">    <span class="function"><span class="title">multer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> storage = multer.diskStorage(&#123;</span><br><span class="line">            <span class="comment">//配置上传的目录</span></span><br><span class="line">            destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">                cb(<span class="literal">null</span>, <span class="string">&#x27;static/upload&#x27;</span>) <span class="comment">//上传之前目录必须存在</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//修改上传后的文件名</span></span><br><span class="line">            filename: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//1、获取后缀名</span></span><br><span class="line">                <span class="keyword">let</span> extname= path.extname(file.originalname);</span><br><span class="line">                <span class="comment">//2、根据时间戳生成文件名</span></span><br><span class="line">                cb(<span class="literal">null</span>, <span class="built_in">Date</span>.now()+extname)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> upload = multer(&#123; <span class="attr">storage</span>: storage &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> upload;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">md5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=tools</span><br></pre></td></tr></table></figure><p>多文件上传看官方文档</p><h2 id="⑧mongoose"><a href="#⑧mongoose" class="headerlink" title="⑧mongoose"></a>⑧mongoose</h2><h4 id="mongoose增删改查"><a href="#mongoose增删改查" class="headerlink" title="mongoose增删改查"></a>mongoose增删改查</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入mongoose</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、建立连接  </span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/eggcms&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、操作users表（集合）   定义一个Schema   Schema里面的对象和数据库表里面的字段需要一一对应</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line"></span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    age:<span class="built_in">Number</span>,</span><br><span class="line">    status:<span class="built_in">Number</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、定义数据库模型  操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// model里面的第一个参数 要注意：1首字母大写  2、要和数据库表（集合 ）名称对应  这个模型会和模型名称相同的复数的数据库表建立连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var User=mongoose.model(&#x27;User&#x27;,UserSchema);    // 默认会操作 users表（集合）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> User=mongoose.model(<span class="string">&#x27;User&#x27;</span>,UserSchema,<span class="string">&#x27;user&#x27;</span>);  <span class="comment">//默认会操作第三个参数配置的表  user表（集合）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5、查询users表的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// User.find(&#123;&#125;,function(err,doc)&#123; </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     if(err)&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//         console.log(err);</span></span><br><span class="line">    <span class="comment">//         return;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     console.log(doc);</span></span><br><span class="line">    <span class="comment">// &#125;)  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//6、增加数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.1实例化 Model     通过实例化User Molde 创建增加的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.2 实例.save()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// var u=new User(&#123;</span></span><br><span class="line">    <span class="comment">//     name:&#x27;李四&#x27;,</span></span><br><span class="line">    <span class="comment">//     age:20,</span></span><br><span class="line">    <span class="comment">//     status:1</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// u.save(function(err)&#123;</span></span><br><span class="line">    <span class="comment">//     if(err)&#123;</span></span><br><span class="line">    <span class="comment">//         console.log(err);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//         return;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     console.log(&#x27;成功&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;);  //执行增加操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//6、更新数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入mongoose</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、建立连接  </span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/eggcms&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、定义一个Schema </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> NewsSchema=mongoose.Schema(&#123;</span><br><span class="line">    title:<span class="string">&quot;string&quot;</span>,</span><br><span class="line">    author:<span class="built_in">String</span>,</span><br><span class="line">    pic:<span class="built_in">String</span>,</span><br><span class="line">    content:<span class="built_in">String</span>,</span><br><span class="line">    status:<span class="built_in">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、定义操作数据库的Model</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> News=mongoose.model(<span class="string">&#x27;News&#x27;</span>,NewsSchema,<span class="string">&#x27;news&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//5、增加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过实例化 Model 创建增加的数据</span></span><br><span class="line">    <span class="comment">// var news=new News(&#123;</span></span><br><span class="line">    <span class="comment">//     title:&quot;我是一个新闻11111&quot;,</span></span><br><span class="line">    <span class="comment">//     author:&#x27;张三1&#x27;,</span></span><br><span class="line">    <span class="comment">//     content:&#x27;我是新闻的内容&#x27;,</span></span><br><span class="line">    <span class="comment">//     status:1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// news.save(function(err)&#123;</span></span><br><span class="line">    <span class="comment">//     if(err)&#123;</span></span><br><span class="line">    <span class="comment">//         return console.log(err);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//      console.log(&#x27;成功&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//6、修改数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// News.updateOne(</span></span><br><span class="line"><span class="comment">//     &#123;&quot;_id&quot;:&quot;5b7563e2ba3c6747d0612204&quot;&#125;,   </span></span><br><span class="line"><span class="comment">//     &#123;&quot;title&quot;:&quot;我是一个新闻2222&quot;&#125;,</span></span><br><span class="line"><span class="comment">//     function(err,doc)&#123;</span></span><br><span class="line"><span class="comment">//         if(err)&#123;</span></span><br><span class="line"><span class="comment">//                 return console.log(err);</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             console.log(doc)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">News.deleteOne(&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;5b7563e2ba3c6747d0612204&quot;</span>&#125;, <span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="mongoose配置默认参数"><a href="#mongoose配置默认参数" class="headerlink" title="mongoose配置默认参数"></a>mongoose配置默认参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mongoose 默认参数、mongoose 模块化 、mongoose性能疑问</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// mongoose 默认参数：增加数据的时候，如果不传入数据会使用默认配置的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//useNewUrlParser这个属性会在url里识别验证用户所需的db,未升级前是不需要指定的,升级到一定要指定。</span></span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/eggcms&#x27;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据表（集合的）映射  注意：字段名称必须和数据库保持一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line"></span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    age:<span class="built_in">Number</span>,</span><br><span class="line">    status:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="number">1</span>   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义model操作数据库 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserModel=mongoose.model(<span class="string">&quot;User&quot;</span>,UserSchema,<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据的查找</span></span><br><span class="line"><span class="comment">// UserModel.find(&#123;&#125;,function(err,doc)&#123;</span></span><br><span class="line"><span class="comment">//     if(err)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         console.log(err);</span></span><br><span class="line"><span class="comment">//         return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     console.log(doc);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据的增加</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// var user=new UserModel(&#123;</span></span><br><span class="line"><span class="comment">//     name:&#x27;张三88888888888888&#x27;,</span></span><br><span class="line"><span class="comment">//     age:40,</span></span><br><span class="line"><span class="comment">//     status:1,</span></span><br><span class="line"><span class="comment">//     sex:&quot;男&quot;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// user.save(function(err)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     if(err)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         console.log(err);</span></span><br><span class="line"><span class="comment">//         return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;增加数据成功&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user=<span class="keyword">new</span> UserModel(&#123;</span><br><span class="line">    name:<span class="string">&#x27;张三6666666666666666&#x27;</span>,</span><br><span class="line">    age:<span class="number">30</span>    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;增加数据成功&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mongoose模块化"><a href="#mongoose模块化" class="headerlink" title="mongoose模块化"></a>mongoose模块化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//useNewUrlParser这个属性会在url里识别验证用户所需的db,未升级前是不需要指定的,升级到一定要指定。</span></span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/eggcms&#x27;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=mongoose;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mongoose预定义模式修饰符"><a href="#mongoose预定义模式修饰符" class="headerlink" title="mongoose预定义模式修饰符"></a>mongoose预定义模式修饰符</h4><blockquote><p>包括lowercase uppercase trim</p><p>以及自定义修饰符  set  和     get(不经常使用)</p></blockquote><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;./db.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FocusSchema=mongoose.Schema(&#123;</span><br><span class="line">    title:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        trim:<span class="literal">true</span>    <span class="comment">//定义 mongoose模式修饰符 去掉空格</span></span><br><span class="line">    &#125;,   </span><br><span class="line">    pic:<span class="built_in">String</span>,    </span><br><span class="line">    redirect:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">parmas</span>)</span>&#123;   <span class="comment">//增加数据的时候对redirect字段进行处理</span></span><br><span class="line">            <span class="comment">// parmas可以获取redirect的值 、    返回的数据就是redirect在数据库实际保存的值</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             www.baidu.com              http://www.baidu.com</span></span><br><span class="line"><span class="comment">             http://www.baidu.com       http://www.baidu.com</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span>(!parmas)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(parmas.indexOf(<span class="string">&#x27;http://&#x27;</span>)!=<span class="number">0</span> &amp;&amp; parmas.indexOf(<span class="string">&#x27;https://&#x27;</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;http://&#x27;</span>+parmas;</span><br><span class="line">               &#125;</span><br><span class="line">                <span class="keyword">return</span> parmas</span><br><span class="line"></span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    status:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=mongoose.model(<span class="string">&#x27;Focus&#x27;</span>,FocusSchema,<span class="string">&#x27;focus&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var mongoose&#x3D;require(&#39;.&#x2F;db.js&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var NewsSchema&#x3D;mongoose.Schema(&#123;</span><br><span class="line">    title:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        trim:true    &#x2F;&#x2F;定义 mongoose模式修饰符 去掉空格</span><br><span class="line">    &#125;,</span><br><span class="line">    author:String,</span><br><span class="line">    pic:String,    </span><br><span class="line">    content:String,</span><br><span class="line">    status:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        default:1</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports&#x3D;mongoose.model(&#39;News&#39;,NewsSchema,&#39;news&#39;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mongoose索引"><a href="#mongoose索引" class="headerlink" title="mongoose索引"></a>mongoose索引</h4><h5 id="配置索引"><a href="#配置索引" class="headerlink" title="配置索引"></a>配置索引</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DeviceSchema=newmongoose.Schema(&#123;</span><br><span class="line">    sn:&#123;</span><br><span class="line">    type:<span class="built_in">Number</span>,<span class="comment">//唯一索引</span></span><br><span class="line">    unique:<span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">  name:&#123;<span class="attr">type</span>:<span class="built_in">String</span>,<span class="comment">//普通索引</span></span><br><span class="line">      index:<span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="扩展mongoose静态方法和实例方法"><a href="#扩展mongoose静态方法和实例方法" class="headerlink" title="扩展mongoose静态方法和实例方法"></a>扩展mongoose静态方法和实例方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/user.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// var user = new UserModel(&#123;</span></span><br><span class="line"><span class="comment">//     name: &#x27;赵六&#x27;,</span></span><br><span class="line"><span class="comment">//     sn:&#x27;123456781&#x27;,</span></span><br><span class="line"><span class="comment">//     age: 29</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// user.save();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// UserModel.findBySn(&#x27;123456781&#x27;,function()&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UserModel.findBySn(<span class="string">&#x27;123456782&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(docs)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> UserModel(&#123;</span><br><span class="line">    name: <span class="string">&#x27;赵六&#x27;</span>,</span><br><span class="line">    sn:<span class="string">&#x27;123456781&#x27;</span>,</span><br><span class="line">    age: <span class="number">29</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// user.save();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user.print();   <span class="comment">//自定义的实例方法</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;./db.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line">     </span><br><span class="line">    name:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>       </span><br><span class="line">    &#125;,</span><br><span class="line">    sn:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        index:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age:<span class="built_in">Number</span>,       </span><br><span class="line">    status:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//静态方法 </span></span><br><span class="line"> </span><br><span class="line">UserSchema.statics.findBySn=<span class="function"><span class="keyword">function</span>(<span class="params">sn,cb</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//通过 find方法获取 sn的数据    this 关键字获取当前的model</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">this</span>.find(&#123;<span class="string">&quot;sn&quot;</span>:sn&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line">        cb(err,docs)</span><br><span class="line">    &#125;)   </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 实例方法   (基本不用)</span></span><br><span class="line"> </span><br><span class="line">UserSchema.methods.print=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我是一个实例方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports=mongoose.model(<span class="string">&#x27;User&#x27;</span>,UserSchema,<span class="string">&#x27;user&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="mongoose-数据校验"><a href="#mongoose-数据校验" class="headerlink" title="mongoose 数据校验"></a>mongoose 数据校验</h4><p>放在schema里验证传入的数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">required:表示这个数据必须传入</span><br><span class="line"></span><br><span class="line">max:用于Number类型数据，最大值</span><br><span class="line"></span><br><span class="line">min:用于Number类型数据，最小值</span><br><span class="line"></span><br><span class="line">enum:枚举类型，要求数据必须满足枚举值enum:[&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;]</span><br><span class="line"></span><br><span class="line">match:增加的数据必须符合match（正则）的规则</span><br><span class="line"></span><br><span class="line">maxlength：最大值</span><br><span class="line"></span><br><span class="line">minlength：最小值</span><br></pre></td></tr></table></figure><p>自定义验证器 通过validate</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;./db.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//mongoose数据校验:用户通过mongoose给mongodb数据库增加数据的时候，对数据的合法性进行的验证</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//mongoose里面定义Schema:字段类型，修饰符、默认参数 、数据校验都是为了数据库数据的一致性</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Schema，为数据库对象的集合,每个schema会映射到mongodb中的一个collection,定义Schema可以理解为表结构的定义</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,<span class="comment">//指定类型</span></span><br><span class="line">        trim:<span class="literal">true</span>,   <span class="comment">//修饰符         </span></span><br><span class="line">        required:<span class="literal">true</span>     </span><br><span class="line">    &#125;,</span><br><span class="line">    sn:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        index:<span class="literal">true</span>,  <span class="comment">//索引.</span></span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span>&#123;  <span class="comment">//自定义修饰符</span></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// maxlength:20,</span></span><br><span class="line">        <span class="comment">// minlength:10</span></span><br><span class="line">        <span class="comment">// match:/^sn(.*)/ ,</span></span><br><span class="line">        validate: <span class="function"><span class="keyword">function</span>(<span class="params">sn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sn.length &gt;= <span class="number">10</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">         </span><br><span class="line">    &#125;,   </span><br><span class="line">    age:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        min:<span class="number">0</span>,    <span class="comment">//用在number类型上面</span></span><br><span class="line">        max:<span class="number">150</span></span><br><span class="line">    &#125;,       </span><br><span class="line">    status:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>, </span><br><span class="line">        <span class="keyword">default</span>:<span class="string">&#x27;success&#x27;</span>, <span class="comment">//默认值</span></span><br><span class="line">        enum:[<span class="string">&#x27;success&#x27;</span>,<span class="string">&#x27;error&#x27;</span>]   <span class="comment">//status的值必须在 对应的数组里面  注意枚举是用在String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports=mongoose.model(<span class="string">&#x27;User&#x27;</span>,UserSchema,<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mongoose聚合管道"><a href="#mongoose聚合管道" class="headerlink" title="mongoose聚合管道"></a>mongoose聚合管道</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">db.order.aggregate([</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      $lookup:</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          from: &quot;order_item&quot;,</span></span><br><span class="line"><span class="comment">          localField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          foreignField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          as: &quot;items&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">   &#125;,</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    $match:&#123;&quot;all_price&quot;:&#123;$gte:90&#125;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">])</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> OrderModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/order.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//查询order 表的数据</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    OrderModel.find(&#123;&#125;,function(err,docs)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        console.log(docs);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//order表关联order_item</span></span><br><span class="line">OrderModel.aggregate([</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        $lookup:</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">from</span>: <span class="string">&quot;order_item&quot;</span>,</span><br><span class="line">            localField: <span class="string">&quot;order_id&quot;</span>,</span><br><span class="line">            foreignField: <span class="string">&quot;order_id&quot;</span>,</span><br><span class="line">            <span class="keyword">as</span>: <span class="string">&quot;items&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        $match:&#123;<span class="string">&quot;all_price&quot;</span>:&#123;<span class="attr">$gte</span>:<span class="number">90</span>&#125;&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">],<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(docs))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">db.order.aggregate([</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      $lookup:</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          from: &quot;order_item&quot;,</span></span><br><span class="line"><span class="comment">          localField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          foreignField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          as: &quot;items&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">   &#125;,</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    $match:&#123;&quot;all_price&quot;:&#123;$gte:90&#125;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">])</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*查询order_item，找出商品名称是酸奶的商品，酸奶这个商品对应的订单的订单号以及订单的总价格*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> OrderItemModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/order_item.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> OrderModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/order.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//第一种实现方式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    OrderItemModel.find(&#123;&quot;_id&quot;:&quot;5b743da92c327f8d1b360546&quot;&#125;,function(err,docs)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        // console.log(docs);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        var order_item=JSON.parse(JSON.stringify(docs));</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        var order_id=order_item[0].order_id;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        OrderModel.find(&#123;&quot;order_id&quot;:order_id&#125;,function(err,order)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">            //    console.log(order);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">            order_item[0].order_info=order[0];</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">            console.log(order_item)</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//第二种方式 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//mongoose中获取ObjectId           mongoose.Types.ObjectId</span></span><br><span class="line"> </span><br><span class="line">OrderItemModel.aggregate([</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">      $lookup:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">from</span>: <span class="string">&quot;order&quot;</span>,</span><br><span class="line">          localField: <span class="string">&quot;order_id&quot;</span>,</span><br><span class="line">          foreignField: <span class="string">&quot;order_id&quot;</span>,</span><br><span class="line">          <span class="keyword">as</span>: <span class="string">&quot;order_info&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;,&#123;</span><br><span class="line">    $match:&#123;<span class="attr">_id</span>: mongoose.Types.ObjectId(<span class="string">&#x27;5b743da92c327f8d1b360546&#x27;</span>)&#125;</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">],<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(docs))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>N个表关联查询</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">db.order.aggregate([</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      $lookup:</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          from: &quot;order_item&quot;,</span></span><br><span class="line"><span class="comment">          localField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          foreignField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          as: &quot;items&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">   &#125;,</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    $match:&#123;&quot;all_price&quot;:&#123;$gte:90&#125;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">])</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> ArticleModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/article.js&#x27;</span>);</span><br><span class="line"><span class="comment">//查询文章信息</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ArticleModel.find(&#123;&#125;,function(err,docs)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    console.log(docs);</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//查询文章信息 并显示文章的分类 以及文章的作者信息</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//两个表关联查询</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ArticleModel.aggregate([</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">      &#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        $lookup: &#123;</span></span><br><span class="line"><span class="comment">          from: &quot;articlecate&quot;,</span></span><br><span class="line"><span class="comment">          localField: &quot;cid&quot;,</span></span><br><span class="line"><span class="comment">          foreignField: &quot;_id&quot;,</span></span><br><span class="line"><span class="comment">          as: &quot;cate&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    ],function(err,docs)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">      console.log(docs[2].cate)</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//三个表关联查询</span></span><br><span class="line"> ArticleModel.aggregate([</span><br><span class="line">  &#123;</span><br><span class="line"> </span><br><span class="line">    $lookup: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">&quot;articlecate&quot;</span>,</span><br><span class="line">      localField: <span class="string">&quot;cid&quot;</span>,</span><br><span class="line">      foreignField: <span class="string">&quot;_id&quot;</span>,</span><br><span class="line">      <span class="keyword">as</span>: <span class="string">&quot;cate&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line"> </span><br><span class="line">    $lookup: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">      localField: <span class="string">&quot;author_id&quot;</span>,</span><br><span class="line">      foreignField: <span class="string">&quot;_id&quot;</span>,</span><br><span class="line">      <span class="keyword">as</span>: <span class="string">&quot;user&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">],<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(docs));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="⑨koa框架"><a href="#⑨koa框架" class="headerlink" title="⑨koa框架"></a>⑨koa框架</h2><ul><li>基本思路和express差不多，最大的特点就是可以避免异步嵌套</li></ul><h3 id="需了解的Koa知识点"><a href="#需了解的Koa知识点" class="headerlink" title="需了解的Koa知识点"></a>需了解的Koa知识点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa=<span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app=koa();</span><br><span class="line">app.use(<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;你好 koa&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数处理异步</span></span><br><span class="line"><span class="keyword">var</span> getData=<span class="function">(<span class="params">cb</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        cb(name);<span class="comment">//这样才能拿到Name的值</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">getData(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///Promise处理异步</span></span><br><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name=<span class="string">&quot;张三&quot;</span></span><br><span class="line">        resolve(name)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">///await用法 将异步转换为同步</span></span><br><span class="line"><span class="keyword">var</span> getData=<span class="keyword">async</span>()=&gt;&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125; <span class="comment">////返回的是一个promise对象</span></span><br><span class="line"><span class="keyword">var</span> test=<span class="keyword">async</span>()=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> d=<span class="keyword">await</span> getData();</span><br><span class="line">    <span class="built_in">console</span>.log(d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="koa路由"><a href="#koa路由" class="headerlink" title="koa路由"></a>koa路由</h3><p>需要安装Koa-router配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">cnpm i koa-router --save</span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="keyword">var</span> Koa=<span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> Router=<span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">var</span> router=<span class="keyword">new</span> Router()</span><br><span class="line"><span class="comment">//ctx 包含了request和response等信息</span></span><br><span class="line">router.get(<span class="string">&quot;/&quot;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;首页&quot;</span></span><br><span class="line">    </span><br><span class="line">&#125;).get(<span class="string">&quot;/news&quot;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;新闻页面&quot;</span></span><br><span class="line">&#125;).get(<span class="string">&quot;/shop&quot;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123; <span class="comment">///ctx.query 返回格式化后的参数列表 对象 ctx.querystring 返回的是请求的参数字符串</span></span><br><span class="line">    ctx.body=<span class="string">&quot;get传值&quot;</span>         <span class="comment">///当然也可以从ctx.request中获取值</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.query)</span><br><span class="line">&#125;).get(<span class="string">&quot;/book/:aid/:cid&quot;</span>,<span class="keyword">async</span>(ctx)=&gt;&#123; <span class="comment">///动态路由里可以传入多个值</span></span><br><span class="line">    ctx.body=ctx.params <span class="comment">//获取传值内容</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动路由</span></span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.use(router.allowedMethods())</span><br><span class="line">app.listen(<span class="number">3001</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="koa中间件"><a href="#koa中间件" class="headerlink" title="koa中间件"></a>koa中间件</h3><ul><li>中间件就是匹配路由之前或者匹配路由之后完成的一些列操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用级中间件</span></span><br><span class="line"><span class="comment">//匹配任何路由</span></span><br><span class="line"><span class="comment">//如果不写next，这个路由匹配了之后就不会继续向下匹配</span></span><br><span class="line">app.use(<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">    <span class="keyword">await</span> next()<span class="comment">//当前路由匹配之后继续向下匹配</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">///路由中间件</span></span><br><span class="line">router.get(<span class="string">&quot;/router&quot;</span>,<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;向下匹配&quot;</span>)</span><br><span class="line">    next()<span class="comment">//继续向下匹配</span></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&quot;/router&quot;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;第二个router页面&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">///错误处理中间件</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;这是开始中间件01&quot;</span>)</span><br><span class="line">    next()</span><br><span class="line">    <span class="keyword">if</span>(ctx.status==<span class="number">404</span>)&#123;</span><br><span class="line">        ctx.status=<span class="number">404</span>;</span><br><span class="line">        ctx.body=<span class="string">&quot;这是一个404页面&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ctx.url)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Node.js&quot;&gt;&lt;/a&gt;Node.js&lt;/h1&gt;&lt;h2 id=&quot;①静态服务器创建&quot;&gt;&lt;a href=&quot;#①静态服务器创建&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="node" scheme="https://a2914475618.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="https://a2914475618.github.io/2021/08/21/React/"/>
    <id>https://a2914475618.github.io/2021/08/21/React/</id>
    <published>2021-08-21T12:37:00.000Z</published>
    <updated>2021-09-23T07:55:30.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">react绑定属性要换成classname</span><br><span class="line"></span><br><span class="line">for 要换成htmlfor</span><br><span class="line"></span><br><span class="line">style 要写出 style&#x3D;&#123;&#123;&quot;color&quot;:&#39;red&#125;&#125;</span><br><span class="line"></span><br><span class="line">其他的属性和以前的写法是一样的 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引入图片</span><br><span class="line"></span><br><span class="line">import logo from &#39;.&#x2F;&#39;</span><br><span class="line">&lt;img src&#x3D;&#123;logo&#125; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">所有的模板要被一个根节点包含起来</span><br><span class="line"></span><br><span class="line">模板元素不用加引号</span><br><span class="line"></span><br><span class="line">循环数据要加key</span><br><span class="line"></span><br><span class="line">遍历数组的两种方式</span><br><span class="line"></span><br><span class="line">改变state的值</span><br><span class="line"></span><br><span class="line">this.setState(&#123;</span><br><span class="line"></span><br><span class="line">msg:&#39;改变后的值&#39;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios需要在后端设置允许跨域</span><br><span class="line"></span><br><span class="line">fetch-jsonp 允许跨域</span><br><span class="line"></span><br><span class="line">通过在路由后面加上&#x2F;:aid 配置动态路由</span><br><span class="line"></span><br><span class="line">this.props.match.params.id获取动态路由的传值</span><br><span class="line"></span><br><span class="line">可以通过Url模块来解析url地址 cnpm install url --save</span><br><span class="line"></span><br><span class="line">无论是动态路由还是get传值 都可以通过this.props中的属性找到参数</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="前端框架" scheme="https://a2914475618.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="React" scheme="https://a2914475618.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>vue基础知识</title>
    <link href="https://a2914475618.github.io/2021/08/08/postvue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://a2914475618.github.io/2021/08/08/postvue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-08-08T08:14:19.000Z</published>
    <updated>2021-09-22T13:26:18.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue基础知识"><a href="#vue基础知识" class="headerlink" title="vue基础知识"></a>vue基础知识</h1><h3 id="什么是vue生命周期？"><a href="#什么是vue生命周期？" class="headerlink" title="什么是vue生命周期？"></a>什么是vue生命周期？</h3><p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载DOM-渲染、更新-渲染、卸载等一系列的过程，我们称这是 Vue 的生命周期。</p><h3 id="vue生命周期的作用是什么"><a href="#vue生命周期的作用是什么" class="headerlink" title="vue生命周期的作用是什么"></a>vue生命周期的作用是什么</h3><p>Vue 所有的功能的实现都是围绕其生命周期进行的，在生命周期的不同阶段调用对应的钩子函数可以实现组件数据管理和DOM渲染两大重要功能。<br> 生命周期中有多个事件钩子，在控制整个vue实例的过程时更容易形成好的逻辑。</p><h3 id="第一次页面加载会触发哪几个钩子？"><a href="#第一次页面加载会触发哪几个钩子？" class="headerlink" title="第一次页面加载会触发哪几个钩子？"></a>第一次页面加载会触发哪几个钩子？</h3><p>beforeCreate ， created ， beforeMount ，mounted 这几个钩子</p><h3 id="简述每个周期具体适合哪些场景？"><a href="#简述每个周期具体适合哪些场景？" class="headerlink" title="简述每个周期具体适合哪些场景？"></a>简述每个周期具体适合哪些场景？</h3><ul><li>beforeCreate：创建前，此阶段为实例初始化之后，this指向创建的实例，此时的数据观察事件机制都未形成，不能获得DOM节点。<br>data，computed，watch，methods 上的方法和数据均不能访问。<br>可以在这加个loading事件。</li><li>created：创建后，此阶段为实例已经创建，完成数据（data、props、computed）的初始化导入依赖项。<br>可访问 data computed watch methods 上的方法和数据。<br>初始化完成时的事件写在这里，异步请求也适宜在这里调用（请求不宜过多，避免白屏时间太长）。<br>可以在这里结束loading事件，还做一些初始化，实现函数自执行。<br>未挂载DOM，若在此阶段进行DOM操作一定要放在Vue.nextTick()的回调函数中。</li><li>beforeMount：挂载前，虽然得不到具体的DOM元素，但vue挂载的根节点已经创建，下面vue对DOM的操作将围绕这个根元素继续进行。<br>beforeMount这个阶段是过渡性的，一般一个项目只能用到一两次。</li><li>mounted：挂载，完成创建vm.$el，和双向绑定<br>完成挂载DOM和渲染，可在mounted钩子函数中对挂载的DOM进行操作。<br>可在这发起后端请求，拿回数据，配合路由钩子做一些事情。</li><li>beforeUpdate：数据更新前，数据驱动DOM。<br>在数据更新后虽然没有立即更新数据，但是DOM中的数据会改变，这是vue双向数据绑定的作用。<br>可在更新前访问现有的DOM，如手动移出添加的事件监听器。</li><li>updated：数据更新后，完成虚拟DOM的重新渲染和打补丁。<br>组件DOM已完成更新，可执行依赖的DOM操作。<br>注意：不要在此函数中操作数据（修改属性），会陷入死循环。</li><li>activated：在使用vue-router时有时需要使用<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>来缓存组件状态，这个时候created钩子就不会被重复调用了。<br>如果我们的子组件需要在每次加载的时候进行某些操作，可以使用activated钩子触发。</li><li>deactivated：<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>组件被移除时使用。</li><li>beforeDestroy：销毁前，<br>可做一些删除提示，如：您确定删除xx吗？</li><li>destroyed：销毁后，当前组件已被删除，销毁监听事件，组件、事件、子实例也被销毁。<br>这时组件已经没有了，无法操作里面的任何东西了。</li></ul><h3 id="父子组件的生命周期"><a href="#父子组件的生命周期" class="headerlink" title="父子组件的生命周期"></a>父子组件的生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">当子组件挂载完成后，父组件才会挂载。</span><br><span class="line"></span><br><span class="line">当子组件完成挂在后，父组件会主动执行一次beforeUpdated&#x2F;updated钩子函数（仅首次）</span><br><span class="line"></span><br><span class="line">父子组件在data变化中是分别监控的，但是更新props中的数据是关联的。</span><br><span class="line"></span><br><span class="line">销毁父组件时，先将子组件销毁后才会销毁父组件。</span><br><span class="line"></span><br><span class="line">兄弟组件的初始化（mounted之前）是分开进行，挂载是从上到下依次进行</span><br><span class="line"></span><br><span class="line">当没有数据关联时，兄弟组件之间的更新和销毁是互不关联的</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue基础知识&quot;&gt;&lt;a href=&quot;#vue基础知识&quot; class=&quot;headerlink&quot; title=&quot;vue基础知识&quot;&gt;&lt;/a&gt;vue基础知识&lt;/h1&gt;&lt;h3 id=&quot;什么是vue生命周期？&quot;&gt;&lt;a href=&quot;#什么是vue生命周期？&quot; class=&quot;he</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="vue基础知识" scheme="https://a2914475618.github.io/tags/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Es6</title>
    <link href="https://a2914475618.github.io/2021/07/28/es6/"/>
    <id>https://a2914475618.github.io/2021/07/28/es6/</id>
    <published>2021-07-28T01:58:43.000Z</published>
    <updated>2021-09-22T13:33:02.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习知识点"><a href="#vue学习知识点" class="headerlink" title="vue学习知识点"></a>vue学习知识点</h1><h2 id="1-箭头函数"><a href="#1-箭头函数" class="headerlink" title="1.箭头函数"></a>1.箭头函数</h2><ol><li>this是静态的，this始终指向函数声明时所在作用域下的this的值</li><li>箭头函数不能作为构造去实例化对象</li><li>不能使用arguments变量</li><li>箭头函数适合与this无关的回调：定时器，数组的回调方式</li><li>不适合与this有关的回调：事件回调，对象的方法    因为1 </li></ol><p>2.element plus 中通过resetFields()重置表单所有项</p><p>3.<strong>1、window.open方法有三个参数：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.open(url, [name], [configuration])</span><br><span class="line">其中：</span><br><span class="line">url：为要新打开页面的url</span><br><span class="line">name：为新打开窗口的名字，可以通过此名字获取该窗口对象</span><br><span class="line">configuration：为新打开窗口的一些配置项，比如是否有菜单栏、滚动条、长高等等信息</span><br><span class="line"></span><br><span class="line">_top&quot;、&quot;_blank&quot;、&quot;_selft&quot;具有特殊意义的名称。</span><br><span class="line">    _blank：在新窗口显示目标网页</span><br><span class="line">    _self：在当前窗口显示目标网页</span><br><span class="line">    _top：框架网页中在上部窗口中显示目标网页</span><br></pre></td></tr></table></figure><p>4.rest参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*es6引入了rest参数，用于获取函数的实参，用来代替arguments*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">data</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line">data(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)<span class="comment">//返回的是[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;],就可以使用filter,some,every,map</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*rest参数必须要放在参数的最后</span></span><br></pre></td></tr></table></figure><p>5.扩展运算符(…)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展运算符能将数组转换为逗号分隔的参数序列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用：</span></span><br><span class="line"><span class="keyword">const</span> list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> list2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">//数组的合并    </span></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">const</span> team=list1.concat(list2)</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">const</span> team=[...list1,...list2]</span><br><span class="line"><span class="comment">//数组的克隆</span></span><br><span class="line">    <span class="keyword">const</span>  list_1=[...list1]</span><br><span class="line"><span class="comment">//将伪数组转换为真正的数组</span></span><br></pre></td></tr></table></figure><p>6.迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es6提供for of 供可迭代的使用</span></span><br><span class="line"><span class="comment">//获取iterator</span></span><br><span class="line"><span class="keyword">const</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> iterator=list[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">iterator.next()  <span class="comment">// 结果为  1,false</span></span><br><span class="line">iterator.next()<span class="comment">// 2,false</span></span><br><span class="line">iterator.next()<span class="comment">//3  false</span></span><br><span class="line">iterator.next()<span class="comment">//4  false</span></span><br><span class="line">iterator.next()<span class="comment">//undefined true</span></span><br></pre></td></tr></table></figure><p>7.生成器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成器其实就是一个特殊的函数</span></span><br><span class="line"><span class="comment">//异步编程 文件操作  网络操作（ajax,request) 数据库操作</span></span><br><span class="line"><span class="comment">//yield函数代码的分隔符</span></span><br><span class="line"><span class="comment">//通过next方法来控制向下执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">&#x27;hello generator&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator=gen()</span><br><span class="line"><span class="comment">//console.log(iterator)</span></span><br><span class="line">iterator.next()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成器函数实例</span></span><br><span class="line"><span class="comment">//一秒钟后打印111，在上面执行完2秒钟之后打印222，在上面执行完3秒钟之后打印333</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">interator.next(<span class="number">111</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">interator.next(<span class="number">222</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">333</span>);</span><br><span class="line">interator.next(<span class="number">333</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> userData=<span class="keyword">yield</span> one()<span class="comment">//111</span></span><br><span class="line"><span class="keyword">let</span> goodData=<span class="keyword">yield</span> two()<span class="comment">//222</span></span><br><span class="line"><span class="keyword">let</span> otherData=<span class="keyword">yield</span> three()<span class="comment">//333</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> interator=gen()</span><br><span class="line">interator.next()</span><br></pre></td></tr></table></figure><p>8.Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise是一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> data=<span class="string">&#x27;数据库中的用户数据&#x27;</span></span><br><span class="line">resolve(data)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="comment">//成功的回调 resolve</span></span><br><span class="line"><span class="built_in">console</span>.log(value)<span class="comment">//数据库中的用户数据</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;<span class="comment">//失败的回调 reject</span></span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>9.then</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;then方法的返回结果是一个promise对象，对象的状态由回调函数的执行结果决定</span><br><span class="line">&#x2F;&#x2F;then方法可以链式回调的</span><br></pre></td></tr></table></figure><p>10.set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>.<span class="string">&#x27;3&#x27;</span>.<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s)<span class="comment">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;]</span></span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="built_in">console</span>.log(s.size)<span class="comment">//4</span></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">s.add(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">s.delete(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"><span class="comment">//检测</span></span><br><span class="line">s.has(<span class="string">&#x27;1&#x27;</span>)  <span class="comment">//true</span></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">s.clear()</span><br><span class="line"><span class="comment">//for of 遍历</span></span><br><span class="line"><span class="comment">//数组去重</span></span><br><span class="line"><span class="keyword">let</span> result=[...new <span class="built_in">Set</span>(s)]<span class="comment">//集合会自动去除重复的元素，扩展运算符将元素展开，最后放在集合里</span></span><br><span class="line">s.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;<span class="comment">//利用filter来去重</span></span><br><span class="line"><span class="keyword">return</span> s.indexOf(item)===indedx</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//交集</span></span><br><span class="line"><span class="keyword">let</span> s2=[<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> result=[...new <span class="built_in">Set</span>(s)].filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> s2=<span class="keyword">new</span> <span class="built_in">Set</span>(arr2);</span><br><span class="line"><span class="keyword">if</span>(s2.has(item))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 也可以写成 s2.indexOf(item)!==-1</span></span><br><span class="line"><span class="comment">  或者 new Set(s2).has(item)*/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//并集</span></span><br><span class="line"><span class="keyword">let</span> union=[...new <span class="built_in">Set</span>([...s,...s2])]</span><br><span class="line"><span class="comment">//差集</span></span><br><span class="line"><span class="keyword">let</span> diff=[...new <span class="built_in">Set</span>(s)].filter(<span class="function"><span class="params">item</span>=&gt;</span>!(<span class="keyword">new</span> <span class="built_in">Set</span>(s2).has(item)))</span><br></pre></td></tr></table></figure><p>11.map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现了iterator接口  可使用扩展运算符和 for of遍历</span><br><span class="line">let m&#x3D;new Map()</span><br><span class="line">&#x2F;&#x2F;map 形成键值对</span><br><span class="line">m.set(&#39;name&#39;,&#39;前端&#39;)</span><br><span class="line">m.set(&#39;change&#39;,function()&#123;</span><br><span class="line">console.log(&quot;这是一个函数change&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">let key&#x3D;&#123;</span><br><span class="line">school:&#39;SHNU&#39;</span><br><span class="line">&#125;</span><br><span class="line">m.set(key,[&#39;徐汇&#39;,&#39;奉贤&#39;])</span><br><span class="line">&#x2F;&#x2F;size</span><br><span class="line">&#x2F;&#x2F;delete</span><br><span class="line">&#x2F;&#x2F;get 获取传入key值</span><br><span class="line">&#x2F;&#x2F;清空 m.clear()</span><br><span class="line">&#x2F;&#x2F;遍历 for of</span><br></pre></td></tr></table></figure><p>12.object对象的扩展方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;object.is  判断两个值是否完成相等</span><br><span class="line">&#x2F;&#x2F;object.assign 对象的合并</span><br><span class="line">&#x2F;&#x2F;object.setPortotypeOf 设置原型对象</span><br><span class="line">&#x2F;&#x2F;object.getPortotypeOf  获取原型对象</span><br></pre></td></tr></table></figure><p>13.async</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;返回结果为promise对象</span><br><span class="line">&#x2F;&#x2F;promise对象的结果由async函数执行的返回值决定</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>14.await</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;await必须写在async中</span><br><span class="line">&#x2F;&#x2F;await右侧的表达式一般为promise对象</span><br><span class="line">&#x2F;&#x2F;await返回的是promise对象成功的值</span><br><span class="line">&#x2F;&#x2F;await的promise失败了，通过try catch捕获处理</span><br><span class="line">&#x2F;&#x2F;await必须放在async中</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习知识点&quot;&gt;&lt;a href=&quot;#vue学习知识点&quot; class=&quot;headerlink&quot; title=&quot;vue学习知识点&quot;&gt;&lt;/a&gt;vue学习知识点&lt;/h1&gt;&lt;h2 id=&quot;1-箭头函数&quot;&gt;&lt;a href=&quot;#1-箭头函数&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Es6" scheme="https://a2914475618.github.io/tags/Es6/"/>
    
  </entry>
  
  <entry>
    <title>他山之石</title>
    <link href="https://a2914475618.github.io/2021/06/03/post%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://a2914475618.github.io/2021/06/03/post%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-06-03T07:49:32.000Z</published>
    <updated>2021-06-03T09:23:17.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="他山之石"><a href="#他山之石" class="headerlink" title="他山之石"></a>他山之石</h1><blockquote><p>声明：这部分为我学习中对一些小知识点的整理</p></blockquote><h2 id="1-httpSeverUtility类"><a href="#1-httpSeverUtility类" class="headerlink" title="1.httpSeverUtility类"></a>1.httpSeverUtility类</h2><blockquote><p>HttpServerUtility是一个工具类，为了在后台处理请求方便获取到一些常用的类型</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取服务器的计算机名称。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> MachineName &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="comment">// 获取和设置请求超时值（以秒计）。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> ScriptTimeout &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment">//清除前一个异常。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClearError</span>(<span class="params"></span>)</span>;</span><br><span class="line">    　　<span class="comment">//创建 COM 对象的服务器实例，该 COM 对象由对象的程序标识符 (ProgID) 标识。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">CreateObject</span>(<span class="params"><span class="built_in">string</span> progID</span>)</span>;</span><br><span class="line">        <span class="comment">//创建由对象类型标识的 COM 对象的一个服务器实例。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">CreateObject</span>(<span class="params">Type type</span>)</span>;</span><br><span class="line">        <span class="comment">//创建 COM 对象的服务器实例，该对象由对象的类标识符 (CLSID) 标识。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">CreateObjectFromClsid</span>(<span class="params"><span class="built_in">string</span> clsid</span>)</span>;</span><br><span class="line">        <span class="comment">//在当前请求的上下文中执行指定虚拟路径的处理程序。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">string</span> path</span>)</span>;</span><br><span class="line">        <span class="comment">//在当前请求的上下文中执行指定虚拟路径的处理程序，并指定是否要清除 System.Web.HttpRequest.QueryString 和 System.Web.HttpRequest.Form</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">// 在当前请求的上下文中执行指定虚拟路径的处理程序。System.IO.TextWriter 捕获执行的处理程序的输出。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">string</span> path, TextWriter writer</span>)</span>;</span><br><span class="line">        <span class="comment">//在当前请求的上下文中执行指定虚拟路径的处理程序。System.IO.TextWriter 捕获执行的处理程序的输出，布尔参数则指定是否要清除 System.Web.HttpRequest.QueryString</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">IHttpHandler handler, TextWriter writer, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//在当前请求的上下文中执行指定虚拟路径的处理程序。System.IO.TextWriter 捕获页面输出，布尔参数则指定是否要清除 System.Web.HttpRequest.QueryString</span></span><br><span class="line">        <span class="comment">//和 System.Web.HttpRequest.Form 集合。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">string</span> path, TextWriter writer, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//返回前一个异常。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Exception <span class="title">GetLastError</span>(<span class="params"></span>)</span>;</span><br><span class="line">        <span class="comment">//对 HTML 编码的字符串进行解码，并返回已解码的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">HtmlDecode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//对 HTML 编码的字符串进行解码，并将结果输出发送到 System.IO.TextWriter 输出流。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HtmlDecode</span>(<span class="params"><span class="built_in">string</span> s, TextWriter output</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 HTML 编码并返回已编码的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">HtmlEncode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 HTML 编码，并将结果输出发送到 System.IO.TextWriter 输出流。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HtmlEncode</span>(<span class="params"><span class="built_in">string</span> s, TextWriter output</span>)</span>;</span><br><span class="line">        <span class="comment">//返回与 Web 服务器上的指定虚拟路径相对应的物理文件路径。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">MapPath</span>(<span class="params"><span class="built_in">string</span> path</span>)</span>;</span><br><span class="line">        <span class="comment">//对于当前请求，终止当前页的执行，并使用指定的页 URL 路径来开始执行一个新页。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transfer</span>(<span class="params"><span class="built_in">string</span> path</span>)</span>;</span><br><span class="line">        <span class="comment">//终止当前页的执行，然后使用一个实现 System.Web.IHttpHandler 接口的自定义 HTTP 处理程序开始新请求的执行，并指定是否要清除</span></span><br><span class="line">        <span class="comment">//System.Web.HttpRequest.QueryString 和 System.Web.HttpRequest.Form 集合。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transfer</span>(<span class="params">IHttpHandler handler, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//终止当前页的执行，并使用指定的页 URL 路径来开始执行一个新页。指定是否清除 System.Web.HttpRequest.QueryString和 System.Web.HttpRequest.Form 集合。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transfer</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//异步执行指定的 URL。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransferRequest</span>(<span class="params"><span class="built_in">string</span> path</span>)</span>;</span><br><span class="line">        <span class="comment">//异步执行指定的 URL 并保留查询字符串参数。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransferRequest</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//使用指定的 HTTP 方法和标头异步执行指定的 URL。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransferRequest</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> preserveForm, <span class="built_in">string</span> method, NameValueCollection headers</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 URL 解码并返回已解码的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UrlDecode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//对在 URL 中接收的 HTML 字符串进行解码，并将结果输出发送到 System.IO.TextWriter 输出流。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UrlDecode</span>(<span class="params"><span class="built_in">string</span> s, TextWriter output</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 URL 编码，并返回已编码的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UrlEncode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 URL 编码，并将结果输出发送到 System.IO.TextWriter 输出流。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UrlEncode</span>(<span class="params"><span class="built_in">string</span> s, TextWriter output</span>)</span>;</span><br><span class="line">        <span class="comment">//对 URL 字符串的路径部分进行 URL 编码并返回编码后的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UrlPathEncode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//将 URL 字符串标记解码为使用 64 进制数字的等效字节数组。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">UrlTokenDecode</span>(<span class="params"><span class="built_in">string</span> input</span>)</span>;</span><br><span class="line">        <span class="comment">//将一个字节数组编码为使用 Base 64 编码方案的等效字符串表示形式，Base 64 是一种适于通过 URL 传输数据的编码方案。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">UrlTokenEncode</span>(<span class="params"><span class="built_in">byte</span>[] input</span>)</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="2-HttpContext类"><a href="#2-HttpContext类" class="headerlink" title="2.HttpContext类"></a>2.HttpContext类</h2><blockquote><p>1：HttpContext类它对Request、Respose、Server等等都进行了封装,并保证在整个请求周期内都可以随时随地的调用；为继承 IHttpModule 和 IHttpHandler 接口的类提供了对当前 HTTP 请求的 HttpContext 对象的引用。该对象提供对请求的内部Request、Response 和 Server 属性的访问。HttpContext的命名空间：System.Web（在 system.web.dll 中）;除了对几个对象进行封装外它还有个HttpContext.Item，通过它你可以在HttpContext的生存周期内提前存储一些临时的数据，方便随时使用。</p><p>2：生存周期：从客户端用户点击并产生了一个向服务器发送请求开始—服务器处理完请求并生成返回到客户端为止。针对每个不同用户的请求，服务器都会创建一个新的HttpContext实例直到请求结束,服务器销毁这个实例。</p><p>3：当我们创建一个一般处理程序Handler.ashx时，我们可以在文件中看到这一句 public void ProcessRequest (HttpContext context)；</p><p>4:可以通过HttpContext.Current获得当前的上下文httpContext的内容；这样可以在多处方便获取我们想要的数据；</p></blockquote><h3 id="HttpContext-Item"><a href="#HttpContext-Item" class="headerlink" title="HttpContext.Item"></a>HttpContext.Item</h3><blockquote><p>HttpContext.Item可以通过它来存储一些临时的数据</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Btn_Transfer_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        list.Add(<span class="string">&quot;踏浪帅&quot;</span>);</span><br><span class="line">        list.Add(<span class="string">&quot;www.cnblogs.com/wujy&quot;</span>);</span><br><span class="line">        HttpContext.Current.Items[<span class="string">&quot;TransferName&quot;</span>] = list;</span><br><span class="line">        Server.Transfer(<span class="string">&quot;Index.aspx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Btn_Redirect_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        list.Add(<span class="string">&quot;踏浪帅&quot;</span>);</span><br><span class="line">        list.Add(<span class="string">&quot;www.cnblogs.com/wujy&quot;</span>);</span><br><span class="line">        HttpContext.Current.Items[<span class="string">&quot;RedirectName&quot;</span>] = list;</span><br><span class="line">        Response.Redirect(<span class="string">&quot;Index.aspx&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用Server.Transfer方式我们在接收页面成功获得我们写入的数据；而Response.Redirect方式却导致数据的丢失；出现这个问题的原因是Server.Transfer是在服务器直接操作的的和调用的地方属于同一次http请求，此处如果使用Response.Redirect是从客户端重新发起了一次Http请求；而正如我们前面所说的HttpContext的生存周期只能在一个http请求才不会被服务器销毁这个实例；</p></blockquote><blockquote><p>一般的情况下尽可能用Server.Transfer方法（前提是服务器是IIS)，Server.Transfer方法更快速，而且因为只在服务器上执行，所以可以和任何浏览器兼容。</p><p>Response.Redirect其实上是当服务器碰到这条语句时发送一条指令（包含新的地址）给浏览器，然后让浏览器去发送http请求，请求Response.Redirect后面的那个新的http地址，流程如下:浏览器文件请求-&gt;服务器执行-&gt;遇到response.redirect语句-&gt;服务器发送Server.Transfer后面的地址给客户机端的浏览器-&gt;浏览器请求执行新的地址（服务器返回的Response.Redirect后面的地址）这就是一个小小的Response.Redirect的全部过程，<br>Server.Transfer语句当接受地址后是直接转向后面的地址，流程如下:浏览器文件请求-&gt;服务器执行-&gt;遇到Server.Transfer语句-&gt;服务器转向新的文件。</p></blockquote><h3 id="HttpContext对象中的Request"><a href="#HttpContext对象中的Request" class="headerlink" title="HttpContext对象中的Request"></a>HttpContext对象中的Request</h3><blockquote><p>Request 封装了客户端请求信息，是从客户端得到数据(从浏览器获取数据);常用的三种取得数据的方法是：Request.Form、Request.QueryString、Request其第三种是前两种的一个缩写，可以取代前两种情况。而前两种主要对应的Form提交时的两种不同的提交方法：分别是Post方法和Get方法。</p></blockquote><h3 id="HttpContext对象中的Response"><a href="#HttpContext对象中的Response" class="headerlink" title="HttpContext对象中的Response"></a>HttpContext对象中的Response</h3><blockquote><p>Response代表了服务器响应对象。每次客户端发出一个请求的时候，服务器就会用一个响应对象来处理这个请求，处理完这个请求之后，服务器就会销毁这个相应对象，以便继续接受其它客服端请求。</p></blockquote><p>Response主要用来一些输出的运用；只要简单记住其几个重要的属性以及方法就差不多了；</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Response.Redirect(<span class="string">&quot;Default.aspx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">string</span> FileContent = Server.MapPath(<span class="string">&quot;.&quot;</span>) + <span class="string">&quot;\\TextFile.txt&quot;</span>;</span><br><span class="line">        Response.WriteFile(FileContent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Button3_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Response.Write(<span class="string">&quot;这是第一句&quot;</span>);</span><br><span class="line">        Response.End(); <span class="comment">//停止运行，不再执行任何语句 </span></span><br><span class="line">        Response.Write(<span class="string">&quot;这是第二句&quot;</span>);</span><br><span class="line">        Response.Clear();  <span class="comment">//清空缓冲区中的所有内容输出</span></span><br><span class="line">        Response.Close();<span class="comment">//关闭当前服务器到客户端的连接</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="HttpContext对象中的Sever"><a href="#HttpContext对象中的Sever" class="headerlink" title="HttpContext对象中的Sever"></a>HttpContext对象中的Sever</h3><blockquote><p>Server对象是用于获取服务器的相关信息的对象</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder strBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;获取计算机名:&quot;</span>+HttpContext.Current.Server.MachineName+<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;获取指定相对路径在服务器上的物理路径:&quot;</span> + Server.MapPath(<span class="string">&quot;.&quot;</span>) + <span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;在服务器里实现跳转;不用再返回客户端；Server.Transfer(string Path)&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;先执行路径所代表的URL，然后执行完之后再执行本页:Server.Execute(string Path)&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;对特殊字符串的处理：Server.HtmlDecode(string s)与Server.HtmlEncode(string s)&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;对URL路径字符串进行编解码：Server.UrlDecode(string s)与Server.UrlEncode(string s)&lt;/br&gt;&quot;</span>);</span><br><span class="line">        Response.Write(strBuilder.ToString());</span><br></pre></td></tr></table></figure><h2 id="3-base关键字"><a href="#3-base关键字" class="headerlink" title="3.base关键字"></a>3.base关键字</h2><blockquote><p>base的相关作用</p><p>1.base调用基类构造函数</p><p>2.base调用基类方法</p></blockquote><h2 id="4-this关键字"><a href="#4-this关键字" class="headerlink" title="4.this关键字"></a>4.this关键字</h2><blockquote><p>this常用用途</p><p>1.限定被相似的名称隐藏的成员</p><p>eg：this.name=name;//name的访问级别为private</p><p>2.将对象作为参数传递到其他方法</p><p>eg：Print.DoPrint(this);//将调用的对象作为参数传到方法里</p><p>3.声明索引器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> param]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _arr[param]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _arr[param] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;他山之石&quot;&gt;&lt;a href=&quot;#他山之石&quot; class=&quot;headerlink&quot; title=&quot;他山之石&quot;&gt;&lt;/a&gt;他山之石&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;声明：这部分为我学习中对一些小知识点的整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="他山之石" scheme="https://a2914475618.github.io/tags/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>C#学习</title>
    <link href="https://a2914475618.github.io/2021/06/02/postC-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://a2914475618.github.io/2021/06/02/postC-%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-06-02T11:05:39.000Z</published>
    <updated>2021-06-02T11:07:52.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-学习记录"><a href="#C-学习记录" class="headerlink" title="C#学习记录"></a>C#学习记录</h1><blockquote><p>记录学习中的重要点，嘿嘿嘿</p></blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>泛型无处不在，与接口地位相当</p><p>泛型的东西在编程的时候不能直接拿来使用的，需要特化以后才能拿来使用</p><p>类型膨胀、成员膨胀（就比如方法重载，就只有参数类型不同，其他所有逻辑都是相同的）</p><p>写在&lt;&gt;里面的成为类型参数      </p><p>泛型接口 </p><p>一个类实现的是泛型接口，则他本身也是泛型的</p><p>泛型具有良好的正交性</p><p>.net framework 常用的数据结构都是泛型的</p><p>集中在 System.Collections.Generic里</p><p>list为动态数组，没有长度限制，自动创建新的数组并把内容拷贝过去</p><p>实现IEnumerable 接口的可以被迭代</p><p>实现ICollection是一个集合接口的可以添加新元素和删除元素</p><p>泛型接口也可以有两个类型参数，如IDictionary&lt;int,string&gt;</p><p>方法也可以是泛型的，只需呀写一个泛型方法，就能接受多种不一样的类型参数</p><p>泛型委托1.ACTION委托  2.FUNCTION委托Func&lt;参数类型，参数类型，返回值类型&gt;</p><p>lamada表达式：对于逻辑简单的方法，我们不想去声明他，随调用，随申明，不想污染上下文，把名字留给更重要的方法去用</p></blockquote><h2 id="partial类"><a href="#partial类" class="headerlink" title="partial类"></a>partial类</h2><blockquote><p>允许我们把代码分成两部分，或者多部分，而且每个部分都可以以自己的版本进行更新</p><p>需要其帮我们减少派生类</p><p>允许一个类的不同部分用不同的编程语言，比如cshtml</p></blockquote><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><blockquote><p>enum </p><p>限制数据的选择范围</p><p>枚举值的处置是从0开始，也可以自己给其赋值</p><p>比特位用法 1 2 4 8 </p></blockquote><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><blockquote><p>mvc ,mvp,mvvm等模式，是事件模式更高级的用法</p><p>事件模型五个部分</p><p>1.事件的拥有者</p><p>事件的源头</p><p>2.事件成员</p><p>3.事件的响应者</p><p>哪些类被通知到</p><p>4.事件处理器</p><p>用自己的方法来响应</p><p>5.事件订阅</p><p>事件处理器与事件关联在一起，监听</p><p>委托是事件的底层基础</p><p>事件是委托的上层建筑</p></blockquote><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><blockquote><p>函数指针的升级版</p><p>函数指针c语言：typedef int(*Calc)(int a,int b);间接调用</p><p>delegate</p><p>委托是一种类</p><p>通过委托保留了函数指针</p><p>1.action委托</p><p>Action action=new Action （类名.方法)</p><p>间接调用 action.Invoke();</p><p>也可以写为action();</p><p>2.Func委托</p><p>Func&lt;int ,int ,int&gt; func =new  Func&lt;int,int,int&gt;(类名.方法）</p><hr><p>通过delegate来声明委托，自定义委托</p><p>delegate double Calc (double x,double y);</p><p>用于回调方法</p></blockquote><h2 id="mvvm模式"><a href="#mvvm模式" class="headerlink" title="mvvm模式"></a>mvvm模式</h2><blockquote><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其<strong>核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定</strong>。</p><p>　　Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发更加高效、便捷。</p><p>MVVM 由 Model、View、ViewModel 三部分构成，Model 层代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑；View 代表UI 组件，它负责将数据模型转化成UI 展现出来，ViewModel 是一个同步View 和 Model的对象。</p><p>　　<strong>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上</strong>。</p><p>　　ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM， 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p></blockquote><h2 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h2><blockquote><p>在原有的类上扩展功能</p><p>也叫做继承</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-学习记录&quot;&gt;&lt;a href=&quot;#C-学习记录&quot; class=&quot;headerlink&quot; title=&quot;C#学习记录&quot;&gt;&lt;/a&gt;C#学习记录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;记录学习中的重要点，嘿嘿嘿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;泛</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="C#" scheme="https://a2914475618.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>npm学习</title>
    <link href="https://a2914475618.github.io/2021/06/01/postnpm%E5%AD%A6%E4%B9%A0/"/>
    <id>https://a2914475618.github.io/2021/06/01/postnpm%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-06-01T11:57:20.000Z</published>
    <updated>2021-06-01T12:27:30.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm学习"><a href="#npm学习" class="headerlink" title="npm学习"></a>npm学习</h1><blockquote><p>npm 意为node package manager</p><p>通过npm的指令可以快速安装所需要的依赖并且可以帮你记住每个依赖的版本</p></blockquote><h2 id="npm的常用命令"><a href="#npm的常用命令" class="headerlink" title="npm的常用命令"></a>npm的常用命令</h2><h3 id="一、安装配置Node和前言"><a href="#一、安装配置Node和前言" class="headerlink" title="一、安装配置Node和前言"></a>一、<a href="https://link.zhihu.com/?target=https://jingyan.baidu.com/article/c85b7a64b6498c003aac956a.html">安装配置Node和前言</a></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看 npm 的版本 </span><br><span class="line">$ npm -v  //6.4.0 &lt;&lt; 安装成功会返回版本号</span><br><span class="line"></span><br><span class="line"># 查看各个命令的简单用法</span><br><span class="line">$ npm -l </span><br><span class="line"> </span><br><span class="line"># 查看 npm 命令列表</span><br><span class="line">$ npm help</span><br><span class="line"></span><br><span class="line"># 查看 npm 的配置</span><br><span class="line">$ npm config list -l</span><br></pre></td></tr></table></figure><h3 id="二、npm-init-创建模块"><a href="#二、npm-init-创建模块" class="headerlink" title="二、npm init 创建模块"></a>二、npm init 创建模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p><code>npm init</code>用来初始化生成一个新的<code>package.json</code>文件。它会向用户提问一系列问题，如果觉得不用修改默认配置，一路回车就可以了。</p><p>尾缀带<code>-f</code>（代表force）、<code>-y</code>（代表yes），则跳过提问阶段，直接生成一个新的<code>package.json</code>文件，不带尾缀的话，默认有提问阶段。</p><p>以上创建好之后就可以在Package.json直接看了 还可以在里面修改更新。</p><h3 id="三、npm-set-设置环境变量"><a href="#三、npm-set-设置环境变量" class="headerlink" title="三、npm set 设置环境变量"></a>三、npm set 设置环境变量</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm set init-author-name &#x27;my name jerry&#x27;</span><br><span class="line">$ set init-author-email &#x27;12345@qq.com&#x27;</span><br><span class="line">$ set init-author-url &#x27;http://yourdomain.com&#x27;</span><br><span class="line">$ npm set init-license &#x27;MIT&#x27;</span><br><span class="line">执行了以上的修改，此时 Package.json并没有发生变化</span><br><span class="line"></span><br><span class="line">//设置后执行init才是真正修改成功</span><br><span class="line">$ npm init</span><br></pre></td></tr></table></figure><h3 id="四、pm-search-搜索模块"><a href="#四、pm-search-搜索模块" class="headerlink" title="四、pm search 搜索模块"></a>四、pm search 搜索模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm search &lt;搜索词&gt; [-g]</span><br></pre></td></tr></table></figure><p><code>npm search</code>命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。</p><h3 id="五、npm-list-查看模块"><a href="#五、npm-list-查看模块" class="headerlink" title="五、npm list 查看模块"></a>五、npm list 查看模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#当前项目安装的所有模块</span><br><span class="line">$npm list</span><br><span class="line"></span><br><span class="line">#列出全局安装的模块 带上[--depth 0] 不深入到包的支点 更简洁</span><br><span class="line">$ npm list -g --depth 0</span><br></pre></td></tr></table></figure><h3 id="四、npm-install-安装模块"><a href="#四、npm-install-安装模块" class="headerlink" title="四、npm install 安装模块"></a>四、npm install 安装模块</h3><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 读取package.json里面的配置单安装  </span><br><span class="line">$ npm install </span><br><span class="line">//可简写成 npm i</span><br><span class="line"></span><br><span class="line"># 默认安装指定模块的最新(@latest)版本</span><br><span class="line">$ npm install [&lt;@scope&gt;/]&lt;name&gt; </span><br><span class="line">//eg:npm install gulp</span><br><span class="line"></span><br><span class="line"># 安装指定模块的指定版本</span><br><span class="line">$ npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;</span><br><span class="line">//eg: npm install gulp@3.9.1</span><br><span class="line"></span><br><span class="line"># 安装指定指定版本范围内的模块</span><br><span class="line">$ npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;</span><br><span class="line">//eg: npm install vue@&quot;&gt;=1.0.28 &lt; 2.0.0&quot;</span><br><span class="line"></span><br><span class="line"># 安装指定模块的指定标签 默认值为(@latest)</span><br><span class="line">$ npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;</span><br><span class="line">//eg:npm install sax@0.1.1</span><br><span class="line"></span><br><span class="line"># 通过Github代码库地址安装</span><br><span class="line">$ npm install &lt;tarball url&gt;</span><br><span class="line">//eg:npm install git://github.com/package/path.git</span><br></pre></td></tr></table></figure><h3 id="配置选项说明"><a href="#配置选项说明" class="headerlink" title="配置选项说明:"></a><strong>配置选项说明:</strong></h3><blockquote><p>#全局安装 -g | -global <em>//eg: npm i -g gulp 或者 npm i gulp -g</em> #这是默认设置，除非-D或-O存在 #安装并将被添加到package.json的dependencies区。 -P | –save-prod #<strong>（生产阶段的依赖）</strong> #安装并将被添加到package.json的dependencies区 -S | –save <em>//eg: npm i gulp –save 或 npm i gulp -S</em> #<strong>（开发阶段的依赖）</strong> #安装并将被添加到package.json的devDependencies区。 -D | –save-dev <em>//npm i gulp –save-dev 或 npm i gulp -D</em> #<strong>（可选阶段的依赖）</strong> #安装并将被添加到package.json的optionalDependencies区 -O | –save-optional #安装模块的确切版，而不是使用npm的默认semver range运算符 -E | –save-exact <em>//npm i gulp –save-exact 或 npm i gulp -E</em> #安装并将被添加到<code>bundleDependencies</code>列表中 -B | –save-bundle #模块不管是否安装过，npm 都要强制重新安装 -f|–force <em>//eg:npm install sax –force</em> <em>//补充：所有模块都要强制重新安装，那就删除<code>node_modules</code>，重新执行<code>npm install</code></em> $ rm -rf node_modules <em>//或者手动去删除node_modules目录</em> $ npm install #防止保存到<code>dependencies</code> –no-save #报告安装状况而不是真的安装 –dry-run</p></blockquote><h3 id="五、npm-uninstall-卸载模块"><a href="#五、npm-uninstall-卸载模块" class="headerlink" title="五、npm uninstall 卸载模块"></a>五、npm uninstall 卸载模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#卸载当前项目或全局模块 </span><br><span class="line">$ npm uninstall &lt;name&gt; [-g] </span><br><span class="line"></span><br><span class="line">eg: npm uninstall gulp --save-dev  </span><br><span class="line">    npm i gulp -g</span><br><span class="line"></span><br><span class="line">卸载后，你可以到 /node\_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</span><br><span class="line">npm ls 查看安装的模块</span><br></pre></td></tr></table></figure><h3 id="六、npm-update-更新模块"><a href="#六、npm-update-更新模块" class="headerlink" title="六、npm update 更新模块"></a>六、npm update 更新模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#升级当前项目或全局的指定模块</span><br><span class="line">$ npm update &lt;name&gt; [-g] </span><br><span class="line">//eg: npm update express </span><br><span class="line">      npm update express -g</span><br></pre></td></tr></table></figure><h3 id="七、npm-link-引用模块"><a href="#七、npm-link-引用模块" class="headerlink" title="七、npm link 引用模块"></a>七、npm link 引用模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 引用依赖 有些包是全局安装了，在项目里面只需要引用即可。</span><br><span class="line">$ npm link [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]</span><br><span class="line">//eg: 引用   npm link gulp gulp-ssh gulp-ftp</span><br><span class="line">//eg: 解除引用 npm unlink gulp</span><br><span class="line"></span><br><span class="line"># 引用模块 本人用得少没深入说了 用得上时可去翻文档例子</span><br><span class="line">$ npm link (in package dir)</span><br></pre></td></tr></table></figure><h3 id="八、npm-run-执行脚本"><a href="#八、npm-run-执行脚本" class="headerlink" title="八、npm run 执行脚本"></a>八、npm run 执行脚本</h3><p><code>package.json</code>的<code>scripts</code>字段，可以用于指定脚本命令，供<code>npm</code>直接调用。<code>npm run</code>会创建一个Shell，执行指定的命令。</p><h3 id="两个命令简写，start和test属于特殊命令，可以省略run-其余的都得带上run。"><a href="#两个命令简写，start和test属于特殊命令，可以省略run-其余的都得带上run。" class="headerlink" title="两个命令简写，start和test属于特殊命令，可以省略run,其余的都得带上run。"></a>两个命令简写，<code>start</code>和<code>test</code>属于特殊命令，可以省略run,其余的都得带上run。</h3><h3 id="npm-run的参数。"><a href="#npm-run的参数。" class="headerlink" title="npm run的参数。"></a><code>npm run</code>的参数。</h3><ul><li>如果不加任何参数，直接运行，会列出<code>package.json</code>里面所有可以执行的脚本命令</li></ul><ul><li>可配置参数 格式是加上两个连词线（–）<br><em>—package.json文件—</em> “scripts”: { “test”: “mocha test/“ } <em>——-终端——-</em> $ npm run test <em>– anothertest.js*</em># 等同于直接执行* $ mocha test/ anothertest.js</li></ul><h3 id="内部变量"><a href="#内部变量" class="headerlink" title="内部变量"></a>内部变量</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---package.json文件---</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;npm_test&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">    &quot;config&quot;: &#123;</span><br><span class="line">        &quot;reporter&quot;: &quot;xunit&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;script&quot;:&#123;</span><br><span class="line">        &quot;bundle&quot;: &quot;mkdir -p build/$npm_package_version/&quot;,</span><br><span class="line">        //$npm_package_version 读的是外层&quot;version&quot;的值，同理$npm_package_name 读的是外层&quot;name&quot;的值</span><br><span class="line">        &quot;test&quot;: &quot;mocha test/ --reporter $npm_package_config_reporter&quot;</span><br><span class="line">        //$npm_package_config_reporter读的是&quot;config&quot;里的&quot;reporter&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pre-和post-两个钩子（hook）"><a href="#pre-和post-两个钩子（hook）" class="headerlink" title="pre-和post-两个钩子（hook）"></a><code>pre-</code>和<code>post-</code>两个钩子（hook）</h3><p>npm会先查看有没有定义prelint和postlint两个钩子，如果有的话，就会<br>先执行<code>npm run pre-命令名</code>，然后执行<code>npm run 命令名</code>，最后执行<code>npm run post-命令名</code>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---package.json文件---</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;lint&quot;: &quot;eslint --cache --ext .js --ext .jsx src&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;karma start --log-leve=error karma.config.js --single-run=true&quot;,</span><br><span class="line">    &quot;pretest&quot;: &quot;npm run lint&quot;,</span><br><span class="line">    &quot;posttest&quot;: &quot;echo &#x27;Finished running tests&#x27;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">-------终端-------</span><br><span class="line">$ npm run lint</span><br><span class="line">//直接执行 npm run lint 结束</span><br><span class="line"></span><br><span class="line">$ npm run test</span><br><span class="line">//因为有定义了两个钩子pretest、posttest。</span><br><span class="line">//所以先执行 npm run pretest</span><br><span class="line">//然后执行 npm run test</span><br><span class="line">//最后执行 npm run posttest</span><br></pre></td></tr></table></figure><h3 id="九、npm-publish-发布模块"><a href="#九、npm-publish-发布模块" class="headerlink" title="九、npm publish 发布模块"></a>九、npm publish 发布模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 未注册 申请注册一个用户 直接在https://www.npmjs.com/注册一样</span><br><span class="line">$ npm adduser</span><br><span class="line">//执行后 填写几个问题 Username、Password、Email</span><br><span class="line"></span><br><span class="line">#已注册</span><br><span class="line">$ npm login </span><br><span class="line"></span><br><span class="line">#发布</span><br><span class="line">$ npm publish</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;npm学习&quot;&gt;&lt;a href=&quot;#npm学习&quot; class=&quot;headerlink&quot; title=&quot;npm学习&quot;&gt;&lt;/a&gt;npm学习&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;npm 意为node package manager&lt;/p&gt;
&lt;p&gt;通过npm的指令可以快</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="npm" scheme="https://a2914475618.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>有向图两点的所有路径</title>
    <link href="https://a2914475618.github.io/2021/05/20/post%E6%9C%89%E5%90%91%E5%9B%BE%E4%B8%A4%E7%82%B9%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/"/>
    <id>https://a2914475618.github.io/2021/05/20/post%E6%9C%89%E5%90%91%E5%9B%BE%E4%B8%A4%E7%82%B9%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/</id>
    <published>2021-05-20T03:30:18.000Z</published>
    <updated>2021-05-20T04:00:58.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有向图两点之间的所有路径"><a href="#有向图两点之间的所有路径" class="headerlink" title="有向图两点之间的所有路径"></a>有向图两点之间的所有路径</h1><blockquote><p>C语言描述的</p><p>深度优先搜索+栈+有向图</p><p>通过此方法可以推广到找两城市，两国家的所有路径</p><p>亲测可用，不懂留言</p></blockquote><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="头文件以及结构体定义"><a href="#头文件以及结构体定义" class="headerlink" title="头文件以及结构体定义"></a>头文件以及结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;StackQueue.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 20   <span class="comment">/*最多顶点个数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY    32767   <span class="comment">/*表示极大值，即∞*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> True  1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> False 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Error -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ok    1</span></span><br><span class="line">    <span class="comment">/*图的种类：DG表示有向图, DN表示有向网, UDG表示无向图, UDN表示无向网*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>DG, DN, UDG, UDN&#125; GraphKind;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexData[<span class="number">10</span>];   <span class="comment">/*假设顶点数据为字符串*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span></span></span><br><span class="line"><span class="class">&#123;</span>   <span class="keyword">int</span> adj;   <span class="comment">/*对于无权图，用1或0表示是否相邻；对带权图，则为权值类型*/</span></span><br><span class="line"><span class="comment">//    AdjType adj;</span></span><br><span class="line"><span class="comment">//    OtherInfo info;</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span>   VertexData vertex[MAX_VERTEX_NUM];              <span class="comment">/*顶点数组*/</span></span><br><span class="line">    ArcNode arcs[MAX_VERTEX_NUM][MAX_VERTEX_NUM];   <span class="comment">/*邻接矩阵*/</span></span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;   <span class="comment">/*图的顶点数和弧数*/</span></span><br><span class="line">    GraphKind kind;      <span class="comment">/*图的种类标志*/</span></span><br><span class="line">&#125;AdjMatrix;   <span class="comment">/*(Adjacency Matrix Graph)*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[MAX_VERTEX_NUM];   <span class="comment">/*访问标志数组*/</span></span><br><span class="line"><span class="keyword">int</span> Find[MAX_VERTEX_NUM][MAX_VERTEX_NUM];<span class="comment">//两点之间的线的状态</span></span><br><span class="line">SeqStack T;</span><br></pre></td></tr></table></figure><h3 id="测试主函数"><a href="#测试主函数" class="headerlink" title="测试主函数"></a>测试主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   AdjMatrix G;  VertexData s=<span class="string">&quot;v1&quot;</span>,t;</span><br><span class="line"></span><br><span class="line">    CreateUDG(&amp;G);</span><br><span class="line">InitStack(&amp;T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nDFS: &quot;</span>);  DFSTraverse(&amp;G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nBFS: &quot;</span>);  BFSTraverse(&amp;G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入路径的终点：&quot;</span>);  </span><br><span class="line">    getchar();</span><br><span class="line">    </span><br><span class="line">gets(t);  <span class="comment">// 输入v6</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DFS Path:\n&quot;</span>);  one_path(&amp;G,s,t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ALL DFS Path:\n&quot;</span>); all_path(&amp;G,s,t);</span><br><span class="line">    getchar();  getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建有向图"><a href="#创建有向图" class="headerlink" title="创建有向图"></a>创建有向图</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateUDG</span><span class="params">(AdjMatrix *G)</span>   <span class="comment">/*创建一个有向图*/</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> i,j,k;  VertexData v1,v2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入图的顶点数和边数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;G-&gt;vexnum,&amp;G-&gt;arcnum);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)   <span class="comment">/*初始化邻接矩阵*/</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++)&#123;</span><br><span class="line">        G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">           </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入图的顶点数据：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;G-&gt;vertex[i]);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请逐条输入边的两个顶点：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)</span><br><span class="line">    &#123;   <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,&amp;v1,&amp;v2);</span><br><span class="line">        i=LocateVertex(G,v1);</span><br><span class="line">        j=LocateVertex(G,v2);</span><br><span class="line">        G-&gt;arcs[i][j].adj=<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(Ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVertex</span><span class="params">(AdjMatrix *G, VertexData v)</span>   <span class="comment">/*求顶点位置函数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> j=Error,k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;G-&gt;vexnum; k++)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(G-&gt;vertex[k],v))  &#123;  j=k;  <span class="keyword">break</span>;  &#125;</span><br><span class="line">    <span class="keyword">return</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(AdjMatrix *G)</span></span>&#123;    <span class="comment">/*初始化线数组*/</span></span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G-&gt;vexnum;j++)&#123;</span><br><span class="line">Find[i][j]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(VertexData e)</span>   <span class="comment">/*输出点的数据*/</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DepthFirstSearch</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> w;</span><br><span class="line"></span><br><span class="line">    Visit(G-&gt;vertex[v0]);  visited[v0]=True;</span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">0</span>; w&lt;G-&gt;vexnum; w++)</span><br><span class="line">        <span class="keyword">if</span> ( !visited[w] &amp;&amp; G-&gt;arcs[v0][w].adj==<span class="number">1</span> ) </span><br><span class="line">            DepthFirstSearch(G,w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(AdjMatrix *G)</span>   <span class="comment">/*对图G进行深度优先搜索*/</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> vi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (vi=<span class="number">0</span>; vi&lt;G-&gt;vexnum; vi++)  </span><br><span class="line">        visited[vi]=False;   <span class="comment">/*访问标志数组初始化*/</span></span><br><span class="line">    <span class="keyword">for</span> (vi=<span class="number">0</span>; vi&lt;G-&gt;vexnum; vi++)</span><br><span class="line">        <span class="keyword">if</span> (!visited[vi])    <span class="comment">/*调用深度遍历连通子图的函数*/</span></span><br><span class="line">            DepthFirstSearch(G,vi);   <span class="comment">/*若图G是连通图，则此只调用函数一次*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展：广度优先"><a href="#扩展：广度优先" class="headerlink" title="扩展：广度优先"></a>扩展：广度优先</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BreadthFirstSearch</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;   SeqQueue Q;  <span class="keyword">int</span> v,w;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Visit(G-&gt;vertex[v0]);  visited[v0]=True;</span></span><br><span class="line">    InitQueue(&amp;Q);  EnterQueue(&amp;Q,v0);</span><br><span class="line">    <span class="keyword">while</span> (!IsEmpty(&amp;Q))</span><br><span class="line">    &#123;   DeleteQueue(&amp;Q,&amp;v);</span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line"></span><br><span class="line">    Visit(G-&gt;vertex[v]);</span><br><span class="line">    visited[v]=True;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span> (w=<span class="number">0</span>; w&lt;G-&gt;vexnum; w++)&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !visited[w] &amp;&amp; G-&gt;arcs[v][w].adj==<span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">//Visit(G-&gt;vertex[w]);</span></span><br><span class="line"><span class="comment">//visited[w]=True;</span></span><br><span class="line">EnterQueue(&amp;Q,w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(AdjMatrix *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> vi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (vi=<span class="number">0</span>; vi&lt;G-&gt;vexnum; vi++)  </span><br><span class="line">        visited[vi]=False ;</span><br><span class="line">    <span class="keyword">for</span> (vi=<span class="number">0</span>; vi&lt;G-&gt;vexnum; vi++)</span><br><span class="line">        <span class="keyword">if</span> (!visited[vi])  </span><br><span class="line">            BreadthFirstSearch(G,vi);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;c</span><br></pre></td></tr></table></figure><h3 id="打印一条路径"><a href="#打印一条路径" class="headerlink" title="打印一条路径"></a>打印一条路径</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_path</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;   SeqStack S;  <span class="comment">// 本函数体中不能再定义变量</span></span><br><span class="line">InitStack(&amp;S);</span><br><span class="line">Push(&amp;S, v); </span><br><span class="line"><span class="keyword">while</span> ( visited[v]!=INFINITY )</span><br><span class="line">    &#123;   v=visited[v];</span><br><span class="line">Push(&amp;S,v);</span><br><span class="line"><span class="comment">//Pop(&amp;S,&amp;v);</span></span><br><span class="line"><span class="comment">//Visit(G-&gt;vertex[v];  </span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( !IsEmpty(&amp;S) )&#123;</span><br><span class="line">Pop(&amp;S,&amp;v);</span><br><span class="line">Visit(G-&gt;vertex[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找简单路径"><a href="#找简单路径" class="headerlink" title="找简单路径"></a>找简单路径</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS_path</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> w;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">0</span>; w&lt;G-&gt;vexnum; w++)</span><br><span class="line">        <span class="keyword">if</span> ( visited[w]==<span class="number">-1</span> &amp;&amp; G-&gt;arcs[u][w].adj==<span class="number">1</span> ) </span><br><span class="line">        &#123;   visited[w]=u;</span><br><span class="line">            <span class="keyword">if</span> (w==v) &#123; print_path(G,v);  <span class="keyword">return</span> <span class="number">1</span>; &#125;  <span class="comment">/*输出路径*/</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (DFS_path(G,w,v)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">one_path</span><span class="params">(AdjMatrix *G, VertexData s, VertexData t)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> u,v;   <span class="comment">/*在连通图G中找一条从第u个顶点到v个顶点的简单路径*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (u=<span class="number">0</span>; u&lt;G-&gt;vexnum; u++)  </span><br><span class="line">        visited[u]=<span class="number">-1</span>;   <span class="comment">/*将visited[u]置为-1，表示第u个顶点没有访问过*/</span> </span><br><span class="line">    u=LocateVertex(G,s);</span><br><span class="line">    v=LocateVertex(G,t);</span><br><span class="line">    visited[u]=INFINITY; <span class="comment">/*将visited[u]置为INFINITY，表示第u个顶点已被访问，且是路径的起点*/</span></span><br><span class="line">    <span class="keyword">if</span> (!DFS_path(G,u,v))  <span class="built_in">printf</span>(<span class="string">&quot;%s==&gt;%s没有路径！&quot;</span>, s,t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找所有路径"><a href="#找所有路径" class="headerlink" title="找所有路径"></a>找所有路径</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS_allpath</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> w;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*if(visited[u]==INFINITY)&#123;</span></span><br><span class="line"><span class="comment">Push(&amp;T,u);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//用一个栈来存放进入的顺序</span></span><br><span class="line"><span class="comment">//然后不断出栈</span></span><br><span class="line"><span class="comment">//找到 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">0</span>; w&lt;G-&gt;vexnum; w++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( u!=w &amp;G-&gt;arcs[u][w].adj==<span class="number">1</span>&amp;&amp;Find[u][w]==<span class="number">0</span> ) </span><br><span class="line">        &#123;   </span><br><span class="line"><span class="keyword">if</span>(w!=v)&#123;</span><br><span class="line">        Push(&amp;T,w); </span><br><span class="line">        Find[u][w]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">visited[w]=u;</span><br><span class="line"><span class="keyword">if</span>(w==v)&#123;</span><br><span class="line"></span><br><span class="line">print_path(G,v);</span><br><span class="line">Find[u][w]=<span class="number">1</span>;</span><br><span class="line">visited[v]=<span class="number">-1</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">DFS_allpath(G,w,v);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//if (w==v) &#123; print_allpath(G,v);  return 1; &#125;  /*输出路径*/</span></span><br><span class="line">           <span class="comment">// else if (DFS_path(G,w,v)) return 1;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">all_path</span><span class="params">(AdjMatrix *G,VertexData s, VertexData t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;   <span class="comment">/*在连通图G中找一条从第u个顶点到v个顶点的简单路径*/</span></span><br><span class="line"><span class="keyword">int</span> k,j,l;</span><br><span class="line">    <span class="keyword">for</span> (u=<span class="number">0</span>; u&lt;G-&gt;vexnum; u++)  </span><br><span class="line">        visited[u]=<span class="number">-1</span>;   <span class="comment">/*将visited[u]置为-1，表示第u个顶点没有访问过*/</span> </span><br><span class="line">    u=LocateVertex(G,s);</span><br><span class="line">    v=LocateVertex(G,t);</span><br><span class="line">    clear(G);</span><br><span class="line">    visited[u]=INFINITY; <span class="comment">/*将visited[u]置为INFINITY，表示第u个顶点已被访问，且是路径的起点*/</span></span><br><span class="line">    Push(&amp;T,u);</span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(&amp;T))&#123;</span><br><span class="line">    GetTop(&amp;T,&amp;k);</span><br><span class="line">    <span class="keyword">if</span> (!DFS_allpath(G,k,v))  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d==&gt;%d没有路径！&quot;</span>, k+<span class="number">1</span>,v+<span class="number">1</span>);Pop(&amp;T,&amp;j);</span><br><span class="line">    <span class="keyword">for</span>(l=<span class="number">0</span>;l&lt;G-&gt;vexnum;l++)&#123;</span><br><span class="line">    Find[j][l]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果图"><a href="#运行结果图" class="headerlink" title="运行结果图"></a>运行结果图</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210520115441.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;有向图两点之间的所有路径&quot;&gt;&lt;a href=&quot;#有向图两点之间的所有路径&quot; class=&quot;headerlink&quot; title=&quot;有向图两点之间的所有路径&quot;&gt;&lt;/a&gt;有向图两点之间的所有路径&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;C语言描述的&lt;/p&gt;
&lt;p&gt;深度优</summary>
      
    
    
    
    <category term="数据结构" scheme="https://a2914475618.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="有向图的所有路径" scheme="https://a2914475618.github.io/tags/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>数据库知识在路上</title>
    <link href="https://a2914475618.github.io/2021/05/18/post%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E5%9C%A8%E8%B7%AF%E4%B8%8A/"/>
    <id>https://a2914475618.github.io/2021/05/18/post%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E5%9C%A8%E8%B7%AF%E4%B8%8A/</id>
    <published>2021-05-18T12:36:51.000Z</published>
    <updated>2021-05-18T13:00:13.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库学习（新）"><a href="#数据库学习（新）" class="headerlink" title="数据库学习（新）"></a>数据库学习（新）</h1><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="1-存储过程的概念"><a href="#1-存储过程的概念" class="headerlink" title="1.存储过程的概念"></a>1.存储过程的概念</h3><p>存储过程 (Stored Procedure) 是在大型数据库系统中 , 一组为了完成特定功能的 SQL 语句集 , 存储在数据库中 , 经过第一次编译后再次调用不需要再次编译 , 用户通过指定存储过程的名字并给出参数 (如果该存储过程带有参数) 来执行它 , 存储过程是数据库中的一个重要对象 ; 存储过程中可以包含 逻辑控制语句 和 数据操纵语句 , 它可以接受参数 , 输出参数 , 返回单个或多个结果集以及返回值 ;</p><h3 id="2-存储过程的优缺点"><a href="#2-存储过程的优缺点" class="headerlink" title="2.存储过程的优缺点"></a>2.存储过程的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点 :"></a>优点 :</h4><ol><li>由于应用程序随着时间推移会不断更改 , 增删功能 , SQL 语句会变得更复杂 , 存储过程为封装此类代码提供了一个替换位置 </li><li>由于存储过程在创建时即在数据库服务器上进行了编译并存储在数据库中 , 所以存储过程运行要比单个的 SQL 语句块要快 </li><li>由于在调用时只需用提供存储过程名和必要的参数信息 , 所以在一定程度上也可以减少网络流量 , 简单网络负担 ;</li><li>可维护性高 , 更新存储过程通常比更改 , 测试以及重新部署程序集需要较少的时间和精力 ;</li><li>代码精简一致 , 一个存储过程可以用于应用程序代码的不同位置 ;</li><li>增强安全性 :<br>1.通过向用户授予对存储过程 (而不是基于表) 的访问权限 , 它们可以提供对特定数据的访问 ;<br>2.提高代码安全 , 防止 SQL注入 (但未彻底解决 , 例如将数据操作语言 DML 附加到输入参数) ;<br>3.SQLParameter 类指定存储过程参数的数据类型 , 作为深层次防御性策略的一部分 , 可以验证用户提供的值类型 (但也不是万无一失 , 还是应该传递至数据库前得到附加验证) ;</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点 :"></a>缺点 :</h4><ol><li>如果更改范围大到需要对输入存储过程的参数进行更改 , 或者要更改由其返回的数据 , 则仍需要更新程序集中的代码以添加参数 , 等等 ;</li><li>可移植性差 , 由于存储过程将应用程序绑定到 Server , 因此使用存储过程封装业务逻辑将限制应用程序的可移植性 ; 如果应用程序的可移植性在您的环境中非常重要 , 则将业务逻辑封装在不特定于 RDBMS 的中间层中可能是一个更佳的选择 ;</li></ol><h3 id="3-存储过程语法"><a href="#3-存储过程语法" class="headerlink" title="3.存储过程语法"></a>3.存储过程语法</h3><h4 id="1-创建存储过程"><a href="#1-创建存储过程" class="headerlink" title="1.创建存储过程"></a>1.创建存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> GetUsers()</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>; </span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-调用存储过程"><a href="#2-调用存储过程" class="headerlink" title="2.调用存储过程"></a>2.调用存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> GetUsers();</span><br></pre></td></tr></table></figure><h4 id="3-删除存储过程"><a href="#3-删除存储过程" class="headerlink" title="3.删除存储过程"></a>3.删除存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> GetUsers;</span><br></pre></td></tr></table></figure><h3 id="5-相关小知识点"><a href="#5-相关小知识点" class="headerlink" title="5.相关小知识点"></a>5.相关小知识点</h3><h5 id="1-SET-ANSI-NULLS-ON以及SET-QUOTED-IDENTIFIER-ON"><a href="#1-SET-ANSI-NULLS-ON以及SET-QUOTED-IDENTIFIER-ON" class="headerlink" title="1.SET ANSI_NULLS ON以及SET QUOTED_IDENTIFIER ON"></a>1.SET ANSI_NULLS ON以及SET QUOTED_IDENTIFIER ON</h5><blockquote><p>USE [Test]<br>GO<br>SET ANSI_NULLS ON<br>GO<br>SET QUOTED_IDENTIFIER ON<br>GO</p></blockquote><p>1.作用和详解：<br>1). USE:指明整个存储过程所调用/使用的数据库，其中Test是我本地建立的数据库名称，USE [Test]就是告诉程序，要调用/使用的是我本地的Test数据库的意思。必须要指明调用/使用的具体数据库。</p><p>2).GO:该语句不是SQL的语句，表示一个事务结束的标识，告诉程序在go语句之前的所有语句已经确认并提交了，可以进行批处理操作了。当程序运行到go语句时，就会直接对go语句之前的代码进行批处理操作了。</p><p>3).SET ANSI_NULLS ON:表示对空值(null)对等于(=)或不等于(&lt;&gt;)进行判断时，遵从 SQL-92 规则。</p><p>(1).SQL-92规则中，在对空值(null)进行等于(=)或不等于(&lt;&gt;)比较时，取值为false。也就是说:</p><p>1&gt;.即使是表中字段column_name中包含空值(null),在进行条件判断 where column_name = NULL 时，该select查询语句返回的数据是空的/返回零行。</p><p>2&gt;.即使是表中字段column_name中包含非空值，在进行条件判断 where column_name &lt;&gt; NULL时，该select查询语句返回的数据是空的/返回零行。</p><p>3)SET ANSI_NULLS OFF:表示在对空值(null)进行等于(=)或不等于(&lt;&gt;)比较时，不再遵从SQL-92的规则：</p><p>1&gt;.当column_name字段中包含了空值(null)，在进行条件判断 where column_name = null 时，该select查询语句会返回表中column_name 字段值为空(null)的数据行。</p><p>2&gt;.当column_name字段中包含了非空值，在进行条件判断 where column_name &lt;&gt; null 时，该select 查询语句会返回表中column_name 字段值不为空的数据行。</p><p>4).SET QUOTED_IDENTIFIER ON:表示使用  引用标识符，标识符可以用双引号分隔，但是，文字必须用单引号分隔。</p><p>例如：</p><p> select “name”,”age”,”sex”,”grade” from a where name = ‘张三’</p><p>或<br> select name,age,sex,grade from a where name = ‘张三’</p><p>说明：当设置为ON时，标识符(数据表字段 name)等字段可以用双引号分隔，也可以不用双引号分隔，但是文字部分必须用单引号来分隔，否则会报错。注意：当设置为ON时，标识符返回的是改字段的值，name，返回的是姓名为张三，age字符返回的是年龄为25，sex字符返回的是性别为男，grade字符返回的是分数为400</p><p>5).SET QUOTED_IDENTIFIER OFF:表示标识符不能用双引号分隔，否则标识符会被当做字符串值来返回，不再是字符来返回。而且，文字部分必须用单引号或双引号分隔。</p><p>说明：当设置为OFF时，标识符是不能用双引号来分隔的，否则标识符就会被当做是字符串来返回，不再是字符来返回了。而且，文字部分是必须要引号来分隔，可以是单引号(‘’)，也可以是双引号(“”)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库学习（新）&quot;&gt;&lt;a href=&quot;#数据库学习（新）&quot; class=&quot;headerlink&quot; title=&quot;数据库学习（新）&quot;&gt;&lt;/a&gt;数据库学习（新）&lt;/h1&gt;&lt;h2 id=&quot;存储过程&quot;&gt;&lt;a href=&quot;#存储过程&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="数据库" scheme="https://a2914475618.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>哈夫曼树解压法（接上节）</title>
    <link href="https://a2914475618.github.io/2021/04/28/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E8%A7%A3%E5%8E%8B%E6%B3%95/"/>
    <id>https://a2914475618.github.io/2021/04/28/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E8%A7%A3%E5%8E%8B%E6%B3%95/</id>
    <published>2021-04-28T02:29:36.000Z</published>
    <updated>2021-04-28T03:05:16.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈夫曼树解压法"><a href="#哈夫曼树解压法" class="headerlink" title="哈夫曼树解压法"></a>哈夫曼树解压法</h1><blockquote><p>本一节是上一节的延申，本节内容较上节内容更为简单，只要能够看懂怎样还原数据的就可以明白其关键点</p><p>亲测可用！</p><p>要看哈夫曼树的压缩请点击这里——[GO！](<a href="https://luzyi.cn/2021/04/24/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8E%8B%E7%BC%A9%E6%B3%95/">哈夫曼树压缩法 | 一位可可爱爱的编橙爱好者 (luzyi.cn)</a>)</p></blockquote><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span> <span class="comment">/* printf,scanf,fopen,fclose, fscanf , fprintf */</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span> <span class="comment">/* malloc, free */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INPUT_FILENAME <span class="meta-string">&quot;HFT_Model&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTPUT_FILENAME <span class="meta-string">&quot;HFT_Decompression.txt&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HUFFMAN_CODE_SIZE 10000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINE_BUFFER_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_SIZE 2000</span></span><br></pre></td></tr></table></figure><h2 id="结构体类型的定义"><a href="#结构体类型的定义" class="headerlink" title="结构体类型的定义"></a>结构体类型的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> value;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> parent;</span><br><span class="line">    <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">int</span> right;</span><br><span class="line">    <span class="keyword">int</span> value_to_ASCII;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">node_t</span>;</span></span><br></pre></td></tr></table></figure><h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_code_size</span><span class="params">(<span class="keyword">char</span> filename[])</span></span>;</span><br><span class="line"><span class="comment">//根据压缩后的文件读取哈夫曼码的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_HuffmanCode</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">int</span> received_array[], <span class="keyword">int</span> code_size)</span></span>;</span><br><span class="line"><span class="comment">//根据压缩后的文件将哈夫曼码保存在数组里面</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_tree_size</span><span class="params">(<span class="keyword">char</span> filename[])</span></span>;</span><br><span class="line"><span class="comment">//读取哈夫曼树模型里的长度其实也就是2n-1个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_HuffmanTree</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">node_t</span> received_huffman_tree[], <span class="keyword">int</span> tree_length)</span></span>;</span><br><span class="line"><span class="comment">//将每个节点的数据保存在结构体数组里面</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size, </span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">const</span> <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> code_length, <span class="keyword">char</span> received_str[])</span></span>;</span><br><span class="line"><span class="comment">//运用哈夫曼编码以及哈夫曼树之间的关系，还原对应的字符保存在数组里</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_decoded_info</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">char</span> received_str[], <span class="keyword">int</span> str_size)</span></span>;</span><br><span class="line"><span class="comment">//将数组里的字符保存在文件里</span></span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the file you want to decompress: &quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> file_to_decompress[FILE_SIZE];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]s&quot;</span>, file_to_decompress); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取哈夫曼编码的长度</span></span><br><span class="line">    <span class="keyword">int</span> code_size = read_code_size(file_to_decompress);</span><br><span class="line">    <span class="keyword">if</span>(code_size == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sorry, invalid Huffman Code detected, &quot;</span></span><br><span class="line">               <span class="string">&quot;please check your input file again \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将哈夫曼编码保存在整型数组里</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reading the Huffman Codes now...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> received_huffman_code[HUFFMAN_CODE_SIZE];</span><br><span class="line">    read_HuffmanCode(file_to_decompress, received_huffman_code, code_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reading the Huffman Tree from &#x27;HFT_Model&#x27;...\n&quot;</span>);</span><br><span class="line">    <span class="comment">//树的长度也就是节点个数</span></span><br><span class="line">    <span class="keyword">int</span> tree_length = read_tree_size(INPUT_FILENAME);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态创建结构体数组</span></span><br><span class="line">    <span class="keyword">node_t</span>* received_huffman_tree;</span><br><span class="line">    received_huffman_tree = (<span class="keyword">node_t</span>*) <span class="built_in">malloc</span>(tree_length * <span class="keyword">sizeof</span>(<span class="keyword">node_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(received_huffman_tree == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocation failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从树关系模型里得到每一个节点的信息保存在结构体数组里</span></span><br><span class="line">    read_HuffmanTree(INPUT_FILENAME,received_huffman_tree, tree_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Succeed\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decompressing now:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> received_str[STR_SIZE];</span><br><span class="line">    <span class="keyword">int</span> actual_str_size = decode(received_huffman_tree,tree_length, </span><br><span class="line">                          received_huffman_code, code_size, received_str);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//输出字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Saving the decompressed infromation into&quot;</span> </span><br><span class="line">           <span class="string">&quot;&#x27;HFT_Decompression.txt&#x27; \n&quot;</span>);</span><br><span class="line">    save_decoded_info(OUTPUT_FILENAME, received_str, actual_str_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放空间</span></span><br><span class="line">    <span class="built_in">free</span>(received_huffman_tree);</span><br><span class="line">    received_huffman_tree = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="函数的实现"><a href="#函数的实现" class="headerlink" title="函数的实现"></a>函数的实现</h2><h3 id="1-获取文件里的哈夫曼码的长度"><a href="#1-获取文件里的哈夫曼码的长度" class="headerlink" title="1.获取文件里的哈夫曼码的长度"></a>1.获取文件里的哈夫曼码的长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">nt <span class="title">read_code_size</span><span class="params">(<span class="keyword">char</span> filename[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = fgetc(fp);</span><br><span class="line">    <span class="keyword">while</span> (ch != EOF) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ch != <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;1&#x27;</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        size++;</span><br><span class="line">        ch = fgetc(fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-保存哈夫曼编码"><a href="#2-保存哈夫曼编码" class="headerlink" title="2.保存哈夫曼编码"></a>2.保存哈夫曼编码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_HuffmanCode</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">int</span> received_array[], <span class="keyword">int</span> code_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; code_size; i++)&#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%1d&quot;</span>, &amp;received_array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-获取树的节点个数"><a href="#3-获取树的节点个数" class="headerlink" title="3.获取树的节点个数"></a>3.获取树的节点个数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_tree_size</span><span class="params">(<span class="keyword">char</span> filename[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> line_buffer[LINE_BUFFER_SIZE];</span><br><span class="line">    <span class="keyword">int</span> tree_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fgets(line_buffer, LINE_BUFFER_SIZE, fp)) tree_size++;</span><br><span class="line">    </span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> tree_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-获取节点的信息"><a href="#4-获取节点的信息" class="headerlink" title="4.获取节点的信息"></a>4.获取节点的信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_HuffmanTree</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">node_t</span> received_huffman_tree[], </span></span></span><br><span class="line"><span class="function"><span class="params">                                                        <span class="keyword">int</span> tree_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ;i &lt; tree_length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d %d %d %d %d&quot;</span>, </span><br><span class="line">&amp;received_huffman_tree[i].weight, </span><br><span class="line">&amp;received_huffman_tree[i].parent, </span><br><span class="line">&amp;received_huffman_tree[i].left, </span><br><span class="line">&amp;received_huffman_tree[i].right,</span><br><span class="line">                    &amp;received_huffman_tree[i].value_to_ASCII);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-解码"><a href="#5-解码" class="headerlink" title="5.解码"></a>5.解码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size, </span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">const</span> <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> code_length, <span class="keyword">char</span> received_str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> parent = tree_size - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt; code_length)&#123;</span><br><span class="line">        <span class="comment">//只要不是叶子节点就执行</span></span><br><span class="line">        <span class="comment">//从上到下</span></span><br><span class="line">        <span class="comment">//跳出下面这个while的时候，就完成了一个哈夫曼编码的解码</span></span><br><span class="line">        <span class="keyword">while</span>(huffman_tree[parent].left != <span class="number">-1</span> || </span><br><span class="line">              huffman_tree[parent].right != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//如果是0则哈夫曼树对应的就是左孩子</span></span><br><span class="line">            <span class="keyword">if</span>(huffman_codes[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                parent = huffman_tree[parent].left;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果是1就是右孩子</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(huffman_codes[i] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                parent = huffman_tree[parent].right;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跳出上面的那个while以后就代表着一个字符的权重即节点已经找完</span></span><br><span class="line">        <span class="comment">//已经为叶子节点，则输出其的ASCII即为对应的字符</span></span><br><span class="line">        received_str[str_size++] = huffman_tree[parent].value_to_ASCII;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//打印出来</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,huffman_tree[parent].value_to_ASCII); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//重置树的根节点。因为是从上到下，所以每次都要回到根节点</span></span><br><span class="line">        parent = tree_size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-保存解码后的字符串"><a href="#6-保存解码后的字符串" class="headerlink" title="6.保存解码后的字符串"></a>6.保存解码后的字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_decoded_info</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">char</span> received_str[], </span></span></span><br><span class="line"><span class="function"><span class="params">                                                            <span class="keyword">int</span> str_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; str_size; i++)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%c&quot;</span>, received_str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>哈夫曼树的压缩和解压已经完成！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哈夫曼树解压法&quot;&gt;&lt;a href=&quot;#哈夫曼树解压法&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼树解压法&quot;&gt;&lt;/a&gt;哈夫曼树解压法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本一节是上一节的延申，本节内容较上节内容更为简单，只要能够看懂怎样还原数据</summary>
      
    
    
    
    <category term="数据结构" scheme="https://a2914475618.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="哈夫曼树解压缩法" scheme="https://a2914475618.github.io/tags/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>哈夫曼树压缩法</title>
    <link href="https://a2914475618.github.io/2021/04/24/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8E%8B%E7%BC%A9%E6%B3%95/"/>
    <id>https://a2914475618.github.io/2021/04/24/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8E%8B%E7%BC%A9%E6%B3%95/</id>
    <published>2021-04-24T11:34:16.000Z</published>
    <updated>2021-04-24T14:56:00.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈夫曼树压缩法"><a href="#哈夫曼树压缩法" class="headerlink" title="哈夫曼树压缩法"></a>哈夫曼树压缩法</h1><blockquote><p>C语言实现，我的注释很清楚，相信读者可以看懂，关于哈夫曼树的相关介绍我就直接跳过了</p><p>本方法可以实现对文件的压缩，解压部分后期有时间会发</p></blockquote><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p>要用到对文件的操作以及内存空间的创建以及释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span> <span class="comment">/* printf,scanf,fopen,fclose, fprintf */</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span> <span class="comment">/* malloc, free */</span></span></span><br><span class="line"><span class="comment">//这些定义的内容后面都会用到</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTPUT_FILENAME1 <span class="meta-string">&quot;Huffman_Codes.txt&quot;</span><span class="comment">//输出文件的名字</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTPUT_FILENAME2 <span class="meta-string">&quot;HFT_Model&quot;</span><span class="comment">//输出文件的模型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_SIZE 20000<span class="comment">//允许的字符串最大长度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_SIZE 100<span class="comment">//文件大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHAR_COUNT_SIZE 1000<span class="comment">//统计字符次数的数组最大长度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HUFFMAN_CODE_SIZE 10000<span class="comment">//哈夫曼编码最大长度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIT_SIZE 100</span></span><br></pre></td></tr></table></figure><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>//哈夫曼树的节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> value;<span class="comment">//所存的字符的值</span></span><br><span class="line">    <span class="keyword">int</span> value_to_ASCII;<span class="comment">//字符对应的ASSCII值</span></span><br><span class="line">    <span class="keyword">int</span> weight;<span class="comment">//权重</span></span><br><span class="line">    <span class="keyword">int</span> parent;<span class="comment">//双亲</span></span><br><span class="line">    <span class="keyword">int</span> left;<span class="comment">//左孩子</span></span><br><span class="line">    <span class="keyword">int</span> right;<span class="comment">//右孩子</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">node_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">codes</span>//编码节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> bit[BIT_SIZE];<span class="comment">//对应节点的二进制编码</span></span><br><span class="line">    <span class="keyword">int</span> from;<span class="comment">//在上面那个数组里的起始下标</span></span><br><span class="line">    <span class="keyword">int</span> to;<span class="comment">//结束下标</span></span><br><span class="line">    <span class="keyword">char</span> value;<span class="comment">//编码对应的字符</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">codes</span> <span class="title">codes_t</span>;</span></span><br></pre></td></tr></table></figure><h2 id="声明的函数"><a href="#声明的函数" class="headerlink" title="声明的函数"></a>声明的函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_files</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">char</span> str[])</span></span>;</span><br><span class="line"><span class="comment">//读取文件，得到字符串数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate_frequency</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> count[])</span></span>;</span><br><span class="line"><span class="comment">//计算字符串数组中的每一个字符出现的频率，放在Count数组里</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initiate_HuffmanTree</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size, <span class="keyword">int</span> count[])</span></span>;</span><br><span class="line"><span class="comment">//初始化哈夫曼树，根据Count数组设置哈夫曼树每个节点的值，权重</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">construct_HuffmanTree</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> n, <span class="keyword">int</span> tree_size)</span></span>;</span><br><span class="line"><span class="comment">//创建哈夫曼树的结构，也就是根据哈夫曼树的定义来创建结构</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_minWeight</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> range, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>* min1_p, <span class="keyword">int</span>* min2_p, <span class="keyword">int</span>* position1_p, <span class="keyword">int</span>* position2_p)</span></span>;</span><br><span class="line"><span class="comment">//得到最小的两个权值及其对应的位置 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_HuffmanDictionary</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], </span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">codes_t</span> huffman_codes_dic[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//根据哈夫曼树获取哈夫曼编码字典</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> str[], <span class="keyword">const</span> <span class="keyword">codes_t</span> huffman_codes_dic[], </span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> n, <span class="keyword">int</span>* length_p)</span></span>;</span><br><span class="line"><span class="comment">//据哈夫曼代码字典将输入字符串编码为哈夫曼代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_HuffmanDictionary</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">codes_t</span> huffman_codes_dic[])</span></span>;</span><br><span class="line"><span class="comment">//用于在哈夫曼代码字典中打印每个字符及其哈夫曼代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_binary</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> *binary_length_p)</span></span>;<span class="comment">//二进制文件打印 </span></span><br><span class="line"><span class="comment">//将二进制数对应的十进制数打印出来，用递归算法和位运算实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_HuffmanCode</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="comment">//保存哈夫曼树文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_HuffmanTree</span><span class="params">(<span class="keyword">char</span> filename[],  <span class="keyword">const</span> <span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size)</span></span>;</span><br><span class="line"><span class="comment">//保存其模型结构</span></span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 从输入文件读取内容并存储将文件中的字符转换为“str”字符串 */</span></span><br><span class="line">    <span class="keyword">char</span> str[STR_SIZE];</span><br><span class="line">    <span class="keyword">char</span> file_to_compress[FILE_SIZE];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter the file you want to compress: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]s&quot;</span>, file_to_compress);<span class="comment">//传入压缩文件的名字 </span></span><br><span class="line">    read_files(file_to_compress, str);<span class="comment">//读入文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用计数数组计算每个字符的频率  每个字符的ASCII数是计数数组中的索引 */</span></span><br><span class="line">    <span class="keyword">int</span> count[CHAR_COUNT_SIZE];</span><br><span class="line">    calculate_frequency(str,count);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算“count数组”中唯一字符的个数，这个数字正好是哈夫曼树中的叶节点数*/</span></span><br><span class="line"><span class="keyword">int</span> i, n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; CHAR_COUNT_SIZE; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count[i] != <span class="number">0</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;ASCII = %d; char is: %c; Frequency: %d\n&quot;</span>, </span><br><span class="line">                                 i, i, count[i]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tree_size = <span class="number">2</span> * n - <span class="number">1</span>;<span class="comment">//总共有2n-1个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 通过动态分配创建哈夫曼树，因为树的大小是在程序运行时决定的*/</span></span><br><span class="line">    <span class="keyword">node_t</span>* huffman_tree;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tree_size is: %d\n&quot;</span>, tree_size);</span><br><span class="line">    huffman_tree = (<span class="keyword">node_t</span>*) <span class="built_in">malloc</span>(tree_size * <span class="keyword">sizeof</span>(<span class="keyword">node_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(huffman_tree == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocation failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    initiate_HuffmanTree(huffman_tree, tree_size,  count);<span class="comment">//初始化哈夫曼树 </span></span><br><span class="line">    construct_HuffmanTree(huffman_tree, n, tree_size);<span class="comment">//构建哈夫满树 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">通过动态分配创建哈夫曼码字典数组，因为这个数组的大小是叶节点的数量*/</span></span><br><span class="line">    <span class="keyword">codes_t</span>* huffman_codes_dic;</span><br><span class="line">    huffman_codes_dic = (<span class="keyword">codes_t</span>*) <span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">codes_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(huffman_codes_dic == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocation failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    get_HuffmanDictionary(huffman_tree, huffman_codes_dic, n);<span class="comment">//对哈夫曼树进行编码 </span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> huffman_codes[HUFFMAN_CODE_SIZE];<span class="comment">//创建一个每个树节点的编码的数组，也就是结构数组 </span></span><br><span class="line">    <span class="keyword">int</span> huffman_codes_length = <span class="number">0</span>;<span class="comment">//用来存放哈夫曼编码的长度</span></span><br><span class="line">    encode(str,huffman_codes_dic,huffman_codes,n, &amp;huffman_codes_length);<span class="comment">//通过哈夫曼树编码字典对字符串编码</span></span><br><span class="line"><span class="comment">//通过huffman_codes数组返回 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    print_HuffmanDictionary(n,huffman_codes_dic);<span class="comment">//打印 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The original bit numbers are: \n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> char_to_ASCII = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> total_binary_length = <span class="number">0</span>;<span class="comment">//统计总共的二进制长度</span></span><br><span class="line">    <span class="keyword">int</span> single_binary_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        char_to_ASCII = str[i];</span><br><span class="line">        print_binary(char_to_ASCII, &amp;single_binary_length);</span><br><span class="line">        total_binary_length += single_binary_length;</span><br><span class="line">        single_binary_length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After Compression, the Huffman Codes are: \n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; huffman_codes_length; i++)<span class="comment">//打印每个节点的二进制编码</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,huffman_codes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算压缩比</span></span><br><span class="line">    <span class="keyword">double</span> compression_ratio = (<span class="keyword">double</span>)huffman_codes_length / </span><br><span class="line">                                (<span class="keyword">double</span>)total_binary_length;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The size of original bit numbers is : %d\n&quot;</span>, total_binary_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The size of bit numbers after compression is : %d\n&quot;</span>, </span><br><span class="line">                                                        huffman_codes_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The compression ratio is: %.2lf \n&quot;</span>, compression_ratio);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将哈夫曼代码和哈夫曼树模型保存到目录中，为解压和搜索算法做准备 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writing the Huffman Codes to the file &#x27;Huffman_Codes&#x27;...\n&quot;</span>);</span><br><span class="line">    save_HuffmanCode(OUTPUT_FILENAME1,huffman_codes,huffman_codes_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Saving the Huffman Tree Model to the file &#x27;Huffman_Tree&#x27;...\n&quot;</span>);</span><br><span class="line">    save_HuffmanTree(OUTPUT_FILENAME2,huffman_tree,tree_size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    <span class="built_in">free</span>(huffman_tree);</span><br><span class="line">    huffman_tree = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">free</span>(huffman_codes_dic);</span><br><span class="line">    huffman_codes_dic = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h2><h3 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1.读取文件"></a>1.读取文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_files</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">char</span> str[])</span></span>&#123;<span class="comment">//用str存放读入的文件字符串 </span></span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;<span class="comment">//FILE*fp  定义一个名为fp的指针，属于FILE（文件）类型。FILE是一类特殊的指针，用来操作 文件。</span></span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: The file is not existed.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = fgetc(fp);</span><br><span class="line">    <span class="keyword">while</span> (ch != EOF) &#123;</span><br><span class="line">        str[index++] = ch;</span><br><span class="line">        ch = fgetc(fp);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    str[index] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-计算频率"><a href="#2-计算频率" class="headerlink" title="2.计算频率"></a>2.计算频率</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate_frequency</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> count[])</span><span class="comment">//计算字符串每个字符出现的频率，字符对应的ASCII值的下标对应的就是该字符的频率 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//初始化数组</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; CHAR_COUNT_SIZE; i++)&#123;</span><br><span class="line">        count[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> char_to_ASCII;</span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; str[index] != <span class="string">&#x27;\0&#x27;</span>; index++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将字符转换为ASSCII并且用对应ASSCII的下标存该字符，求次数</span></span><br><span class="line">        char_to_ASCII = str[index];</span><br><span class="line">        count[char_to_ASCII]++;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-初始化哈夫曼树"><a href="#3-初始化哈夫曼树" class="headerlink" title="3.初始化哈夫曼树"></a>3.初始化哈夫曼树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initiate_HuffmanTree</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size, <span class="keyword">int</span> count[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//初始化操作</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; tree_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        huffman_tree[i].parent = <span class="number">-1</span>;</span><br><span class="line">        huffman_tree[i].left = <span class="number">-1</span>;</span><br><span class="line">        huffman_tree[i].right = <span class="number">-1</span>;</span><br><span class="line">        huffman_tree[i].weight = <span class="number">0</span>;</span><br><span class="line">        huffman_tree[i].value = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        huffman_tree[i].value_to_ASCII = <span class="number">32</span>;<span class="comment">//32对应的字符为&#x27; &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给叶节点赋值</span></span><br><span class="line"><span class="keyword">int</span> ASCII, node_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ASCII_to_char;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ASCII = <span class="number">0</span>; ASCII &lt; CHAR_COUNT_SIZE; ASCII++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(count[ASCII] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ASCII_to_char = ASCII;<span class="comment">//将ASSCI转换为字符 </span></span><br><span class="line">            huffman_tree[node_index].value = ASCII_to_char;</span><br><span class="line">            huffman_tree[node_index].value_to_ASCII = ASCII;<span class="comment">//字符对应的ASSCI值 </span></span><br><span class="line">            huffman_tree[node_index].weight = count[ASCII];<span class="comment">//次数 </span></span><br><span class="line">            node_index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建哈夫曼树"><a href="#4-创建哈夫曼树" class="headerlink" title="4.创建哈夫曼树"></a>4.创建哈夫曼树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">construct_HuffmanTree</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> n, <span class="keyword">int</span> tree_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min1, min2;</span><br><span class="line">    <span class="keyword">int</span> position1, position2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 从n个下标开始一直到2n-1都是其他双亲节点 */</span></span><br><span class="line">    <span class="keyword">int</span> new_parent_position = n;<span class="comment">//n以前为叶子节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(new_parent_position &lt; tree_size)</span><br><span class="line">    &#123;</span><br><span class="line">        min1 = min2 = <span class="number">9999999</span>;</span><br><span class="line">        position1 = position2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">          调用get_minWeight函数来获得最小的两个权重</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">以及相应的位置。参数通过引用传递</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">因此，get\u minWeight函数中的任何更改都将更改</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">此中min1、min2、position1、position2的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ----------------------------------------------------------------- */</span></span><br><span class="line">        get_minWeight(huffman_tree, new_parent_position, <span class="comment">//得到节点中两个节点权值最小的节点 </span></span><br><span class="line">                                &amp;min1, &amp;min2, &amp;position1, &amp;position2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新孩子节点的双亲值</span></span><br><span class="line">        huffman_tree[position1].parent = new_parent_position;</span><br><span class="line">        huffman_tree[position2].parent = new_parent_position;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新双亲的信息</span></span><br><span class="line">        huffman_tree[new_parent_position].left = position1;</span><br><span class="line">        huffman_tree[new_parent_position].right = position2;</span><br><span class="line">        huffman_tree[new_parent_position].weight = </span><br><span class="line">            huffman_tree[position1].weight + huffman_tree[position2].weight;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//累加器</span></span><br><span class="line">        new_parent_position++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-获得权重最小的节点"><a href="#5-获得权重最小的节点" class="headerlink" title="5.获得权重最小的节点"></a>5.获得权重最小的节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_minWeight</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> range, <span class="keyword">int</span>* min1_p, <span class="keyword">int</span>* min2_p, </span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">int</span>* position1_p, <span class="keyword">int</span>* position2_p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; range; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//执行这个步骤的都是没有双亲的</span></span><br><span class="line">        <span class="keyword">if</span>(huffman_tree[i].parent == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(huffman_tree[i].weight &lt; *min1_p)</span><br><span class="line">            &#123;</span><br><span class="line">                *min2_p = *min1_p;</span><br><span class="line">                *min1_p = huffman_tree[i].weight;</span><br><span class="line">                *position2_p = *position1_p;</span><br><span class="line">                *position1_p = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(huffman_tree[i].weight &lt; *min2_p)</span><br><span class="line">            &#123;</span><br><span class="line">                *min2_p = huffman_tree[i].weight;</span><br><span class="line">                *position2_p = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-获得编码字典"><a href="#6-获得编码字典" class="headerlink" title="6.获得编码字典"></a>6.获得编码字典</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_HuffmanDictionary</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">codes_t</span> huffman_codes_dic[],  <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> i, child, parent;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//每进行一次对树中的一个节点进行编码,从下到上</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">         因为遍历是从叶开始的，所以哈夫曼编码应该从后位置到前位置存储在变量的“bit”数组中。</span></span><br><span class="line"><span class="comment">        ----------------------------------------------------------------*/</span></span><br><span class="line">        start = n;</span><br><span class="line">        huffman_codes_dic[i].to = n;</span><br><span class="line">        huffman_codes_dic[i].value = huffman_tree[i].value;</span><br><span class="line"></span><br><span class="line">        child = i;</span><br><span class="line">        parent = huffman_tree[i].parent;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历节点，进行编码</span></span><br><span class="line">        <span class="keyword">while</span>(parent != <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">//给每个节点编码</span></span><br><span class="line">            <span class="keyword">if</span>(child == huffman_tree[parent].left)</span><br><span class="line">            &#123;</span><br><span class="line">                start--;<span class="comment">//编码一位则减一</span></span><br><span class="line">                huffman_codes_dic[i].bit[start] = <span class="number">0</span>;<span class="comment">//左分支为0 </span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(child == huffman_tree[parent].right) </span><br><span class="line">            &#123;</span><br><span class="line">                start--;</span><br><span class="line">                huffman_codes_dic[i].bit[start] = <span class="number">1</span>;<span class="comment">//右分支为1 </span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            child = parent;<span class="comment">//向上递推 </span></span><br><span class="line">            parent = huffman_tree[parent].parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        huffman_codes_dic[i].from = start; <span class="comment">//得到编码的开始下标 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-代入字符串用编码字典进行编码"><a href="#7-代入字符串用编码字典进行编码" class="headerlink" title="7.代入字符串用编码字典进行编码"></a>7.代入字符串用编码字典进行编码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> str[], <span class="keyword">const</span> <span class="keyword">codes_t</span> huffman_codes_dic[], </span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> n, <span class="keyword">int</span>* length_p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str_index,i,j;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//循环字符数组</span></span><br><span class="line">    <span class="keyword">for</span>(str_index = <span class="number">0</span>; str[str_index] != <span class="string">&#x27;\0&#x27;</span>; str_index++)</span><br><span class="line">    &#123;</span><br><span class="line">        c = str[str_index];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询对应字符进行编码</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(huffman_codes_dic[i].value == c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//对应节点的编码</span></span><br><span class="line">                <span class="keyword">for</span>(j = huffman_codes_dic[i].from ; </span><br><span class="line">                                          j &lt; huffman_codes_dic[i].to; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    huffman_codes[*length_p] = huffman_codes_dic[i].bit[j];</span><br><span class="line">                    *length_p = *length_p + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-打印每个字符及其哈夫曼编码"><a href="#8-打印每个字符及其哈夫曼编码" class="headerlink" title="8.打印每个字符及其哈夫曼编码"></a>8.打印每个字符及其哈夫曼编码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_HuffmanDictionary</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">codes_t</span> huffman_codes_dic[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n--------------Huffman Codes Dictionary:-------------- \n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c: &quot;</span>,huffman_codes_dic[i].value);</span><br><span class="line">        <span class="keyword">for</span>(j = huffman_codes_dic[i].from ; </span><br><span class="line">                                        j &lt; huffman_codes_dic[i].to;  j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, huffman_codes_dic[i].bit[j]); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-打印二进制"><a href="#9-打印二进制" class="headerlink" title="9.打印二进制"></a>9.打印二进制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_binary</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> *binary_length_p)</span><span class="comment">//打印二进制的位数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(number == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//移位</span></span><br><span class="line">    print_binary(number &gt;&gt; <span class="number">1</span>, binary_length_p);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//统计位数</span></span><br><span class="line">    *binary_length_p += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 在递归返回过程中逐个打印二进制数，number&amp;0x1可以得到位号的最低（最右边）值*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, number &amp; <span class="number">0x1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-将哈夫曼代码保存在文件里"><a href="#10-将哈夫曼代码保存在文件里" class="headerlink" title="10.将哈夫曼代码保存在文件里"></a>10.将哈夫曼代码保存在文件里</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_HuffmanCode</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Failed to write the data into the file.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d&quot;</span>, huffman_codes[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Succeed\n&quot;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-将哈夫曼树模型保存在文件里"><a href="#11-将哈夫曼树模型保存在文件里" class="headerlink" title="11.将哈夫曼树模型保存在文件里"></a>11.将哈夫曼树模型保存在文件里</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_HuffmanTree</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">node_t</span> huffman_tree[], </span></span></span><br><span class="line"><span class="function"><span class="params">                                                                <span class="keyword">int</span> tree_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Failed to write the data into the file.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; tree_size; i++)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d %d %d %d %d\n&quot;</span>, </span><br><span class="line">huffman_tree[i].weight, </span><br><span class="line">huffman_tree[i].parent, </span><br><span class="line">huffman_tree[i].left, </span><br><span class="line">huffman_tree[i].right,</span><br><span class="line">                    huffman_tree[i].value_to_ASCII);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哈夫曼树压缩法&quot;&gt;&lt;a href=&quot;#哈夫曼树压缩法&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼树压缩法&quot;&gt;&lt;/a&gt;哈夫曼树压缩法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;C语言实现，我的注释很清楚，相信读者可以看懂，关于哈夫曼树的相关介绍我就直</summary>
      
    
    
    
    <category term="数据结构" scheme="https://a2914475618.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="哈夫曼树" scheme="https://a2914475618.github.io/tags/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
    
  </entry>
  
</feed>
