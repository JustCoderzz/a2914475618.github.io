<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一位可可爱爱的编橙爱好者</title>
  <icon>https://www.gravatar.com/avatar/560d60bc4bbfec4b10e3ea23f4d15430</icon>
  <subtitle>欢迎来到爱的小屋</subtitle>
  <link href="https://a2914475618.github.io/atom.xml" rel="self"/>
  
  <link href="https://a2914475618.github.io/"/>
  <updated>2021-06-02T11:07:52.684Z</updated>
  <id>https://a2914475618.github.io/</id>
  
  <author>
    <name>Lu sir</name>
    <email>2914475618@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#学习</title>
    <link href="https://a2914475618.github.io/2021/06/02/postC-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://a2914475618.github.io/2021/06/02/postC-%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-06-02T11:05:39.000Z</published>
    <updated>2021-06-02T11:07:52.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-学习记录"><a href="#C-学习记录" class="headerlink" title="C#学习记录"></a>C#学习记录</h1><blockquote><p>记录学习中的重要点，嘿嘿嘿</p></blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>泛型无处不在，与接口地位相当</p><p>泛型的东西在编程的时候不能直接拿来使用的，需要特化以后才能拿来使用</p><p>类型膨胀、成员膨胀（就比如方法重载，就只有参数类型不同，其他所有逻辑都是相同的）</p><p>写在&lt;&gt;里面的成为类型参数      </p><p>泛型接口 </p><p>一个类实现的是泛型接口，则他本身也是泛型的</p><p>泛型具有良好的正交性</p><p>.net framework 常用的数据结构都是泛型的</p><p>集中在 System.Collections.Generic里</p><p>list为动态数组，没有长度限制，自动创建新的数组并把内容拷贝过去</p><p>实现IEnumerable 接口的可以被迭代</p><p>实现ICollection是一个集合接口的可以添加新元素和删除元素</p><p>泛型接口也可以有两个类型参数，如IDictionary&lt;int,string&gt;</p><p>方法也可以是泛型的，只需呀写一个泛型方法，就能接受多种不一样的类型参数</p><p>泛型委托1.ACTION委托  2.FUNCTION委托Func&lt;参数类型，参数类型，返回值类型&gt;</p><p>lamada表达式：对于逻辑简单的方法，我们不想去声明他，随调用，随申明，不想污染上下文，把名字留给更重要的方法去用</p></blockquote><h2 id="partial类"><a href="#partial类" class="headerlink" title="partial类"></a>partial类</h2><blockquote><p>允许我们把代码分成两部分，或者多部分，而且每个部分都可以以自己的版本进行更新</p><p>需要其帮我们减少派生类</p><p>允许一个类的不同部分用不同的编程语言，比如cshtml</p></blockquote><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><blockquote><p>enum </p><p>限制数据的选择范围</p><p>枚举值的处置是从0开始，也可以自己给其赋值</p><p>比特位用法 1 2 4 8 </p></blockquote><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><blockquote><p>mvc ,mvp,mvvm等模式，是事件模式更高级的用法</p><p>事件模型五个部分</p><p>1.事件的拥有者</p><p>事件的源头</p><p>2.事件成员</p><p>3.事件的响应者</p><p>哪些类被通知到</p><p>4.事件处理器</p><p>用自己的方法来响应</p><p>5.事件订阅</p><p>事件处理器与事件关联在一起，监听</p><p>委托是事件的底层基础</p><p>事件是委托的上层建筑</p></blockquote><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><blockquote><p>函数指针的升级版</p><p>函数指针c语言：typedef int(*Calc)(int a,int b);间接调用</p><p>delegate</p><p>委托是一种类</p><p>通过委托保留了函数指针</p><p>1.action委托</p><p>Action action=new Action （类名.方法)</p><p>间接调用 action.Invoke();</p><p>也可以写为action();</p><p>2.Func委托</p><p>Func&lt;int ,int ,int&gt; func =new  Func&lt;int,int,int&gt;(类名.方法）</p><hr><p>通过delegate来声明委托，自定义委托</p><p>delegate double Calc (double x,double y);</p><p>用于回调方法</p></blockquote><h2 id="mvvm模式"><a href="#mvvm模式" class="headerlink" title="mvvm模式"></a>mvvm模式</h2><blockquote><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其<strong>核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定</strong>。</p><p>　　Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发更加高效、便捷。</p><p>MVVM 由 Model、View、ViewModel 三部分构成，Model 层代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑；View 代表UI 组件，它负责将数据模型转化成UI 展现出来，ViewModel 是一个同步View 和 Model的对象。</p><p>　　<strong>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上</strong>。</p><p>　　ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM， 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p></blockquote><h2 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h2><blockquote><p>在原有的类上扩展功能</p><p>也叫做继承</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-学习记录&quot;&gt;&lt;a href=&quot;#C-学习记录&quot; class=&quot;headerlink&quot; title=&quot;C#学习记录&quot;&gt;&lt;/a&gt;C#学习记录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;记录学习中的重要点，嘿嘿嘿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;泛</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="C#" scheme="https://a2914475618.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>npm学习</title>
    <link href="https://a2914475618.github.io/2021/06/01/postnpm%E5%AD%A6%E4%B9%A0/"/>
    <id>https://a2914475618.github.io/2021/06/01/postnpm%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-06-01T11:57:20.000Z</published>
    <updated>2021-06-01T12:27:30.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm学习"><a href="#npm学习" class="headerlink" title="npm学习"></a>npm学习</h1><blockquote><p>npm 意为node package manager</p><p>通过npm的指令可以快速安装所需要的依赖并且可以帮你记住每个依赖的版本</p></blockquote><h2 id="npm的常用命令"><a href="#npm的常用命令" class="headerlink" title="npm的常用命令"></a>npm的常用命令</h2><h3 id="一、安装配置Node和前言"><a href="#一、安装配置Node和前言" class="headerlink" title="一、安装配置Node和前言"></a>一、<a href="https://link.zhihu.com/?target=https://jingyan.baidu.com/article/c85b7a64b6498c003aac956a.html">安装配置Node和前言</a></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看 npm 的版本 </span><br><span class="line">$ npm -v  //6.4.0 &lt;&lt; 安装成功会返回版本号</span><br><span class="line"></span><br><span class="line"># 查看各个命令的简单用法</span><br><span class="line">$ npm -l </span><br><span class="line"> </span><br><span class="line"># 查看 npm 命令列表</span><br><span class="line">$ npm help</span><br><span class="line"></span><br><span class="line"># 查看 npm 的配置</span><br><span class="line">$ npm config list -l</span><br></pre></td></tr></table></figure><h3 id="二、npm-init-创建模块"><a href="#二、npm-init-创建模块" class="headerlink" title="二、npm init 创建模块"></a>二、npm init 创建模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p><code>npm init</code>用来初始化生成一个新的<code>package.json</code>文件。它会向用户提问一系列问题，如果觉得不用修改默认配置，一路回车就可以了。</p><p>尾缀带<code>-f</code>（代表force）、<code>-y</code>（代表yes），则跳过提问阶段，直接生成一个新的<code>package.json</code>文件，不带尾缀的话，默认有提问阶段。</p><p>以上创建好之后就可以在Package.json直接看了 还可以在里面修改更新。</p><h3 id="三、npm-set-设置环境变量"><a href="#三、npm-set-设置环境变量" class="headerlink" title="三、npm set 设置环境变量"></a>三、npm set 设置环境变量</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm set init-author-name &#x27;my name jerry&#x27;</span><br><span class="line">$ set init-author-email &#x27;12345@qq.com&#x27;</span><br><span class="line">$ set init-author-url &#x27;http://yourdomain.com&#x27;</span><br><span class="line">$ npm set init-license &#x27;MIT&#x27;</span><br><span class="line">执行了以上的修改，此时 Package.json并没有发生变化</span><br><span class="line"></span><br><span class="line">//设置后执行init才是真正修改成功</span><br><span class="line">$ npm init</span><br></pre></td></tr></table></figure><h3 id="四、pm-search-搜索模块"><a href="#四、pm-search-搜索模块" class="headerlink" title="四、pm search 搜索模块"></a>四、pm search 搜索模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm search &lt;搜索词&gt; [-g]</span><br></pre></td></tr></table></figure><p><code>npm search</code>命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。</p><h3 id="五、npm-list-查看模块"><a href="#五、npm-list-查看模块" class="headerlink" title="五、npm list 查看模块"></a>五、npm list 查看模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#当前项目安装的所有模块</span><br><span class="line">$npm list</span><br><span class="line"></span><br><span class="line">#列出全局安装的模块 带上[--depth 0] 不深入到包的支点 更简洁</span><br><span class="line">$ npm list -g --depth 0</span><br></pre></td></tr></table></figure><h3 id="四、npm-install-安装模块"><a href="#四、npm-install-安装模块" class="headerlink" title="四、npm install 安装模块"></a>四、npm install 安装模块</h3><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 读取package.json里面的配置单安装  </span><br><span class="line">$ npm install </span><br><span class="line">//可简写成 npm i</span><br><span class="line"></span><br><span class="line"># 默认安装指定模块的最新(@latest)版本</span><br><span class="line">$ npm install [&lt;@scope&gt;/]&lt;name&gt; </span><br><span class="line">//eg:npm install gulp</span><br><span class="line"></span><br><span class="line"># 安装指定模块的指定版本</span><br><span class="line">$ npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;</span><br><span class="line">//eg: npm install gulp@3.9.1</span><br><span class="line"></span><br><span class="line"># 安装指定指定版本范围内的模块</span><br><span class="line">$ npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;</span><br><span class="line">//eg: npm install vue@&quot;&gt;=1.0.28 &lt; 2.0.0&quot;</span><br><span class="line"></span><br><span class="line"># 安装指定模块的指定标签 默认值为(@latest)</span><br><span class="line">$ npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;</span><br><span class="line">//eg:npm install sax@0.1.1</span><br><span class="line"></span><br><span class="line"># 通过Github代码库地址安装</span><br><span class="line">$ npm install &lt;tarball url&gt;</span><br><span class="line">//eg:npm install git://github.com/package/path.git</span><br></pre></td></tr></table></figure><h3 id="配置选项说明"><a href="#配置选项说明" class="headerlink" title="配置选项说明:"></a><strong>配置选项说明:</strong></h3><blockquote><p>#全局安装 -g | -global <em>//eg: npm i -g gulp 或者 npm i gulp -g</em> #这是默认设置，除非-D或-O存在 #安装并将被添加到package.json的dependencies区。 -P | –save-prod #<strong>（生产阶段的依赖）</strong> #安装并将被添加到package.json的dependencies区 -S | –save <em>//eg: npm i gulp –save 或 npm i gulp -S</em> #<strong>（开发阶段的依赖）</strong> #安装并将被添加到package.json的devDependencies区。 -D | –save-dev <em>//npm i gulp –save-dev 或 npm i gulp -D</em> #<strong>（可选阶段的依赖）</strong> #安装并将被添加到package.json的optionalDependencies区 -O | –save-optional #安装模块的确切版，而不是使用npm的默认semver range运算符 -E | –save-exact <em>//npm i gulp –save-exact 或 npm i gulp -E</em> #安装并将被添加到<code>bundleDependencies</code>列表中 -B | –save-bundle #模块不管是否安装过，npm 都要强制重新安装 -f|–force <em>//eg:npm install sax –force</em> <em>//补充：所有模块都要强制重新安装，那就删除<code>node_modules</code>，重新执行<code>npm install</code></em> $ rm -rf node_modules <em>//或者手动去删除node_modules目录</em> $ npm install #防止保存到<code>dependencies</code> –no-save #报告安装状况而不是真的安装 –dry-run</p></blockquote><h3 id="五、npm-uninstall-卸载模块"><a href="#五、npm-uninstall-卸载模块" class="headerlink" title="五、npm uninstall 卸载模块"></a>五、npm uninstall 卸载模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#卸载当前项目或全局模块 </span><br><span class="line">$ npm uninstall &lt;name&gt; [-g] </span><br><span class="line"></span><br><span class="line">eg: npm uninstall gulp --save-dev  </span><br><span class="line">    npm i gulp -g</span><br><span class="line"></span><br><span class="line">卸载后，你可以到 /node\_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</span><br><span class="line">npm ls 查看安装的模块</span><br></pre></td></tr></table></figure><h3 id="六、npm-update-更新模块"><a href="#六、npm-update-更新模块" class="headerlink" title="六、npm update 更新模块"></a>六、npm update 更新模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#升级当前项目或全局的指定模块</span><br><span class="line">$ npm update &lt;name&gt; [-g] </span><br><span class="line">//eg: npm update express </span><br><span class="line">      npm update express -g</span><br></pre></td></tr></table></figure><h3 id="七、npm-link-引用模块"><a href="#七、npm-link-引用模块" class="headerlink" title="七、npm link 引用模块"></a>七、npm link 引用模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 引用依赖 有些包是全局安装了，在项目里面只需要引用即可。</span><br><span class="line">$ npm link [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]</span><br><span class="line">//eg: 引用   npm link gulp gulp-ssh gulp-ftp</span><br><span class="line">//eg: 解除引用 npm unlink gulp</span><br><span class="line"></span><br><span class="line"># 引用模块 本人用得少没深入说了 用得上时可去翻文档例子</span><br><span class="line">$ npm link (in package dir)</span><br></pre></td></tr></table></figure><h3 id="八、npm-run-执行脚本"><a href="#八、npm-run-执行脚本" class="headerlink" title="八、npm run 执行脚本"></a>八、npm run 执行脚本</h3><p><code>package.json</code>的<code>scripts</code>字段，可以用于指定脚本命令，供<code>npm</code>直接调用。<code>npm run</code>会创建一个Shell，执行指定的命令。</p><h3 id="两个命令简写，start和test属于特殊命令，可以省略run-其余的都得带上run。"><a href="#两个命令简写，start和test属于特殊命令，可以省略run-其余的都得带上run。" class="headerlink" title="两个命令简写，start和test属于特殊命令，可以省略run,其余的都得带上run。"></a>两个命令简写，<code>start</code>和<code>test</code>属于特殊命令，可以省略run,其余的都得带上run。</h3><h3 id="npm-run的参数。"><a href="#npm-run的参数。" class="headerlink" title="npm run的参数。"></a><code>npm run</code>的参数。</h3><ul><li>如果不加任何参数，直接运行，会列出<code>package.json</code>里面所有可以执行的脚本命令</li></ul><ul><li>可配置参数 格式是加上两个连词线（–）<br><em>—package.json文件—</em> “scripts”: { “test”: “mocha test/“ } <em>——-终端——-</em> $ npm run test <em>– anothertest.js*</em># 等同于直接执行* $ mocha test/ anothertest.js</li></ul><h3 id="内部变量"><a href="#内部变量" class="headerlink" title="内部变量"></a>内部变量</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---package.json文件---</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;npm_test&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">    &quot;config&quot;: &#123;</span><br><span class="line">        &quot;reporter&quot;: &quot;xunit&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;script&quot;:&#123;</span><br><span class="line">        &quot;bundle&quot;: &quot;mkdir -p build/$npm_package_version/&quot;,</span><br><span class="line">        //$npm_package_version 读的是外层&quot;version&quot;的值，同理$npm_package_name 读的是外层&quot;name&quot;的值</span><br><span class="line">        &quot;test&quot;: &quot;mocha test/ --reporter $npm_package_config_reporter&quot;</span><br><span class="line">        //$npm_package_config_reporter读的是&quot;config&quot;里的&quot;reporter&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pre-和post-两个钩子（hook）"><a href="#pre-和post-两个钩子（hook）" class="headerlink" title="pre-和post-两个钩子（hook）"></a><code>pre-</code>和<code>post-</code>两个钩子（hook）</h3><p>npm会先查看有没有定义prelint和postlint两个钩子，如果有的话，就会<br>先执行<code>npm run pre-命令名</code>，然后执行<code>npm run 命令名</code>，最后执行<code>npm run post-命令名</code>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---package.json文件---</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;lint&quot;: &quot;eslint --cache --ext .js --ext .jsx src&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;karma start --log-leve=error karma.config.js --single-run=true&quot;,</span><br><span class="line">    &quot;pretest&quot;: &quot;npm run lint&quot;,</span><br><span class="line">    &quot;posttest&quot;: &quot;echo &#x27;Finished running tests&#x27;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">-------终端-------</span><br><span class="line">$ npm run lint</span><br><span class="line">//直接执行 npm run lint 结束</span><br><span class="line"></span><br><span class="line">$ npm run test</span><br><span class="line">//因为有定义了两个钩子pretest、posttest。</span><br><span class="line">//所以先执行 npm run pretest</span><br><span class="line">//然后执行 npm run test</span><br><span class="line">//最后执行 npm run posttest</span><br></pre></td></tr></table></figure><h3 id="九、npm-publish-发布模块"><a href="#九、npm-publish-发布模块" class="headerlink" title="九、npm publish 发布模块"></a>九、npm publish 发布模块</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 未注册 申请注册一个用户 直接在https://www.npmjs.com/注册一样</span><br><span class="line">$ npm adduser</span><br><span class="line">//执行后 填写几个问题 Username、Password、Email</span><br><span class="line"></span><br><span class="line">#已注册</span><br><span class="line">$ npm login </span><br><span class="line"></span><br><span class="line">#发布</span><br><span class="line">$ npm publish</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;npm学习&quot;&gt;&lt;a href=&quot;#npm学习&quot; class=&quot;headerlink&quot; title=&quot;npm学习&quot;&gt;&lt;/a&gt;npm学习&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;npm 意为node package manager&lt;/p&gt;
&lt;p&gt;通过npm的指令可以快</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="npm" scheme="https://a2914475618.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>面向切面编程</title>
    <link href="https://a2914475618.github.io/2021/05/21/postAOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    <id>https://a2914475618.github.io/2021/05/21/postAOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</id>
    <published>2021-05-21T08:25:45.000Z</published>
    <updated>2021-05-21T09:50:36.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP面向切口编程"><a href="#AOP面向切口编程" class="headerlink" title="AOP面向切口编程"></a>AOP面向切口编程</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AOP面向切口编程&quot;&gt;&lt;a href=&quot;#AOP面向切口编程&quot; class=&quot;headerlink&quot; title=&quot;AOP面向切口编程&quot;&gt;&lt;/a&gt;AOP面向切口编程&lt;/h1&gt;</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="AOP" scheme="https://a2914475618.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>有向图两点的所有路径</title>
    <link href="https://a2914475618.github.io/2021/05/20/post%E6%9C%89%E5%90%91%E5%9B%BE%E4%B8%A4%E7%82%B9%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/"/>
    <id>https://a2914475618.github.io/2021/05/20/post%E6%9C%89%E5%90%91%E5%9B%BE%E4%B8%A4%E7%82%B9%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/</id>
    <published>2021-05-20T03:30:18.000Z</published>
    <updated>2021-05-20T04:00:58.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有向图两点之间的所有路径"><a href="#有向图两点之间的所有路径" class="headerlink" title="有向图两点之间的所有路径"></a>有向图两点之间的所有路径</h1><blockquote><p>C语言描述的</p><p>深度优先搜索+栈+有向图</p><p>通过此方法可以推广到找两城市，两国家的所有路径</p><p>亲测可用，不懂留言</p></blockquote><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="头文件以及结构体定义"><a href="#头文件以及结构体定义" class="headerlink" title="头文件以及结构体定义"></a>头文件以及结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;StackQueue.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM 20   <span class="comment">/*最多顶点个数*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY    32767   <span class="comment">/*表示极大值，即∞*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> True  1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> False 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Error -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ok    1</span></span><br><span class="line">    <span class="comment">/*图的种类：DG表示有向图, DN表示有向网, UDG表示无向图, UDN表示无向网*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span>&#123;</span>DG, DN, UDG, UDN&#125; GraphKind;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexData[<span class="number">10</span>];   <span class="comment">/*假设顶点数据为字符串*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span></span></span><br><span class="line"><span class="class">&#123;</span>   <span class="keyword">int</span> adj;   <span class="comment">/*对于无权图，用1或0表示是否相邻；对带权图，则为权值类型*/</span></span><br><span class="line"><span class="comment">//    AdjType adj;</span></span><br><span class="line"><span class="comment">//    OtherInfo info;</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span>   VertexData vertex[MAX_VERTEX_NUM];              <span class="comment">/*顶点数组*/</span></span><br><span class="line">    ArcNode arcs[MAX_VERTEX_NUM][MAX_VERTEX_NUM];   <span class="comment">/*邻接矩阵*/</span></span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;   <span class="comment">/*图的顶点数和弧数*/</span></span><br><span class="line">    GraphKind kind;      <span class="comment">/*图的种类标志*/</span></span><br><span class="line">&#125;AdjMatrix;   <span class="comment">/*(Adjacency Matrix Graph)*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[MAX_VERTEX_NUM];   <span class="comment">/*访问标志数组*/</span></span><br><span class="line"><span class="keyword">int</span> Find[MAX_VERTEX_NUM][MAX_VERTEX_NUM];<span class="comment">//两点之间的线的状态</span></span><br><span class="line">SeqStack T;</span><br></pre></td></tr></table></figure><h3 id="测试主函数"><a href="#测试主函数" class="headerlink" title="测试主函数"></a>测试主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   AdjMatrix G;  VertexData s=<span class="string">&quot;v1&quot;</span>,t;</span><br><span class="line"></span><br><span class="line">    CreateUDG(&amp;G);</span><br><span class="line">InitStack(&amp;T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nDFS: &quot;</span>);  DFSTraverse(&amp;G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nBFS: &quot;</span>);  BFSTraverse(&amp;G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入路径的终点：&quot;</span>);  </span><br><span class="line">    getchar();</span><br><span class="line">    </span><br><span class="line">gets(t);  <span class="comment">// 输入v6</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DFS Path:\n&quot;</span>);  one_path(&amp;G,s,t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ALL DFS Path:\n&quot;</span>); all_path(&amp;G,s,t);</span><br><span class="line">    getchar();  getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建有向图"><a href="#创建有向图" class="headerlink" title="创建有向图"></a>创建有向图</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateUDG</span><span class="params">(AdjMatrix *G)</span>   <span class="comment">/*创建一个有向图*/</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> i,j,k;  VertexData v1,v2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入图的顶点数和边数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;G-&gt;vexnum,&amp;G-&gt;arcnum);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)   <span class="comment">/*初始化邻接矩阵*/</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;G-&gt;vexnum; j++)&#123;</span><br><span class="line">        G-&gt;arcs[i][j].adj=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">           </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入图的顶点数据：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;G-&gt;vexnum; i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;G-&gt;vertex[i]);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请逐条输入边的两个顶点：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;G-&gt;arcnum; k++)</span><br><span class="line">    &#123;   <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,&amp;v1,&amp;v2);</span><br><span class="line">        i=LocateVertex(G,v1);</span><br><span class="line">        j=LocateVertex(G,v2);</span><br><span class="line">        G-&gt;arcs[i][j].adj=<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(Ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVertex</span><span class="params">(AdjMatrix *G, VertexData v)</span>   <span class="comment">/*求顶点位置函数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> j=Error,k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k=<span class="number">0</span>; k&lt;G-&gt;vexnum; k++)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(G-&gt;vertex[k],v))  &#123;  j=k;  <span class="keyword">break</span>;  &#125;</span><br><span class="line">    <span class="keyword">return</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(AdjMatrix *G)</span></span>&#123;    <span class="comment">/*初始化线数组*/</span></span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G-&gt;vexnum;j++)&#123;</span><br><span class="line">Find[i][j]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Visit</span><span class="params">(VertexData e)</span>   <span class="comment">/*输出点的数据*/</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DepthFirstSearch</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> w;</span><br><span class="line"></span><br><span class="line">    Visit(G-&gt;vertex[v0]);  visited[v0]=True;</span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">0</span>; w&lt;G-&gt;vexnum; w++)</span><br><span class="line">        <span class="keyword">if</span> ( !visited[w] &amp;&amp; G-&gt;arcs[v0][w].adj==<span class="number">1</span> ) </span><br><span class="line">            DepthFirstSearch(G,w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(AdjMatrix *G)</span>   <span class="comment">/*对图G进行深度优先搜索*/</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> vi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (vi=<span class="number">0</span>; vi&lt;G-&gt;vexnum; vi++)  </span><br><span class="line">        visited[vi]=False;   <span class="comment">/*访问标志数组初始化*/</span></span><br><span class="line">    <span class="keyword">for</span> (vi=<span class="number">0</span>; vi&lt;G-&gt;vexnum; vi++)</span><br><span class="line">        <span class="keyword">if</span> (!visited[vi])    <span class="comment">/*调用深度遍历连通子图的函数*/</span></span><br><span class="line">            DepthFirstSearch(G,vi);   <span class="comment">/*若图G是连通图，则此只调用函数一次*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展：广度优先"><a href="#扩展：广度优先" class="headerlink" title="扩展：广度优先"></a>扩展：广度优先</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BreadthFirstSearch</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;   SeqQueue Q;  <span class="keyword">int</span> v,w;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Visit(G-&gt;vertex[v0]);  visited[v0]=True;</span></span><br><span class="line">    InitQueue(&amp;Q);  EnterQueue(&amp;Q,v0);</span><br><span class="line">    <span class="keyword">while</span> (!IsEmpty(&amp;Q))</span><br><span class="line">    &#123;   DeleteQueue(&amp;Q,&amp;v);</span><br><span class="line">    <span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line"></span><br><span class="line">    Visit(G-&gt;vertex[v]);</span><br><span class="line">    visited[v]=True;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span> (w=<span class="number">0</span>; w&lt;G-&gt;vexnum; w++)&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !visited[w] &amp;&amp; G-&gt;arcs[v][w].adj==<span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">//Visit(G-&gt;vertex[w]);</span></span><br><span class="line"><span class="comment">//visited[w]=True;</span></span><br><span class="line">EnterQueue(&amp;Q,w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(AdjMatrix *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> vi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (vi=<span class="number">0</span>; vi&lt;G-&gt;vexnum; vi++)  </span><br><span class="line">        visited[vi]=False ;</span><br><span class="line">    <span class="keyword">for</span> (vi=<span class="number">0</span>; vi&lt;G-&gt;vexnum; vi++)</span><br><span class="line">        <span class="keyword">if</span> (!visited[vi])  </span><br><span class="line">            BreadthFirstSearch(G,vi);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;c</span><br></pre></td></tr></table></figure><h3 id="打印一条路径"><a href="#打印一条路径" class="headerlink" title="打印一条路径"></a>打印一条路径</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_path</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;   SeqStack S;  <span class="comment">// 本函数体中不能再定义变量</span></span><br><span class="line">InitStack(&amp;S);</span><br><span class="line">Push(&amp;S, v); </span><br><span class="line"><span class="keyword">while</span> ( visited[v]!=INFINITY )</span><br><span class="line">    &#123;   v=visited[v];</span><br><span class="line">Push(&amp;S,v);</span><br><span class="line"><span class="comment">//Pop(&amp;S,&amp;v);</span></span><br><span class="line"><span class="comment">//Visit(G-&gt;vertex[v];  </span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( !IsEmpty(&amp;S) )&#123;</span><br><span class="line">Pop(&amp;S,&amp;v);</span><br><span class="line">Visit(G-&gt;vertex[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找简单路径"><a href="#找简单路径" class="headerlink" title="找简单路径"></a>找简单路径</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS_path</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> w;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">0</span>; w&lt;G-&gt;vexnum; w++)</span><br><span class="line">        <span class="keyword">if</span> ( visited[w]==<span class="number">-1</span> &amp;&amp; G-&gt;arcs[u][w].adj==<span class="number">1</span> ) </span><br><span class="line">        &#123;   visited[w]=u;</span><br><span class="line">            <span class="keyword">if</span> (w==v) &#123; print_path(G,v);  <span class="keyword">return</span> <span class="number">1</span>; &#125;  <span class="comment">/*输出路径*/</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (DFS_path(G,w,v)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">one_path</span><span class="params">(AdjMatrix *G, VertexData s, VertexData t)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> u,v;   <span class="comment">/*在连通图G中找一条从第u个顶点到v个顶点的简单路径*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (u=<span class="number">0</span>; u&lt;G-&gt;vexnum; u++)  </span><br><span class="line">        visited[u]=<span class="number">-1</span>;   <span class="comment">/*将visited[u]置为-1，表示第u个顶点没有访问过*/</span> </span><br><span class="line">    u=LocateVertex(G,s);</span><br><span class="line">    v=LocateVertex(G,t);</span><br><span class="line">    visited[u]=INFINITY; <span class="comment">/*将visited[u]置为INFINITY，表示第u个顶点已被访问，且是路径的起点*/</span></span><br><span class="line">    <span class="keyword">if</span> (!DFS_path(G,u,v))  <span class="built_in">printf</span>(<span class="string">&quot;%s==&gt;%s没有路径！&quot;</span>, s,t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找所有路径"><a href="#找所有路径" class="headerlink" title="找所有路径"></a>找所有路径</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS_allpath</span><span class="params">(AdjMatrix *G, <span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> w;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*if(visited[u]==INFINITY)&#123;</span></span><br><span class="line"><span class="comment">Push(&amp;T,u);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//用一个栈来存放进入的顺序</span></span><br><span class="line"><span class="comment">//然后不断出栈</span></span><br><span class="line"><span class="comment">//找到 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (w=<span class="number">0</span>; w&lt;G-&gt;vexnum; w++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( u!=w &amp;G-&gt;arcs[u][w].adj==<span class="number">1</span>&amp;&amp;Find[u][w]==<span class="number">0</span> ) </span><br><span class="line">        &#123;   </span><br><span class="line"><span class="keyword">if</span>(w!=v)&#123;</span><br><span class="line">        Push(&amp;T,w); </span><br><span class="line">        Find[u][w]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">visited[w]=u;</span><br><span class="line"><span class="keyword">if</span>(w==v)&#123;</span><br><span class="line"></span><br><span class="line">print_path(G,v);</span><br><span class="line">Find[u][w]=<span class="number">1</span>;</span><br><span class="line">visited[v]=<span class="number">-1</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">DFS_allpath(G,w,v);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//if (w==v) &#123; print_allpath(G,v);  return 1; &#125;  /*输出路径*/</span></span><br><span class="line">           <span class="comment">// else if (DFS_path(G,w,v)) return 1;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">all_path</span><span class="params">(AdjMatrix *G,VertexData s, VertexData t)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;   <span class="comment">/*在连通图G中找一条从第u个顶点到v个顶点的简单路径*/</span></span><br><span class="line"><span class="keyword">int</span> k,j,l;</span><br><span class="line">    <span class="keyword">for</span> (u=<span class="number">0</span>; u&lt;G-&gt;vexnum; u++)  </span><br><span class="line">        visited[u]=<span class="number">-1</span>;   <span class="comment">/*将visited[u]置为-1，表示第u个顶点没有访问过*/</span> </span><br><span class="line">    u=LocateVertex(G,s);</span><br><span class="line">    v=LocateVertex(G,t);</span><br><span class="line">    clear(G);</span><br><span class="line">    visited[u]=INFINITY; <span class="comment">/*将visited[u]置为INFINITY，表示第u个顶点已被访问，且是路径的起点*/</span></span><br><span class="line">    Push(&amp;T,u);</span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(&amp;T))&#123;</span><br><span class="line">    GetTop(&amp;T,&amp;k);</span><br><span class="line">    <span class="keyword">if</span> (!DFS_allpath(G,k,v))  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d==&gt;%d没有路径！&quot;</span>, k+<span class="number">1</span>,v+<span class="number">1</span>);Pop(&amp;T,&amp;j);</span><br><span class="line">    <span class="keyword">for</span>(l=<span class="number">0</span>;l&lt;G-&gt;vexnum;l++)&#123;</span><br><span class="line">    Find[j][l]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果图"><a href="#运行结果图" class="headerlink" title="运行结果图"></a>运行结果图</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210520115441.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;有向图两点之间的所有路径&quot;&gt;&lt;a href=&quot;#有向图两点之间的所有路径&quot; class=&quot;headerlink&quot; title=&quot;有向图两点之间的所有路径&quot;&gt;&lt;/a&gt;有向图两点之间的所有路径&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;C语言描述的&lt;/p&gt;
&lt;p&gt;深度优</summary>
      
    
    
    
    <category term="数据结构" scheme="https://a2914475618.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="有向图的所有路径" scheme="https://a2914475618.github.io/tags/%E6%9C%89%E5%90%91%E5%9B%BE%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>数据库知识在路上</title>
    <link href="https://a2914475618.github.io/2021/05/18/post%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E5%9C%A8%E8%B7%AF%E4%B8%8A/"/>
    <id>https://a2914475618.github.io/2021/05/18/post%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E5%9C%A8%E8%B7%AF%E4%B8%8A/</id>
    <published>2021-05-18T12:36:51.000Z</published>
    <updated>2021-05-18T13:00:13.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库学习（新）"><a href="#数据库学习（新）" class="headerlink" title="数据库学习（新）"></a>数据库学习（新）</h1><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="1-存储过程的概念"><a href="#1-存储过程的概念" class="headerlink" title="1.存储过程的概念"></a>1.存储过程的概念</h3><p>存储过程 (Stored Procedure) 是在大型数据库系统中 , 一组为了完成特定功能的 SQL 语句集 , 存储在数据库中 , 经过第一次编译后再次调用不需要再次编译 , 用户通过指定存储过程的名字并给出参数 (如果该存储过程带有参数) 来执行它 , 存储过程是数据库中的一个重要对象 ; 存储过程中可以包含 逻辑控制语句 和 数据操纵语句 , 它可以接受参数 , 输出参数 , 返回单个或多个结果集以及返回值 ;</p><h3 id="2-存储过程的优缺点"><a href="#2-存储过程的优缺点" class="headerlink" title="2.存储过程的优缺点"></a>2.存储过程的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点 :"></a>优点 :</h4><ol><li>由于应用程序随着时间推移会不断更改 , 增删功能 , SQL 语句会变得更复杂 , 存储过程为封装此类代码提供了一个替换位置 </li><li>由于存储过程在创建时即在数据库服务器上进行了编译并存储在数据库中 , 所以存储过程运行要比单个的 SQL 语句块要快 </li><li>由于在调用时只需用提供存储过程名和必要的参数信息 , 所以在一定程度上也可以减少网络流量 , 简单网络负担 ;</li><li>可维护性高 , 更新存储过程通常比更改 , 测试以及重新部署程序集需要较少的时间和精力 ;</li><li>代码精简一致 , 一个存储过程可以用于应用程序代码的不同位置 ;</li><li>增强安全性 :<br>1.通过向用户授予对存储过程 (而不是基于表) 的访问权限 , 它们可以提供对特定数据的访问 ;<br>2.提高代码安全 , 防止 SQL注入 (但未彻底解决 , 例如将数据操作语言 DML 附加到输入参数) ;<br>3.SQLParameter 类指定存储过程参数的数据类型 , 作为深层次防御性策略的一部分 , 可以验证用户提供的值类型 (但也不是万无一失 , 还是应该传递至数据库前得到附加验证) ;</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点 :"></a>缺点 :</h4><ol><li>如果更改范围大到需要对输入存储过程的参数进行更改 , 或者要更改由其返回的数据 , 则仍需要更新程序集中的代码以添加参数 , 等等 ;</li><li>可移植性差 , 由于存储过程将应用程序绑定到 Server , 因此使用存储过程封装业务逻辑将限制应用程序的可移植性 ; 如果应用程序的可移植性在您的环境中非常重要 , 则将业务逻辑封装在不特定于 RDBMS 的中间层中可能是一个更佳的选择 ;</li></ol><h3 id="3-存储过程语法"><a href="#3-存储过程语法" class="headerlink" title="3.存储过程语法"></a>3.存储过程语法</h3><h4 id="1-创建存储过程"><a href="#1-创建存储过程" class="headerlink" title="1.创建存储过程"></a>1.创建存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> GetUsers()</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>; </span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-调用存储过程"><a href="#2-调用存储过程" class="headerlink" title="2.调用存储过程"></a>2.调用存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> GetUsers();</span><br></pre></td></tr></table></figure><h4 id="3-删除存储过程"><a href="#3-删除存储过程" class="headerlink" title="3.删除存储过程"></a>3.删除存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> GetUsers;</span><br></pre></td></tr></table></figure><h3 id="5-相关小知识点"><a href="#5-相关小知识点" class="headerlink" title="5.相关小知识点"></a>5.相关小知识点</h3><h5 id="1-SET-ANSI-NULLS-ON以及SET-QUOTED-IDENTIFIER-ON"><a href="#1-SET-ANSI-NULLS-ON以及SET-QUOTED-IDENTIFIER-ON" class="headerlink" title="1.SET ANSI_NULLS ON以及SET QUOTED_IDENTIFIER ON"></a>1.SET ANSI_NULLS ON以及SET QUOTED_IDENTIFIER ON</h5><blockquote><p>USE [Test]<br>GO<br>SET ANSI_NULLS ON<br>GO<br>SET QUOTED_IDENTIFIER ON<br>GO</p></blockquote><p>1.作用和详解：<br>1). USE:指明整个存储过程所调用/使用的数据库，其中Test是我本地建立的数据库名称，USE [Test]就是告诉程序，要调用/使用的是我本地的Test数据库的意思。必须要指明调用/使用的具体数据库。</p><p>2).GO:该语句不是SQL的语句，表示一个事务结束的标识，告诉程序在go语句之前的所有语句已经确认并提交了，可以进行批处理操作了。当程序运行到go语句时，就会直接对go语句之前的代码进行批处理操作了。</p><p>3).SET ANSI_NULLS ON:表示对空值(null)对等于(=)或不等于(&lt;&gt;)进行判断时，遵从 SQL-92 规则。</p><p>(1).SQL-92规则中，在对空值(null)进行等于(=)或不等于(&lt;&gt;)比较时，取值为false。也就是说:</p><p>1&gt;.即使是表中字段column_name中包含空值(null),在进行条件判断 where column_name = NULL 时，该select查询语句返回的数据是空的/返回零行。</p><p>2&gt;.即使是表中字段column_name中包含非空值，在进行条件判断 where column_name &lt;&gt; NULL时，该select查询语句返回的数据是空的/返回零行。</p><p>3)SET ANSI_NULLS OFF:表示在对空值(null)进行等于(=)或不等于(&lt;&gt;)比较时，不再遵从SQL-92的规则：</p><p>1&gt;.当column_name字段中包含了空值(null)，在进行条件判断 where column_name = null 时，该select查询语句会返回表中column_name 字段值为空(null)的数据行。</p><p>2&gt;.当column_name字段中包含了非空值，在进行条件判断 where column_name &lt;&gt; null 时，该select 查询语句会返回表中column_name 字段值不为空的数据行。</p><p>4).SET QUOTED_IDENTIFIER ON:表示使用  引用标识符，标识符可以用双引号分隔，但是，文字必须用单引号分隔。</p><p>例如：</p><p> select “name”,”age”,”sex”,”grade” from a where name = ‘张三’</p><p>或<br> select name,age,sex,grade from a where name = ‘张三’</p><p>说明：当设置为ON时，标识符(数据表字段 name)等字段可以用双引号分隔，也可以不用双引号分隔，但是文字部分必须用单引号来分隔，否则会报错。注意：当设置为ON时，标识符返回的是改字段的值，name，返回的是姓名为张三，age字符返回的是年龄为25，sex字符返回的是性别为男，grade字符返回的是分数为400</p><p>5).SET QUOTED_IDENTIFIER OFF:表示标识符不能用双引号分隔，否则标识符会被当做字符串值来返回，不再是字符来返回。而且，文字部分必须用单引号或双引号分隔。</p><p>说明：当设置为OFF时，标识符是不能用双引号来分隔的，否则标识符就会被当做是字符串来返回，不再是字符来返回了。而且，文字部分是必须要引号来分隔，可以是单引号(‘’)，也可以是双引号(“”)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库学习（新）&quot;&gt;&lt;a href=&quot;#数据库学习（新）&quot; class=&quot;headerlink&quot; title=&quot;数据库学习（新）&quot;&gt;&lt;/a&gt;数据库学习（新）&lt;/h1&gt;&lt;h2 id=&quot;存储过程&quot;&gt;&lt;a href=&quot;#存储过程&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="数据库" scheme="https://a2914475618.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>哈夫曼树解压法（接上节）</title>
    <link href="https://a2914475618.github.io/2021/04/28/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E8%A7%A3%E5%8E%8B%E6%B3%95/"/>
    <id>https://a2914475618.github.io/2021/04/28/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E8%A7%A3%E5%8E%8B%E6%B3%95/</id>
    <published>2021-04-28T02:29:36.000Z</published>
    <updated>2021-04-28T03:05:16.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈夫曼树解压法"><a href="#哈夫曼树解压法" class="headerlink" title="哈夫曼树解压法"></a>哈夫曼树解压法</h1><blockquote><p>本一节是上一节的延申，本节内容较上节内容更为简单，只要能够看懂怎样还原数据的就可以明白其关键点</p><p>亲测可用！</p><p>要看哈夫曼树的压缩请点击这里——[GO！](<a href="https://luzyi.cn/2021/04/24/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8E%8B%E7%BC%A9%E6%B3%95/">哈夫曼树压缩法 | 一位可可爱爱的编橙爱好者 (luzyi.cn)</a>)</p></blockquote><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span> <span class="comment">/* printf,scanf,fopen,fclose, fscanf , fprintf */</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span> <span class="comment">/* malloc, free */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INPUT_FILENAME <span class="meta-string">&quot;HFT_Model&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTPUT_FILENAME <span class="meta-string">&quot;HFT_Decompression.txt&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HUFFMAN_CODE_SIZE 10000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINE_BUFFER_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_SIZE 2000</span></span><br></pre></td></tr></table></figure><h2 id="结构体类型的定义"><a href="#结构体类型的定义" class="headerlink" title="结构体类型的定义"></a>结构体类型的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> value;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> parent;</span><br><span class="line">    <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">int</span> right;</span><br><span class="line">    <span class="keyword">int</span> value_to_ASCII;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">node_t</span>;</span></span><br></pre></td></tr></table></figure><h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_code_size</span><span class="params">(<span class="keyword">char</span> filename[])</span></span>;</span><br><span class="line"><span class="comment">//根据压缩后的文件读取哈夫曼码的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_HuffmanCode</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">int</span> received_array[], <span class="keyword">int</span> code_size)</span></span>;</span><br><span class="line"><span class="comment">//根据压缩后的文件将哈夫曼码保存在数组里面</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_tree_size</span><span class="params">(<span class="keyword">char</span> filename[])</span></span>;</span><br><span class="line"><span class="comment">//读取哈夫曼树模型里的长度其实也就是2n-1个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_HuffmanTree</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">node_t</span> received_huffman_tree[], <span class="keyword">int</span> tree_length)</span></span>;</span><br><span class="line"><span class="comment">//将每个节点的数据保存在结构体数组里面</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size, </span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">const</span> <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> code_length, <span class="keyword">char</span> received_str[])</span></span>;</span><br><span class="line"><span class="comment">//运用哈夫曼编码以及哈夫曼树之间的关系，还原对应的字符保存在数组里</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_decoded_info</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">char</span> received_str[], <span class="keyword">int</span> str_size)</span></span>;</span><br><span class="line"><span class="comment">//将数组里的字符保存在文件里</span></span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the file you want to decompress: &quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> file_to_decompress[FILE_SIZE];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]s&quot;</span>, file_to_decompress); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取哈夫曼编码的长度</span></span><br><span class="line">    <span class="keyword">int</span> code_size = read_code_size(file_to_decompress);</span><br><span class="line">    <span class="keyword">if</span>(code_size == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sorry, invalid Huffman Code detected, &quot;</span></span><br><span class="line">               <span class="string">&quot;please check your input file again \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将哈夫曼编码保存在整型数组里</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reading the Huffman Codes now...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> received_huffman_code[HUFFMAN_CODE_SIZE];</span><br><span class="line">    read_HuffmanCode(file_to_decompress, received_huffman_code, code_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Reading the Huffman Tree from &#x27;HFT_Model&#x27;...\n&quot;</span>);</span><br><span class="line">    <span class="comment">//树的长度也就是节点个数</span></span><br><span class="line">    <span class="keyword">int</span> tree_length = read_tree_size(INPUT_FILENAME);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态创建结构体数组</span></span><br><span class="line">    <span class="keyword">node_t</span>* received_huffman_tree;</span><br><span class="line">    received_huffman_tree = (<span class="keyword">node_t</span>*) <span class="built_in">malloc</span>(tree_length * <span class="keyword">sizeof</span>(<span class="keyword">node_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(received_huffman_tree == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocation failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从树关系模型里得到每一个节点的信息保存在结构体数组里</span></span><br><span class="line">    read_HuffmanTree(INPUT_FILENAME,received_huffman_tree, tree_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Succeed\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decompressing now:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> received_str[STR_SIZE];</span><br><span class="line">    <span class="keyword">int</span> actual_str_size = decode(received_huffman_tree,tree_length, </span><br><span class="line">                          received_huffman_code, code_size, received_str);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//输出字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Saving the decompressed infromation into&quot;</span> </span><br><span class="line">           <span class="string">&quot;&#x27;HFT_Decompression.txt&#x27; \n&quot;</span>);</span><br><span class="line">    save_decoded_info(OUTPUT_FILENAME, received_str, actual_str_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放空间</span></span><br><span class="line">    <span class="built_in">free</span>(received_huffman_tree);</span><br><span class="line">    received_huffman_tree = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="函数的实现"><a href="#函数的实现" class="headerlink" title="函数的实现"></a>函数的实现</h2><h3 id="1-获取文件里的哈夫曼码的长度"><a href="#1-获取文件里的哈夫曼码的长度" class="headerlink" title="1.获取文件里的哈夫曼码的长度"></a>1.获取文件里的哈夫曼码的长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">nt <span class="title">read_code_size</span><span class="params">(<span class="keyword">char</span> filename[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = fgetc(fp);</span><br><span class="line">    <span class="keyword">while</span> (ch != EOF) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ch != <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;1&#x27;</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        size++;</span><br><span class="line">        ch = fgetc(fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-保存哈夫曼编码"><a href="#2-保存哈夫曼编码" class="headerlink" title="2.保存哈夫曼编码"></a>2.保存哈夫曼编码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_HuffmanCode</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">int</span> received_array[], <span class="keyword">int</span> code_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; code_size; i++)&#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%1d&quot;</span>, &amp;received_array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-获取树的节点个数"><a href="#3-获取树的节点个数" class="headerlink" title="3.获取树的节点个数"></a>3.获取树的节点个数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_tree_size</span><span class="params">(<span class="keyword">char</span> filename[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> line_buffer[LINE_BUFFER_SIZE];</span><br><span class="line">    <span class="keyword">int</span> tree_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fgets(line_buffer, LINE_BUFFER_SIZE, fp)) tree_size++;</span><br><span class="line">    </span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> tree_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-获取节点的信息"><a href="#4-获取节点的信息" class="headerlink" title="4.获取节点的信息"></a>4.获取节点的信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_HuffmanTree</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">node_t</span> received_huffman_tree[], </span></span></span><br><span class="line"><span class="function"><span class="params">                                                        <span class="keyword">int</span> tree_length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ;i &lt; tree_length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d %d %d %d %d&quot;</span>, </span><br><span class="line">&amp;received_huffman_tree[i].weight, </span><br><span class="line">&amp;received_huffman_tree[i].parent, </span><br><span class="line">&amp;received_huffman_tree[i].left, </span><br><span class="line">&amp;received_huffman_tree[i].right,</span><br><span class="line">                    &amp;received_huffman_tree[i].value_to_ASCII);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-解码"><a href="#5-解码" class="headerlink" title="5.解码"></a>5.解码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size, </span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">const</span> <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> code_length, <span class="keyword">char</span> received_str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> parent = tree_size - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt; code_length)&#123;</span><br><span class="line">        <span class="comment">//只要不是叶子节点就执行</span></span><br><span class="line">        <span class="comment">//从上到下</span></span><br><span class="line">        <span class="comment">//跳出下面这个while的时候，就完成了一个哈夫曼编码的解码</span></span><br><span class="line">        <span class="keyword">while</span>(huffman_tree[parent].left != <span class="number">-1</span> || </span><br><span class="line">              huffman_tree[parent].right != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//如果是0则哈夫曼树对应的就是左孩子</span></span><br><span class="line">            <span class="keyword">if</span>(huffman_codes[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                parent = huffman_tree[parent].left;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果是1就是右孩子</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(huffman_codes[i] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                parent = huffman_tree[parent].right;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跳出上面的那个while以后就代表着一个字符的权重即节点已经找完</span></span><br><span class="line">        <span class="comment">//已经为叶子节点，则输出其的ASCII即为对应的字符</span></span><br><span class="line">        received_str[str_size++] = huffman_tree[parent].value_to_ASCII;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//打印出来</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,huffman_tree[parent].value_to_ASCII); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//重置树的根节点。因为是从上到下，所以每次都要回到根节点</span></span><br><span class="line">        parent = tree_size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-保存解码后的字符串"><a href="#6-保存解码后的字符串" class="headerlink" title="6.保存解码后的字符串"></a>6.保存解码后的字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_decoded_info</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">char</span> received_str[], </span></span></span><br><span class="line"><span class="function"><span class="params">                                                            <span class="keyword">int</span> str_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Can&#x27;t open the file\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; str_size; i++)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%c&quot;</span>, received_str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>哈夫曼树的压缩和解压已经完成！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哈夫曼树解压法&quot;&gt;&lt;a href=&quot;#哈夫曼树解压法&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼树解压法&quot;&gt;&lt;/a&gt;哈夫曼树解压法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本一节是上一节的延申，本节内容较上节内容更为简单，只要能够看懂怎样还原数据</summary>
      
    
    
    
    <category term="数据结构" scheme="https://a2914475618.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="哈夫曼树解压缩法" scheme="https://a2914475618.github.io/tags/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>哈夫曼树压缩法</title>
    <link href="https://a2914475618.github.io/2021/04/24/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8E%8B%E7%BC%A9%E6%B3%95/"/>
    <id>https://a2914475618.github.io/2021/04/24/post%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8E%8B%E7%BC%A9%E6%B3%95/</id>
    <published>2021-04-24T11:34:16.000Z</published>
    <updated>2021-04-24T14:56:00.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈夫曼树压缩法"><a href="#哈夫曼树压缩法" class="headerlink" title="哈夫曼树压缩法"></a>哈夫曼树压缩法</h1><blockquote><p>C语言实现，我的注释很清楚，相信读者可以看懂，关于哈夫曼树的相关介绍我就直接跳过了</p><p>本方法可以实现对文件的压缩，解压部分后期有时间会发</p></blockquote><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p>要用到对文件的操作以及内存空间的创建以及释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span> <span class="comment">/* printf,scanf,fopen,fclose, fprintf */</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span> <span class="comment">/* malloc, free */</span></span></span><br><span class="line"><span class="comment">//这些定义的内容后面都会用到</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTPUT_FILENAME1 <span class="meta-string">&quot;Huffman_Codes.txt&quot;</span><span class="comment">//输出文件的名字</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTPUT_FILENAME2 <span class="meta-string">&quot;HFT_Model&quot;</span><span class="comment">//输出文件的模型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STR_SIZE 20000<span class="comment">//允许的字符串最大长度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_SIZE 100<span class="comment">//文件大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHAR_COUNT_SIZE 1000<span class="comment">//统计字符次数的数组最大长度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HUFFMAN_CODE_SIZE 10000<span class="comment">//哈夫曼编码最大长度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIT_SIZE 100</span></span><br></pre></td></tr></table></figure><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>//哈夫曼树的节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> value;<span class="comment">//所存的字符的值</span></span><br><span class="line">    <span class="keyword">int</span> value_to_ASCII;<span class="comment">//字符对应的ASSCII值</span></span><br><span class="line">    <span class="keyword">int</span> weight;<span class="comment">//权重</span></span><br><span class="line">    <span class="keyword">int</span> parent;<span class="comment">//双亲</span></span><br><span class="line">    <span class="keyword">int</span> left;<span class="comment">//左孩子</span></span><br><span class="line">    <span class="keyword">int</span> right;<span class="comment">//右孩子</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">node_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">codes</span>//编码节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> bit[BIT_SIZE];<span class="comment">//对应节点的二进制编码</span></span><br><span class="line">    <span class="keyword">int</span> from;<span class="comment">//在上面那个数组里的起始下标</span></span><br><span class="line">    <span class="keyword">int</span> to;<span class="comment">//结束下标</span></span><br><span class="line">    <span class="keyword">char</span> value;<span class="comment">//编码对应的字符</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">codes</span> <span class="title">codes_t</span>;</span></span><br></pre></td></tr></table></figure><h2 id="声明的函数"><a href="#声明的函数" class="headerlink" title="声明的函数"></a>声明的函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_files</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">char</span> str[])</span></span>;</span><br><span class="line"><span class="comment">//读取文件，得到字符串数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate_frequency</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> count[])</span></span>;</span><br><span class="line"><span class="comment">//计算字符串数组中的每一个字符出现的频率，放在Count数组里</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initiate_HuffmanTree</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size, <span class="keyword">int</span> count[])</span></span>;</span><br><span class="line"><span class="comment">//初始化哈夫曼树，根据Count数组设置哈夫曼树每个节点的值，权重</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">construct_HuffmanTree</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> n, <span class="keyword">int</span> tree_size)</span></span>;</span><br><span class="line"><span class="comment">//创建哈夫曼树的结构，也就是根据哈夫曼树的定义来创建结构</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_minWeight</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> range, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span>* min1_p, <span class="keyword">int</span>* min2_p, <span class="keyword">int</span>* position1_p, <span class="keyword">int</span>* position2_p)</span></span>;</span><br><span class="line"><span class="comment">//得到最小的两个权值及其对应的位置 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_HuffmanDictionary</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], </span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">codes_t</span> huffman_codes_dic[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//根据哈夫曼树获取哈夫曼编码字典</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> str[], <span class="keyword">const</span> <span class="keyword">codes_t</span> huffman_codes_dic[], </span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> n, <span class="keyword">int</span>* length_p)</span></span>;</span><br><span class="line"><span class="comment">//据哈夫曼代码字典将输入字符串编码为哈夫曼代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_HuffmanDictionary</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">codes_t</span> huffman_codes_dic[])</span></span>;</span><br><span class="line"><span class="comment">//用于在哈夫曼代码字典中打印每个字符及其哈夫曼代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_binary</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> *binary_length_p)</span></span>;<span class="comment">//二进制文件打印 </span></span><br><span class="line"><span class="comment">//将二进制数对应的十进制数打印出来，用递归算法和位运算实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_HuffmanCode</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="comment">//保存哈夫曼树文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_HuffmanTree</span><span class="params">(<span class="keyword">char</span> filename[],  <span class="keyword">const</span> <span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size)</span></span>;</span><br><span class="line"><span class="comment">//保存其模型结构</span></span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 从输入文件读取内容并存储将文件中的字符转换为“str”字符串 */</span></span><br><span class="line">    <span class="keyword">char</span> str[STR_SIZE];</span><br><span class="line">    <span class="keyword">char</span> file_to_compress[FILE_SIZE];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter the file you want to compress: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]s&quot;</span>, file_to_compress);<span class="comment">//传入压缩文件的名字 </span></span><br><span class="line">    read_files(file_to_compress, str);<span class="comment">//读入文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用计数数组计算每个字符的频率  每个字符的ASCII数是计数数组中的索引 */</span></span><br><span class="line">    <span class="keyword">int</span> count[CHAR_COUNT_SIZE];</span><br><span class="line">    calculate_frequency(str,count);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算“count数组”中唯一字符的个数，这个数字正好是哈夫曼树中的叶节点数*/</span></span><br><span class="line"><span class="keyword">int</span> i, n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; CHAR_COUNT_SIZE; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count[i] != <span class="number">0</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;ASCII = %d; char is: %c; Frequency: %d\n&quot;</span>, </span><br><span class="line">                                 i, i, count[i]);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tree_size = <span class="number">2</span> * n - <span class="number">1</span>;<span class="comment">//总共有2n-1个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 通过动态分配创建哈夫曼树，因为树的大小是在程序运行时决定的*/</span></span><br><span class="line">    <span class="keyword">node_t</span>* huffman_tree;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tree_size is: %d\n&quot;</span>, tree_size);</span><br><span class="line">    huffman_tree = (<span class="keyword">node_t</span>*) <span class="built_in">malloc</span>(tree_size * <span class="keyword">sizeof</span>(<span class="keyword">node_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(huffman_tree == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocation failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    initiate_HuffmanTree(huffman_tree, tree_size,  count);<span class="comment">//初始化哈夫曼树 </span></span><br><span class="line">    construct_HuffmanTree(huffman_tree, n, tree_size);<span class="comment">//构建哈夫满树 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">通过动态分配创建哈夫曼码字典数组，因为这个数组的大小是叶节点的数量*/</span></span><br><span class="line">    <span class="keyword">codes_t</span>* huffman_codes_dic;</span><br><span class="line">    huffman_codes_dic = (<span class="keyword">codes_t</span>*) <span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">codes_t</span>));</span><br><span class="line">    <span class="keyword">if</span>(huffman_codes_dic == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocation failed.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    get_HuffmanDictionary(huffman_tree, huffman_codes_dic, n);<span class="comment">//对哈夫曼树进行编码 </span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> huffman_codes[HUFFMAN_CODE_SIZE];<span class="comment">//创建一个每个树节点的编码的数组，也就是结构数组 </span></span><br><span class="line">    <span class="keyword">int</span> huffman_codes_length = <span class="number">0</span>;<span class="comment">//用来存放哈夫曼编码的长度</span></span><br><span class="line">    encode(str,huffman_codes_dic,huffman_codes,n, &amp;huffman_codes_length);<span class="comment">//通过哈夫曼树编码字典对字符串编码</span></span><br><span class="line"><span class="comment">//通过huffman_codes数组返回 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    print_HuffmanDictionary(n,huffman_codes_dic);<span class="comment">//打印 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The original bit numbers are: \n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> char_to_ASCII = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> total_binary_length = <span class="number">0</span>;<span class="comment">//统计总共的二进制长度</span></span><br><span class="line">    <span class="keyword">int</span> single_binary_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        char_to_ASCII = str[i];</span><br><span class="line">        print_binary(char_to_ASCII, &amp;single_binary_length);</span><br><span class="line">        total_binary_length += single_binary_length;</span><br><span class="line">        single_binary_length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After Compression, the Huffman Codes are: \n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; huffman_codes_length; i++)<span class="comment">//打印每个节点的二进制编码</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,huffman_codes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算压缩比</span></span><br><span class="line">    <span class="keyword">double</span> compression_ratio = (<span class="keyword">double</span>)huffman_codes_length / </span><br><span class="line">                                (<span class="keyword">double</span>)total_binary_length;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The size of original bit numbers is : %d\n&quot;</span>, total_binary_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The size of bit numbers after compression is : %d\n&quot;</span>, </span><br><span class="line">                                                        huffman_codes_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The compression ratio is: %.2lf \n&quot;</span>, compression_ratio);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将哈夫曼代码和哈夫曼树模型保存到目录中，为解压和搜索算法做准备 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Writing the Huffman Codes to the file &#x27;Huffman_Codes&#x27;...\n&quot;</span>);</span><br><span class="line">    save_HuffmanCode(OUTPUT_FILENAME1,huffman_codes,huffman_codes_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Saving the Huffman Tree Model to the file &#x27;Huffman_Tree&#x27;...\n&quot;</span>);</span><br><span class="line">    save_HuffmanTree(OUTPUT_FILENAME2,huffman_tree,tree_size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    <span class="built_in">free</span>(huffman_tree);</span><br><span class="line">    huffman_tree = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">free</span>(huffman_codes_dic);</span><br><span class="line">    huffman_codes_dic = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h2><h3 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1.读取文件"></a>1.读取文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_files</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">char</span> str[])</span></span>&#123;<span class="comment">//用str存放读入的文件字符串 </span></span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;<span class="comment">//FILE*fp  定义一个名为fp的指针，属于FILE（文件）类型。FILE是一类特殊的指针，用来操作 文件。</span></span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: The file is not existed.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = fgetc(fp);</span><br><span class="line">    <span class="keyword">while</span> (ch != EOF) &#123;</span><br><span class="line">        str[index++] = ch;</span><br><span class="line">        ch = fgetc(fp);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    str[index] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-计算频率"><a href="#2-计算频率" class="headerlink" title="2.计算频率"></a>2.计算频率</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate_frequency</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> count[])</span><span class="comment">//计算字符串每个字符出现的频率，字符对应的ASCII值的下标对应的就是该字符的频率 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//初始化数组</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; CHAR_COUNT_SIZE; i++)&#123;</span><br><span class="line">        count[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> char_to_ASCII;</span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; str[index] != <span class="string">&#x27;\0&#x27;</span>; index++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将字符转换为ASSCII并且用对应ASSCII的下标存该字符，求次数</span></span><br><span class="line">        char_to_ASCII = str[index];</span><br><span class="line">        count[char_to_ASCII]++;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-初始化哈夫曼树"><a href="#3-初始化哈夫曼树" class="headerlink" title="3.初始化哈夫曼树"></a>3.初始化哈夫曼树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initiate_HuffmanTree</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> tree_size, <span class="keyword">int</span> count[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//初始化操作</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; tree_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        huffman_tree[i].parent = <span class="number">-1</span>;</span><br><span class="line">        huffman_tree[i].left = <span class="number">-1</span>;</span><br><span class="line">        huffman_tree[i].right = <span class="number">-1</span>;</span><br><span class="line">        huffman_tree[i].weight = <span class="number">0</span>;</span><br><span class="line">        huffman_tree[i].value = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        huffman_tree[i].value_to_ASCII = <span class="number">32</span>;<span class="comment">//32对应的字符为&#x27; &#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给叶节点赋值</span></span><br><span class="line"><span class="keyword">int</span> ASCII, node_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ASCII_to_char;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ASCII = <span class="number">0</span>; ASCII &lt; CHAR_COUNT_SIZE; ASCII++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(count[ASCII] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ASCII_to_char = ASCII;<span class="comment">//将ASSCI转换为字符 </span></span><br><span class="line">            huffman_tree[node_index].value = ASCII_to_char;</span><br><span class="line">            huffman_tree[node_index].value_to_ASCII = ASCII;<span class="comment">//字符对应的ASSCI值 </span></span><br><span class="line">            huffman_tree[node_index].weight = count[ASCII];<span class="comment">//次数 </span></span><br><span class="line">            node_index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建哈夫曼树"><a href="#4-创建哈夫曼树" class="headerlink" title="4.创建哈夫曼树"></a>4.创建哈夫曼树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">construct_HuffmanTree</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> n, <span class="keyword">int</span> tree_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min1, min2;</span><br><span class="line">    <span class="keyword">int</span> position1, position2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 从n个下标开始一直到2n-1都是其他双亲节点 */</span></span><br><span class="line">    <span class="keyword">int</span> new_parent_position = n;<span class="comment">//n以前为叶子节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(new_parent_position &lt; tree_size)</span><br><span class="line">    &#123;</span><br><span class="line">        min1 = min2 = <span class="number">9999999</span>;</span><br><span class="line">        position1 = position2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">          调用get_minWeight函数来获得最小的两个权重</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">以及相应的位置。参数通过引用传递</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">因此，get\u minWeight函数中的任何更改都将更改</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">此中min1、min2、position1、position2的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ----------------------------------------------------------------- */</span></span><br><span class="line">        get_minWeight(huffman_tree, new_parent_position, <span class="comment">//得到节点中两个节点权值最小的节点 </span></span><br><span class="line">                                &amp;min1, &amp;min2, &amp;position1, &amp;position2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新孩子节点的双亲值</span></span><br><span class="line">        huffman_tree[position1].parent = new_parent_position;</span><br><span class="line">        huffman_tree[position2].parent = new_parent_position;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新双亲的信息</span></span><br><span class="line">        huffman_tree[new_parent_position].left = position1;</span><br><span class="line">        huffman_tree[new_parent_position].right = position2;</span><br><span class="line">        huffman_tree[new_parent_position].weight = </span><br><span class="line">            huffman_tree[position1].weight + huffman_tree[position2].weight;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//累加器</span></span><br><span class="line">        new_parent_position++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-获得权重最小的节点"><a href="#5-获得权重最小的节点" class="headerlink" title="5.获得权重最小的节点"></a>5.获得权重最小的节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_minWeight</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">int</span> range, <span class="keyword">int</span>* min1_p, <span class="keyword">int</span>* min2_p, </span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">int</span>* position1_p, <span class="keyword">int</span>* position2_p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; range; i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//执行这个步骤的都是没有双亲的</span></span><br><span class="line">        <span class="keyword">if</span>(huffman_tree[i].parent == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(huffman_tree[i].weight &lt; *min1_p)</span><br><span class="line">            &#123;</span><br><span class="line">                *min2_p = *min1_p;</span><br><span class="line">                *min1_p = huffman_tree[i].weight;</span><br><span class="line">                *position2_p = *position1_p;</span><br><span class="line">                *position1_p = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(huffman_tree[i].weight &lt; *min2_p)</span><br><span class="line">            &#123;</span><br><span class="line">                *min2_p = huffman_tree[i].weight;</span><br><span class="line">                *position2_p = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-获得编码字典"><a href="#6-获得编码字典" class="headerlink" title="6.获得编码字典"></a>6.获得编码字典</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_HuffmanDictionary</span><span class="params">(<span class="keyword">node_t</span> huffman_tree[], <span class="keyword">codes_t</span> huffman_codes_dic[],  <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> i, child, parent;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//每进行一次对树中的一个节点进行编码,从下到上</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">         因为遍历是从叶开始的，所以哈夫曼编码应该从后位置到前位置存储在变量的“bit”数组中。</span></span><br><span class="line"><span class="comment">        ----------------------------------------------------------------*/</span></span><br><span class="line">        start = n;</span><br><span class="line">        huffman_codes_dic[i].to = n;</span><br><span class="line">        huffman_codes_dic[i].value = huffman_tree[i].value;</span><br><span class="line"></span><br><span class="line">        child = i;</span><br><span class="line">        parent = huffman_tree[i].parent;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历节点，进行编码</span></span><br><span class="line">        <span class="keyword">while</span>(parent != <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">//给每个节点编码</span></span><br><span class="line">            <span class="keyword">if</span>(child == huffman_tree[parent].left)</span><br><span class="line">            &#123;</span><br><span class="line">                start--;<span class="comment">//编码一位则减一</span></span><br><span class="line">                huffman_codes_dic[i].bit[start] = <span class="number">0</span>;<span class="comment">//左分支为0 </span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(child == huffman_tree[parent].right) </span><br><span class="line">            &#123;</span><br><span class="line">                start--;</span><br><span class="line">                huffman_codes_dic[i].bit[start] = <span class="number">1</span>;<span class="comment">//右分支为1 </span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            child = parent;<span class="comment">//向上递推 </span></span><br><span class="line">            parent = huffman_tree[parent].parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        huffman_codes_dic[i].from = start; <span class="comment">//得到编码的开始下标 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-代入字符串用编码字典进行编码"><a href="#7-代入字符串用编码字典进行编码" class="headerlink" title="7.代入字符串用编码字典进行编码"></a>7.代入字符串用编码字典进行编码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> str[], <span class="keyword">const</span> <span class="keyword">codes_t</span> huffman_codes_dic[], </span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> n, <span class="keyword">int</span>* length_p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> str_index,i,j;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//循环字符数组</span></span><br><span class="line">    <span class="keyword">for</span>(str_index = <span class="number">0</span>; str[str_index] != <span class="string">&#x27;\0&#x27;</span>; str_index++)</span><br><span class="line">    &#123;</span><br><span class="line">        c = str[str_index];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询对应字符进行编码</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(huffman_codes_dic[i].value == c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//对应节点的编码</span></span><br><span class="line">                <span class="keyword">for</span>(j = huffman_codes_dic[i].from ; </span><br><span class="line">                                          j &lt; huffman_codes_dic[i].to; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    huffman_codes[*length_p] = huffman_codes_dic[i].bit[j];</span><br><span class="line">                    *length_p = *length_p + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-打印每个字符及其哈夫曼编码"><a href="#8-打印每个字符及其哈夫曼编码" class="headerlink" title="8.打印每个字符及其哈夫曼编码"></a>8.打印每个字符及其哈夫曼编码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_HuffmanDictionary</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">codes_t</span> huffman_codes_dic[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n--------------Huffman Codes Dictionary:-------------- \n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c: &quot;</span>,huffman_codes_dic[i].value);</span><br><span class="line">        <span class="keyword">for</span>(j = huffman_codes_dic[i].from ; </span><br><span class="line">                                        j &lt; huffman_codes_dic[i].to;  j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, huffman_codes_dic[i].bit[j]); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-打印二进制"><a href="#9-打印二进制" class="headerlink" title="9.打印二进制"></a>9.打印二进制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_binary</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> *binary_length_p)</span><span class="comment">//打印二进制的位数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(number == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//移位</span></span><br><span class="line">    print_binary(number &gt;&gt; <span class="number">1</span>, binary_length_p);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//统计位数</span></span><br><span class="line">    *binary_length_p += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 在递归返回过程中逐个打印二进制数，number&amp;0x1可以得到位号的最低（最右边）值*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, number &amp; <span class="number">0x1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-将哈夫曼代码保存在文件里"><a href="#10-将哈夫曼代码保存在文件里" class="headerlink" title="10.将哈夫曼代码保存在文件里"></a>10.将哈夫曼代码保存在文件里</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_HuffmanCode</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">int</span> huffman_codes[], <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Failed to write the data into the file.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d&quot;</span>, huffman_codes[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Succeed\n&quot;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-将哈夫曼树模型保存在文件里"><a href="#11-将哈夫曼树模型保存在文件里" class="headerlink" title="11.将哈夫曼树模型保存在文件里"></a>11.将哈夫曼树模型保存在文件里</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_HuffmanTree</span><span class="params">(<span class="keyword">char</span> filename[], <span class="keyword">const</span> <span class="keyword">node_t</span> huffman_tree[], </span></span></span><br><span class="line"><span class="function"><span class="params">                                                                <span class="keyword">int</span> tree_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FILE * fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Failed to write the data into the file.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; tree_size; i++)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d %d %d %d %d\n&quot;</span>, </span><br><span class="line">huffman_tree[i].weight, </span><br><span class="line">huffman_tree[i].parent, </span><br><span class="line">huffman_tree[i].left, </span><br><span class="line">huffman_tree[i].right,</span><br><span class="line">                    huffman_tree[i].value_to_ASCII);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Succeed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哈夫曼树压缩法&quot;&gt;&lt;a href=&quot;#哈夫曼树压缩法&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼树压缩法&quot;&gt;&lt;/a&gt;哈夫曼树压缩法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;C语言实现，我的注释很清楚，相信读者可以看懂，关于哈夫曼树的相关介绍我就直</summary>
      
    
    
    
    <category term="数据结构" scheme="https://a2914475618.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="哈夫曼树" scheme="https://a2914475618.github.io/tags/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>那些我未曾知晓的C语言小知识</title>
    <link href="https://a2914475618.github.io/2021/04/24/post%E9%82%A3%E4%BA%9B%E6%88%91%E6%9C%AA%E6%9B%BE%E7%9F%A5%E6%99%93%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>https://a2914475618.github.io/2021/04/24/post%E9%82%A3%E4%BA%9B%E6%88%91%E6%9C%AA%E6%9B%BE%E7%9F%A5%E6%99%93%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%9F%A5%E8%AF%86/</id>
    <published>2021-04-24T08:25:36.000Z</published>
    <updated>2021-04-28T02:38:10.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言宝典-更新中"><a href="#C语言宝典-更新中" class="headerlink" title="C语言宝典(更新中)"></a>C语言宝典(更新中)</h1><h2 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1.文件操作"></a>1.文件操作</h2><p>在C语言中，操作文件之前必须先打开文件；所谓“打开文件”，就是让程序和文件建立连接的过程。</p><p>打开文件之后，程序可以得到文件的相关信息，例如大小、类型、权限、创建者、更新时间等。在后续读写文件的过程中，程序还可以记录当前读写到了哪个位置，下次可以在此基础上继续操作。</p><blockquote><p>标准输入文件 stdin（表示键盘）、标准输出文件 stdout（表示显示器）、标准错误文件 stderr（表示显示器）是由系统打开的，可直接使用。</p></blockquote><p>使用 &lt;stdio.h&gt; 头文件中的 fopen() 函数即可打开文件，它的用法为：</p><p>FILE *fopen(char *filename, char *mode);</p><p><code>filename</code>为文件名（包括文件路径），<code>mode</code>为打开方式，它们都是字符串。</p><h3 id="fopen-函数的返回值"><a href="#fopen-函数的返回值" class="headerlink" title="fopen() 函数的返回值"></a>fopen() 函数的返回值</h3><p>fopen() 会获取文件信息，包括文件名、文件状态、当前读写位置等，并将这些信息保存到一个 FILE 类型的结构体变量中，然后将该变量的地址返回。</p><p>FILE 是 &lt;stdio.h&gt; 头文件中的一个结构体，它专门用来保存文件信息。我们不用关心 FILE 的具体结构，只需要知道它的用法就行。</p><p>如果希望接收 fopen() 的返回值，就需要定义一个 FILE 类型的<a href="http://c.biancheng.net/c/80/">指针</a>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp &#x3D; fopen(&quot;demo.txt&quot;, &quot;r&quot;);</span><br></pre></td></tr></table></figure><p>表示以“只读”方式打开当前目录下的 demo.txt 文件，并使 fp 指向该文件，这样就可以通过 fp 来操作 demo.txt 了。fp 通常被称为文件指针。</p><p>再来看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp &#x3D; fopen(&quot;D:\\demo.txt&quot;,&quot;rb+&quot;);</span><br></pre></td></tr></table></figure><p>表示以二进制方式打开 D 盘下的 demo.txt 文件，允许读和写。</p><h3 id="判断文件是否打开成功"><a href="#判断文件是否打开成功" class="headerlink" title="判断文件是否打开成功"></a>判断文件是否打开成功</h3><p>打开文件出错时，fopen() 将返回一个空指针，也就是 NULL，我们可以利用这一点来判断文件是否打开成功，请看下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;if( (fp&#x3D;fopen(&quot;D:\\demo.txt&quot;,&quot;rb&quot;) &#x3D;&#x3D; NULL )&#123;    printf(&quot;Fail to open file!\n&quot;);    exit(0);  &#x2F;&#x2F;退出程序（结束程序）&#125;</span><br></pre></td></tr></table></figure><p>我们通过判断 fopen() 的返回值是否和 NULL 相等来判断是否打开失败：如果 fopen() 的返回值为 NULL，那么 fp 的值也为 NULL，此时 if 的判断条件成立，表示文件打开失败。</p><p>以上代码是文件操作的规范写法，读者在打开文件时一定要判断文件是否打开成功，因为一旦打开失败，后续操作就都没法进行了，往往以“结束程序”告终。</p><h3 id="fopen-函数的打开方式"><a href="#fopen-函数的打开方式" class="headerlink" title="fopen() 函数的打开方式"></a>fopen() 函数的打开方式</h3><p>不同的操作需要不同的文件权限。例如，只想读取文件中的数据的话，“只读”权限就够了；既想读取又想写入数据的话，“读写”权限就是必须的了。</p><p>另外，文件也有不同的类型，按照数据的存储方式可以分为二进制文件和文本文件，它们的操作细节是不同的。</p><p>在调用 fopen() 函数时，这些信息都必须提供，称为“文件打开方式”。最基本的文件打开方式有以下几种：</p><table><thead><tr><th>控制读写权限的字符串（必须指明）</th><th></th></tr></thead><tbody><tr><td>打开方式</td><td>说明</td></tr><tr><td>“r”</td><td>以“只读”方式打开文件。只允许读取，不允许写入。文件必须存在，否则打开失败。</td></tr><tr><td>“w”</td><td>以“写入”方式打开文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么清空文件内容（相当于删除原文件，再创建一个新文件）。</td></tr><tr><td>“a”</td><td>以“追加”方式打开文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么将写入的数据追加到文件的末尾（文件原有的内容保留）。</td></tr><tr><td>“r+”</td><td>以“读写”方式打开文件。既可以读取也可以写入，也就是随意更新文件。文件必须存在，否则打开失败。</td></tr><tr><td>“w+”</td><td>以“写入/更新”方式打开文件，相当于<code>w</code>和<code>r+</code>叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么清空文件内容（相当于删除原文件，再创建一个新文件）。</td></tr><tr><td>“a+”</td><td>以“追加/更新”方式打开文件，相当于a和r+叠加的效果。既可以读取也可以写入，也就是随意更新文件。如果文件不存在，那么创建一个新文件；如果文件存在，那么将写入的数据追加到文件的末尾（文件原有的内容保留）。</td></tr><tr><td>控制读写方式的字符串（可以不写）</td><td></td></tr><tr><td>打开方式</td><td>说明</td></tr><tr><td>“t”</td><td>文本文件。如果不写，默认为<code>&quot;t&quot;</code>。</td></tr><tr><td>“b”</td><td>二进制文件。</td></tr></tbody></table><p>调用 fopen() 函数时必须指明读写权限，但是可以不指明读写方式（此时默认为<code>&quot;t&quot;</code>）。</p><p>读写权限和读写方式可以组合使用，但是必须将读写方式放在读写权限的中间或者尾部（换句话说，不能将读写方式放在读写权限的开头）。例如：</p><ul><li>将读写方式放在读写权限的末尾：”rb”、”wt”、”ab”、”r+b”、”w+t”、”a+t”</li><li>将读写方式放在读写权限的中间：”rb+”、”wt+”、”ab+”</li></ul><p>整体来说，文件打开方式由 r、w、a、t、b、+ 六个字符拼成，各字符的含义是：</p><ul><li>r(read)：读</li><li>w(write)：写</li><li>a(append)：追加</li><li>t(text)：文本文件</li><li>b(binary)：二进制文件</li><li>+：读和写</li></ul><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>文件一旦使用完毕，应该用 fclose() 函数把文件关闭，以释放相关资源，避免数据丢失。fclose() 的用法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fclose(FILE *fp);</span><br></pre></td></tr></table></figure><p>fp 为文件指针。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure><p>文件正常关闭时，fclose() 的返回值为0，如果返回非零值则表示有错误发生。</p><p>在C语言中，读写文件比较灵活，既可以每次读写一个字符，也可以读写一个字符串，甚至是任意字节的数据（数据块）。本节介绍以字符形式读写文件。</p><p>以字符形式读写文件时，每次可以从文件中读取一个字符，或者向文件中写入一个字符。主要使用两个函数，分别是 fgetc() 和 fputc()。</p><h3 id="字符读取函数-fgetc"><a href="#字符读取函数-fgetc" class="headerlink" title="字符读取函数 fgetc"></a>字符读取函数 fgetc</h3><p>fgetc 是 file get char 的缩写，意思是从指定的文件中读取一个字符。fgetc() 的用法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fgetc (FILE *fp);</span><br></pre></td></tr></table></figure><p>fp 为文件<a href="http://c.biancheng.net/c/80/">指针</a>。fgetc() 读取成功时返回读取到的字符，读取到文件末尾或读取失败时返回<code>EOF</code>。</p><p>EOF 是 end of file 的缩写，表示文件末尾，是在 stdio.h 中定义的宏，它的值是一个负数，往往是 -1。fgetc() 的返回值类型之所以为 int，就是为了容纳这个负数（char不能是负数）。</p><blockquote><p>EOF 不绝对是 -1，也可以是其他负数，这要看编译器的实现。</p></blockquote><p>fgetc() 的用法举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char ch;FILE *fp &#x3D; fopen(&quot;D:\\demo.txt&quot;, &quot;r+&quot;);ch &#x3D; fgetc(fp);</span><br></pre></td></tr></table></figure><p>表示从<code>D:\\demo.txt</code>文件中读取一个字符，并保存到变量 ch 中。</p><p>fgets() 的原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> size, FILE *stream)</span></span>;</span><br></pre></td></tr></table></figure><p>fgets() 虽然比 gets() 安全，但安全是要付出代价的，代价就是它的使用比 gets() 要麻烦一点，有三个参数。它的功能是从 stream 流中读取 size 个字符存储到字符指针变量 s 所指向的内存空间。它的返回值是一个指针，指向字符串中第一个字符的地址。</p><p>其中：s 代表要保存到的内存空间的首地址，可以是字符数组名，也可以是指向字符数组的字符指针变量名。size 代表的是读取字符串的长度。stream 表示从何种流中读取，可以是标准输入流 stdin，也可以是文件流，即从某个文件中读取，这个在后面讲文件的时候再详细介绍。标准输入流就是前面讲的输入缓冲区。所以如果是从键盘读取数据的话就是从输入缓冲区中读取数据，即从标准输入流 stdin 中读取数据，所以第三个参数为 stdin。</p><p>在文件内部有一个位置指针，用来指向当前读写到的位置，也就是读写到第几个字节。在文件打开时，该指针总是指向文件的第一个字节。使用 fgetc() 函数后，该指针会向后移动一个字节，所以可以连续多次使用 fgetc() 读取多个字符。</p><p>注意：这个文件内部的位置指针与C语言中的指针不是一回事。位置指针仅仅是一个标志，表示文件读写到的位置，也就是读写到第几个字节，它不表示地址。文件每读写一次，位置指针就会移动一次，它不需要你在程序中定义和赋值，而是由系统自动设置，对用户是隐藏的。</p><p>【示例】在屏幕上显示 D:\demo.txt 文件的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;int main()&#123;    FILE *fp;    char ch;       &#x2F;&#x2F;如果文件不存在，给出提示并退出    if( (fp&#x3D;fopen(&quot;D:\\demo.txt&quot;,&quot;rt&quot;)) &#x3D;&#x3D; NULL )&#123;        puts(&quot;Fail to open file!&quot;);        exit(0);    &#125;    &#x2F;&#x2F;每次读取一个字节，直到读取完毕    while( (ch&#x3D;fgetc(fp)) !&#x3D; EOF )&#123;        putchar(ch);    &#125;    putchar(&#39;\n&#39;);  &#x2F;&#x2F;输出换行符    fclose(fp);    return 0;&#125;</span><br></pre></td></tr></table></figure><p>在D盘下创建 demo.txt 文件，输入任意内容并保存，运行程序，就会看到刚才输入的内容全部都显示在屏幕上。</p><p>该程序的功能是从文件中逐个读取字符，在屏幕上显示，直到读取完毕。</p><p>程序第 13 行是关键，<a href="http://c.biancheng.net/view/180.html">while 循环</a>的条件为<code>(ch=fgetc(fp)) != EOF</code>。fget() 每次从位置指针所在的位置读取一个字符，并保存到变量 ch，位置指针向后移动一个字节。当文件指针移动到文件末尾时，fget() 就无法读取字符了，于是返回 EOF，表示文件读取结束了。</p><h4 id="对-EOF-的说明"><a href="#对-EOF-的说明" class="headerlink" title="对 EOF 的说明"></a>对 EOF 的说明</h4><p>EOF 本来表示文件末尾，意味着读取结束，但是很多函数在读取出错时也返回 EOF，那么当返回 EOF 时，到底是文件读取完毕了还是读取出错了？我们可以借助 stdio.h 中的两个函数来判断，分别是 feof() 和 ferror()。</p><p>feof() 函数用来判断文件内部指针是否指向了文件末尾，它的原型是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int feof ( FILE * fp );</span><br></pre></td></tr></table></figure><p>当指向文件末尾时返回非零值，否则返回零值。</p><p>ferror() 函数用来判断文件操作是否出错，它的原型是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int ferror ( FILE *fp );</span><br></pre></td></tr></table></figure><p>出错时返回非零值，否则返回零值。</p><p>需要说明的是，文件出错是非常少见的情况，上面的示例基本能够保证将文件内的数据读取完毕。如果追求完美，也可以加上判断并给出提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;int main()&#123;    FILE *fp;    char ch;      &#x2F;&#x2F;如果文件不存在，给出提示并退出    if( (fp&#x3D;fopen(&quot;D:\\demo.txt&quot;,&quot;rt&quot;)) &#x3D;&#x3D; NULL )&#123;        puts(&quot;Fail to open file!&quot;);        exit(0);    &#125;    &#x2F;&#x2F;每次读取一个字节，直到读取完毕    while( (ch&#x3D;fgetc(fp)) !&#x3D; EOF )&#123;        putchar(ch);    &#125;    putchar(&#39;\n&#39;);  &#x2F;&#x2F;输出换行符    if(ferror(fp))&#123;        puts(&quot;读取出错&quot;);    &#125;else&#123;        puts(&quot;读取成功&quot;);    &#125;    fclose(fp);    return 0;&#125;</span><br></pre></td></tr></table></figure><p>这样，不管是出错还是正常读取，都能够做到心中有数。</p><h3 id="字符写入函数-fputc"><a href="#字符写入函数-fputc" class="headerlink" title="字符写入函数 fputc"></a>字符写入函数 fputc</h3><p>fputc 是 file output char 的所以，意思是向指定的文件中写入一个字符。fputc() 的用法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fputc ( int ch, FILE *fp );</span><br></pre></td></tr></table></figure><p>ch 为要写入的字符，fp 为文件指针。fputc() 写入成功时返回写入的字符，失败时返回 EOF，返回值类型为 int 也是为了容纳这个负数。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fputc(&#39;a&#39;, fp);</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char ch &#x3D; &#39;a&#39;;</span><br><span class="line">fputc(ch, fp);</span><br></pre></td></tr></table></figure><p>表示把字符 ‘a’ 写入fp所指向的文件中。</p><h4 id="两点说明"><a href="#两点说明" class="headerlink" title="两点说明"></a>两点说明</h4><ol><li><p>被写入的文件可以用写、读写、追加方式打开，用写或读写方式打开一个已存在的文件时将清除原有的文件内容，并将写入的字符放在文件开头。如需保留原有文件内容，并把写入的字符放在文件末尾，就必须以追加方式打开文件。不管以何种方式打开，被写入的文件若不存在时则创建该文件。</p></li><li><p>每写入一个字符，文件内部位置指针向后移动一个字节。</p></li></ol><p>【示例】从键盘输入一行字符，写入文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;int main()&#123;    FILE *fp;    char ch;    &#x2F;&#x2F;判断文件是否成功打开    if( (fp&#x3D;fopen(&quot;D:\\demo.txt&quot;,&quot;wt+&quot;)) &#x3D;&#x3D; NULL )&#123;        puts(&quot;Fail to open file!&quot;);        exit(0);    &#125;    printf(&quot;Input a string:\n&quot;);    &#x2F;&#x2F;每次从键盘读取一个字符并写入文件    while ( (ch&#x3D;getchar()) !&#x3D; &#39;\n&#39; )&#123;        fputc(ch,fp);    &#125;    fclose(fp);    return 0;&#125;</span><br></pre></td></tr></table></figure><p>运行程序，输入一行字符并按回车键结束，打开D盘下的 demo.txt 文件，就可以看到刚才输入的内容。</p><p>程序每次从键盘读取一个字符并写入文件，直到按下回车键，while 条件不成立，结束读取</p><h3 id="fscanf-一般形式"><a href="#fscanf-一般形式" class="headerlink" title="fscanf 一般形式"></a>fscanf 一般形式</h3><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><p>int fscanf(FILE *stream, char *format[,argument…]);</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><strong>stream</strong>– 这是指向 FILE 对象的指针，该 FILE 对象标识了流。</li><li><strong>format</strong>– 这是 C 字符串，包含了以下各项中的一个或多个：<em>空格字符、非空格字符</em>和<em>format 说明符</em>。　　format 说明符形式为**[=%[*][width][modifiers]type=]** [2] </li></ul><h4 id="功-能"><a href="#功-能" class="headerlink" title="功 能"></a>功 能</h4><p>从一个流中执行格式化输入，fscanf遇到空格和换行时结束，注意空格时也结束。这与<a href="https://baike.baidu.com/item/fgets">fgets</a>有区别，fgets遇到空格不结束。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>整型，成功返回读入的参数的个数，失败返回EOF(-1)。</p><h2 id="2-scanf控制格式"><a href="#2-scanf控制格式" class="headerlink" title="2.scanf控制格式"></a>2.scanf控制格式</h2><h3 id="scanf的"><a href="#scanf的" class="headerlink" title="scanf的["></a>scanf的[</h3><p>scanf函数中，有一个不常被人注意的，就是[了。它用来扫描特定的字符集。如果它以^开头，表示扫描除了字符集以外的所有字符，否则就是前面我们看到的，只扫描读取指定字符。</p><p>scanf读取空字符<br>我们都知道，scanf在读取内容的时候，会跳过空字符，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s);</span><br></pre></td></tr></table></figure><p>假设输入为：</p><p>假设输入为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bianchengzhuji</span><br></pre></td></tr></table></figure><p>那么输出将会是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bianchengzhuji</span><br></pre></td></tr></table></figure><p>注意，前面的空字符并没有读入到字符串s中，而是被跳过了。</p><p>注意，前面的空字符并没有读入到字符串s中，而是被跳过了。</p><p>那如果要读取空字符怎么办？很简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,s);</span><br></pre></td></tr></table></figure><p>这里的意思就是说，除了换行符，其他字符都读入，也就是说前面的空字符也会被读取，就达到了我们的目的了。</p><h3 id="忽略开头的换行符"><a href="#忽略开头的换行符" class="headerlink" title="忽略开头的换行符"></a>忽略开头的换行符</h3><p>如果我们一开始就按回车，你会发现，s什么都没有读入，如何忽略开始的换行呢？像下面这样就可以了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*[\n]%[^\n]&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入输出示例：</p><p>输入输出示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:[回车][回车]abc</span><br><span class="line">输出:abc</span><br></pre></td></tr></table></figure><p>输入时，按下两次回车，再输入其他字符，则最终会读取其他字符，而忽略开头的回车换行。我们知道，在scanf中，*是跳过相应的字符项，比如，跳过开头的两个数字：</p><p>输入时，按下两次回车，再输入其他字符，则最终会读取其他字符，而忽略开头的回车换行。我们知道，在scanf中，*是跳过相应的字符项，比如，跳过开头的两个数字：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> third = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*d %*d %d&quot;</span>,&amp;third);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,third);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入：</p><p>输入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111</span> <span class="number">222</span> <span class="number">333</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">333</span></span><br></pre></td></tr></table></figure><p>scanf会跳过前面的111和222，则会读取333，这个功能在读取文件获取特定列内容的时候很有用。同理，在前面的例子中%*[\n]即表示跳过换行，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^\n]</span><br></pre></td></tr></table></figure><p>则读取任意字符，直到遇到换行。</p><h3 id="丢弃特定字符"><a href="#丢弃特定字符" class="headerlink" title="丢弃特定字符"></a>丢弃特定字符</h3><p>最开始的例子中，如果开头是字母，即便想读取数字，也读取不到，那么如何跳过开头的字母呢？仿照刚刚讲的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*[a-zA-Z]%[0-9]&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，开头的字母就会被丢弃。</p><p>这样，开头的字母就会被丢弃。</p><p>读取指定长度的任意字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%7s&quot;</span>,s);</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefghij</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefg</span><br></pre></td></tr></table></figure><p>这样可以避免缓冲区溢出。</p><p>scanf读取内容会跳过开头的空白字符，遇到换行符或者不是目标字符时结束读取。当然，你不是没有办法，今天所分享的就是办法。当然了，很多时候，你可能会选择使用fgets，getchar之类的函数，无妨。</p><h2 id="3-C语言中条件编译相关指令"><a href="#3-C语言中条件编译相关指令" class="headerlink" title="3.C语言中条件编译相关指令"></a>3.C语言中条件编译相关指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define       定义一个预处理宏</span><br><span class="line">#undef       取消宏的定义</span><br><span class="line"></span><br><span class="line">#if          编译预处理中的条件命令，相当于C语法中的if语句</span><br><span class="line">#ifdef        判断某个宏是否被定义，若已定义，执行随后的语句</span><br><span class="line">#ifndef       与#ifdef相反，判断某个宏是否未被定义</span><br><span class="line">#elif         若#if, #ifdef, #ifndef或前面的#elif条件不满足，则执行#elif之后的语句，相当于C语法中的#else-if</span><br><span class="line">#else        与#if, #ifdef, #ifndef对应, 若这些条件不满足，则执行#else之后的语句，相当于C语法中的else</span><br><span class="line">#endif       #if, #ifdef, #ifndef这些条件命令的结束标志.</span><br><span class="line">defined     　与#if, #elif配合使用，判断某个宏是否被定义</span><br></pre></td></tr></table></figure><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><p>条件编译是根据实际定义宏（某类条件）进行代码静态编译的手段。可根据表达式的值或某个特定宏是否被定义来确定编译条件。</p><p>最常见的条件编译是防止重复包含头文件的宏，形式跟下面代码类似：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">#<span class="meta-keyword">ifndef</span> ABCD_H</span></span><br><span class="line"><span class="number">2</span> <span class="meta">#<span class="meta-keyword">define</span> ABCD_H</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="comment">// ... some declaration codes</span></span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">6</span> <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// #ifndef ABCD_H</span></span></span><br></pre></td></tr></table></figure><p>在实现文件中通常有如下类似的定义：c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="comment">// ... do some operations</span></span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="comment">// ... use  Win32 API</span></span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="预编译指令应用举例"><a href="#预编译指令应用举例" class="headerlink" title="预编译指令应用举例"></a>预编译指令应用举例</h3><h4 id="1-define、-undef"><a href="#1-define、-undef" class="headerlink" title="1. #define、#undef"></a>1. #define、#undef</h4><p>#define命令定义一个宏:<br>#define MACRO_NAME[(args)] [tokens[(opt)]]<br>之后出现的MACRO_NAME将被替代为所定义的标记(tokens)。宏可带参数，而后面的标记也是可选的。</p><p>宏定义，按照是否带参数通常分为对象宏、函数宏两种。<br>对象宏: 不带参数的宏被称为”对象宏(objectlike macro)”。对象宏多用于定义常量、通用标识。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LENGTH 100</span></span><br><span class="line"><span class="comment">// 通用标识，日志输出宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SLog printf</span></span><br><span class="line"><span class="comment">// 预编译宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _DEBUG</span></span><br></pre></td></tr></table></figure><p>函数宏：带参数的宏。利用宏可以提高代码的运行效率: 子程序的调用需要压栈出栈, 这一过程如果过于频繁会耗费掉大量的CPU运算资源。 所以一些代码量小但运行频繁的代码如果采用带参数宏来实现会提高代码的运行效率。但多数c++程序不推荐使用函数宏，调试上有一定难度，可考虑使用c++的inline代替之。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小值函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN(a,b) ((a)&gt;(b)? (a):(b))</span></span><br><span class="line"><span class="comment">// 安全释放内存函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SAFE_DELETE(p) &#123;<span class="meta-keyword">if</span>(NULL!=p)&#123;delete p; p = NULL;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>#undef可以取消宏定义，与#define对应。</p><h4 id="2-defined"><a href="#2-defined" class="headerlink" title="2. defined"></a>2. defined</h4><p>defined用来测试某个宏是否被定义。defined(name): 若宏被定义，则返回1，否则返回0。<br>它与#if、#elif、#else结合使用来判断宏是否被定义，乍一看好像它显得多余, 因为已经有了#ifdef和#ifndef。defined可用于在一条判断语句中声明多个判别条件；#ifdef和#ifndef则仅支持判断一个宏是否定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(VAX) &amp;&amp; defined(UNIX) &amp;&amp; !defined(DEBUG) </span></span><br></pre></td></tr></table></figure><p>和#if、#elif、#else不同，#ifdef、#ifndef、defined测试的宏可以是对象宏，也可以是函数宏。</p><h4 id="3-ifdef、-ifndef、-else、-endif"><a href="#3-ifdef、-ifndef、-else、-endif" class="headerlink" title="3. #ifdef、#ifndef、#else、#endif"></a>3. #ifdef、#ifndef、#else、#endif</h4><p>条件编译中相对常用的预编译指令。模式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ABC</span></span><br><span class="line"><span class="comment">// ... codes while definded ABC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (CODE_VERSION &gt; 2)</span></span><br><span class="line"><span class="comment">// ... codes while CODE_VERSION &gt; 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">// ... remained cases</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// #ifdef ABC </span></span></span><br></pre></td></tr></table></figure><p>#ifdef用于判断某个宏是否定义，和#ifndef功能正好相反，二者仅支持判断单个宏是否已经定义，上面例子中二者可以互换。如果不需要多条件预编译的话，上面例子中的#elif和#else均可以不写。</p><h4 id="4-if、-elif、-else、-endif"><a href="#4-if、-elif、-else、-endif" class="headerlink" title="4. #if、#elif、#else、#endif"></a>4. #if、#elif、#else、#endif</h4><p>#if可支持同时判断多个宏的存在，与常量表达式配合使用。常用格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 常量表达式1</span></span><br><span class="line"><span class="comment">// ... some codes</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> 常量表达式2</span></span><br><span class="line"><span class="comment">// ... other codes</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> 常量表达式3</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">// ... statement</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>常量表达式可以是包含宏、算术运算、逻辑运算等等的合法C常量表达式，如果常量表达式为一个未定义的宏, 那么它的值被视为0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> MACRO_NON_DEFINED <span class="comment">// 等价于</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br></pre></td></tr></table></figure><p>在判断某个宏是否被定义时，应当避免使用#if，因为该宏的值可能就是被定义为0。而应当使用#ifdef或#ifndef。<br>注意: #if、#elif之后的宏只能是对象宏。如果宏未定义，或者该宏是函数宏，则编译器可能会有对应宏未定义的警告。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要介绍c语言中有关预编译的指令。撰写本文的目的在于理清相关概念调用，在后续预编译使用时可以找到最合适的指令及格式。比如同时满足多个宏定义的预编译、多分支预编译、#elif和#else指令的配合等。</p><p>一、if条件编译，选择编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)    </span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> ()</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//*******</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> ()</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//******</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//******</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> ()</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//******</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">elif</span> ()</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//******</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">elif</span> ()</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//******</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>二、注意此处不能加“（）”不然会把括号也视为宏定义的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBG</span></span><br></pre></td></tr></table></figure><p>三、</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A C（0、1...）</span></span><br></pre></td></tr></table></figure><p>四、注意此处不能加“（）”不然会把括号也视为宏定义的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#undefine DBG</span></span><br></pre></td></tr></table></figure><p>五、注意此处不能加“()”不然会把括号也视为宏定义的字符串</p><p>（1）  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> DBG</span></span><br><span class="line"></span><br><span class="line">​    <span class="meta">#<span class="meta-keyword">define</span> UNDBG</span></span><br><span class="line"></span><br><span class="line">​    <span class="meta">#<span class="meta-keyword">define</span> UNDBG1</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>（2）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#ifundef DBG</span></span><br><span class="line"></span><br><span class="line">​    <span class="meta">#<span class="meta-keyword">define</span> UNDBG</span></span><br><span class="line"></span><br><span class="line">​    <span class="meta">#<span class="meta-keyword">define</span> UNDBG</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>六、符合条件“&amp;&amp; 和 ||”复合条件下必须加上“（）”标准形式如： # if (define (DBG)) || (define (DBG1))</p><p>   (1)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta"># <span class="meta-keyword">if</span> <span class="meta-keyword">define</span> DBG || <span class="meta-keyword">define</span> DBG1 || <span class="meta-keyword">define</span> DBG2</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">//******</span></span><br><span class="line"></span><br><span class="line">​    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>(2)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> !<span class="meta-keyword">define</span> DBG || !<span class="meta-keyword">define</span> DBG2</span></span><br><span class="line"></span><br><span class="line">​      <span class="comment">//******</span></span><br><span class="line"></span><br><span class="line">​    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言宝典-更新中&quot;&gt;&lt;a href=&quot;#C语言宝典-更新中&quot; class=&quot;headerlink&quot; title=&quot;C语言宝典(更新中)&quot;&gt;&lt;/a&gt;C语言宝典(更新中)&lt;/h1&gt;&lt;h2 id=&quot;1-文件操作&quot;&gt;&lt;a href=&quot;#1-文件操作&quot; class=&quot;he</summary>
      
    
    
    
    <category term="C语言" scheme="https://a2914475618.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="C语言" scheme="https://a2914475618.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门</title>
    <link href="https://a2914475618.github.io/2021/04/23/postVue/"/>
    <id>https://a2914475618.github.io/2021/04/23/postVue/</id>
    <published>2021-04-23T07:47:42.000Z</published>
    <updated>2021-06-01T12:44:43.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue入门必看-更新中"><a href="#Vue入门必看-更新中" class="headerlink" title="Vue入门必看(更新中)"></a>Vue入门必看(更新中)</h1><blockquote><p>前言：入门Vue相对来说还是简单的，毕竟b站上4个小时就能入门到精通了</p><p>Vue.js数据驱动的原理在于View层的视图发生改变时，Vue会通过DOM Listeners来监听并改变Model层的数据。反之，当Model层的数据发生改变时，也会通过Data Bingings来监听并改变View层的展示。从而实现双向数据绑定的功能。<br>例如：jQuery通过操作DOM来改变页面的显示，而Vue通过操作数据来实现页面的更新与展示。这样我们就能很直观的理解数据驱动的意思了。</p></blockquote><p>MVVM概念</p><blockquote><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的<strong>数据双向绑定</strong>。<br><strong>Vue.js</strong> 就是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性。</p></blockquote><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;Hello Vue!&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hello Vue!</p><p>我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是<strong>响应式的</strong>。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 <code>app.message</code> 的值，你将看到上例相应地更新。</p><p>注意我们不再和 HTML 直接交互了。一个 Vue 应用会将其挂载到一个 DOM 元素上 (对于这个例子是 <code>#app</code>) 然后对其进行完全控制。那个 HTML 是我们的入口，但其余都会发生在新创建的 Vue 实例内部。</p><p>除了文本插值，我们还可以像这样来绑定元素 attribute：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-2&quot;&gt;</span><br><span class="line">  &lt;span v-bind:title&#x3D;&quot;message&quot;&gt;</span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app2 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-2&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;页面加载于 &#39; + new Date().toLocaleString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>鼠标悬停几秒钟查看此处动态绑定的提示信息！</p><p>这里我们遇到了一点新东西。你看到的 <code>v-bind</code> attribute 被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 <code>title</code> attribute 和 Vue 实例的 <code>message</code> property 保持一致”。</p><p>如果你再次打开浏览器的 JavaScript 控制台，输入 <code>app2.message = &#39;新消息&#39;</code>，就会再一次看到这个绑定了 <code>title</code> attribute 的 HTML 已经进行了更新。</p><h2 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h2><p>控制切换一个元素是否显示也相当简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-3&quot;&gt;</span><br><span class="line">  &lt;p v-if&#x3D;&quot;seen&quot;&gt;现在你看到我了&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app3 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-3&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    seen: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在你看到我了</p><p>继续在控制台输入 <code>app3.seen = false</code>，你会发现之前显示的消息消失了。</p><p>这个例子演示了我们不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM <strong>结构</strong>。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用<a href="https://cn.vuejs.org/v2/guide/transitions.html">过渡效果</a>。</p><p>还有其它很多指令，每个都有特殊的功能。例如，<code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-4&quot;&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;todo in todos&quot;&gt;</span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app4 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-4&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; text: &#39;学习 JavaScript&#39; &#125;,</span><br><span class="line">      &#123; text: &#39;学习 Vue&#39; &#125;,</span><br><span class="line">      &#123; text: &#39;整个牛项目&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>学习 JavaScript</li><li>学习 Vue</li><li>整个牛项目</li></ol><p>在控制台里，输入 <code>app4.todos.push(&#123; text: &#39;新项目&#39; &#125;)</code>，你会发现列表最后添加了一个新项目。</p><h2 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2><p>为了让用户和你的应用进行交互，我们可以用 <code>v-on</code> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-5&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;button v-on:click&#x3D;&quot;reverseMessage&quot;&gt;反转消息&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app5 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-5&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;Hello Vue.js!&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseMessage: function () &#123;</span><br><span class="line">      this.message &#x3D; this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hello Vue.js!</p><p>反转消息</p><p>注意在 <code>reverseMessage</code> 方法中，我们更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，你编写的代码只需要关注逻辑层面即可。</p><p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-6&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;input v-model&#x3D;&quot;message&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app6 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-6&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;Hello Vue!&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hello Vue!</p><h2 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h2><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a5fac56ffbe79ac04dea6a309b07758d.png" alt="Component Tree"></p><p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义名为 todo-item 的新组件</span><br><span class="line">Vue.component(&#39;todo-item&#39;, &#123;</span><br><span class="line">  template: &#39;&lt;li&gt;这是个待办项&lt;&#x2F;li&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app &#x3D; new Vue(...)</span><br></pre></td></tr></table></figure><p>现在你可以用它构建另一个组件模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span><br><span class="line">  &lt;todo-item&gt;&lt;&#x2F;todo-item&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure><p>但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能从父作用域将数据传到子组件才对。让我们来修改一下组件的定义，使之能够接受一个 <a href="https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE">prop</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;todo-item&#39;, &#123;</span><br><span class="line">  &#x2F;&#x2F; todo-item 组件现在接受一个</span><br><span class="line">  &#x2F;&#x2F; &quot;prop&quot;，类似于一个自定义 attribute。</span><br><span class="line">  &#x2F;&#x2F; 这个 prop 名为 todo。</span><br><span class="line">  props: [&#39;todo&#39;],</span><br><span class="line">  template: &#39;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在，我们可以使用 <code>v-bind</code> 指令将待办项传到循环输出的每个组件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-7&quot;&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      现在我们为每个 todo-item 提供 todo 对象</span><br><span class="line">      todo 对象是变量，即其内容可以是动态的。</span><br><span class="line">      我们也需要为每个组件提供一个“key”，稍后再</span><br><span class="line">      作详细解释。</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;todo-item</span><br><span class="line">      v-for&#x3D;&quot;item in groceryList&quot;</span><br><span class="line">      v-bind:todo&#x3D;&quot;item&quot;</span><br><span class="line">      v-bind:key&#x3D;&quot;item.id&quot;</span><br><span class="line">    &gt;&lt;&#x2F;todo-item&gt;</span><br><span class="line">  &lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">Vue.component(&#39;todo-item&#39;, &#123;</span><br><span class="line">  props: [&#39;todo&#39;],</span><br><span class="line">  template: &#39;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app7 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-7&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    groceryList: [</span><br><span class="line">      &#123; id: 0, text: &#39;蔬菜&#39; &#125;,</span><br><span class="line">      &#123; id: 1, text: &#39;奶酪&#39; &#125;,</span><br><span class="line">      &#123; id: 2, text: &#39;随便其它什么人吃的东西&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>蔬菜</li><li>奶酪</li><li>随便其它什么人吃的东西</li></ol><p>尽管这只是一个刻意设计的例子，但是我们已经设法将应用分割成了两个更小的单元。子单元通过 prop 接口与父单元进行了良好的解耦。我们现在可以进一步改进 <code>&lt;todo-item&gt;</code> 组件，提供更为复杂的模板和逻辑，而不会影响到父单元。</p><p>在一个大型应用中，有必要将整个应用程序划分为组件，以使开发更易管理。在<a href="https://cn.vuejs.org/v2/guide/components.html">后续教程</a>中我们将详述组件，不过这里有一个 (假想的) 例子，以展示使用了组件的应用模板是什么样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;app-nav&gt;&lt;&#x2F;app-nav&gt;</span><br><span class="line">  &lt;app-view&gt;</span><br><span class="line">    &lt;app-sidebar&gt;&lt;&#x2F;app-sidebar&gt;</span><br><span class="line">    &lt;app-content&gt;&lt;&#x2F;app-content&gt;</span><br><span class="line">  &lt;&#x2F;app-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="与自定义元素的关系"><a href="#与自定义元素的关系" class="headerlink" title="与自定义元素的关系"></a>与自定义元素的关系</h3><p>你可能已经注意到 Vue 组件非常类似于<strong>自定义元素</strong>——它是 <a href="https://www.w3.org/wiki/WebComponents/">Web 组件规范</a>的一部分，这是因为 Vue 的组件语法部分参考了该规范。例如 Vue 组件实现了 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Slot API</a> 与 <code>is</code> attribute。但是，还是有几个关键差别：</p><ol><li>Web Components 规范已经完成并通过，但未被所有浏览器原生实现。目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。</li><li>Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</li></ol><p>虽然 Vue 内部没有使用自定义元素，不过在应用使用自定义元素、或以自定义元素形式发布时，<a href="https://custom-elements-everywhere.com/#vue">依然有很好的互操作性</a>。Vue CLI 也支持将 Vue 组件构建成为原生的自定义元素。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue入门必看-更新中&quot;&gt;&lt;a href=&quot;#Vue入门必看-更新中&quot; class=&quot;headerlink&quot; title=&quot;Vue入门必看(更新中)&quot;&gt;&lt;/a&gt;Vue入门必看(更新中)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前言：入门Vue相对来说还是简单的，毕</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Vue" scheme="https://a2914475618.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>C#反射详解</title>
    <link href="https://a2914475618.github.io/2021/04/23/postC-%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3/"/>
    <id>https://a2914475618.github.io/2021/04/23/postC-%E5%8F%8D%E5%B0%84%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-04-23T04:55:07.000Z</published>
    <updated>2021-06-02T07:44:11.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-反射"><a href="#C-反射" class="headerlink" title="C#反射"></a>C#反射</h1><blockquote><p>Reflection，中文翻译为反射。<br>    这是.Net中获取运行时类型信息的方式，.Net的应用程序由几个部分：‘程序集(Assembly)’、‘模块(Module)’、‘类型(class)’组成，而反射提供一种编程的方式，让程序员可以在程序运行期获得这几个组成部分的相关信息，例如：</p><p>​    Assembly类可以获得正在运行的装配件信息，也可以动态的加载装配件，以及在装配件中查找类型信息，并创建该类型的实例。<br>Type类可以获得对象的类型信息，此信息包含对象的所有要素：方法、构造器、属性等等，通过Type类可以得到这些要素的信息，并且调用之。<br>MethodInfo包含方法的信息，通过这个类可以得到方法的名称、参数、返回值等，并且可以调用之。<br>诸如此类，还有FieldInfo、EventInfo等等，这些类都包含在System.Reflection命名空间下。</p></blockquote><p>反射的定义：审查元数据并收集关於它的类型信息的能力,元数据(编辑后的基本数据单元)就是一大堆表，编译器会创建一个类定义表，一个字段定义表，一个方法定义表等,System.Reflection命名空间包含的几个类，允许你反射(解析)这些元数据的代码</p><h2 id="一、反射的作用："><a href="#一、反射的作用：" class="headerlink" title="一、反射的作用："></a>一、反射的作用：</h2><p>动态的创建类型的实例,将类型邦定到现有对象，或从现有对象中获取类型<br>应用程序需要在运行时从某个特定的程序集中载入一个特定的类型，以便实现某个任务时可以用到反射<br>反射主要应用於类库，这些类库需要知道一个类型的定义，以便提供更多的功能</p><h2 id="二、应用要点："><a href="#二、应用要点：" class="headerlink" title="二、应用要点："></a>二、应用要点：</h2><p>现实应用程序中很少使用到反射<br>使用反射动态邦定需要牺牲性能<br>有些元数据信息是不能通过反射获取的<br>某些反射类型是专门為那些CLR开发编辑器开发使用的，所以你要意思到不是所有反射类型都是可以使用的</p><h2 id="三、取得Assembly的方法："><a href="#三、取得Assembly的方法：" class="headerlink" title="三、取得Assembly的方法："></a>三、取得Assembly的方法：</h2><p>Assembly.Load<br>Assembly.LoadFile<br>Assembly.LoadFrom<br>Type对象的Assembly方法</p><h2 id="四、反射的成员："><a href="#四、反射的成员：" class="headerlink" title="四、反射的成员："></a>四、反射的成员：</h2><p>MemberInfo-成员<br>ConstructorInfo-结构<br>FieldInfo-字段<br>MethodInfo-方法<br>PropertyInfo-属性<br>EventInfo-事件</p><p>System.reflection命名空间包含的几个类，允许你反射（解析）这些元数据表的代码  </p><p>System.Reflection.Assembly<br>System.Reflection.MemberInfo<br>System.Reflection.EventInfo<br>System.Reflection.FieldInfo<br>System.Reflection.MethodBase<br>System.Reflection.ConstructorInfo<br>System.Reflection.MethodInfo<br>System.Reflection.PropertyInfo<br>System.Type<br>以下是上面几个类的使用方法：<br>（1）使用Assembly定义和加载程序集，加载在程序集清单中列出模块，以及从此程序集中查找类型并创建该类型的实例。<br>（2）使用Module了解包含模块的程序集以及模块中的类等，还可以获取在模块上定义的所有全局方法或其他特定的非全局方法。<br>（3）使用ConstructorInfo了解构造函数的名称、参数、访问修饰符（如pulic 或private）和实现详细信息（如abstract或virtual）等。使用Type的GetConstructors或 GetConstructor方法来调用特定的构造函数。<br>（4）使用MethodInfo了解方法的名称、返回类型、参数、访问修饰符（如pulic 或private）和实现详细信息（如abstract或virtual）等。使用Type的GetMethods或GetMethod方法来调用特定的方法。<br>（5）使用FiedInfo了解字段的名称、访问修饰符（如public或private）和实现详细信息（如static）等，并获取或设置字段值。<br>（6）使用EventInfo了解事件的名称、事件处理程序数据类型、自定义属性、声明类型和反射类型等，添加或移除事件处理程序。<br>（7）使用PropertyInfo了解属性的名称、数据类型、声明类型、反射类型和只读或可写状态等，获取或设置属性值。<br>（8）使用ParameterInfo了解参数的名称、数据类型、是输入参数还是输出参数，以及参数在方法签名中的位置等。</p><h2 id="五、根据反射取得对象的Member信息"><a href="#五、根据反射取得对象的Member信息" class="headerlink" title="五、根据反射取得对象的Member信息"></a>五、根据反射取得对象的Member信息</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">五、根据反射取得对象的Member信息</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteReflectionInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Type testType = <span class="keyword">typeof</span>(Test);</span><br><span class="line">Assembly assembly = testType.Assembly;</span><br><span class="line">Response.Write(<span class="string">&quot;Assembly：&quot;</span> + assembly.FullName + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">Type[] typeList = assembly.GetTypes();   <span class="comment">// 获取类型</span></span><br><span class="line"><span class="comment">// 针对每个类型获取详细信息</span></span><br><span class="line"><span class="keyword">foreach</span> (Type type <span class="keyword">in</span> typeList)</span><br><span class="line">&#123;</span><br><span class="line">    Response.Write(<span class="string">&quot;------------------------&quot;</span> + type.Namespace + type.Name + <span class="string">&quot;------------------------&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 获得类型的结构信息</span></span><br><span class="line">    ConstructorInfo[] constructs = type.GetConstructors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得类型的字段信息</span></span><br><span class="line">    FieldInfo[] fields = type.GetFields();</span><br><span class="line">    Response.Write(<span class="string">&quot;&lt;b&gt;类的公共字段信息如下：&lt;/b&gt;&quot;</span> + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">int</span> a1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (FieldInfo field <span class="keyword">in</span> fields)</span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write((a1++).ToString() + <span class="string">&quot;. &quot;</span> + field.Name + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得方法信息</span></span><br><span class="line">    MethodInfo[] methods = type.GetMethods();</span><br><span class="line"></span><br><span class="line">    Response.Write(<span class="string">&quot;&lt;b&gt;类的公共方法如下：&lt;/b&gt;&quot;</span> + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">int</span> a2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (MethodInfo method <span class="keyword">in</span> methods)</span><br><span class="line">    &#123;</span><br><span class="line">        ParameterInfo[] parameters = method.GetParameters();</span><br><span class="line">        ParameterInfo reparam = method.ReturnParameter;</span><br><span class="line">        Response.Write((a2++).ToString() + <span class="string">&quot;. &quot;</span> + reparam.ParameterType.Name + <span class="string">&quot; &quot;</span> + method.Name + <span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (ParameterInfo para <span class="keyword">in</span> parameters)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (index++ &lt; parameters.Length - <span class="number">1</span>)</span><br><span class="line">                Response.Write(para.ParameterType.Name + <span class="string">&quot; &quot;</span> + para.Name + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Response.Write(para.ParameterType.Name + <span class="string">&quot; &quot;</span> + para.Name);</span><br><span class="line">        &#125;</span><br><span class="line">        Response.Write(<span class="string">&quot;)&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得属性的信息</span></span><br><span class="line">    PropertyInfo[] propertys = type.GetProperties();</span><br><span class="line"></span><br><span class="line">    Response.Write(<span class="string">&quot;&lt;b&gt;类的公共属性如下：&lt;/b&gt;&quot;</span> + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">int</span> a3 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (PropertyInfo pro <span class="keyword">in</span> propertys)</span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write((a3++).ToString() + <span class="string">&quot;. &quot;</span> + pro.PropertyType.Name + <span class="string">&quot; &quot;</span> + pro.Name + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pro.CanRead) Response.Write(<span class="string">&quot;get;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pro.CanWrite) Response.Write(<span class="string">&quot;set;&quot;</span>);</span><br><span class="line">        Response.Write(<span class="string">&quot;&#125;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获得事件信息</span></span><br><span class="line">    EventInfo[] events = type.GetEvents();</span><br><span class="line"></span><br><span class="line">    Response.Write(<span class="string">&quot;&lt;b&gt;类的成员如下：&lt;/b&gt;&quot;</span> + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 获得成员</span></span><br><span class="line">    <span class="built_in">int</span> a4 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (MemberInfo mi <span class="keyword">in</span> type.GetMembers())</span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write((a4++).ToString() + <span class="string">&quot;. &quot;</span> + mi.MemberType.ToString() + <span class="string">&quot; : &quot;</span> + mi.Name + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">六、动态创建对象</span><br><span class="line">Assembly对象的 CreateInstance方法 </span><br><span class="line">Activator. CreateInstance方法 </span><br><span class="line">Type对象的 InvokeMember方法</span><br><span class="line"><span class="comment">// 使用Assembly的CreateInstance方法来取得对象的实例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Assembly_CreateInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> assemblyName = <span class="string">&quot;SqlModel&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> className = assemblyName + <span class="string">&quot;.Member&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建无参数实例</span></span><br><span class="line">    IDAL.IMember member = (IDAL.IMember)Assembly.Load(assemblyName).CreateInstance(className);</span><br><span class="line">    Response.Write(<span class="string">&quot;创建无参数实例：&quot;</span> + member.ID + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建有参数实例</span></span><br><span class="line">    Object[] parameters = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="number">10000</span>;</span><br><span class="line">    IDAL.IMember member1 = (IDAL.IMember)Assembly.Load(assemblyName).CreateInstance(className, <span class="literal">false</span>, BindingFlags.Default, <span class="literal">null</span>, parameters, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    Response.Write(<span class="string">&quot;创建有参数实例：&quot;</span> + member1.ID + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Activator的CreateInstance方法来取得对象的实例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Activator_CreateInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> assemblyName = <span class="string">&quot;SqlModel&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> className = assemblyName + <span class="string">&quot;.Member&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建无参数实例</span></span><br><span class="line">    System.Runtime.Remoting.ObjectHandle obj = Activator.CreateInstance(assemblyName, className);</span><br><span class="line">    IDAL.IMember member = (IDAL.IMember)obj.Unwrap();</span><br><span class="line">    Response.Write(<span class="string">&quot;创建无参数实例：&quot;</span> + member.ID + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建有参数实例</span></span><br><span class="line">    Object[] parameters = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="number">10000</span>;</span><br><span class="line">    System.Runtime.Remoting.ObjectHandle obj1 = Activator.CreateInstance(assemblyName, className, <span class="literal">false</span>, BindingFlags.CreateInstance, <span class="literal">null</span>, parameters, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    IDAL.IMember member1 = (IDAL.IMember)obj1.Unwrap();</span><br><span class="line">    Response.Write(<span class="string">&quot;创建有参数实例：&quot;</span> + member1.ID + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Type的InvokeMember方法来取得对象的实例</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Type_InvokeMember</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> assemblyName = <span class="string">&quot;SqlModel&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> className = assemblyName + <span class="string">&quot;.Member&quot;</span>;</span><br><span class="line">    Assembly assem = Assembly.Load(assemblyName);</span><br><span class="line">    Type type = assem.GetType(className);   <span class="comment">// 註意这里如果使用Type.GetType来取得Type的话，那麼assemblyName指定的类一定要是强命名的</span></span><br><span class="line">    <span class="comment">// 创建无参数实例</span></span><br><span class="line">    IDAL.IMember member = (IDAL.IMember)type.InvokeMember(className, BindingFlags.CreateInstance, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    Response.Write(<span class="string">&quot;创建无参数实例：&quot;</span> + member.ID + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建有参数实例</span></span><br><span class="line">    Object[] parameters = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="number">10000</span>;</span><br><span class="line">    IDAL.IMember member1 = (IDAL.IMember)type.InvokeMember(className, BindingFlags.CreateInstance, <span class="literal">null</span>, <span class="literal">null</span>, parameters);</span><br><span class="line">    Response.Write(<span class="string">&quot;创建有参数实例：&quot;</span> + member1.ID + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">七、动态调用对象方法</span><br><span class="line"></span><br><span class="line">Type对象的 InvokeMember方法 </span><br><span class="line">MethodInfo对象的Invoke方法</span><br><span class="line"><span class="comment">// Type对象的 InvokeMember方法来动态调用方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InvokeMember</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> assemblyName = <span class="string">&quot;SqlModel&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> className = assemblyName + <span class="string">&quot;.Member&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> methodName = String.Empty;</span><br><span class="line">    <span class="built_in">string</span> result = String.Empty;</span><br><span class="line">    Assembly assem = Assembly.Load(assemblyName);</span><br><span class="line">    Object obj = assem.CreateInstance(className);</span><br><span class="line">    Type type = assem.GetType(className);   <span class="comment">// 註意这里如果使用Type.GetType来取得Type的话，那麼assemblyName指定的类一定要是强命名的</span></span><br><span class="line">    <span class="comment">// 动态调用无参数的方法</span></span><br><span class="line">    methodName = <span class="string">&quot;GetName&quot;</span>;</span><br><span class="line">    result = (<span class="built_in">string</span>)type.InvokeMember(methodName, BindingFlags.InvokeMethod, <span class="literal">null</span>, obj, <span class="literal">null</span>);</span><br><span class="line">    Response.Write(methodName + <span class="string">&quot;方法的返回值：&quot;</span> + result + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 动态调用有参数的方法</span></span><br><span class="line">    methodName = <span class="string">&quot;Update&quot;</span>;</span><br><span class="line">    Object[] methodParams = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    methodParams[<span class="number">0</span>] = DateTime.Now;</span><br><span class="line">    result = (<span class="built_in">string</span>)type.InvokeMember(methodName, BindingFlags.InvokeMethod, <span class="literal">null</span>, obj, methodParams);</span><br><span class="line">    Response.Write(methodName + <span class="string">&quot;方法的返回值：&quot;</span> + result + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 动态调用参数构架函数的带有参数的方法</span></span><br><span class="line">    Object[] parameters = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    parameters[<span class="number">0</span>] = <span class="number">10000</span>;</span><br><span class="line">    obj = assem.CreateInstance(className,<span class="literal">false</span>,BindingFlags.CreateInstance, <span class="literal">null</span>, parameters, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    result = (<span class="built_in">string</span>)type.InvokeMember(methodName, BindingFlags.InvokeMethod, <span class="literal">null</span>, obj, methodParams);</span><br><span class="line">    Response.Write(methodName + <span class="string">&quot;方法的返回值：&quot;</span> + result + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MethodInfo对象的Invoke方法来动态调用方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MethodInfo_Invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> assemblyName = <span class="string">&quot;SqlModel&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> className = assemblyName + <span class="string">&quot;.Member&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> methodName = String.Empty;</span><br><span class="line">    <span class="built_in">string</span> result = String.Empty;</span><br><span class="line"></span><br><span class="line">    Assembly assem = Assembly.Load(assemblyName);</span><br><span class="line">    Object obj = assem.CreateInstance(className);</span><br><span class="line">    Type type = assem.GetType(className);   <span class="comment">// 註意这里如果使用Type.GetType来取得Type的话，那麼assemblyName指定的类一定要是强命名的</span></span><br><span class="line">    <span class="comment">// 动态调用无参数的方法</span></span><br><span class="line">    methodName = <span class="string">&quot;GetName&quot;</span>;</span><br><span class="line">    MethodInfo methodInfo = type.GetMethod(methodName);</span><br><span class="line">    result = (<span class="built_in">string</span>)methodInfo.Invoke(obj, <span class="literal">null</span>);</span><br><span class="line">    Response.Write(methodName + <span class="string">&quot;方法的返回值：&quot;</span> + result + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 动态调用有参数的方法</span></span><br><span class="line">    methodName = <span class="string">&quot;Update&quot;</span>;</span><br><span class="line">    Object[] methodParams = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">    methodParams[<span class="number">0</span>] = DateTime.Now;</span><br><span class="line">    MethodInfo method = type.GetMethod(methodName);</span><br><span class="line">    result = (<span class="built_in">string</span>)method.Invoke(obj, methodParams);</span><br><span class="line">    Response.Write(methodName + <span class="string">&quot;方法的返回值：&quot;</span> + result + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、B站刘老师"><a href="#六、B站刘老师" class="headerlink" title="六、B站刘老师"></a>六、B站刘老师</h2><blockquote><p>反射的意义：你给我一个对象，在不用new操作符的情况下，也不知这个对象具体是什么静态类型的情况下，可以创造出一个同类型的对象</p><p>还能访问这个对象带有的各个成员</p><p>进一步解耦</p><p>因为有new操作符的地方就要跟类，就会产生依赖</p><p>反射很重要，以不变应万变</p><p>依赖反转是一个概念，依赖注入是在依赖反转的概念上结合接口，结合反射机制所形成的应用</p><p>反射的用途，依赖注入</p><p>依赖注入需要一个容器，存放接口和实现接口的类注册，好处是在程序的千千万万个地方需要更新的话易于维护</p><p>用我们注册的类型创建的实例，注入到构造器  </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-反射&quot;&gt;&lt;a href=&quot;#C-反射&quot; class=&quot;headerlink&quot; title=&quot;C#反射&quot;&gt;&lt;/a&gt;C#反射&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Reflection，中文翻译为反射。&lt;br&gt;    这是.Net中获取运行时类型信息的方式，.N</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="C#反射" scheme="https://a2914475618.github.io/tags/C-%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>session与cookie</title>
    <link href="https://a2914475618.github.io/2021/04/18/postsession%E4%B8%8Ecookie/"/>
    <id>https://a2914475618.github.io/2021/04/18/postsession%E4%B8%8Ecookie/</id>
    <published>2021-04-18T08:32:36.000Z</published>
    <updated>2021-04-18T09:44:53.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Session与Cookie（更新中）"><a href="#Session与Cookie（更新中）" class="headerlink" title="Session与Cookie（更新中）"></a>Session与Cookie（更新中）</h1><blockquote><p>前言：<strong>会话（Session）</strong>跟踪是Web程序中常用的技术，用来<strong>跟踪用户的整个会话</strong>。常用的会话跟踪技术是Cookie与Session。<strong>Cookie通过在客户端记录信息确定用户身份</strong>，<strong>Session通过在服务器端记录信息确定用户身份</strong>。</p><p>相关推荐：<a href="https://www.cnblogs.com/moyand/p/9047978.html">https://www.cnblogs.com/moyand/p/9047978.html</a></p></blockquote><h2 id="Cookie机制"><a href="#Cookie机制" class="headerlink" title="Cookie机制"></a>Cookie机制</h2><p>在程序中，会话跟踪是很重要的事情。一个用户的所有请求操作都应该属于同一个会话。<strong>HTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话</strong>。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。要跟踪该会话，必须引入一种机制。Cookie就是这样的一种机制。它可以弥补HTTP协议无状态的不足。</p><h3 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h3><blockquote><p><strong>给客户端们颁发一个通行证，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理</strong></p></blockquote><blockquote><p>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p></blockquote><ul><li><p>查看某个网站颁发的cookie用javascript:alert(document.cookie)</p></li><li><p>Cookie对象使用key-value属性对的形式保存用户状态，一个Cookie对象保存一个属性对，一个request或者response同时使用多个Cookie</p></li></ul><h3 id="Cookie的不可跨域名性"><a href="#Cookie的不可跨域名性" class="headerlink" title="Cookie的不可跨域名性"></a>Cookie的不可跨域名性</h3><ul><li>　Cookie在客户端是由浏览器来管理的。浏览器能够保证Google只会操作Google的Cookie而不会操作Baidu的Cookie，从而保证用户的隐私安全。浏览器判断一个网站是否能操作另一个网站Cookie的依据是域名。Google与Baidu的域名不一样，因此Google不能操作Baidu的Cookie。</li></ul><h3 id="保存中文需要编码"><a href="#保存中文需要编码" class="headerlink" title="保存中文需要编码"></a>保存中文需要编码</h3><p>　中文与英文字符不同，<strong>中文属于Unicode字符，在内存中占4个字符，而英文属于ASCII字符，内存中只占2个字节</strong>。Cookie中使用Unicode字符时需要对Unicode字符进行编码，否则会乱码。</p><h3 id="Cookie的局限"><a href="#Cookie的局限" class="headerlink" title="Cookie的局限"></a>Cookie的局限</h3><ol><li>不宜存放大量数据，以免加重流量负担</li><li>不宜存放敏感数据，以免泄露（应用：验证码）</li></ol><h3 id="操作cookie的一些方法"><a href="#操作cookie的一些方法" class="headerlink" title="操作cookie的一些方法"></a>操作cookie的一些方法</h3><ul><li>直接new HttpCookie()生成对象，不需要CookieBuilder</li><li>在HttpCookie属性中直接设置Expire/Domain等，不需要CookieOptions</li><li>直接调用Request.Cookies和Response.Cookies的Add()方法添加</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先有一个cookie，名字为user</span></span><br><span class="line">HttpCookie cookie = <span class="keyword">new</span> HttpCookie(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在cookie中添加若干（2个）键值对</span></span><br><span class="line">cookie.Values.Add(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;98&quot;</span>);</span><br><span class="line">cookie.Values.Add(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line"></span><br><span class="line">cookie.Expires = DateTime.Now.AddDays(<span class="number">14</span>);</span><br><span class="line">Response.Cookies.Add(cookie);</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> HttpCookie cookie = <span class="keyword">new</span> HttpCookie(<span class="string">&quot;Info&quot;</span>);<span class="comment">//定义cookie对象以及名为Info的项</span></span><br><span class="line"><span class="number">2</span> DateTime dt = DateTime.Now;<span class="comment">//定义时间对象</span></span><br><span class="line"><span class="number">3</span> TimeSpan ts=<span class="keyword">new</span> TimeSpan(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//cookie有效作用时间，具体查msdn</span></span><br><span class="line"><span class="number">4</span> cookie.Expires = dt.Add(ts);<span class="comment">//添加作用时间</span></span><br><span class="line"><span class="number">5</span> cookie.Values.Add(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;cxbkkk&quot;</span>);<span class="comment">//增加属性</span></span><br><span class="line"><span class="number">6</span> cookie.Values.Add(<span class="string">&quot;userid&quot;</span>,<span class="string">&quot;1203&quot;</span>);</span><br><span class="line"><span class="number">7</span> Response.AppendCookie(cookie);<span class="comment">//确定写入cookie中         读取cookie</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">if</span>(Request.Cookies[<span class="string">&quot;Info&quot;</span>]!=<span class="literal">null</span>)</span><br><span class="line"><span class="number">2</span> &#123;</span><br><span class="line"><span class="number">3</span>      <span class="built_in">string</span> temp=Convert.ToString(Request.Cookies[<span class="string">&quot;Info&quot;</span>].Values[<span class="string">&quot;user&quot;</span>])+<span class="string">&quot;   &quot;</span>+Convert.ToString(Request.Cookies[<span class="string">&quot;Info&quot;</span>].Values[<span class="string">&quot;userid&quot;</span>]);</span><br><span class="line"><span class="number">4</span>      <span class="comment">//读全部就用Request.Cookies[&quot;Info&quot;].Value)</span></span><br><span class="line"><span class="number">5</span>      <span class="keyword">if</span>(temp==<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="number">6</span>      &#123;</span><br><span class="line"><span class="number">7</span>          Response.Write(<span class="string">&quot;空&quot;</span>);</span><br><span class="line"><span class="number">8</span>      &#125;</span><br><span class="line"><span class="number">9</span>      <span class="keyword">else</span></span><br><span class="line"><span class="number">10</span>          Response.Write(temp);</span><br><span class="line"><span class="number">11</span> &#125;</span><br><span class="line"><span class="number">12</span> <span class="keyword">else</span></span><br><span class="line"><span class="number">13</span> &#123;</span><br><span class="line"><span class="number">14</span>      Response.Write(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="number">15</span> &#125;         修改cookie</span><br><span class="line"><span class="number">1</span> Response.Cookies[<span class="string">&quot;Info&quot;</span>][<span class="string">&quot;user&quot;</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="number">2</span> Response.Cookies[<span class="string">&quot;Info&quot;</span>].Expires = DateTime.Now.AddDays(<span class="number">1</span>);         删除cookie下的属性</span><br><span class="line"><span class="number">1</span> HttpCookie acookie=Request.Cookies[<span class="string">&quot;Info&quot;</span>];</span><br><span class="line"><span class="number">2</span> acookie.Values.Remove(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line"><span class="number">3</span> acookie.Expires = DateTime.Now.AddDays(<span class="number">1</span>);</span><br><span class="line"><span class="number">4</span> Response.Cookies.Add(acookie);         删除所有cookie，就是设置过期时间为现在就行了</span><br><span class="line"><span class="number">1</span> <span class="built_in">int</span> limit=Request.Cookies.Count - <span class="number">1</span>;</span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;limit;i++)</span><br><span class="line"><span class="number">3</span> &#123;</span><br><span class="line"><span class="number">4</span>      acookie = Request.Cookies(i)</span><br><span class="line"><span class="number">5</span>      acookie.Expires = DateTime.Now.AddDays(<span class="number">-1</span>)</span><br><span class="line"><span class="number">6</span>      Response.Cookies.Add(acookie)</span><br><span class="line"><span class="number">7</span> &#125;        </span><br></pre></td></tr></table></figure><h2 id="session机制"><a href="#session机制" class="headerlink" title="session机制"></a>session机制</h2><blockquote><p>除了使用Cookie，Web应用程序中还经常使用Session来记录客户端状态。<strong>Session是服务器端使用的一种记录客户端状态的机制</strong>，使用上比Cookie简单一些，相应的也<strong>增加了服务器的存储压力</strong>。</p></blockquote><h3 id="什么是session"><a href="#什么是session" class="headerlink" title="什么是session"></a>什么是session</h3><blockquote><p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了</p></blockquote><ul><li><p>　<strong>Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了</strong></p></li><li><p><strong>Session机制决定了当前客户只会获取到自己的Session，而不会获取到别人的Session。各客户的Session也彼此独立，互不可见</strong>。</p></li></ul><h3 id="为什么需要Session"><a href="#为什么需要Session" class="headerlink" title="为什么需要Session"></a>为什么需要Session</h3><p>ASP.NET页面是”无状态”的，这意味着每次向服务器发送一个请求，服务器都会生成一个该页面的实例。但有时候，我们希望在不同的页面之间共享信息，比如购物车、用户登录等，于是，ASP.NET为我们提供了一个服务端的Session机制。</p><h3 id="Session是如何工作的"><a href="#Session是如何工作的" class="headerlink" title="Session是如何工作的"></a>Session是如何工作的</h3><p>服务端的Session机制是基于客户端的，也就是说服务端的Session会保存每个客户端的信息到服务端内存中。具体过程是这样的：<br>→客户端向服务端发出请求<br>→服务端响应客户端，并针对该客户端创建Session和唯一的Session ID<br>→把Session ID作为key， Session内容作为value，以键值对形式存储到Session State Provider中<br>→客户端带着专属的Session ID再次向服务端请求<br>→服务端的Session机制根据客户端的Session ID，从Session State Provider中取出内容返回给客户端</p><p>优点：<br>● 跨页面维持用户状态、信息<br>● 使用方便，并且能存储任何类型<br>● 能保存每个客户端的信息<br>● 安全的、透明的</p><p>缺点：<br>● 因为Session是保存在服务端的内存中的，随着客户端请求的增多，很有可能影响到性能<br>● 在Web.conig中，sessionState节点的mode属性，如果设置为”StateServer”或”SQLServer”,就必须为存储到Session中的对象打上[Serializable]。这样在存储、读取Session的时候，不断地序列化和反序列化，也会影响到性能</p><h3 id="在MVC里使用"><a href="#在MVC里使用" class="headerlink" title="在MVC里使用"></a>在MVC里使用</h3><ol><li><p>开箱即用：MVC默认支持session，不需要显式的enable</p></li><li><p>Controller中自带Session属性</p></li><li><p>在web.config中system.web节点下</p><p>配置过期时间、存储位置等，以下是默认配置：过期20分钟，存储在IIS进程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sessionState</span> <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;InProc&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用索引器直接取值/赋值，可以直接存放对象。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session[<span class="string">&quot;user&quot;</span>] = <span class="keyword">new</span> UserModel &#123; Name = <span class="string">&quot;飞哥&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>如果需要序列化，由开发人员自行处理：可以和RazorPage中讲述一样，使用JsonConvert；也可以使用其他方式，</p><p>比如添加Serializable特性：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserModel</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="session的存储方式"><a href="#session的存储方式" class="headerlink" title="session的存储方式"></a>session的存储方式</h3><h4 id="Session的Mode"><a href="#Session的Mode" class="headerlink" title="Session的Mode"></a>Session的Mode</h4><p>在Web.config中，sessionState节点有一个mode属性，它的属性值代表了Session的Mode。包括：<br>● InProc<br>● StateServer<br>● SQLServer<br>● Custom<br>● Off</p><p>每一种Mode的设置，会影响到Session机制采用哪种Session State Provider。</p><h5 id="Off"><a href="#Off" class="headerlink" title="Off"></a>Off</h5><p>如果我们想让Session失效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.web&gt;</span><br><span class="line">    &lt;sessionState mode&#x3D;&quot;off&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;sytem.web&gt;</span><br></pre></td></tr></table></figure><h5 id="InProc"><a href="#InProc" class="headerlink" title="InProc"></a>InProc</h5><p>这也是ASP.NET Session机制所选用的默认Mode，在该模式下，只保存当前应用程序域的数据。如果重启服务器，Session保存的数据会全部丢失。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.web&gt;</span><br><span class="line">    &lt;sessionState mode&#x3D;&quot;InProc&quot; timeout&#x3D;&quot;30&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;system.web&gt;</span><br></pre></td></tr></table></figure><p>表示Session的有效期是30分钟。对于一些小网站或者数据量不大的时候，选用这个模式是比较好的。</p><p>优点：<br>● 由于是把Session数据保存在内存中的，所以，获取数据非常快<br>● 没有序列化和反序列化的要求</p><p>缺点：<br>● 如果应用程序域被丢弃、重启，Session数据会丢失<br>● 数据量大的时候，消耗过多的内存，影响性能</p><h5 id="StateServer"><a href="#StateServer" class="headerlink" title="StateServer"></a>StateServer</h5><p>选用此选项，意味着把Session的工作交给了当前应用程序域之外的asp.net_state.exe服务，这是一个独立于IIS之外的Windows服务。如果想启动该服务，可以通过打开“控制面板–管理工具–服务”，找到ASP.NET State Service这个服务，将其设为自动启动。</p><p>即使重启ASP.NET进程，Session依然有效，这是StateServer模式的优点。此模式的缺点是涉及过多的序列化和反序列化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.web&gt;</span><br><span class="line">    &lt;sessionState mode&#x3D;&quot;StateServer&quot; stateConnectionSting&#x3D;&quot;tcpip&#x3D;127.0.0.1:42424&quot; stateNetworkTimeout&#x3D;&quot;40&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;sytem.web&gt;</span><br></pre></td></tr></table></figure><p>● 127.0.0.1 表示默认选用本机<br>● 42424 表示默认端口<br>● stateNetworkTimeout用来设置服务器响应、等待客户端请求的时间，默认是10秒，这里设置为40秒</p><p>如果想修改StateServer的默认设置，可以在asp.net_state.exe对应的注册表中修改。</p><h5 id="SQLServer"><a href="#SQLServer" class="headerlink" title="SQLServer"></a>SQLServer</h5><p>选用此模式，Session数据被序列化，并被保存到SQL Server数据库中。为了让Sql Server配合此模式，需要做如下：<br>→查看版本位置，比如在：C:\Windows\Microsoft.NET\Framework\v4.0.30319<br>→输入如下命令<br><a href="https://images0.cnblogs.com/blog/417212/201409/021122403609031.png"><img src="https://images0.cnblogs.com/blog/417212/201409/021122410162133.png" alt="1"></a></p><p>-ssadd 表示在SQL Server中添加session state<br>-sstype p 表示Persisted<br>-S 表示服务器名<br>-U 表示SQL Server用户名<br>-P 表示SQL Server密码<br>→如果一切顺利，出现如下提示<br><a href="https://images0.cnblogs.com/blog/417212/201409/021122412979346.png"><img src="https://images0.cnblogs.com/blog/417212/201409/021122419388218.png" alt="2"></a><br>→数据库中多了ASPState数据库，Session数据将被保存到此数据库的相关表中<br><a href="https://images0.cnblogs.com/blog/417212/201409/021122421721446.png"><img src="https://images0.cnblogs.com/blog/417212/201409/021122425633861.png" alt="3"></a> </p><p>优点：<br>● 在重启IIS后，Session数据不会受影响<br>● 最安全的Session处理方式</p><p>缺点：<br>● 处理相对缓慢<br>● 过多的序列化和反序列化</p><h5 id="□Custom"><a href="#□Custom" class="headerlink" title="□Custom"></a>□Custom</h5><p>自定义Session机制，通过继承SessionStateStoreProviderBase类，实现ISessionIDManager接口，等等。 </p><p> Session的Event</p><p>Session的事件有2个：Session_Start和Session_End。可以在global.asax全局文件中对这2个事件做处理。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Session_Start</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Session_End</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="session与cookie的区别"><a href="#session与cookie的区别" class="headerlink" title="session与cookie的区别"></a>session与cookie的区别</h2><blockquote><p>**<br>1、cookie数据存放在客户的浏览器上，session数据放在服务器上.**</p><p>​    简单的说，当你登录一个网站的时候，如果web服务器端使用的是session,那么所有的数据都保存在服务器上面，</p><p>客户端每次请求服务器的时候会发送 当前会话的session_id，服务器根据当前session_id判断相应的用户数据标志，以确定用户是否登录，或具有某种权限。</p><p>由于数据是存储在服务器 上面，所以你不能伪造，但是如果你能够获取某个登录用户的session_id，用特殊的浏览器伪造该用户的请求也是能够成功的。</p><p>session_id是服务器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性。</p><p>Session是由应用服务器维持的一个服务器端的存储空间，用户在连接服务器时，会由服务器生成一个唯一的SessionID,用该SessionID 为标识符来存取服务器端的Session存储空间。而SessionID这一数据则是保存到客户端，用Cookie保存的，用户提交页面时，会将这一 SessionID提交到服务器端，来存取Session数据。这一过程，是不用开发人员干预的。所以一旦客户端禁用Cookie，那么Session也会失效。</p><p><strong>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。</strong></p><p><strong>3、设置cookie时间可以使cookie过期。但是使用session-destory（），我们将会销毁会话。</strong></p><p><strong>4、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用cookie。</strong></p><p><strong>5、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。(Session对象没有对存储的数据量的限制，其中可以保存更为复杂的数据类型)</strong></p><p>  注意:</p><p>   session很容易失效,用户体验很差;</p><p>   虽然cookie不安全,但是可以加密 ;</p><p>   cookie也分为永久和暂时存在的;</p><p>   浏览器 有禁止cookie功能 ,但一般用户都不会设置;</p><p>   一定要设置失效时间,要不然浏览器关闭就消失了;</p><p>   例如:</p><p>​      记住密码功能就是使用永久cookie写在客户端电脑，下次登录时，自动将cookie信息附加发送给服务端。</p><p>​      application是全局性信息，是所有用户共享的信息，如可以记录有多少用户现在登录过本网站，并把该信息展示个所有用户。</p><p> <strong>两者最大的区别在于生存周期，一个是IE启动到IE关闭.(浏览器页面一关 ,session就消失了)，一个是预先设置的生存周期，或永久的保存于本地的文件。(cookie)</strong></p><p>Session信息是存放在server端，但session id是存放在client cookie的，当然php的session存放方法是多样化的，这样就算禁用cookie一样可以跟踪</p><p>Cookie是完全保持在客户端的如：IE firefox 当客户端禁止cookie时将不能再使用</p></blockquote><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>此页为我学习中的资料整理，欢迎转载。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Session与Cookie（更新中）&quot;&gt;&lt;a href=&quot;#Session与Cookie（更新中）&quot; class=&quot;headerlink&quot; title=&quot;Session与Cookie（更新中）&quot;&gt;&lt;/a&gt;Session与Cookie（更新中）&lt;/h1&gt;&lt;bloc</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="session与cookie" scheme="https://a2914475618.github.io/tags/session%E4%B8%8Ecookie/"/>
    
  </entry>
  
  <entry>
    <title>ADO.NET</title>
    <link href="https://a2914475618.github.io/2021/04/16/postADO-NET/"/>
    <id>https://a2914475618.github.io/2021/04/16/postADO-NET/</id>
    <published>2021-04-16T12:13:18.000Z</published>
    <updated>2021-04-16T12:30:14.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ADO-NET访问数据库（CURD）源码"><a href="#ADO-NET访问数据库（CURD）源码" class="headerlink" title="ADO.NET访问数据库（CURD）源码"></a>ADO.NET访问数据库（CURD）源码</h1><blockquote><p>前言：本部分是之前学习ADO.NET写的项目源码，是基于C#的WinForm，只是用于分享，欢迎转载</p></blockquote><p>先上效果图</p><p><a href="https://imgtu.com/i/cfOsKJ"><img src="https://z3.ax1x.com/2021/04/16/cfOsKJ.png" alt="cfOsKJ.png"></a></p><p>该项目是运用ADO.NET结合了sql数据库对表的增删改查，有能力的朋友可以在此基础上扩充，废话不多说，上源码</p><h2 id="Form1的源码"><a href="#Form1的源码" class="headerlink" title="Form1的源码"></a>Form1的源码</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"><span class="keyword">using</span> 王者;</span><br><span class="line">namespace _3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            NewMethod();</span><br><span class="line">            NewMethod2();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Wz&gt; yxs = <span class="literal">null</span> ;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;   <span class="comment">//创建数据库的连接字符串</span></span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="comment">//使用指定的连接字符串构造一个连接对象</span></span><br><span class="line">            SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();<span class="comment">//打开数据库</span></span><br><span class="line">                MessageBox.Show(<span class="string">&quot;打开成功，状态&quot;</span> + conn.State);</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;服务器版本&quot;</span> + conn.ServerVersion + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;当前连接状态&quot;</span> + conn.State.ToString() + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;当前连接字符串&quot;</span> + conn.ConnectionString + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;连接字符串时间&quot;</span> + conn.ConnectionTimeout.ToString() + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;数据库名称&quot;</span> + conn.Database + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;数据源&quot;</span> + conn.DataSource + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SqlException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;连接时产生了异常，错误的消息是：&quot;</span> + ex.Message;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;    <span class="comment">//如果当前的状态不是CLosd状态，则关闭连接</span></span><br><span class="line">                <span class="keyword">if</span> (conn.State != ConnectionState.Closed)</span><br><span class="line">                &#123;</span><br><span class="line">                    conn.Close();</span><br><span class="line">                    lblInfo.Text += <span class="string">&quot;执行完成后，数据库连接关闭&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                lblInfo.Text = <span class="string">&quot;数据库已经打开！&quot;</span>;</span><br><span class="line">                conn.Disposed += <span class="keyword">new</span> EventHandler(conn_Disposed);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">conn_Disposed</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            lblInfo.Text += <span class="string">&quot;数据库连接已经释放！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button3_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;连接已经打开&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                conn.Close();</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;连接已经关闭&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                conn.Open();</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;连接再次被打开&quot;</span> + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SqlException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;连接过程中产生了异常，异常的消息是：&quot;</span> + ex.Message;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn.State != ConnectionState.Closed)</span><br><span class="line">                &#123;</span><br><span class="line">                    conn.Close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button4_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                conn.Dispose();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            catch (SqlException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                lblInfo.Text += <span class="string">&quot;连接过程中产生了异常，异常的消息是：&quot;</span> + ex.Message;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn.State != ConnectionState.Closed)</span><br><span class="line">                &#123;</span><br><span class="line">                    conn.Close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button5_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                <span class="built_in">string</span> sql = <span class="built_in">string</span>.Format(<span class="string">&quot;INSERT INTO 王者荣耀 VALUES(&#x27;&#123;0&#125;&#x27;,&#x27;&#123;1&#125;&#x27;,&#x27;&#123;2&#125;&#x27;)&quot;</span>, textBox1.Text, textBox2.Text, textBox3.Text);</span><br><span class="line">                <span class="comment">//String sql = &quot;INSERT INTO  王者荣耀([英雄] ,[定位] ,[战斗力]) VALUES(@英雄,@定位,@战斗力)&quot;;</span></span><br><span class="line">                SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">                <span class="comment">//指定参数</span></span><br><span class="line">                <span class="comment">//cmd.Parameters.Add(new SqlParameter(&quot;@英雄&quot;, textBox1.Text));</span></span><br><span class="line">                <span class="comment">//cmd.Parameters.Add(new SqlParameter(&quot;@定位&quot;, textBox2.Text));</span></span><br><span class="line">                <span class="comment">//cmd.Parameters.Add(new SqlParameter(&quot;@战斗力&quot;, textBox3.Text));</span></span><br><span class="line">                <span class="built_in">int</span> rows = cmd.ExecuteNonQuery();</span><br><span class="line">                <span class="keyword">if</span> (rows &gt; <span class="number">0</span>) &#123; MessageBox.Show(<span class="string">&quot;新增成功&quot;</span>); NewMethod(); NewMethod2();  &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">//新增行</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button6_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                <span class="built_in">string</span> sql = <span class="built_in">string</span>.Format(<span class="string">&quot;delete from 王者荣耀 where 定位=&#x27;&#123;0&#125;&#x27;&quot;</span>, textBox2.Text);</span><br><span class="line">                <span class="comment">//String sql = &quot;delete from 王者荣耀 where Title=@定位&quot;;</span></span><br><span class="line">                SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">                <span class="comment">//cmd.Parameters.Add(new SqlParameter(&quot;@定位&quot;, textBox2.Text));</span></span><br><span class="line">                <span class="built_in">int</span> rows = cmd.ExecuteNonQuery();</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;删除成功&quot;</span> + rows + <span class="string">&quot;行&quot;</span>);</span><br><span class="line">                NewMethod();</span><br><span class="line">                NewMethod2();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">//删除满足条件的行</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button7_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)<span class="comment">//方法1：显示库存</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            NewMethod();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NewMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                String sql = <span class="string">&quot;select COUNT(*) from 王者荣耀&quot;</span>;</span><br><span class="line">                <span class="comment">//创建命令对象，指定要执行sql语句与连接对象conn</span></span><br><span class="line">                SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">                <span class="comment">//执行查询返回单行单列的值，Object类型</span></span><br><span class="line">                Object result = cmd.ExecuteScalar();</span><br><span class="line">                <span class="comment">//显示结果到标签</span></span><br><span class="line">                label5.Text = result.ToString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//查询单行单列</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button8_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            NewMethod2();</span><br><span class="line">        &#125;<span class="comment">//方法2：初始化展示在dgv中</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NewMethod2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;Wz&gt; yxs = <span class="keyword">new</span> List&lt;Wz&gt;();<span class="comment">//定义一个集合</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                <span class="built_in">string</span> sql = <span class="string">&quot;select 英雄,定位,战斗力 from 王者荣耀&quot;</span>;</span><br><span class="line">                SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">                SqlDataReader reader = cmd.ExecuteReader();</span><br><span class="line">                <span class="keyword">while</span> (reader.Read())</span><br><span class="line">                &#123;</span><br><span class="line">                    </span><br><span class="line">                    Wz yx = <span class="keyword">new</span> Wz();</span><br><span class="line">                    yx.英雄 = reader[<span class="string">&quot;英雄&quot;</span>] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    yx.定位 = reader[<span class="string">&quot;定位&quot;</span>] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    yx.战斗力 = Convert.ToInt32(reader[<span class="string">&quot;战斗力&quot;</span>]);</span><br><span class="line">                    yxs.Add(yx);</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;dgv1.DataSource = yxs;<span class="comment">//绑定数据到控件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//将数据显示在dgv中的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button9_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;Wz&gt; yxs = <span class="keyword">new</span> List&lt;Wz&gt;();<span class="comment">//定义一个集合</span></span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString))</span><br><span class="line">            &#123;   </span><br><span class="line">                conn.Open();</span><br><span class="line">                <span class="built_in">string</span> sql = <span class="built_in">string</span> .Format (<span class="string">&quot;select * from 王者荣耀 where 英雄 like &#x27;&#123;0&#125;&#x27;&quot;</span>, ( <span class="string">&#x27;%&#x27;</span> + textBox1.Text  + <span class="string">&quot;%&quot;</span>));</span><br><span class="line"></span><br><span class="line">                SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">                SqlDataReader reader = cmd.ExecuteReader();</span><br><span class="line">                <span class="keyword">while</span> (reader.Read())</span><br><span class="line">                &#123;</span><br><span class="line">                    Wz yx = <span class="keyword">new</span> Wz();</span><br><span class="line">                    yx.英雄 = reader[<span class="string">&quot;英雄&quot;</span>] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    yx.定位 = reader[<span class="string">&quot;定位&quot;</span>] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    yx.战斗力 = Convert.ToInt32(reader[<span class="string">&quot;战斗力&quot;</span>]);</span><br><span class="line">                    yxs.Add(yx);</span><br><span class="line">                    </span><br><span class="line">                &#125;dgv1.DataSource = yxs;<span class="comment">//绑定数据到控件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//查询单个值</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button10_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBoxButtons msgButton = MessageBoxButtons.OKCancel;</span><br><span class="line"></span><br><span class="line">            DialogResult dr = MessageBox.Show(<span class="string">&quot;你确定要删除所有英雄吗?&quot;</span>, <span class="string">&quot;提示&quot;</span>, msgButton);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dr == DialogResult.OK)</span><br><span class="line"></span><br><span class="line">            &#123;  <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                <span class="built_in">string</span> sql = <span class="string">&quot;delete from 王者荣耀&quot;</span>;</span><br><span class="line">                SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">                <span class="built_in">int</span> rows = cmd.ExecuteNonQuery();</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;删除成功&quot;</span> + rows + <span class="string">&quot;行&quot;</span>);</span><br><span class="line">                NewMethod();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;已取消&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            &#125;<span class="comment">//删除所有行+提示框</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button11_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBoxButtons msgButton = MessageBoxButtons.OKCancel;</span><br><span class="line"></span><br><span class="line">            DialogResult dr = MessageBox.Show(<span class="string">&quot;确定要删除吗?&quot;</span>, <span class="string">&quot;提示&quot;</span>, msgButton);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dr == DialogResult.OK)</span><br><span class="line"></span><br><span class="line">            &#123;   <span class="built_in">string</span> 英雄 = Convert .ToString (dgv1.SelectedRows[<span class="number">0</span>].Cells[<span class="number">0</span>].Value);</span><br><span class="line">                <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">                <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString)) </span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                <span class="built_in">string</span> sql = <span class="string">&quot;delete from 王者荣耀 where 英雄=@英雄&quot;</span>;</span><br><span class="line">                SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);  <span class="comment">//sql命令对象</span></span><br><span class="line">                cmd.Parameters.Add(<span class="keyword">new</span> SqlParameter(<span class="string">&quot;@英雄&quot;</span>, 英雄));  <span class="comment">//指定参数</span></span><br><span class="line">                <span class="built_in">int</span> rows = cmd.ExecuteNonQuery();  <span class="comment">//执行并返回影响行数</span></span><br><span class="line">                MessageBox.Show(<span class="string">&quot;删除成功&quot;</span> + rows + <span class="string">&quot;行！&quot;</span>);</span><br><span class="line">                NewMethod2(); <span class="comment">//重新绑定</span></span><br><span class="line">                NewMethod();</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;已取消&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">//点击删除</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button12_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;Wz&gt; yxs = <span class="keyword">new</span> List&lt;Wz&gt;();<span class="comment">//定义一个集合</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                <span class="built_in">string</span> sql = <span class="string">&quot;select 英雄,定位,战斗力 from 王者荣耀&quot;</span>;</span><br><span class="line">                SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">                SqlDataReader reader = cmd.ExecuteReader();</span><br><span class="line">                <span class="keyword">while</span> (reader.Read())</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    Wz yx = <span class="keyword">new</span> Wz();</span><br><span class="line">                    yx.英雄 = reader[<span class="string">&quot;英雄&quot;</span>] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    yx.定位 = reader[<span class="string">&quot;定位&quot;</span>] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    yx.战斗力 = Convert.ToInt32(reader[<span class="string">&quot;战斗力&quot;</span>]);</span><br><span class="line">                    yxs.Add(yx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> index = dgv1.SelectedRows[<span class="number">0</span>].Index;</span><br><span class="line">            </span><br><span class="line">            Wz wz  = yxs[index];</span><br><span class="line">            FormEdit edit= <span class="keyword">new</span> FormEdit ();</span><br><span class="line">            edit.yx   = wz ;</span><br><span class="line">            edit.ShowDialog();</span><br><span class="line">            NewMethod2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="comment">//编辑功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="王者类"><a href="#王者类" class="headerlink" title="王者类"></a>王者类</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace 王者</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">class</span> <span class="title">Wz</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span>  英雄 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> 定位 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> 战斗力&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Form编辑窗口"><a href="#Form编辑窗口" class="headerlink" title="Form编辑窗口"></a>Form编辑窗口</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> 王者;</span><br><span class="line"></span><br><span class="line">namespace _3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FormEdit</span> : <span class="title">Form</span></span><br><span class="line">    &#123;<span class="keyword">public</span> Wz yx&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FormEdit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FormEdit_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Text = <span class="string">&quot;&quot;</span> + yx  .英雄;</span><br><span class="line">            label4 .Text   = yx.英雄;</span><br><span class="line">            textBox2 .Text  = yx.定位;</span><br><span class="line">            textBox3 .Text  = yx.战斗力.ToString ();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> sqlConnectionString = <span class="string">&quot;Data Source=LAPTOP-EMQ04GPV;Initial Catalog=MiddleSchool;Persist Security Info=True;User ID=sa;Password=15085642603&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(sqlConnectionString))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                <span class="built_in">string</span> sql = <span class="string">&quot;update 王者荣耀 set  定位=@定位,战斗力=@战斗力 where 英雄=@英雄 &quot;</span>;</span><br><span class="line">                SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);  <span class="comment">//sql命令对象</span></span><br><span class="line"></span><br><span class="line">                cmd.Parameters.Add(<span class="keyword">new</span> SqlParameter(<span class="string">&quot;@英雄&quot;</span>, label4 .Text ));  <span class="comment">//指定参数</span></span><br><span class="line">                cmd.Parameters.Add(<span class="keyword">new</span> SqlParameter(<span class="string">&quot;@定位&quot;</span>, textBox2 .Text ));  <span class="comment">//指定参数</span></span><br><span class="line">                cmd.Parameters.Add(<span class="keyword">new</span> SqlParameter(<span class="string">&quot;@战斗力&quot;</span>, textBox3 .Text ));  <span class="comment">//指定参数</span></span><br><span class="line">                <span class="built_in">int</span> rows = cmd.ExecuteNonQuery();  <span class="comment">//执行并返回影响行数</span></span><br><span class="line">                MessageBox.Show(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方案的图"><a href="#解决方案的图" class="headerlink" title="解决方案的图"></a>解决方案的图</h2><p><img src="https://i.loli.net/2021/04/16/YwQoWZqMClRGVOi.png" alt="image.png"></p><h2 id="最后声明"><a href="#最后声明" class="headerlink" title="最后声明"></a>最后声明</h2><p>由于本人水平有限，有些地方还有瑕疵，敬请包涵，有问题欢迎评论区与我交流。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ADO-NET访问数据库（CURD）源码&quot;&gt;&lt;a href=&quot;#ADO-NET访问数据库（CURD）源码&quot; class=&quot;headerlink&quot; title=&quot;ADO.NET访问数据库（CURD）源码&quot;&gt;&lt;/a&gt;ADO.NET访问数据库（CURD）源码&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="ADO.NET访问数据库" scheme="https://a2914475618.github.io/tags/ADO-NET%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>每周聊聊算法题(已更)</title>
    <link href="https://a2914475618.github.io/2021/04/16/post%E6%AF%8F%E6%97%A5%E8%81%8A%E7%82%B9%E7%AE%97%E6%B3%95/"/>
    <id>https://a2914475618.github.io/2021/04/16/post%E6%AF%8F%E6%97%A5%E8%81%8A%E7%82%B9%E7%AE%97%E6%B3%95/</id>
    <published>2021-04-16T11:57:20.000Z</published>
    <updated>2021-05-11T15:36:06.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="每周聊聊算法（更新中）"><a href="#每周聊聊算法（更新中）" class="headerlink" title="每周聊聊算法（更新中）"></a>每周聊聊算法（更新中）</h1><blockquote><p>先抛出刷算法题的网站：</p></blockquote><ol><li><p><a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p></li><li><p><a href="https://hihocoder.com/">https://hihocoder.com/</a></p></li></ol><h2 id="技巧性专栏"><a href="#技巧性专栏" class="headerlink" title="技巧性专栏"></a>技巧性专栏</h2><h3 id="1-平方数之和-easy"><a href="#1-平方数之和-easy" class="headerlink" title="1.平方数之和(easy)"></a>1.平方数之和(easy)</h3><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c 。</p><p>示例 1：</p><p>输入：c = 5<br>输出：true<br>解释：1 * 1 + 2 * 2 = 5<br>示例 2：</p><p>输入：c = 3<br>输出：false<br>示例 3：</p><p>输入：c = 4<br>输出：true<br>示例 4：</p><p>输入：c = 2<br>输出：true<br>示例 5：</p><p>输入：c = 1<br>输出：true</p><p>提示：</p><p>0 &lt;= c &lt;= 231 - 1</p></blockquote><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">   <span class="keyword">long</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="built_in">sqrt</span>(c);</span><br><span class="line">    a=<span class="number">0</span>;</span><br><span class="line">    b=k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((a*a+b*b)&gt;c)&#123;</span><br><span class="line">            b--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((a*a+b*b)&lt;c)&#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((a*a+b*b)==c)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此法为双指针，这样只用遍历了一次，如果采用两次for循环则会增加程序的时间</p><h3 id="2-只出现一次的数字-easy"><a href="#2-只出现一次的数字-easy" class="headerlink" title="2.只出现一次的数字(easy)"></a>2.只出现一次的数字(easy)</h3><h4 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p>示例 1:</p><p>输入: [2,2,1]<br>输出: 1<br>示例 2:</p><p>输入: [4,1,2,1,2]<br>输出: 4</p></blockquote><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i;i&lt;numsSize;i++)&#123;</span><br><span class="line">        result^=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>使用异或运算，将所有值进行异或</li><li>异或运算，相异为真，相同为假，所以 a^a = 0 ;0^a = a</li><li>因为异或运算 满足交换律 a^b^a = a^a^b = b 所以数组经过异或运算，单独的值就剩下了</li></ul><h3 id="3-制作m束花所需的最少天数-middle"><a href="#3-制作m束花所需的最少天数-middle" class="headerlink" title="3.制作m束花所需的最少天数(middle)"></a>3.制作m束花所需的最少天数(middle)</h3><h4 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>给你一个整数数组 bloomDay，以及两个整数 m 和 k 。</p><p>现需要制作 m 束花。制作花束时，需要使用花园中 相邻的 k 朵花 。</p><p>花园中有 n 朵花，第 i 朵花会在 bloomDay[i] 时盛开，恰好 可以用于 一束 花中。</p><p>请你返回从花园中摘 m 束花需要等待的最少的天数。如果不能摘到 m 束花则返回 -1 。</p><p>示例 1：</p><p>输入：bloomDay = [1,10,3,10,2], m = 3, k = 1<br>输出：3<br>解释：让我们一起观察这三天的花开过程，x 表示花开，而 _ 表示花还未开。<br>现在需要制作 3 束花，每束只需要 1 朵。<br>1 天后：[x, _, _, _, _]   // 只能制作 1 束花<br>2 天后：[x, _, _, _, x]   // 只能制作 2 束花<br>3 天后：[x, _, x, _, x]   // 可以制作 3 束花，答案为 3<br>示例 2：</p><p>输入：bloomDay = [1,10,3,10,2], m = 3, k = 2<br>输出：-1<br>解释：要制作 3 束花，每束需要 2 朵花，也就是一共需要 6 朵花。而花园中只有 5 朵花，无法满足制作要求，返回 -1 。<br>示例 3：</p><p>输入：bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3<br>输出：12<br>解释：要制作 2 束花，每束需要 3 朵。<br>花园在 7 天后和 12 天后的情况如下：<br>7 天后：[x, x, x, x, _, x, x]<br>可以用前 3 朵盛开的花制作第一束花。但不能使用后 3 朵盛开的花，因为它们不相邻。<br>12 天后：[x, x, x, x, x, x, x]<br>显然，我们可以用不同的方式制作两束花。<br>示例 4：</p><p>输入：bloomDay = [1000000000,1000000000], m = 1, k = 1<br>输出：1000000000<br>解释：需要等 1000000000 天才能采到花来制作花束<br>示例 5：</p><p>输入：bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2<br>输出：9</p><p>提示：</p><p>bloomDay.length == n<br>1 &lt;= n &lt;= 10^5<br>1 &lt;= bloomDay[i] &lt;= 10^9<br>1 &lt;= m &lt;= 10^6<br>1 &lt;= k &lt;= n</p></blockquote><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h4><p>牛杯解法</p><blockquote><p>二分法解法</p><p>每束花需要 k 朵花，需要制作 m 束花，因此一共需要 k×m 朵花。如果花园中的花朵数量少于 k×m，即数组 bloomDay 的长度小于 k×m，则无法制作出指定数量的花束，返回 −1。如果数组 bloomDay 的长度大于或等于 k×m，则一定可以制作出指定数量的花束。</p><p>为了计算制作出指定数量的花束的最少天数，首先需要实现一个辅助函数用于判断在给定的天数内能否制作出指定数量的花束，辅助函数的参数除了 bloomDay、m 和 k 之外，还有一个参数 days 表示指定天数。例如，当bloomDay=[1,10,3,10,2]、m=3、k=1 时，如果 days=3 则辅助函数返回 true，如果 days=2 则辅助函数返回 false。</p><p>对于辅助函数的实现，可以遍历数组 bloomDay，计算其中的长度为 kk 且最大元素不超过 days 的不重合的连续子数组的数量，如果符合要求的不重合的连续子数组的数量大于或等于 m 则返回 true，否则返回 false。</p><p>当 days 很小的时候，辅助函数总是返回 false，因为天数太少不能收齐 mm 个花束；当days 很大的时候，辅助函数总是返回 true，如果给定序列可以制作出 m 个花束。在days 慢慢变大的过程中，辅助函数的返回值会从 false 变成 true，所以我们可以认为这个辅助函数是关于 days 递增的，于是可以通过二分查找得到最少天数。在确保可以制作出指定数量的花束的情况下，所需的最少天数一定不会超过数组 bloomDay 中的最大值，因此二分查找的初始值是 low 等于 1，high 等于数组 bloomDay 中的最大值。</p><p>当 low 和 high 的值相等时，二分查找结束，此时 low 的值即为最少天数。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canMake</span><span class="params">(<span class="keyword">int</span>* bloomDay, <span class="keyword">int</span> bloomDaySize, <span class="keyword">int</span> days, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bouquets = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flowers = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> length = bloomDaySize;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length &amp;&amp; bouquets &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bloomDay[i] &lt;= days) &#123;</span><br><span class="line">            flowers++;</span><br><span class="line">            <span class="keyword">if</span> (flowers == k) &#123;</span><br><span class="line">                bouquets++;</span><br><span class="line">                flowers = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flowers = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bouquets &gt;= m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDays</span><span class="params">(<span class="keyword">int</span>* bloomDay, <span class="keyword">int</span> bloomDaySize, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k * m &gt; bloomDaySize) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">1</span>, high = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> length = bloomDaySize;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        high = fmax(high, bloomDay[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> days = (high - low) / <span class="number">2</span> + low;</span><br><span class="line">        <span class="keyword">if</span> (canMake(bloomDay, bloomDaySize, days, m, k)) &#123;</span><br><span class="line">            high = days;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = days + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>个人解法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=start;i&lt;end;i++)&#123;</span><br><span class="line">        a[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">isok</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> size,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size;)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;(i+k);j++)&#123;</span><br><span class="line">            </span><br><span class="line">            sum+=a[j];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==k)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            clear(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">( <span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, p, tmp;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    p = a[n / <span class="number">2</span>];   <span class="comment">// Get the middle element as pivot ..</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>, j = n <span class="number">-1</span>;; i++, j--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[i] &lt; p)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span> (p &lt; a[j])</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> ( i &gt;= j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        tmp = a[i]; a[i] = a[j]; a[j] = tmp;    <span class="comment">//swap both ..</span></span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    quick_sort( a, i); </span><br><span class="line">    quick_sort( a + i, n - i); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minDays</span><span class="params">(<span class="keyword">int</span>* bloomDay, <span class="keyword">int</span> bloomDaySize, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> base[bloomDaySize];</span><br><span class="line">    <span class="keyword">int</span> bloombase[bloomDaySize];</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">if</span>(m*k&gt;bloomDaySize) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;bloomDaySize;i++)&#123;</span><br><span class="line">        base[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;bloomDaySize;i++)&#123;</span><br><span class="line">        bloombase[i]=bloomDay[i];</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(bloombase,bloomDaySize);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;bloomDaySize;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;bloomDaySize;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bloombase[i]&gt;=bloomDay[j])&#123;</span><br><span class="line">                base[j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isok(base,bloomDaySize,k)==m)&#123;</span><br><span class="line">            <span class="keyword">return</span> bloombase[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要解决的问题</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">若m*k&gt;数组的长度，return -1;</span></span><br><span class="line"><span class="comment">数组里放的是每一朵花开的对应时间</span></span><br><span class="line"><span class="comment">数组里的最小值即为得到一束花的最小时间</span></span><br><span class="line"><span class="comment">需要一个计数器来判断是否有相邻的K朵花</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="学习专栏"><a href="#学习专栏" class="headerlink" title="学习专栏"></a>学习专栏</h2><h3 id="1-快速排序算法"><a href="#1-快速排序算法" class="headerlink" title="1.快速排序算法"></a>1.快速排序算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> *v, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="keyword">int</span> key = v[left];</span><br><span class="line">                <span class="keyword">int</span> low = left;</span><br><span class="line">                <span class="keyword">int</span> high = right;</span><br><span class="line">                <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; v[high] &gt; key)&#123;</span><br><span class="line">                                high--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        v[low] = v[high];</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; v[low] &lt; key)&#123;</span><br><span class="line">                                low++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        v[high] = v[low];</span><br><span class="line">                &#125;</span><br><span class="line">                v[low] = key;</span><br><span class="line">                quicksort(v,left,low<span class="number">-1</span>);<span class="comment">//分区</span></span><br><span class="line">                quicksort(v,low+<span class="number">1</span>,right);<span class="comment">//分区</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总的来说快速排序就是用的双指针，然后是分区排序，递归，确实牛杯！</p></blockquote><h2 id="动态规划专栏"><a href="#动态规划专栏" class="headerlink" title="动态规划专栏"></a>动态规划专栏</h2><h3 id="动态规划分类"><a href="#动态规划分类" class="headerlink" title="动态规划分类"></a>动态规划分类</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210509164413.png"></p><h3 id="动态规划解题步骤"><a href="#动态规划解题步骤" class="headerlink" title="动态规划解题步骤"></a>动态规划解题步骤</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210509163649.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210509141815.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210509142958.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210509151143.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210509151223.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210509151600.png"></p><h3 id="1-换硬币（最优解动态规划）"><a href="#1-换硬币（最优解动态规划）" class="headerlink" title="1.换硬币（最优解动态规划）"></a>1.换硬币（最优解动态规划）</h3><h4 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h4><blockquote><p>描述</p><p>给出不同面额的硬币以及一个总金额. 写一个方法来计算给出的总金额可以换取的最少的硬币数量. 如果已有硬币的任意组合均无法与总金额面额相等, 那么返回 <code>-1</code>.</p><p>你可以假设每种硬币均有无数个<br>总金额不会超过10000<br>硬币的种类数不会超过500, 每种硬币的面额不会超过100</p><p>样例</p><p><strong>样例1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[1, 2, 5]</span><br><span class="line">11</span><br><span class="line">输出： 3</span><br><span class="line">解释： 11 &#x3D; 5 + 5 + 1</span><br></pre></td></tr></table></figure><p><strong>样例2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入： </span><br><span class="line">[2]</span><br><span class="line">3</span><br><span class="line">输出： -1</span><br></pre></td></tr></table></figure></blockquote><h4 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> coins: a list of integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount: a total amount of money amount</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: the fewest number of coins that you need to make up</span></span><br><span class="line"><span class="comment">     *A:可选择的硬币种类   M：拼出钱的总数**/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span>[] f=<span class="keyword">new</span> <span class="keyword">int</span>[M+<span class="number">1</span>];<span class="comment">//f[i]表示的是拼成金额为i的硬币数量</span></span><br><span class="line">        <span class="keyword">int</span> n=A.length;<span class="comment">//不同硬币的种类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=M;++i)&#123;</span><br><span class="line">            f[i]=Integer.MAX_VALUE;</span><br><span class="line">            <span class="comment">//最后一枚硬币A[j]</span></span><br><span class="line">            <span class="comment">//f[i]=min&#123;f[i-A[0]]+1,...,f[i-A[n-1]]+1&#125;</span></span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;++j)&#123;<span class="comment">//遍历硬币种类，找出最少的硬币的f[i]</span></span><br><span class="line">                <span class="keyword">if</span>(i&gt;=A[j]&amp;&amp;f[i-A[j]]!=Integer.MAX_VALUE)&#123;</span><br><span class="line">                    f[i]=Math.min(f[i-A[j]]+<span class="number">1</span>,f[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f[M]==Integer.MAX_VALUE)&#123;</span><br><span class="line">            f[M]=-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[M];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-不同的路径-计数性动态规划"><a href="#2-不同的路径-计数性动态规划" class="headerlink" title="2.不同的路径(计数性动态规划)"></a>2.不同的路径(计数性动态规划)</h3><h4 id="题目要求-3"><a href="#题目要求-3" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>描述</p><p>有一个机器人的位于一个 <em>m</em> × <em>n</em> 个网格左上角。</p><p>机器人每一时刻只能向下或者向右移动一步。机器人试图达到网格的右下角。</p><p>问有多少条不同的路径？</p><p>n和m均不超过100<br>且答案保证在32位整数可表示范围内。</p><p>样例</p><p><strong>样例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: n &#x3D; 1, m &#x3D; 3</span><br><span class="line">输出: 1</span><br><span class="line">解释: 只有一条通往目标位置的路径。</span><br></pre></td></tr></table></figure><p><strong>样例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入:  n &#x3D; 3, m &#x3D; 3</span><br><span class="line">输出: 6</span><br><span class="line">解释:</span><br><span class="line">D : Down</span><br><span class="line">R : Right</span><br><span class="line">1) DDRR</span><br><span class="line">2) DRDR</span><br><span class="line">3) DRRD</span><br><span class="line">4) RRDD</span><br><span class="line">5) RDRD</span><br><span class="line">6) RDDR</span><br></pre></td></tr></table></figure></blockquote><h4 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m: positive integer (1 &lt;= m &lt;= 100)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n: positive integer (1 &lt;= n &lt;= 100)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span> [][]f=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>||j==<span class="number">0</span>)&#123;</span><br><span class="line">                    f[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    f[i][j]=f[i-<span class="number">1</span>][j]+f[i][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-青蛙跳石头问题（存在性动态规划）"><a href="#3-青蛙跳石头问题（存在性动态规划）" class="headerlink" title="3.青蛙跳石头问题（存在性动态规划）"></a>3.青蛙跳石头问题（存在性动态规划）</h3><h4 id="题目要求-4"><a href="#题目要求-4" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>描述</p><p>给出一个非负整数数组，你最初定位在数组的第一个位置。　　　</p><p>数组中的每个元素代表你在那个位置可以跳跃的最大长度。　　　　</p><p>判断你是否能到达数组的最后一个位置。</p><p>数组<code>A</code>的长度不超过5000，每个元素的大小不超过5000</p><p>样例</p><p><em><strong>样例 1</strong></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入 : [2,3,1,1,4]</span><br><span class="line">输出 : true</span><br></pre></td></tr></table></figure><p><em><strong>样例 2</strong></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入 : [3,2,1,0,4]</span><br><span class="line">输出 : false</span><br></pre></td></tr></table></figure></blockquote><h4 id="解法-5"><a href="#解法-5" class="headerlink" title="解法"></a>解法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A: A list of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: A boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span> n=A.length;<span class="comment">//有多少块石头</span></span><br><span class="line">        <span class="keyword">boolean</span>[] f=<span class="keyword">new</span> <span class="keyword">boolean</span>[n];<span class="comment">//存放能否跳到第j个石头</span></span><br><span class="line">        f[<span class="number">0</span>]=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            f[j]=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;j;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(f[i]&amp;&amp;i+A[i]&gt;=j)&#123;</span><br><span class="line">                    f[j]=<span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-最大子数组（最优解）"><a href="#4-最大子数组（最优解）" class="headerlink" title="4.最大子数组（最优解）"></a>4.最大子数组（最优解）</h3><h4 id="题目要求-5"><a href="#题目要求-5" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>描述</p><p>给定一个整数数组，找到一个具有最大和的子数组，返回其最大和。<br>每个子数组的数字在数组中的位置应该是连续的。</p><p>子数组最少包含一个数</p><p>样例</p><p><strong>样例 1：</strong></p><p>输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums &#x3D; [−2,2,−3,4,−1,2,1,−5,3]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>解释：</p><p>符合要求的子数组为[4,−1,2,1]，其最大和为 6。<br><strong>样例 2：</strong></p><p>输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums &#x3D; [1,2,3,4]</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p>解释：</p><p>符合要求的子数组为[1,2,3,4]，其最大和为 10。</p><p>挑战</p><p>要求时间复杂度为O(n)</p></blockquote><h4 id="解法-6"><a href="#解法-6" class="headerlink" title="解法"></a>解法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums: A list of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: A integer indicate the sum of max subarray</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="comment">//最后一步</span></span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span>||nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            nums[i]=Math.max(nums[i],nums[i-<span class="number">1</span>]+nums[i]);</span><br><span class="line">            max=Math.max(max,nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-爬楼梯（easy计数性）"><a href="#5-爬楼梯（easy计数性）" class="headerlink" title="5.爬楼梯（easy计数性）"></a>5.爬楼梯（easy计数性）</h3><h4 id="题目要求-6"><a href="#题目要求-6" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>描述</p><p>假设你正在爬楼梯，需要n步你才能到达顶部。但每次你只能爬一步或者两步，爬到顶部的方法有多少种？</p><p>样例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">样例 1:</span><br><span class="line">输入:  n&#x3D; 3</span><br><span class="line">输出: 3</span><br><span class="line"></span><br><span class="line">样例解释：</span><br><span class="line">1) 1, 1, 1</span><br><span class="line">2) 1, 2</span><br><span class="line">3) 2, 1</span><br><span class="line">共3种</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">样例 2:</span><br><span class="line">输入:  n &#x3D; 1</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">解释:  </span><br><span class="line">只有一种方案</span><br></pre></td></tr></table></figure></blockquote><h4 id="解法-7"><a href="#解法-7" class="headerlink" title="解法"></a>解法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This reference program is provided by <span class="doctag">@jiuzhang</span>.com</span></span><br><span class="line"><span class="comment"> * Copyright is reserved. Please indicate the source for forwarding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//f[i]代表的是第I层有多少种爬法</span></span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line">        f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-最小路径和（easy最优解）"><a href="#6-最小路径和（easy最优解）" class="headerlink" title="6.最小路径和（easy最优解）"></a>6.最小路径和（easy最优解）</h3><h4 id="题目要求-7"><a href="#题目要求-7" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>描述</p><p>给定一个只含非负整数的m*n网格，找到一条从左上角到右下角的可以使数字和最小的路径。</p><p>你在同一时间只能向下或者向右移动一步</p><p>样例</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input:  [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation:</span><br><span class="line">Path is: 1 -&gt; 3 -&gt; 1 -&gt; 1 -&gt; 1</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input:  [[1,3,2]]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation:  </span><br><span class="line">Path is: 1 -&gt; 3 -&gt; 2</span><br></pre></td></tr></table></figure></blockquote><h4 id="解法-8"><a href="#解法-8" class="headerlink" title="解法"></a>解法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> grid: a list of lists of integers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: An integer, minimizes the sum of all numbers along its path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">         <span class="keyword">if</span> (grid == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">         f[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            f[i][<span class="number">0</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            f[<span class="number">0</span>][j] = f[<span class="number">0</span>][j - <span class="number">1</span>] + grid[<span class="number">0</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//状态转移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                f[i][j] = Math.min(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> f[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">     </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-巴什博弈（最优决策）"><a href="#7-巴什博弈（最优决策）" class="headerlink" title="7.巴什博弈（最优决策）"></a>7.巴什博弈（最优决策）</h3><h4 id="题目要求：-1"><a href="#题目要求：-1" class="headerlink" title="题目要求："></a>题目要求：</h4><blockquote><p>描述</p><p>你正在和朋友玩一个游戏：桌子上有一堆石头，每一次你们都会从中拿出1到3个石头。拿走最后一个石头的人赢得游戏。游戏开始时，你是先手。</p><p>假设两个人都绝对理性，都会做出最优决策。给定石头的数量，判断你是否会赢得比赛。</p><p>举例：有四个石头，那么你永远不会赢得游戏。不管拿几个，最后一个石头一定会被你的朋友拿走。</p><p>样例</p><p><strong>样例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 4 </span><br><span class="line">输出：False</span><br><span class="line">解析：先手取走1,2或者3，对方都会取走最后一个</span><br></pre></td></tr></table></figure><p><strong>样例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 5 </span><br><span class="line">输出：True</span><br><span class="line">解析：先手拿1个，必胜</span><br></pre></td></tr></table></figure></blockquote><h4 id="解法-9"><a href="#解法-9" class="headerlink" title="解法"></a>解法</h4><p>个人写法，数据很大时内存会很大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n: an integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: whether you can win the game given the number of stones in the heap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinBash</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="comment">//end&lt;=3</span></span><br><span class="line">        <span class="comment">/*n-3</span></span><br><span class="line"><span class="comment">        //f[i]代表有i个石头我能否获胜</span></span><br><span class="line"><span class="comment">        /*n&lt;=3获取胜利</span></span><br><span class="line"><span class="comment">        4失败</span></span><br><span class="line"><span class="comment">        5必胜</span></span><br><span class="line"><span class="comment">        6必胜</span></span><br><span class="line"><span class="comment">        7必胜</span></span><br><span class="line"><span class="comment">        8</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">3</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> []f=<span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</span><br><span class="line">        f[<span class="number">1</span>]=f[<span class="number">2</span>]=f[<span class="number">3</span>]=<span class="keyword">true</span>;</span><br><span class="line">        f[<span class="number">4</span>]=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            f[i]=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">3</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(f[j]==<span class="keyword">false</span>)&#123;</span><br><span class="line">                    f[i]=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This reference program is provided by <span class="doctag">@jiuzhang</span>.com</span></span><br><span class="line"><span class="comment"> * Copyright is reserved. Please indicate the source for forwarding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinBash</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//后手必赢</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-最少费用的爬楼梯法"><a href="#8-最少费用的爬楼梯法" class="headerlink" title="8.最少费用的爬楼梯法"></a>8.最少费用的爬楼梯法</h3><h4 id="题目要求-8"><a href="#题目要求-8" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>描述</p><p>在楼梯上，每一号台阶都有各自的费用，即第 i 号台阶有非负成本<code>cost [i]</code>（台阶从0号索引）。</p><p>一旦你支付了费用，你可以爬一到两步。 你需要找到最低成本来到达最高层，你可以从索引为0的楼梯开始，也可以从索引为1的楼梯开始。</p><p>1.<code>cost</code> 的总长度范围在 <code>[2, 1000]</code>之间.<br>2.每一个 <code>cost[i]</code> 都是一个在 <code>[0, 999]</code>之间的整数.</p><p>样例</p><p><strong>样例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: cost &#x3D; [10, 15, 20]</span><br><span class="line">输出: 15</span><br><span class="line">解释: 最便宜的方法是从第1号台阶起步，支付费用并直接到达顶层。</span><br></pre></td></tr></table></figure><p><strong>样例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: cost &#x3D; [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 最便宜的方法是从第0号台阶起步，只走费用为1的台阶并且跳过第3号台阶。</span><br></pre></td></tr></table></figure></blockquote><h4 id="解法-10"><a href="#解法-10" class="headerlink" title="解法"></a>解法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cost: an array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: minimum cost to reach the top of the floor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(<span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Write your code here</span></span><br><span class="line">        <span class="comment">//f[i]走过i号台阶最少的费用</span></span><br><span class="line">         <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[cost.length+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; dp.length;i++)&#123;</span><br><span class="line">            dp[i] = Math.min(dp[i-<span class="number">1</span>] + cost[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + cost[i-<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[cost.length];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-约翰的后花园"><a href="#9-约翰的后花园" class="headerlink" title="9.约翰的后花园"></a>9.约翰的后花园</h3><h4 id="题目要求-9"><a href="#题目要求-9" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>描述</p><p>约翰想在他家后面的空地上建一个后花园，现在有两种砖，一种<code>3</code> dm的高度，<code>7</code> dm的高度。约翰想围成<code>x</code> dm的墙。如果约翰能做到，输出YES，否则输出NO。</p><p>X是一个整数，取值范围为 <code>[3, 1000]</code>。</p><p>样例</p><p><strong>样例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入 : x &#x3D; 10</span><br><span class="line">输出 : &quot;YES&quot;</span><br><span class="line">解释：</span><br><span class="line">x &#x3D; 3 + 7 : 即需要1匹3 dm高度的砖和1匹7 dm 高度的砖。</span><br></pre></td></tr></table></figure><p><strong>样例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入 : x &#x3D; 5</span><br><span class="line">输出 : &quot;NO&quot;</span><br><span class="line">解释：</span><br><span class="line">不能用高度为3 dm的砖和高度为7 dm的砖砌成 5 dm的墙。</span><br></pre></td></tr></table></figure><p><strong>样例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入 : x &#x3D; 13</span><br><span class="line">输出 : &quot;YES&quot;</span><br><span class="line">解释：</span><br><span class="line">x &#x3D; 2 * 3 + 7 : 即需要2匹3 dm高度的砖和1匹7 dm 高度的砖。</span><br></pre></td></tr></table></figure></blockquote><h4 id="解法-11"><a href="#解法-11" class="headerlink" title="解法"></a>解法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x: the wall&#x27;s height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: YES or NO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">isBuild</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write you code here</span></span><br><span class="line">        <span class="keyword">boolean</span> []f=<span class="keyword">new</span> <span class="keyword">boolean</span>[x+<span class="number">1</span>];</span><br><span class="line">        f[<span class="number">0</span>]=<span class="keyword">true</span>;<span class="comment">//f[i]代表的是围成i高度的墙能否成功</span></span><br><span class="line">        <span class="keyword">int</span> []choice=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line">            <span class="comment">//f[i]=false;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;=choice[j])&#123;</span><br><span class="line">                <span class="comment">// f[i] = f[i] || f[i - w[j]];</span></span><br><span class="line">                    f[i]=f[i-choice[j]];</span><br><span class="line">                    <span class="keyword">if</span>(f[i]==<span class="keyword">true</span>) <span class="keyword">break</span>;</span><br><span class="line">                   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[x]?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="敬请期待。。。"><a href="#敬请期待。。。" class="headerlink" title="敬请期待。。。"></a>敬请期待。。。</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;每周聊聊算法（更新中）&quot;&gt;&lt;a href=&quot;#每周聊聊算法（更新中）&quot; class=&quot;headerlink&quot; title=&quot;每周聊聊算法（更新中）&quot;&gt;&lt;/a&gt;每周聊聊算法（更新中）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;先抛出刷算法题的网站：&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    <category term="算法题分享" scheme="https://a2914475618.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="算法题" scheme="https://a2914475618.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入</title>
    <link href="https://a2914475618.github.io/2021/04/16/post%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>https://a2914475618.github.io/2021/04/16/post%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</id>
    <published>2021-04-16T11:00:00.000Z</published>
    <updated>2021-05-18T13:00:21.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="依赖注入（更新中）"><a href="#依赖注入（更新中）" class="headerlink" title="依赖注入（更新中）"></a>依赖注入（更新中）</h1><p>依赖注入（Dependency Injection），是这样一个过程：由于某客户类只依赖于服务类的一个接口，而不依赖于具体服务类，所以客户类只定义一个注入点。在程序运行过程中，客户类不直接实例化具体服务类实例，而是客户类的运行上下文环境或专门组件负责实例化服务类，然后将其注入到客户类中，保证客户类的正常运行。</p><p>使用依赖关系注入模式和控制反转的优点如下：</p><ul><li>减少类耦合</li><li>增加代码重用</li><li>提高代码可维护性</li><li>改进应用程序测试</li></ul><h2 id="依赖与耦合"><a href="#依赖与耦合" class="headerlink" title="依赖与耦合"></a>依赖与耦合</h2><p>在面向对象里，合作有一个术语，叫做依赖，依赖的同时出现了耦合，依赖越直接，耦合越紧。依赖指的是类与类之间的依赖，服务提供者和服务需求者之间的依赖关系。</p><p>Car 与 Engine 紧耦合的示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> engine = <span class="keyword">new</span> Engine();</span><br><span class="line">        <span class="keyword">var</span> car = <span class="keyword">new</span> Car(engine);</span><br><span class="line">        car.Run(<span class="number">3</span>);</span><br><span class="line">        Console.WriteLine(car.Speed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Engine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> RPM &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Work</span>(<span class="params"><span class="built_in">int</span> gas</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.RPM = <span class="number">1000</span> * gas;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Car</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Car 里面有个 Engine 类型的字段，它两就是紧耦合了</span></span><br><span class="line">    <span class="comment">// Car 依赖于 Engine</span></span><br><span class="line">    <span class="keyword">private</span> Engine _engine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Speed &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span>(<span class="params">Engine engine</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"><span class="built_in">int</span> gas</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _engine.Work(gas);</span><br><span class="line">        <span class="keyword">this</span>.Speed = _engine.RPM / <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧耦合的问题：</p><ol><li><p>基础类一旦出问题，上层类写得再好也没辙</p></li><li><p>程序调试时很难定位问题源头</p></li><li><p>基础类修改时，会影响写上层类的其他程序员的工作</p></li></ol><p>所以程序开发中要尽量避免紧耦合，解决方法就是接口。</p><p>接口：</p><ol><li>约束调用者只能调用接口中包含的方法</li><li>让调用者放心去调，不必关心方法怎么实现的、谁提供的</li><li>接口就是为了松耦合而生</li></ol><p>接口的产生：自底向上（重构），自顶向下（设计）</p><h2 id="接口解耦示例"><a href="#接口解耦示例" class="headerlink" title="接口解耦示例"></a>接口解耦示例</h2><p>以老式手机举例，对用户来说他只关心手机可以接（打）电话和收（发）短信。</p><p>对于手机厂商，接口约束了他只要造的是手机，就必须可靠实现上面的四个功能。</p><p>用户如果丢了个手机，他只要再买个手机，不必关心是那个牌子的，肯定也包含这四个功能，上手就可以用。用术语来说就是“人和手机是解耦的”。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//var user = new PhoneUser(new NokiaPhone());</span></span><br><span class="line">        <span class="keyword">var</span> user = <span class="keyword">new</span> PhoneUser(<span class="keyword">new</span> EricssonPhone());</span><br><span class="line">        user.UsePhone();</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">PhoneUser</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IPhone _phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneUser</span>(<span class="params">IPhone phone</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UsePhone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _phone.Dail();</span><br><span class="line">        _phone.PickUp();</span><br><span class="line">        _phone.Receive();</span><br><span class="line">        _phone.Send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dail</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">PickUp</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Receive</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">NokiaPhone</span> : <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dail</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Nokia calling ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PickUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello! This is Tim!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Nokia message ring ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Receive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">EricssonPhone</span> : <span class="title">IPhone</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dail</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Ericsson calling ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PickUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello! This is Tim!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Ericsson ring ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Receive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Good evening!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有用接口时，如果一个类坏了，你需要 Open 它再去修改，修改时可能产生难以预料的副作用。引入接口后，耦合度大幅降低，换手机只需要换个类名，就可以了。</p><p>等学了反射后，连这里的一行代码都不需要改，只要在配置文件中修改一个名字即可。</p><p>在代码中只要有可以替换的地方，就一定有接口的存在；接口就是为了解耦（松耦合）而生。</p><p>松耦合最大的好处就是让功能的提供方变得可替换，从而降低紧耦合时“功能的提供方不可替换”带来的高风险和高成本。</p><ul><li><p>高风险：功能提供方一旦出问题，依赖于它的功能都挂</p></li><li><p>高成本：如果功能提供方的程序员崩了，会导致功能使用方的整个团队工作受阻</p></li></ul><h2 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h2><p>解耦在代码中的表现就是依赖反转。</p><p>单元测试就是依赖反转在开发中的直接应用和直接受益者。</p><p><img src="https://i.loli.net/2021/04/16/4gXe6wh1j7mVEyR.png" alt="image.png"></p><p>人类解决问题的典型思维：自顶向下，逐步求精。</p><p>在面向对象里像这样来解决问题时，这些问题就变成了不同的类，且类和类之间紧耦合，它们也形成了这样的金字塔。</p><p>依赖反转给了我们一种新思路，用来<strong>平衡</strong>自顶向下的思维方式。</p><blockquote><p>平衡：不要一味推崇依赖反转，很多时候自顶向下就很好用，就该用。</p></blockquote><p><img src="https://i.loli.net/2021/04/16/NHJj6EgheKtU9V8.png" alt="image.png"></p><h3 id="各种方法间的关系"><a href="#各种方法间的关系" class="headerlink" title="各种方法间的关系"></a>各种方法间的关系</h3><p><img src="https://i.loli.net/2021/04/16/CbfHUL6j4cEDNek.png" alt="image.png"></p><ul><li><p>接口方法用虚线圆表示接口方法是纯虚方法</p></li><li><ul><li>接口方法的修饰符一定是 public</li></ul></li><li><p>abstract 比纯虚方法稍微实现了点，但并未完全实现，其实现还要下推出去</p></li><li><ul><li>从 abstract 到 virtual 和实现方法必须加 override</li></ul></li><li><p>virtual、override 和实现方法是有了逻辑有了方法体的方法</p></li><li><ul><li>从 virtual 到 override 方法也必须加 override</li></ul></li></ul><h2 id="文章分享"><a href="#文章分享" class="headerlink" title="文章分享"></a>文章分享</h2><p><a href="https://blog.csdn.net/sinat_21843047/article/details/80297951">(1条消息) 控制反转和依赖注入的理解(通俗易懂)_行者彡的博客-CSDN博客_依赖注入</a></p><p><a href="https://www.cnblogs.com/fuchongjundream/p/3873073.html">IoC模式（依赖、依赖倒置、依赖注入、控制反转） - GavinJune - 博客园 (cnblogs.com)</a></p><p><a href="https://docs.microsoft.com/zh-cn/xamarin/xamarin-forms/enterprise-application-patterns/dependency-injection">依赖关系注入 - Xamarin | Microsoft Docs</a></p><p><a href="https://www.cnblogs.com/techborther/archive/2012/01/06/2313498.html">【ASP.Net MVC3 】使用Unity 实现依赖注入 - 技术弟弟 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;依赖注入（更新中）&quot;&gt;&lt;a href=&quot;#依赖注入（更新中）&quot; class=&quot;headerlink&quot; title=&quot;依赖注入（更新中）&quot;&gt;&lt;/a&gt;依赖注入（更新中）&lt;/h1&gt;&lt;p&gt;依赖注入（Dependency Injection），是这样一个过程：由于某客户类只</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="依赖注入" scheme="https://a2914475618.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>企业架构之三层架构</title>
    <link href="https://a2914475618.github.io/2021/04/16/post%E4%BC%81%E4%B8%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <id>https://a2914475618.github.io/2021/04/16/post%E4%BC%81%E4%B8%9A%E6%9E%B6%E6%9E%84%E4%B9%8B%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</id>
    <published>2021-04-16T08:16:30.000Z</published>
    <updated>2021-04-21T12:39:31.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三层架构-更新中"><a href="#三层架构-更新中" class="headerlink" title="三层架构(更新中)"></a>三层架构(更新中)</h1><h2 id="概念含义"><a href="#概念含义" class="headerlink" title="概念含义"></a>概念含义</h2><ul><li><p>将整个业务应用划分为：界面层（User Interface layer, UIL）、业务逻辑层（Business Logic Layer, BLL）、数据访问层（Data access layer, DAL）。</p><p>1：界面层：主要是指<em>与</em>用户交互的界面。用于接收用户输入的数据和显示处理后用户需要的数据。如果逻辑层相当强大和完善，无论表现层如何定义和更改，逻辑层都能完善地提供服务。</p><p>2：业务逻辑层：UI层和DAL层之间的桥梁。实现业务逻辑。业务逻辑具体包含：验证、计算、业务规则等等。</p><p>3：数据访问层：与数据库打交道。主要实现对数据的增、删、改、查。将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库。（当然这些操作都是基于UI层的。用户的需求反映给界面（UI），UI反映给BLL，BLL反映给DAL，DAL进行数据的操作，操作后再一一返回，直到将用户所需数据反馈给用户）。</p><p>4.相关要点</p><ul><li>数据层：DAL：完成数据的持久化</li><li>展示层：UI：和用户交互</li><li>业务层：BLL：进行业务</li><li>关系：</li><li>ui-&gt;bll-&gt;dal-&gt;database</li><li>注意：</li><li>只允许上层调用下层，下层不能调用上层</li><li>相邻层之间才能交互，不允许跨层交互</li><li>三层项目隔离，通过REFERENCES引用</li><li>引用是单向的</li><li>为什么需要分层？</li><li>微服务不好</li><li>方便项目组织维护</li><li>前后端分离</li><li>DTO（DATA TRANSFERE object）：数据运转对象，用于数据传递的对象,是一个实体 </li><li>Entity就是需要被持久化放到数据库里的类</li></ul></li></ul><p>​        图片理解</p><p><img src="https://i.loli.net/2021/04/16/HKUZTRXrSQ2oFLw.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/04/16/fKpSrisMZYdENjC.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/04/04/Sm3uOYs9JfUyglx.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/04/04/xvDGjUiaYcmVrXo.png" alt="image.png"></p><h2 id="引用关系"><a href="#引用关系" class="headerlink" title="引用关系"></a>引用关系</h2><ul><li>DALFactory数据访问层的抽象工厂(决定创建哪种数据库类型的数据访问层.</li><li>可以选择 SQL Server , Oracle).</li><li>DBUnititly数据访问类组件.</li><li>IDAL数据访问层接口定义.</li><li>SqlServer数据访问层.</li><li>项目引用关系:</li><li>WEB引用BLL</li><li>BLL 引用IDAL,MODEL,使用DALFactory创建实例.</li><li>IDAL引用Model</li><li>Model无引用</li><li>DALFactory引用IDAL,通过读取web.config里的程序集,加载类的实例,返回给BLL使用.</li><li>SQL Server 引用Model和IDAL ,被DALFactory加载程序集,实现接口里的方法.</li></ul><h2 id="相关资料链接："><a href="#相关资料链接：" class="headerlink" title="相关资料链接："></a>相关资料链接：</h2><p><a href="https://www.cnblogs.com/yisuowushinian/archive/2013/01/16/2863201.html">https://www.cnblogs.com/yisuowushinian/archive/2013/01/16/2863201.html</a></p><p><a href="https://www.cnblogs.com/hoyong/articles/6480667.html">https://www.cnblogs.com/hoyong/articles/6480667.html</a></p><p><a href="https://www.cnblogs.com/zzqvq/p/5816091.html">https://www.cnblogs.com/zzqvq/p/5816091.html</a></p><h2 id="小知识点搜集"><a href="#小知识点搜集" class="headerlink" title="小知识点搜集"></a>小知识点搜集</h2><p>1.定义一个泛型接口，泛型的类型必须是一个类（引用类型）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IRepository</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br></pre></td></tr></table></figure><p>2.db.savachanges()返回的数据库中影响的行数</p><p>3.假设当前页完整地址是： <a href="https://www.oschina.net/action/GoToLink?url=http://www.test.com/aaa/bbb.aspx?id=5&name=kelli">http://www.test.com/aaa/bbb.aspx?id=5&amp;name=kelli</a></p><p>协议名—-http://<br>域名 —- <a href="https://www.oschina.net/action/GoToLink?url=http://www.test.com/">www.test.com</a><br>站点名—aaa<br>页面名(文件名) —-bbb.aspx<br>参数——id=5&amp;name=kelli</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、完整url （协议名+域名+站点名+文件名+参数）</span><br><span class="line"><span class="built_in">string</span> url=Request.Url.ToString();</span><br><span class="line">url= http:<span class="comment">//www.test.com/aaa/bbb.aspx?id=5&amp;name=kelli</span></span><br><span class="line"><span class="number">2</span>、站点名+页面名+参数</span><br><span class="line"><span class="built_in">string</span> url=Request.RawUrl;(或 <span class="built_in">string</span> url=Request.Url.PathAndQuery;)</span><br><span class="line">url= /aaa/bbb.aspx?id=<span class="number">5</span>&amp;name=kelli</span><br><span class="line"><span class="number">3</span>、站点名+页面名</span><br><span class="line"><span class="built_in">string</span> url=HttpContext.Current.Request.Url.AbsolutePath;</span><br><span class="line">(或 <span class="built_in">string</span> url= HttpContext.Current.Request.Path;)</span><br><span class="line">url= aaa/bbb.aspx</span><br><span class="line"><span class="number">4</span>、域名</span><br><span class="line"><span class="built_in">string</span> url=HttpContext.Current.Request.Url.Host;</span><br><span class="line">url= www.test.com</span><br><span class="line"><span class="number">5</span>、参数</span><br><span class="line"><span class="built_in">string</span> url= HttpContext.Current.Request.Url.Query;</span><br><span class="line">url= ?id=<span class="number">5</span>&amp;name=kelli</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三层架构-更新中&quot;&gt;&lt;a href=&quot;#三层架构-更新中&quot; class=&quot;headerlink&quot; title=&quot;三层架构(更新中)&quot;&gt;&lt;/a&gt;三层架构(更新中)&lt;/h1&gt;&lt;h2 id=&quot;概念含义&quot;&gt;&lt;a href=&quot;#概念含义&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="三层架构" scheme="https://a2914475618.github.io/tags/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Jquery</title>
    <link href="https://a2914475618.github.io/2021/04/09/postJquery/"/>
    <id>https://a2914475618.github.io/2021/04/09/postJquery/</id>
    <published>2021-04-09T07:48:29.000Z</published>
    <updated>2021-04-14T12:45:10.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jquery（更新中"><a href="#Jquery（更新中" class="headerlink" title="Jquery（更新中)"></a>Jquery（更新中)</h1><h2 id="easyui的一些重要的操作方法"><a href="#easyui的一些重要的操作方法" class="headerlink" title="easyui的一些重要的操作方法"></a>easyui的一些重要的操作方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击时精确定位到当前行</span></span><br><span class="line">$(<span class="string">&quot;#tableId&quot;</span>).datagrid(<span class="string">&quot;selectRow&quot;</span>,rowIndex);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前行的数据</span></span><br><span class="line"><span class="keyword">var</span> row=$(<span class="string">&quot;#tableId&quot;</span>).datagrid(<span class="string">&quot;getSelected&quot;</span>);</span><br><span class="line">获取到row就可以实现对应的操作。</span><br></pre></td></tr></table></figure><h2 id="jQuery操作select下拉框的text值和value值的方法"><a href="#jQuery操作select下拉框的text值和value值的方法" class="headerlink" title="jQuery操作select下拉框的text值和value值的方法"></a>jQuery操作select下拉框的text值和value值的方法</h2><blockquote><p>1、jquery获取当前选中select的text值</p><p>var checkText=$(“#slc1”).find(“option:selected”).text();</p><p>2、jquery获取当前选中select的value值</p><p>var checkValue=$(“#slc1”).val();</p><p>3、jquery获取当前选中select的索引值</p><p>var index=$(“#slc1 “).get(0).selectedIndex;</p><p>4、jquery设置索引值为1的项为当前选中项</p><p>$(“#slc1 “).get(0).selectedIndex=1;</p><p>5、jquery设置value值2的项为当前选中项</p><p>$(“#slc1 “).val(2);</p><p>6、jquery设置text值为”青藤园”的项为当前选中项</p><p>$(“#slc1 option[text=’青园w’]”).attr(“selected”,true);</p><p>7、为指定select下拉框追加一个option（追加到在末尾）</p><p>$(“#slc2”).append(“”+i+””);</p><p>8、为制定select下拉框插入一个option（插入到第一个位置）</p><p>$(“#slc2”).prepend(“请选择”);</p><p>9、jquery删除select下拉框的最后一个option</p><p>$(“#slc2 option:last”).remove();</p><p>5、jquery设置value值1的项为当前选中项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#select1&quot;).val(1);</span><br></pre></td></tr></table></figure><p>6、jquery设置text值为”2017”的项为当前选中项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#select1 option[text&#x3D;&#39;2017&#39;]&quot;).attr(&quot;selected&quot;,true); </span><br></pre></td></tr></table></figure><p>7、为指定select下拉框追加一个option（追加到在末尾）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#select1&quot;).append(&quot;&quot;+i+&quot;&quot;); </span><br></pre></td></tr></table></figure><p>8、为制定select下拉框插入一个option（插入到第一个位置）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#select1&quot;).prepend(&quot;请选择&quot;); </span><br></pre></td></tr></table></figure><p>9、jquery删除select下拉框的最后一个option</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#select1 option:last&quot;).remove();</span><br></pre></td></tr></table></figure><p> 10、清空select控件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;$(&quot;#select1&quot;).empty();</span><br></pre></td></tr></table></figure></blockquote><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><h3 id="jquery三级联动"><a href="#jquery三级联动" class="headerlink" title="jquery三级联动"></a>jquery三级联动</h3><p>jquery代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">            <span class="comment">//第一个下拉框的数据呈现</span></span><br><span class="line">            $.get(<span class="string">&quot;http://localhost:62650/Student/School&quot;</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> ddl = $(<span class="string">&quot;#xx&quot;</span>);</span><br><span class="line">                </span><br><span class="line">                    <span class="keyword">var</span> result = data;</span><br><span class="line">                   </span><br><span class="line">                    $(result).each(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> opt = $(<span class="string">&quot;&lt;option&gt;&lt;/option&gt;&quot;</span>).text(result[key].name).val(result[key].id);</span><br><span class="line">                        ddl.append(opt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line">              </span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">changeschool</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;#xy&quot;</span>).empty();</span><br><span class="line">                $(<span class="string">&quot;#xy&quot;</span>).append(<span class="string">&#x27;&lt;option value=&quot;0&quot; &gt;请选择你的学院---&lt;/option&gt;&#x27;</span>);</span><br><span class="line">                $(<span class="string">&quot;#bj&quot;</span>).empty();</span><br><span class="line">                $(<span class="string">&quot;#bj&quot;</span>).append(<span class="string">&#x27;&lt;option value=&quot;0&quot; &gt;请选择你的班级---&lt;/option&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                    <span class="keyword">var</span> sid = $(<span class="string">&quot;#xx&quot;</span>).val();</span><br><span class="line">                    <span class="keyword">var</span> getstring = <span class="string">&quot;http://localhost:62650/Student/College/&quot;</span> + sid;</span><br><span class="line">                    $.get(getstring).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> result = data;</span><br><span class="line">                        <span class="keyword">var</span> dd = $(<span class="string">&quot;#xy&quot;</span>);</span><br><span class="line">                        $(result).each(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">var</span> opt = $(<span class="string">&quot;&lt;option&gt;&lt;/option&gt;&quot;</span>).text(result[key].name).val(result[key].id);</span><br><span class="line">                            dd.append(opt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">changcollege</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;#bj&quot;</span>).empty();</span><br><span class="line">                $(<span class="string">&quot;#bj&quot;</span>).append(<span class="string">&#x27;&lt;option value=&quot;0&quot; &gt;请选择你的班级---&lt;/option&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> sid = $(<span class="string">&quot;#xy&quot;</span>).val();</span><br><span class="line">                <span class="keyword">var</span> getstring = <span class="string">&quot;http://localhost:62650/Student/Class/&quot;</span> + sid;</span><br><span class="line">                $.get(getstring).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> result = data;</span><br><span class="line">                    <span class="keyword">var</span> dd = $(<span class="string">&quot;#bj&quot;</span>);</span><br><span class="line">                    $(result).each(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> opt = $(<span class="string">&quot;&lt;option&gt;&lt;/option&gt;&quot;</span>).text(result[key].name).val(result[key].id);</span><br><span class="line">                        dd.append(opt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>前端html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;xx&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:22%;&quot;</span> <span class="attr">contenteditable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;changeschool()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>请选择你的学校---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;select class=&quot;easyui-combobox&quot; name=&quot;cx2&quot; label=&quot;&quot; labelPosition=&quot;top&quot; style=&quot;width:22%;&quot;&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;xy&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:22%;&quot;</span> <span class="attr">contenteditable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;changcollege()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>请选择你的学院---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;select class=&quot;easyui-combobox&quot; name=&quot;SearchClass&quot; label=&quot;&quot; labelPosition=&quot;top&quot; style=&quot;width:22%;&quot;&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;bj&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:22%;&quot;</span> <span class="attr">contenteditable</span>=<span class="string">&quot;false&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>请选择你的班级---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端返回json代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">School</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;School&gt; s = <span class="keyword">new</span> List&lt;School&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> School&#123;id=<span class="number">1</span>,name=<span class="string">&quot;华东师范大学&quot;</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> School&#123;id=<span class="number">2</span>,name=<span class="string">&quot;上海交通大学&quot;</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> School&#123;id=<span class="number">3</span>,name=<span class="string">&quot;复旦大学&quot;</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            s.ToArray();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Json(s, JsonRequestBehavior.AllowGet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> JsonResult <span class="title">College</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;College&gt; c = <span class="keyword">new</span> List&lt;College&gt;();</span><br><span class="line">            <span class="keyword">switch</span> (id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: c.Add(<span class="keyword">new</span> Models.College &#123; id = <span class="number">1</span>, name = <span class="string">&quot;教育学院&quot;</span> &#125;);</span><br><span class="line">                    c.Add(<span class="keyword">new</span> Models.College &#123; id = <span class="number">2</span>, name = <span class="string">&quot;计算机学院&quot;</span> &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:c.Add(<span class="keyword">new</span> Models.College &#123; id = <span class="number">3</span>, name = <span class="string">&quot;生命学院&quot;</span> &#125;);</span><br><span class="line">                    c.Add(<span class="keyword">new</span> Models.College &#123; id = <span class="number">4</span>, name = <span class="string">&quot;外语学院&quot;</span> &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    c.Add(<span class="keyword">new</span> Models.College &#123; id = <span class="number">5</span>, name = <span class="string">&quot;建筑工程&quot;</span> &#125;);</span><br><span class="line">                    c.Add(<span class="keyword">new</span> Models.College &#123; id = <span class="number">6</span>, name = <span class="string">&quot;马克思学院&quot;</span> &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c.ToArray();</span><br><span class="line">            <span class="keyword">return</span> Json(c, JsonRequestBehavior.AllowGet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> JsonResult <span class="title">Class</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;Class&gt; b = <span class="keyword">new</span> List&lt;Class&gt;();</span><br><span class="line">            <span class="keyword">switch</span> (id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">1</span>, name = <span class="string">&quot;教育1&quot;</span> &#125;);</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">2</span>, name = <span class="string">&quot;教育2&quot;</span> &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">3</span>, name = <span class="string">&quot;计算机1&quot;</span> &#125;);</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">4</span>, name = <span class="string">&quot;计算机2&quot;</span> &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">5</span>, name = <span class="string">&quot;生命1&quot;</span> &#125;);</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">6</span>, name = <span class="string">&quot;生命2&quot;</span> &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">7</span>, name = <span class="string">&quot;外语1&quot;</span> &#125;);</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">8</span>, name = <span class="string">&quot;外语2&quot;</span> &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">9</span>, name = <span class="string">&quot;建筑1&quot;</span> &#125;);</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">10</span>, name = <span class="string">&quot;建筑2&quot;</span> &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">11</span>, name = <span class="string">&quot;马克思1&quot;</span> &#125;);</span><br><span class="line">                    b.Add(<span class="keyword">new</span> Models.Class &#123; id = <span class="number">12</span>, name = <span class="string">&quot;马克思2&quot;</span> &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            b.ToArray();</span><br><span class="line">            <span class="keyword">return</span> Json(b, JsonRequestBehavior.AllowGet);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Jquery（更新中&quot;&gt;&lt;a href=&quot;#Jquery（更新中&quot; class=&quot;headerlink&quot; title=&quot;Jquery（更新中)&quot;&gt;&lt;/a&gt;Jquery（更新中)&lt;/h1&gt;&lt;h2 id=&quot;easyui的一些重要的操作方法&quot;&gt;&lt;a href=&quot;#eas</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="jquery" scheme="https://a2914475618.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://a2914475618.github.io/2021/04/07/postAjax/"/>
    <id>https://a2914475618.github.io/2021/04/07/postAjax/</id>
    <published>2021-04-07T01:18:12.000Z</published>
    <updated>2021-04-07T13:01:07.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><ul><li>局部更新数据，无刷新更新数据</li><li>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</li></ul><h2 id="用于场景"><a href="#用于场景" class="headerlink" title="用于场景"></a>用于场景</h2><ul><li>页面上拉加载数据</li><li>数据分页</li><li>表单离开焦点数据验证</li><li>搜索框提示文字下拉列表</li></ul><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>需要运行在网络环境才能生效</li></ul><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p><img src="https://i.loli.net/2021/04/07/4Kt6nxXmRLUuDvT.png" alt="image.png"></p><h2 id="Ajax的实现步骤"><a href="#Ajax的实现步骤" class="headerlink" title="Ajax的实现步骤"></a>Ajax的实现步骤</h2><p>1.创建Ajax对象</p><p>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;<span class="comment">// code for IE6, IE5，老版本的</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.告诉Ajax请求地址以及请求方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">&#x27;get&#x27;</span>,<span class="string">&quot;http://example.com&quot;</span>);</span><br></pre></td></tr></table></figure><p>3.发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>4.获取服务器端给客户端的响应数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><blockquote><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">open(<em>method</em>,<em>url</em>,<em>async</em>)</td><td align="left">规定请求的类型、URL 以及是否异步处理请求。<em>method</em>：请求的类型；GET 或 POST<em>url</em>：文件在服务器上的位置<em>async</em>：true（异步）或 false（同步）</td></tr><tr><td align="left">send(<em>string</em>)</td><td align="left">将请求发送到服务器。<em>string</em>：仅用于 POST 请求</td></tr></tbody></table><h2 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h2><p>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">responseText</td><td align="left">获得字符串形式的响应数据。</td></tr><tr><td align="left">responseXML</td><td align="left">获得 XML 形式的响应数据。</td></tr></tbody></table></blockquote><h3 id="GET-还是-POST？"><a href="#GET-还是-POST？" class="headerlink" title="GET 还是 POST？"></a>GET 还是 POST？</h3><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p><p>然而，在以下情况中，请使用 POST 请求：</p><ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ul><h2 id="服务器端响应的数据格式"><a href="#服务器端响应的数据格式" class="headerlink" title="服务器端响应的数据格式"></a>服务器端响应的数据格式</h2><p>1.服务器端绝大多数情况下会以JSON对象作为响应数据的格式，当客户端拿到响应数据时，要将Json数据和html字符串进行拼接，然后将拼接的结果展示在页面中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> responseText=<span class="built_in">JSON</span>.parse(xhr.responseText)</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;&lt;h2&gt;&#x27;</span>+responseText.name+<span class="string">&#x27;&lt;/h2&gt;&#x27;</span>;<span class="comment">//这里的responseText.name是从服务器传回来的对象的name属性</span></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML=str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在HTTP请求与响应的过程中，无论是请求参数还是响应内容，如果是对象类型，最终都会被转换为对象字符串进行传输。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(xhr.responseText);<span class="comment">//将JSON字符转换为JSON对象</span></span><br></pre></td></tr></table></figure><h2 id="请求参数传递"><a href="#请求参数传递" class="headerlink" title="请求参数传递"></a>请求参数传递</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取姓名文本框</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取年龄文本框</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> age = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;age&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 为按钮添加点击事件</span></span></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取用户在文本框中输入的值</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> nameValue = username.value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ageValue = age.value;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 拼接请求参数</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> params = <span class="string">&#x27;username=&#x27;</span>+ nameValue +<span class="string">&#x27;&amp;age=&#x27;</span> + ageValue;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 配置ajax对象</span></span></span><br><span class="line"><span class="javascript">xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:3000/get?&#x27;</span>+params);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 发送请求</span></span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="javascript"><span class="comment">// 获取服务器端响应的数据</span></span></span><br><span class="line"><span class="javascript">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(xhr.responseText)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><p>切记：在post请求里，只要请求参数为var params = ‘username=’+ nameValue +’&amp;age=’ + ageValue</p><p>// 设置请求参数格式的类型（post请求必须要设置）设置报头<br>            xhr.setRequestHeader(‘Content-Type’, ‘application/x-www-form-urlencoded’);固定写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取姓名文本框</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取年龄文本框</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> age = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;age&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 为按钮添加点击事件</span></span></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取用户在文本框中输入的值</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> nameValue = username.value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ageValue = age.value;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 拼接请求参数</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> params = <span class="string">&#x27;username=&#x27;</span>+ nameValue +<span class="string">&#x27;&amp;age=&#x27;</span> + ageValue;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 配置ajax对象</span></span></span><br><span class="line"><span class="javascript">xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://localhost:3000/post&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 设置请求参数格式的类型（post请求必须要设置）</span></span></span><br><span class="line"><span class="javascript">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="javascript">xhr.send(params);<span class="comment">//与get不同的地方，将参数放在send方法里</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取服务器端响应的数据</span></span></span><br><span class="line"><span class="javascript">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(xhr.responseText)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="get请求与post请求的区别"><a href="#get请求与post请求的区别" class="headerlink" title="get请求与post请求的区别"></a>get请求与post请求的区别</h3><p>get请求的拼接请求参数要放在url？后面</p><p>post请求的拼接请求参数放在xhr.send( params)里,并且post必须要求设置报头</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;);//放在send()之前</span><br></pre></td></tr></table></figure><h2 id="请求参数的格式"><a href="#请求参数的格式" class="headerlink" title="请求参数的格式"></a>请求参数的格式</h2><p>1.application/x-www-from-urlencoded</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=zhangsan&amp;age=男</span><br></pre></td></tr></table></figure><p>2.application/json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;20&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>在请求头仲指定Content-Type属性的值是application/json，告诉服务器当前请求参数的格式为json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.srtingfy()<span class="comment">//将JSON对象转化为JSON字符串</span></span><br></pre></td></tr></table></figure><p>注意：get请求不能提交json对象数据格式，传统网站的表单提交也不支持json对象格式的</p><h2 id="什么是请求报文"><a href="#什么是请求报文" class="headerlink" title="什么是请求报文"></a>什么是请求报文</h2><p>在 HTTP 请求和响应的过程中传递的数据块就叫报文，包括要传送的数据和一些附加信息，这些数据和信息要遵守规定好的格式。<img src="https://i.loli.net/2021/04/07/T6KvbqIDwBaugAZ.png" alt="image.png"></p><h2 id="什么是服务器"><a href="#什么是服务器" class="headerlink" title="什么是服务器"></a>什么是服务器</h2><p>本质上也是一台计算机（配置高），提供不同的服务，包括文件服务器，数据库服务器，应用程序服务器，<strong>Web服务器</strong>（网站服务器）包括本地服务器，以及远程服务器，通过域名访问我们的网站</p><h2 id="Ajax状态码"><a href="#Ajax状态码" class="headerlink" title="Ajax状态码"></a>Ajax状态码</h2><p>在创建ajax对象，配置ajax对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值，这个数值就是ajax状态码。</p><p> xhr.readyState // 获取Ajax状态码</p><h4 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h4><p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。</p><p>每当 readyState 改变时，就会触发 onreadystatechange 事件。</p><p>readyState 属性存有 XMLHttpRequest 的状态信息。</p><p>下面是 XMLHttpRequest 对象的三个重要的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onreadystatechange</td><td align="left">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td></tr><tr><td align="left">readyState</td><td align="left">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪</td></tr><tr><td align="left">status</td><td align="left">200: “OK”404: 未找到页面</td></tr></tbody></table><p>在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。</p><p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.onreadystatechange&#x3D;function()</span><br><span class="line">  &#123;</span><br><span class="line">  if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200)</span><br><span class="line">    &#123;</span><br><span class="line">    document.getElementById(&quot;myDiv&quot;).innerHTML&#x3D;xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Ajax错误处理"><a href="#Ajax错误处理" class="headerlink" title="Ajax错误处理"></a>Ajax错误处理</h2><p>1.网络畅通，服务器端能接收到请求，服务器端返回的结果不是预期结果。</p><blockquote><p>可以判断服务器端返回的状态码，分别进行处理。xhr.status 获取http状态码</p></blockquote><p>2.网络畅通，服务器端没有接收到请求，返回404状态码。</p><blockquote><p>检查请求地址是否错误。</p></blockquote><p>3.网络畅通，服务器端能接收到请求，服务器端返回500状态码。</p><blockquote><p>服务器端错误，找后端程序员进行沟通。</p></blockquote><p>4.网络中断，请求无法发送到服务器端。</p><blockquote><p>会触发xhr对象下面的onerror事件，在onerror事件处理函数中对错误进行处理。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>发送Ajax请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 1.创建ajax对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript"><span class="comment">// 2.告诉Ajax对象要向哪发送请求，以什么方式发送请求</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1)请求方式 2)请求地址</span></span></span><br><span class="line"><span class="javascript">xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:3000/error&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 3.发送请求</span></span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="javascript"><span class="comment">// 4.获取服务器端响应到客户端的数据</span></span></span><br><span class="line"><span class="javascript">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// xhr.status 获取http状态码</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line"></span><br><span class="line">if (xhr.status == 400) &#123;</span><br><span class="line"><span class="javascript">alert(<span class="string">&#x27;请求出错&#x27;</span>)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">// 当网络中断时会触发onerrr事件</span></span></span><br><span class="line"><span class="javascript">xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&#x27;网络中断, 无法发送Ajax请求&#x27;</span>)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// Ajax状态码: 表示Ajax请求的过程状态 ajax对象返回的</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// Http状态码: 表示请求的处理结果 是服务器端返回的</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然这一部分我只写了客户端的代码，服务器端的代码并没有写</p><h3 id="Ajax状态码和HTTP状态码的区别"><a href="#Ajax状态码和HTTP状态码的区别" class="headerlink" title="Ajax状态码和HTTP状态码的区别"></a>Ajax状态码和HTTP状态码的区别</h3><ol><li>Ajax状态码表示的是ajax请求的过程状态   由ajax对象返回的</li><li>Http状态码表示请求的处理结果 由服务器端返回的结果</li></ol><h2 id="Ajax异步编程"><a href="#Ajax异步编程" class="headerlink" title="Ajax异步编程"></a>Ajax异步编程</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>同步：上一行代码执行后，才能执行下一行代码</p><p>异步：落实到代码上，就是异步代码虽然需要花费时间去执行，但程序不会等待异步代码执行完成后再继续执行后续代码，而是直接执行后续代码，当后续代码执行完成后再回头看异步代码是否返回结果，如果已有返回结果，再调用事先准备好的回调函数处理异步代码执行的结果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 1.创建ajax对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript"><span class="comment">// 2.告诉Ajax对象要向哪发送请求，以什么方式发送请求</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1)请求方式 2)请求地址</span></span></span><br><span class="line"><span class="javascript">xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:3000/first&#x27;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 3.发送请求</span></span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="javascript"><span class="comment">// 4.获取服务器端响应到客户端的数据</span></span></span><br><span class="line"><span class="javascript">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line">if (xhr.readyState == 4) &#123;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(xhr.responseText)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果时先输出1再输出2</p><h3 id="Ajax封装"><a href="#Ajax封装" class="headerlink" title="Ajax封装"></a>Ajax封装</h3><ul><li>代码的复用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建ajax对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        <span class="comment">//配置ajax对象</span></span></span><br><span class="line">        xhr.open(options.type,options.url);</span><br><span class="line"><span class="javascript">        <span class="comment">//发送请求</span></span></span><br><span class="line">        xhr.send();</span><br><span class="line"><span class="javascript">        <span class="comment">//监听xhr对象下面的onload事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//当xhr对象接受完响应数据后触发</span></span></span><br><span class="line"><span class="javascript">        xhr.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            options.success(xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    ajax(&#123;</span><br><span class="line"><span class="javascript">        type:<span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        url:<span class="string">&#x27;http://localhost3000/first&#x27;</span></span></span><br><span class="line"><span class="javascript">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;这里是success函数&#x27;</span>+data);</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="函数封装（代码）"><a href="#函数封装（代码）" class="headerlink" title="函数封装（代码）"></a>函数封装（代码）</h3><p>源码：（十分巧妙，用到了对象的覆盖、字符串的拼接，字符串的截取）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 存储的是默认值,默认的对象，若调用函数没有传值则使用默认的</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> defaults = &#123;</span></span><br><span class="line"><span class="javascript">type: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">url: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">data: &#123;&#125;,</span><br><span class="line">header: &#123;</span><br><span class="line"><span class="javascript"><span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span><span class="comment">//默认为&amp;拼接型</span></span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="javascript">success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span></span><br><span class="line"><span class="javascript">error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 使用options对象中的属性覆盖defaults对象中的属性</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">Object</span>.assign(defaults, options);<span class="comment">//使用object的assign方法用一个对象可以覆盖另一个对象的值，从而这里的defaults已经具有了options的属性</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript"><span class="comment">// 拼接请求参数的变量</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> params = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 循环用户传递进来的对象格式参数</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> defaults.data) &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 将参数转换为字符串格式</span></span></span><br><span class="line"><span class="javascript">params += attr + <span class="string">&#x27;=&#x27;</span> + defaults.data[attr] + <span class="string">&#x27;&amp;&#x27;</span>;<span class="comment">//最后会多出一个&amp;符号</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">// 将参数最后面的&amp;截取掉 </span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 将截取的结果重新赋值给params变量</span></span></span><br><span class="line">params = params.substr(0, params.length - 1);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 判断请求方式</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (defaults.type == <span class="string">&#x27;get&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">defaults.url = defaults.url + <span class="string">&#x27;?&#x27;</span> + params;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">name: <span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line">age: 20</span><br><span class="line">&#125;</span><br><span class="line">name=zhangsan&amp;age=20</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 配置ajax对象</span></span></span><br><span class="line">xhr.open(defaults.type, defaults.url);</span><br><span class="line"><span class="javascript"><span class="comment">// 如果请求方式为post</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (defaults.type == <span class="string">&#x27;post&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 用户希望的向服务器端传递的请求参数的类型</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> contentType = defaults.header[<span class="string">&#x27;Content-Type&#x27;</span>]</span></span><br><span class="line"><span class="javascript"><span class="comment">// 设置请求参数格式的类型</span></span></span><br><span class="line"><span class="javascript">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, contentType);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 判断用户希望的请求参数格式的类型</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 如果类型为json</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (contentType == <span class="string">&#x27;application/json&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 向服务器端传递json数据格式的参数</span></span></span><br><span class="line"><span class="javascript">xhr.send(<span class="built_in">JSON</span>.stringify(defaults.data))</span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 向服务器端传递普通类型的请求参数</span></span></span><br><span class="line">xhr.send(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 发送请求</span></span></span><br><span class="line">xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="comment">// 监听xhr对象下面的onload事件</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 当xhr对象接收完响应数据后触发</span></span></span><br><span class="line"><span class="javascript">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// xhr.getResponseHeader()得到响应数据的报头</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取响应头中的数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> contentType = xhr.getResponseHeader(<span class="string">&#x27;Content-Type&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 服务器端返回的数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> responseText = xhr.responseText;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 如果响应类型中包含applicaition/json</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 将json字符串转换为json对象</span></span></span><br><span class="line"><span class="javascript">responseText = <span class="built_in">JSON</span>.parse(responseText)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 当http状态码等于200的时候</span></span></span><br><span class="line">if (xhr.status == 200) &#123;</span><br><span class="line"><span class="javascript"><span class="comment">// 请求成功 调用处理成功情况的函数</span></span></span><br><span class="line">defaults.success(responseText, xhr);</span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 请求失败 调用处理失败情况的函数</span></span></span><br><span class="line">defaults.error(responseText, xhr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line"><span class="javascript">type: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="javascript">url: <span class="string">&#x27;http://localhost:3000/responseData&#x27;</span>,</span></span><br><span class="line"><span class="javascript">success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;这里是success函数&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(data)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">请求参数要考虑的问题</span><br><span class="line">1.请求参数位置的问题</span><br><span class="line">将请求参数传递到ajax函数内部, 在函数内部根据请求方式的不同将请求参数放置在不同的位置</span><br><span class="line">get 放在请求地址的后面</span><br><span class="line">post 放在send方法中</span><br><span class="line">2.请求参数格式的问题</span><br><span class="line">application/x-www-form-urlencoded</span><br><span class="line">参数名称=参数值&amp;参数名称=参数值</span><br><span class="line">name=zhangsan&amp;age=20</span><br><span class="line">application/json</span><br><span class="line"><span class="javascript">&#123;<span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span></span><br><span class="line">1.传递对象数据类型对于函数的调用者更加友好</span><br><span class="line">2.在函数内部对象数据类型转换为字符串数据类型更加方便</span><br><span class="line">*/</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="验证邮箱地址唯一性"><a href="#验证邮箱地址唯一性" class="headerlink" title="验证邮箱地址唯一性"></a>验证邮箱地址唯一性</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>获取文本框并为其添加离开焦点事件</li><li>离开焦点时，检测用户输入的邮箱地址是否符合规则</li><li>如果不符合规则，阻止程序向下执行并给出提示信息</li><li>向服务器端发送请求，检测邮箱地址是否被别人注册</li><li>根据服务器端返回值决定客户端显示何种提示信息</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>验证邮箱地址是否已经注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/bootstrap/dist/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:empty</span>) &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">padding</span>: <span class="number">15px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.container &#123;</span><br><span class="line"><span class="css"><span class="attribute">padding-top</span>: <span class="number">100px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱地址&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 错误 bg-danger 正确 bg-success --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/ajax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取页面中的元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> emailInp = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;email&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;info&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 当文本框离开焦点以后</span></span></span><br><span class="line"><span class="javascript">emailInp.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取用户输入的邮箱地址</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> email = <span class="built_in">this</span>.value;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 验证邮箱地址的正则表达式</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Za-z\d]+([-_.][A-Za-z\d]+)*@([A-Za-z\d]+[-.])+[A-Za-z\d]&#123;2,4&#125;$/</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 如果用户输入的邮箱地址不符合规则</span></span></span><br><span class="line">if (!reg.test(email)) &#123;</span><br><span class="line"><span class="javascript"><span class="comment">// 给出用户提示</span></span></span><br><span class="line"><span class="javascript">info.innerHTML = <span class="string">&#x27;请输入符合规则的邮箱地址&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 让提示信息显示为错误提示信息的样式</span></span></span><br><span class="line"><span class="javascript">info.className = <span class="string">&#x27;bg-danger&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 阻止程序向下执行</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 向服务器端发送请求</span></span></span><br><span class="line">ajax(&#123;</span><br><span class="line"><span class="javascript">type: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">url: <span class="string">&#x27;http://localhost:3000/verifyEmailAdress&#x27;</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line">email: email</span><br><span class="line">&#125;,</span><br><span class="line"><span class="javascript">success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(result);</span></span><br><span class="line">info.innerHTML = result.message;</span><br><span class="line"><span class="javascript">info.className = <span class="string">&#x27;bg-success&#x27;</span>;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="javascript">error: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(result)</span></span><br><span class="line">info.innerHTML = result.message;</span><br><span class="line"><span class="javascript">info.className = <span class="string">&#x27;bg-danger&#x27;</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="搜索框内容自动提示"><a href="#搜索框内容自动提示" class="headerlink" title="搜索框内容自动提示"></a>搜索框内容自动提示</h3><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol><li>获取搜索框并为其添加用户输入事件</li><li>获取用户输入的关键字</li><li>向服务器端发送请求并携带关键字作为请求参数</li><li>将响应数据显示在搜索框底部</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>搜索框输入文字自动提示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/bootstrap/dist/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">.container &#123;</span><br><span class="line"><span class="css"><span class="attribute">padding-top</span>: <span class="number">150px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.list-group &#123;</span><br><span class="line"><span class="css"><span class="attribute">display</span>: none;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入搜索关键字&quot;</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span> <span class="attr">id</span>=<span class="string">&quot;list-box&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/ajax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/template-web.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">each</span></span> result&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取搜索框</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> searchInp = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;search&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取提示文字的存放容器</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> listBox = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list-box&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 存储定时器的变量</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 当用户在文本框中输入的时候触发</span></span></span><br><span class="line"><span class="javascript">searchInp.oninput = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 清除上一次开启的定时器</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取用户输入的内容</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> key = <span class="built_in">this</span>.value;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 如果用户没有在搜索框中输入内容</span></span></span><br><span class="line">if (key.trim().length == 0) &#123;</span><br><span class="line"><span class="javascript"><span class="comment">// 将提示下拉框隐藏掉</span></span></span><br><span class="line"><span class="javascript">listBox.style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 阻止程序向下执行</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 开启定时器 让请求延迟发送</span></span></span><br><span class="line"><span class="javascript">timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 向服务器端发送请求</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 向服务器端索取和用户输入关键字相关的内容</span></span></span><br><span class="line">ajax(&#123;</span><br><span class="line"><span class="javascript">type: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">url: <span class="string">&#x27;http://localhost:3000/searchAutoPrompt&#x27;</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line">key: key</span><br><span class="line">&#125;,</span><br><span class="line"><span class="javascript">success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 使用模板引擎拼接字符串</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> html = template(<span class="string">&#x27;tpl&#x27;</span>, &#123;<span class="attr">result</span>: result&#125;);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 将拼接好的字符串显示在页面中</span></span></span><br><span class="line">listBox.innerHTML = html;</span><br><span class="line"><span class="javascript"><span class="comment">// 显示ul容器</span></span></span><br><span class="line"><span class="javascript">listBox.style.display = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;, 800)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="省市区三级联动"><a href="#省市区三级联动" class="headerlink" title="省市区三级联动"></a>省市区三级联动</h3><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><ol><li>通过接口获取省份信息</li><li>使用JavaScript获取到省市区下拉框元素</li><li>将服务器端返回的省份信息显示在下拉框中</li><li>为下拉框元素添加表单值改变事件（onchange）</li><li>当用户选择省份时，根据省份id获取城市信息</li><li>当用户选择城市时，根据城市id获取县城信息</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>搜索框输入文字自动提示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/assets/bootstrap/dist/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">.container &#123;</span><br><span class="line"><span class="css"><span class="attribute">padding-top</span>: <span class="number">150px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;province&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;area&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择县城<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/ajax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/template-web.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省份模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;provinceTpl&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择省份<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">each</span></span> province&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">$value.id</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 城市模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cityTpl&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">each</span></span> city&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">$value.id</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 县城模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;areaTpl&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择县城<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">each</span></span> area&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">$value.id</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取省市区下拉框元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> province = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;province&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;city&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> area = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;area&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取省份信息</span></span></span><br><span class="line">ajax(&#123;</span><br><span class="line"><span class="javascript">type: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">url: <span class="string">&#x27;http://localhost:3000/province&#x27;</span>,</span></span><br><span class="line"><span class="javascript">success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 将服务器端返回的数据和html进行拼接</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> html = template(<span class="string">&#x27;provinceTpl&#x27;</span>, &#123;<span class="attr">province</span>: data&#125;);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 将拼接好的html字符串显示在页面中</span></span></span><br><span class="line">province.innerHTML = html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 为省份的下拉框添加值改变事件</span></span></span><br><span class="line"><span class="javascript">province.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取省份id</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pid = <span class="built_in">this</span>.value;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 清空县城下拉框中的数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> html = template(<span class="string">&#x27;areaTpl&#x27;</span>, &#123;<span class="attr">area</span>: []&#125;);</span></span><br><span class="line">area.innerHTML = html;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 根据省份id获取城市信息</span></span></span><br><span class="line">ajax(&#123;</span><br><span class="line"><span class="javascript">type: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">url: <span class="string">&#x27;/cities&#x27;</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line">id: pid</span><br><span class="line">&#125;,</span><br><span class="line"><span class="javascript">success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> html = template(<span class="string">&#x27;cityTpl&#x27;</span>, &#123;<span class="attr">city</span>: data&#125;);</span></span><br><span class="line">city.innerHTML = html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">// 当用户选择城市的时候</span></span></span><br><span class="line"><span class="javascript">city.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 获取城市id</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> cid = <span class="built_in">this</span>.value;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 根据城市id获取县城信息</span></span></span><br><span class="line">ajax(&#123;</span><br><span class="line"><span class="javascript">type: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="javascript">url: <span class="string">&#x27;http://localhost:3000/areas&#x27;</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line">id: cid</span><br><span class="line">&#125;,</span><br><span class="line"><span class="javascript">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> html = template(<span class="string">&#x27;areaTpl&#x27;</span>, &#123;<span class="attr">area</span>: data&#125;);</span></span><br><span class="line">area.innerHTML = html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="相关源代码和文件"><a href="#相关源代码和文件" class="headerlink" title="相关源代码和文件"></a>相关源代码和文件</h2><p>请访问我的GITHUB</p><p><a href="https://github.com/a2914475618/AJAX">https://github.com/a2914475618/AJAX</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;局部更新数据，无刷新更新数据&lt;/li&gt;
&lt;li&gt;AJAX = Asynchronous JavaScript a</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Ajax" scheme="https://a2914475618.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>时光</title>
    <link href="https://a2914475618.github.io/2021/04/05/post%E6%97%B6%E5%85%89/"/>
    <id>https://a2914475618.github.io/2021/04/05/post%E6%97%B6%E5%85%89/</id>
    <published>2021-04-05T15:44:00.000Z</published>
    <updated>2021-04-05T15:56:18.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="希望时光尽头，有你与我相伴"><a href="#希望时光尽头，有你与我相伴" class="headerlink" title="希望时光尽头，有你与我相伴"></a>希望时光尽头，有你与我相伴</h1><blockquote><h2 id="当时光已逝"><a href="#当时光已逝" class="headerlink" title="当时光已逝"></a>当时光已逝</h2><p>假如时光已逝，</p><p>鸟儿不再歌唱，</p><p>风儿也吹倦了，</p><p>那就用黑暗的厚幕把我盖上，</p><p>如同黄昏时节你用睡眠的衾被裹住大地，</p><p>又轻轻合上睡莲的花瓣。</p><p>路途未完，行囊已空,</p><p>衣裳破裂污损，人已精疲力竭。</p><p>你驱散了旅客的羞愧和困窘，</p><p>使他在你仁慈的夜幕下，</p><p>如花朵般焕发生机。</p><p>在你慈爱的夜幕下苏醒。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;希望时光尽头，有你与我相伴&quot;&gt;&lt;a href=&quot;#希望时光尽头，有你与我相伴&quot; class=&quot;headerlink&quot; title=&quot;希望时光尽头，有你与我相伴&quot;&gt;&lt;/a&gt;希望时光尽头，有你与我相伴&lt;/h1&gt;&lt;blockquote&gt;
&lt;h2 id=&quot;当时光已逝&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="诗歌分享" scheme="https://a2914475618.github.io/categories/%E8%AF%97%E6%AD%8C%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="当时光已逝" scheme="https://a2914475618.github.io/tags/%E5%BD%93%E6%97%B6%E5%85%89%E5%B7%B2%E9%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>Json</title>
    <link href="https://a2914475618.github.io/2021/04/05/postJson/"/>
    <id>https://a2914475618.github.io/2021/04/05/postJson/</id>
    <published>2021-04-05T09:09:59.000Z</published>
    <updated>2021-04-05T10:01:11.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><h2 id="什么是JSON？"><a href="#什么是JSON？" class="headerlink" title="什么是JSON？"></a>什么是JSON？</h2><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li><li>异步刷新</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;: &quot;QinJiang&quot;&#125;</span><br><span class="line">&#123;&quot;age&quot;: &quot;3&quot;&#125;</span><br><span class="line">&#123;&quot;sex&quot;: &quot;男&quot;&#125;</span><br></pre></td></tr></table></figure><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;; &#x2F;&#x2F;这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="line">var json &#x3D; &#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;; &#x2F;&#x2F;这是一个 JSON 字符串，本质是一个字符串</span><br></pre></td></tr></table></figure><h2 id="JSON-和-JavaScript-对象互转"><a href="#JSON-和-JavaScript-对象互转" class="headerlink" title="JSON 和 JavaScript 对象互转"></a><strong>JSON 和 JavaScript 对象互转</strong></h2><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; JSON.parse(&#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;);</span><br><span class="line">&#x2F;&#x2F;结果是 &#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;</span><br></pre></td></tr></table></figure><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var json &#x3D; JSON.stringify(&#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;);</span><br><span class="line">&#x2F;&#x2F;结果是 &#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;</span><br></pre></td></tr></table></figure><h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a><strong>代码测试</strong></h2><p>1、新建一个module ，springmvc-05-json ， 添加web的支持</p><p>2、在web目录下新建一个 json-1.html ， 编写测试内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON_秦疆<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="comment">//编写一个js的对象</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="javascript">       name:<span class="string">&quot;秦疆&quot;</span>,</span></span><br><span class="line">       age:3,</span><br><span class="line"><span class="javascript">       sex:<span class="string">&quot;男&quot;</span></span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="javascript">   <span class="comment">//将js对象转换成json字符串</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(user);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(str);</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">//将json字符串转换为js对象</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> user2 = <span class="built_in">JSON</span>.parse(str);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(user2.age,user2.name,user2.sex);</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><h3 id="表示对象"><a href="#表示对象" class="headerlink" title="表示对象"></a>表示对象</h3><p>对象是一个无序的“‘名称/值’对”集合。一个对象以{左括号开始，}右括号结束。每个“名称”后跟一个:冒号；“‘名称/值’ 对”之间使用,逗号分隔。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;``&quot;firstName&quot;``: ``&quot;Brett&quot;``, ``&quot;lastName&quot;``: ``&quot;McLaughlin&quot;``&#125;                    </span><br></pre></td></tr></table></figure><h3 id="表示数组"><a href="#表示数组" class="headerlink" title="表示数组"></a>表示数组</h3><p>和普通的 JS 数组一样，JSON 表示数组的方式也是使用方括号 []。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; ``&quot;people&quot;:[ ``&#123;``&quot;firstName&quot;: &quot;Brett&quot;,      ``&quot;lastName&quot;:&quot;McLaughlin&quot;    ``&#125;,   ``&#123;    ``&quot;firstName&quot;:&quot;Jason&quot;,``&quot;lastName&quot;:&quot;Hunter&quot;``&#125;``]``&#125;</span><br></pre></td></tr></table></figure><h2 id="Json与XML的比较"><a href="#Json与XML的比较" class="headerlink" title="Json与XML的比较"></a>Json与XML的比较</h2><blockquote><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>JSON和<a href="https://baike.baidu.com/item/XML">XML</a>的可读性可谓不相上下，一边是简易的语法，一边是规范的标签形式，很难分出胜负。</p><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><p>XML天生有很好的扩展性，JSON当然也有，没有什么是XML可以扩展而JSON却不能扩展的。不过JSON在Javascript主场作战，可以存储Javascript复合对象，有着xml不可比拟的优势。</p><h3 id="编码难度"><a href="#编码难度" class="headerlink" title="编码难度"></a>编码难度</h3><p>XML有丰富的<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A0%81%E5%B7%A5%E5%85%B7">编码工具</a>，比如Dom4j、Dom、SAX等，JSON也有提供的工具。无工具的情况下，相信熟练的开发人员一样能很快的写出想要的xml文档和JSON<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6">字符</a>串，不过，xml文档要多很多结构上的字符。</p><h3 id="解码难度"><a href="#解码难度" class="headerlink" title="解码难度"></a>解码难度</h3><p><a href="https://baike.baidu.com/item/XML">XML</a>的解析方式有两种：</p><p>一是通过文档模型解析，也就是通过父标签索引出一组标记。例如：xmlData.getElementsByTagName(“tagName”)，但是这样是要在预先知道文档结构的情况下使用，无法进行通用的封装。</p><p>另外一种方法是遍历节点（document 以及 childNodes）。这个可以通过<a href="https://baike.baidu.com/item/%E9%80%92%E5%BD%92">递归</a>来实现，不过解析出来的数据仍旧是形式各异，往往也不能满足预先的要求。</p><p>凡是这样可扩展的结构数据解析起来一定都很困难。</p><p>JSON也同样如此。如果预先知道JSON结构的情况下，使用JSON进行数据传递简直是太美妙了，可以写出很实用美观可读性强的代码。如果你是纯粹的前台开发人员，一定会非常喜欢JSON。但是如果你是一个应用开发人员，就不是那么喜欢了，毕竟xml才是真正的结构化<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">标记语言</a>，用于进行数据传递。</p><p>而如果不知道JSON的结构而去解析JSON的话，那简直是噩梦。费时费力不说，代码也会变得冗余拖沓，得到的结果也不尽人意。但是这样也不影响众多前台开发人员选择JSON。因为json.js中的toJSONString()就可以看到JSON的字符串结构。当然对于不是经常使用这个字符串的人，这样做仍旧是噩梦。常用JSON的人看到这个字符串之后，就对JSON的结构很明了了，就更容易的操作JSON。</p><p>以上是在Javascript中仅对于数据传递的xml与JSON的解析。在Javascript地盘内，JSON毕竟是主场作战，其优势当然要远远优越于xml。如果JSON中存储Javascript复合对象，而且不知道其结构的话，我相信很多程序员也一样是哭着解析JSON的。</p><p>除了上述之外，JSON和<a href="https://baike.baidu.com/item/XML">XML</a>还有另外一个很大的区别在于有效数据率。JSON作为数据包格式传输的时候具有更高的效率，这是因为JSON不像XML那样需要有严格的闭合标签，这就让有效数据量与总数据包比大大提升，从而减少同等数据流量的情况下，网络的传输压力。</p><h3 id="实例比较"><a href="#实例比较" class="headerlink" title="实例比较"></a>实例比较</h3><p>XML和JSON都使用<a href="https://baike.baidu.com/item/%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%B9%E6%B3%95">结构化方法</a>来标记数据，下面来做一个简单的比较。</p><p>用XML表示中国部分省市数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?&#96;&#96;xml&#96; &#96;version&#96;&#96;&#x3D;&#96;&#96;&quot;1.0&quot;&#96; &#96;encoding&#96;&#96;&#x3D;&#96;&#96;&quot;utf-8&quot;&#96;&#96;?&gt;&#96;&#96;&lt;&#96;&#96;country&#96;&#96;&gt;&#96;&#96;  &#96;&#96;&lt;&#96;&#96;name&#96;&#96;&gt;中国&lt;&#x2F;&#96;&#96;name&#96;&#96;&gt;&#96;&#96;  &#96;&#96;&lt;&#96;&#96;province&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#96;&#96;name&#96;&#96;&gt;黑龙江&lt;&#x2F;&#96;&#96;name&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#96;&#96;cities&#96;&#96;&gt;&#96;&#96;      &#96;&#96;&lt;&#96;&#96;city&#96;&#96;&gt;哈尔滨&lt;&#x2F;&#96;&#96;city&#96;&#96;&gt;&#96;&#96;      &#96;&#96;&lt;&#96;&#96;city&#96;&#96;&gt;大庆&lt;&#x2F;&#96;&#96;city&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#x2F;&#96;&#96;cities&#96;&#96;&gt;&#96;&#96;  &#96;&#96;&lt;&#x2F;&#96;&#96;province&#96;&#96;&gt;&#96;&#96;  &#96;&#96;&lt;&#96;&#96;province&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#96;&#96;name&#96;&#96;&gt;广东&lt;&#x2F;&#96;&#96;name&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#96;&#96;cities&#96;&#96;&gt;&#96;&#96;      &#96;&#96;&lt;&#96;&#96;city&#96;&#96;&gt;广州&lt;&#x2F;&#96;&#96;city&#96;&#96;&gt;&#96;&#96;      &#96;&#96;&lt;&#96;&#96;city&#96;&#96;&gt;深圳&lt;&#x2F;&#96;&#96;city&#96;&#96;&gt;&#96;&#96;      &#96;&#96;&lt;&#96;&#96;city&#96;&#96;&gt;珠海&lt;&#x2F;&#96;&#96;city&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#x2F;&#96;&#96;cities&#96;&#96;&gt;&#96;&#96;  &#96;&#96;&lt;&#x2F;&#96;&#96;province&#96;&#96;&gt;&#96;&#96;  &#96;&#96;&lt;&#96;&#96;province&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#96;&#96;name&#96;&#96;&gt;台湾&lt;&#x2F;&#96;&#96;name&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#96;&#96;cities&#96;&#96;&gt;&#96;&#96;      &#96;&#96;&lt;&#96;&#96;city&#96;&#96;&gt;台北&lt;&#x2F;&#96;&#96;city&#96;&#96;&gt;&#96;&#96;      &#96;&#96;&lt;&#96;&#96;city&#96;&#96;&gt;高雄&lt;&#x2F;&#96;&#96;city&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#x2F;&#96;&#96;cities&#96;&#96;&gt;&#96;&#96;  &#96;&#96;&lt;&#x2F;&#96;&#96;province&#96;&#96;&gt;&#96;&#96;  &#96;&#96;&lt;&#96;&#96;province&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#96;&#96;name&#96;&#96;&gt;新疆&lt;&#x2F;&#96;&#96;name&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#96;&#96;cities&#96;&#96;&gt;&#96;&#96;      &#96;&#96;&lt;&#96;&#96;city&#96;&#96;&gt;乌鲁木齐&lt;&#x2F;&#96;&#96;city&#96;&#96;&gt;&#96;&#96;    &#96;&#96;&lt;&#x2F;&#96;&#96;cities&#96;&#96;&gt;&#96;&#96;  &#96;&#96;&lt;&#x2F;&#96;&#96;province&#96;&#96;&gt;&#96;&#96;&lt;&#x2F;&#96;&#96;country&#96;&#96;&gt;</span><br></pre></td></tr></table></figure><p>用JSON表示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#96;&#96;  &#96;&#96;&quot;name&quot;: &quot;中国&quot;,&#96;&#96;  &#96;&#96;&quot;province&quot;: [&#123;&#96;&#96;    &#96;&#96;&quot;name&quot;: &quot;黑龙江&quot;,&#96;&#96;    &#96;&#96;&quot;cities&quot;: &#123;&#96;&#96;      &#96;&#96;&quot;city&quot;: [&quot;哈尔滨&quot;, &quot;大庆&quot;]&#96;&#96;    &#96;&#96;&#125;&#96;&#96;  &#96;&#96;&#125;, &#123;&#96;&#96;    &#96;&#96;&quot;name&quot;: &quot;广东&quot;,&#96;&#96;    &#96;&#96;&quot;cities&quot;: &#123;&#96;&#96;      &#96;&#96;&quot;city&quot;: [&quot;广州&quot;, &quot;深圳&quot;, &quot;珠海&quot;]&#96;&#96;    &#96;&#96;&#125;&#96;&#96;  &#96;&#96;&#125;, &#123;&#96;&#96;    &#96;&#96;&quot;name&quot;: &quot;台湾&quot;,&#96;&#96;    &#96;&#96;&quot;cities&quot;: &#123;&#96;&#96;      &#96;&#96;&quot;city&quot;: [&quot;台北&quot;, &quot;高雄&quot;]&#96;&#96;    &#96;&#96;&#125;&#96;&#96;  &#96;&#96;&#125;, &#123;&#96;&#96;    &#96;&#96;&quot;name&quot;: &quot;新疆&quot;,&#96;&#96;    &#96;&#96;&quot;cities&quot;: &#123;&#96;&#96;      &#96;&#96;&quot;city&quot;: [&quot;乌鲁木齐&quot;]&#96;&#96;    &#96;&#96;&#125;&#96;&#96;  &#96;&#96;&#125;]&#96;&#96;&#125;</span><br></pre></td></tr></table></figure><p>可以看到，JSON 简单的语法格式和清晰的层次结构明显要比 XML 容易阅读，并且在数据交换方面，由于 JSON 所使用的字符要比 XML 少得多，可以大大得节约传输数据所占用的带宽。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Json&quot;&gt;&lt;a href=&quot;#Json&quot; class=&quot;headerlink&quot; title=&quot;Json&quot;&gt;&lt;/a&gt;Json&lt;/h1&gt;&lt;h2 id=&quot;什么是JSON？&quot;&gt;&lt;a href=&quot;#什么是JSON？&quot; class=&quot;headerlink&quot; title=&quot;什</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Json" scheme="https://a2914475618.github.io/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>数据结构复习整理</title>
    <link href="https://a2914475618.github.io/2021/04/03/post%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B0%8F%E5%A6%99%E6%8B%9B/"/>
    <id>https://a2914475618.github.io/2021/04/03/post%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%B0%8F%E5%A6%99%E6%8B%9B/</id>
    <published>2021-04-03T09:24:02.000Z</published>
    <updated>2021-04-23T07:15:42.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构中的小妙招（更新中）"><a href="#数据结构中的小妙招（更新中）" class="headerlink" title="数据结构中的小妙招（更新中）"></a>数据结构中的小妙招（更新中）</h1><blockquote><p>前言：本节用于收藏我数据结构中的一些知识点，易错，难的题目，欢迎收看</p></blockquote><h2 id="所有相关结构的定义"><a href="#所有相关结构的定义" class="headerlink" title="所有相关结构的定义"></a>所有相关结构的定义</h2><h3 id="线性表的顺序存储"><a href="#线性表的顺序存储" class="headerlink" title="线性表的顺序存储"></a>线性表的顺序存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType elem[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> last;</span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>1.GetData(L,i,*e)  查找的是线性表中的第i个元素,结果返回值存在e中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetData</span><span class="params">(SeqList L,<span class="keyword">int</span> number,ElemType* ret)</span> </span>&#123;<span class="comment">//Number equals the idx which plused one.</span></span><br><span class="line"><span class="keyword">if</span> (number&lt;<span class="number">1</span> || number&gt;ListLength(L)) </span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">*ret = L.elem[number - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.Locate(L,e)  查找与e值相等的值，返回的是该元素的序号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate</span><span class="params">(SeqList L, <span class="keyword">int</span> dst)</span> </span>&#123;<span class="comment">//@return The number of dst</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= L.last; ++i)</span><br><span class="line"><span class="keyword">if</span> (L.elem[i] == dst)</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.InsList(*L,n,e)   在n个元素之前插入值为e的元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsList</span><span class="params">(SeqList* L, <span class="keyword">int</span> number, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (number &lt;<span class="number">1</span> || number &gt; L-&gt;last + <span class="number">2</span> || L-&gt;last &gt;= MAX_SIZE - <span class="number">1</span>) </span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = L-&gt;last; k &gt;= number - <span class="number">1</span>; --k)</span><br><span class="line">L-&gt;elem[k + <span class="number">1</span>] = L-&gt;elem[k];</span><br><span class="line">L-&gt;elem[number - <span class="number">1</span>] = e;</span><br><span class="line">++(L-&gt;last);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.DelList(*L,i,*e)  删除第i个元素，用指针e存返回值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelList</span><span class="params">(SeqList *L,<span class="keyword">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;last+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;删除位置不合法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *e=L-&gt;elem[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(k=i;k&lt;=L-&gt;last;k++)&#123;</span><br><span class="line">        L-&gt;elem[k<span class="number">-1</span>]=L-&gt;elem[k];</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">      L-&gt;last--;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.clear方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.last&#x3D;-1;</span><br></pre></td></tr></table></figure><h3 id="线性表的链式存储"><a href="#线性表的链式存储" class="headerlink" title="线性表的链式存储"></a>线性表的链式存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>*<span class="title">next</span>;</span></span><br><span class="line">&#125;Node,*LinkList;</span><br></pre></td></tr></table></figure><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><p>1.InitList(*L)  创建带头节点的空链表，用*的原因是因为函数里不能return 一个链表，所以通过指向单链表头指针的指针来创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(LinkList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 创建带头结点的空链表L</span></span><br><span class="line">    *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));  <span class="comment">// 生成头结点</span></span><br><span class="line">    (*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.ListLength(L) 返回的是单链表L中元素的个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 统计带头结点的单链表L中数据元素的个数</span></span><br><span class="line">    Node *p;  <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    p=L-&gt;next;  j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;   j++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.CreateFromTail(L) 尾插法创建单链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateFromTail</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 根据依次输入的数据元素的值，创建带头结点的单链表L</span></span><br><span class="line">    Node *r, *s;  ElemType c;</span><br><span class="line"></span><br><span class="line">    r = L;</span><br><span class="line">    <span class="keyword">while</span> ( (c=getchar())!=<span class="string">&#x27;$&#x27;</span> )</span><br><span class="line">    &#123;   s=(Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span> (!s) <span class="keyword">return</span> ERROR;</span><br><span class="line">        s-&gt;data=c;</span><br><span class="line">        r-&gt;next=s;</span><br><span class="line">        r=s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尾插法形成的单链表逻辑顺序与插入元素顺序相同</p><p>与头插法的不同之处在于多定义了一个节点用来存放表尾节点位置，而头插法是每次插在L的表头后面，所以逻辑顺序与插入元素顺序相反。</p><p>4.<img src="https://s3.ananas.chaoxing.com/doc/39/f8/24/1549eb27b140cb0b619905717aab3301/thumb/11.png" alt="img"></p><p>5.Node *Get(L,i)  在带头结点的单链表L中查找第i(1≤i≤n)个结点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *<span class="title">Get</span><span class="params">(LinkList L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 在带头结点的单链表L中查找第i(1≤i≤n)个结点</span></span><br><span class="line">    <span class="comment">// 若找到，则返回该结点的存储位置; 否则返回NULL</span></span><br><span class="line">    Node *p;  <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span>)  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    p=L-&gt;next;  j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;   j++;</span><br><span class="line">        <span class="keyword">if</span> (i==j)  <span class="keyword">break</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>6.Node *Locate(L,e)   在带头结点的单链表L中查找其值与e相等的结点 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *<span class="title">Locate</span><span class="params">(LinkList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 在带头结点的单链表L中查找其值与e相等的结点 </span></span><br><span class="line">    <span class="comment">// 若找到，则返回该结点的存储位置，否则返回NULL</span></span><br><span class="line">    Node *p;</span><br><span class="line">    </span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;   <span class="keyword">if</span> (p-&gt;data==e)  <span class="keyword">break</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7.返回第i个节点的元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetData</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 当第i个元素存在时，其值赋给e并返回OK，否则返回ERROR</span></span><br><span class="line">    Node *p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !( p=Get(L,i) ) ) <span class="keyword">return</span> ERROR;  <span class="comment">// 第i个元素不存在</span></span><br><span class="line">    *e=p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.插入操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 在带头结点的单链表L的第i个元素之前插入元素e</span></span><br><span class="line">    Node *pre, *s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span>)  <span class="keyword">return</span> ERROR;</span><br><span class="line">    pre=( (i==<span class="number">1</span>) ? L : Get(L,i<span class="number">-1</span>) );  <span class="comment">// 找插入位置的前驱</span></span><br><span class="line">    <span class="keyword">if</span> (pre==<span class="literal">NULL</span>)</span><br><span class="line">        &#123; <span class="built_in">printf</span>(<span class="string">&quot;插入位置不合理！&quot;</span>);  <span class="keyword">return</span> ERROR; &#125;</span><br><span class="line">    s=(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    s-&gt;data=e;  s-&gt;next=pre-&gt;next;  pre-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>9.删除操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 在带头结点的单链表L中删除第i个元素   </span></span><br><span class="line">    Node *pre, *r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span>)  <span class="keyword">return</span> ERROR;</span><br><span class="line">    pre=( (i==<span class="number">1</span>) ? L : Get(L,i<span class="number">-1</span>) );  <span class="comment">// 找被删结点的前驱</span></span><br><span class="line">    <span class="keyword">if</span> (pre==<span class="literal">NULL</span> || pre-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        &#123; <span class="built_in">printf</span>(<span class="string">&quot;被删结点的位置不合理！&quot;</span>);  <span class="keyword">return</span> ERROR; &#125;</span><br><span class="line">    r=pre-&gt;next;  pre-&gt;next=r-&gt;next;</span><br><span class="line">    *e=r-&gt;data;  <span class="built_in">free</span>(r);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Stack_Size 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">StackElementType elem[Stack_Size];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125;SeqStack;</span><br></pre></td></tr></table></figure><h4 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h4><p>1.初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将S初始化为一个空栈</span></span><br><span class="line">S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clear 即把S-&gt;top=-1</p><p>2.进栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SeqStack *S, StackElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将数据元素x进栈S，若栈S已满，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==Stack_Size<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">S-&gt;top++;</span><br><span class="line">S-&gt;elem[S-&gt;top]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.出栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SeqStack *S, StackElementType *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 将栈S的栈顶元素出栈，通过x返回</span></span><br><span class="line">    <span class="comment">// 若栈S为空，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">*x=S-&gt;elem[S-&gt;top];</span><br><span class="line">S-&gt;top--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.取栈顶元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop</span><span class="params">(SeqStack *S,StackElementType *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 取栈S的栈顶元素，通过x返回</span></span><br><span class="line">    <span class="comment">// 若栈S为空，返回FALSE，否则返回TRUE</span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">*x=S-&gt;elem[S-&gt;top];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.是否为空，是否为满</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断栈S是否为空栈，是返回TRUE，否则返回FALSE </span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(SeqStack *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">// 判断栈S是否已满，是返回TRUE，否则返回FALSE </span></span><br><span class="line"><span class="keyword">if</span>(S-&gt;top==Stack_Size<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的链式存储"><a href="#栈的链式存储" class="headerlink" title="栈的链式存储"></a>栈的链式存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    StackElementType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkStackNode;</span><br><span class="line"><span class="keyword">typedef</span> LinkStackNode *LinkStack;</span><br></pre></td></tr></table></figure><h4 id="基本操作-3"><a href="#基本操作-3" class="headerlink" title="基本操作"></a>基本操作</h4><p>1.栈空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmity</span><span class="params">(LinkStack top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top—&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.链栈进栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(LinkStack top,StackElementType x)</span></span>&#123;</span><br><span class="line">    LinkStackNode *temp;</span><br><span class="line">    temp=(LinkStackNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkStackNode));</span><br><span class="line">    <span class="keyword">if</span>(temp==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    temp-&gt;data=x;</span><br><span class="line">    temp-&gt;next=top-&gt;next;</span><br><span class="line">    top-&gt;next=temp;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.链栈出栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(LinkStack top,StackElementType *x)</span></span>&#123;</span><br><span class="line">    LinkStackNode *temp;</span><br><span class="line">    temp=top-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(temp==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    top-&gt;next=temp-&gt;next;</span><br><span class="line">    *x=temp-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3.ananas.chaoxing.com/doc/13/92/43/7f8a70d2014a555c6f1fedc09b157191/thumb/25.png" alt="img"></p><p><img src="https://s3.ananas.chaoxing.com/doc/13/92/43/7f8a70d2014a555c6f1fedc09b157191/thumb/26.png" alt="img"></p><h3 id="队列的链式存储"><a href="#队列的链式存储" class="headerlink" title="队列的链式存储"></a>队列的链式存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    QueueElementType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkQueueNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    LinkQueueNode *front;</span><br><span class="line">    LinkQueueNode *rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><h4 id="基本操作-4"><a href="#基本操作-4" class="headerlink" title="基本操作"></a>基本操作</h4><p>1.初始化操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(LinkQueue *Q)</span></span>&#123;</span><br><span class="line">    Q-&gt;front=(LinkQueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueueNode));</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;front!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        Q-&gt;rear=Q-&gt;front;</span><br><span class="line">        Q-&gt;front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.入队操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnterQueue</span><span class="params">(LinkQueue *Q,QueueElementType)</span></span>&#123;</span><br><span class="line">    LinkQueueNode *NewNode;</span><br><span class="line">    NewNode=(LinkQueueNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueue));</span><br><span class="line">    <span class="keyword">if</span>(NewNode!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        NewNode-&gt;data=x;</span><br><span class="line">        NewNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        Q-&gt;rear-&gt;next=NewNode;</span><br><span class="line">        Q-&gt;rear=NewNode;<span class="comment">//让尾指针指向新的节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.出队操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteQueue</span><span class="params">(LinkQueue *Q,QueueElementType *x)</span></span>&#123;</span><br><span class="line">    LinkQueueNode *p;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;front==Q-&gt;rear) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p=Q-&gt;front-&gt;next;</span><br><span class="line">    Q-&gt;front-&gt;next=p-&gt;next;<span class="comment">//队头元素出队</span></span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;rear==p)<span class="comment">//队中只有一个元素，则P出队成为空队</span></span><br><span class="line">        Q-&gt;rear=Q-&gt;front;</span><br><span class="line">    *x=p-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">QueueElementType element[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;SeqQueue;</span><br></pre></td></tr></table></figure><h4 id="基本操作-5"><a href="#基本操作-5" class="headerlink" title="基本操作"></a>基本操作</h4><p>1.初始化操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SeqQueue *Q)</span></span>&#123;</span><br><span class="line">Q-&gt;front=Q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.入队操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnterQueue</span><span class="params">(SeqQueue *Q,QueueElementType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((Q-&gt;rear+<span class="number">1</span>)%MAXSIZE==Q-&gt;front) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//尾指针+1追上头指针，标志队列已经满了</span></span><br><span class="line">    Q-&gt;element[Q-&gt;rear]=x;</span><br><span class="line">    Q-&gt;rear=(Q-&gt;rear+<span class="number">1</span>)%MAXSIZE;<span class="comment">//重新设置队尾指针</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.出队操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleQueue</span><span class="params">(SeqQueue *Q,QueueElementType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;front==Q-&gt;rear) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    *x=Q-&gt;element[Q-&gt;front];</span><br><span class="line">    Q-&gt;front=(Q-&gt;front+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的链式存储"><a href="#二叉树的链式存储" class="headerlink" title="二叉树的链式存储"></a>二叉树的链式存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>*<span class="title">LChild</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>*<span class="title">RChild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTtee;</span><br></pre></td></tr></table></figure><h4 id="基本操作-6"><a href="#基本操作-6" class="headerlink" title="基本操作"></a>基本操作</h4><h2 id="判断出栈序列的合法性c"><a href="#判断出栈序列的合法性c" class="headerlink" title="判断出栈序列的合法性c"></a>判断出栈序列的合法性c</h2><ul><li>出栈序列中的每个数后面的比它小的数，是按递减排列的。</li></ul><p>简化规则描述：</p><p>1、假设入栈顺序为1234。</p><p>1）若出栈序列为4123，显然不满足上述要求，因为对于4，它后面比它小的数字序列为123，而123是一个递加系列即不是递减排列，所以不是合法出栈序列。    </p><p>2）若出栈系列为3142，也不合法，因为3后面比它小的1和2不是递减排列的。    </p><p>3）若出栈系列为1234，则合法，因为对于每一个数字它后面没有比它小的数字。   </p><p>2、假设入栈顺序为123456789abcdef。    </p><p>1）若出栈系列为67d51f94e2ba83c，因为对于d，它后面比它小的19或123或ac等等都不是递减的，所以不合法。    </p><p>2）若出栈系列为379a8b65c4ed21f，可以证明是合法的出栈顺序。因为对于每一个数字它后面没有比它小的数字而且是按递减排列的。 </p><p>3、证明：</p><p>假设入栈顺序为1234……n，可知在栈中的元素从栈顶到栈底一定是按严格递减排列的,而且每个数i进栈之前,比i小的数一定已经进栈了。</p><p>所以比i小的数要不然已经出栈,要不然在栈中，如果还在栈中则一定在i的下面，按严格递减排列,如此可见如果比i小的数还在栈中则一定在i之后输出,所以输出序列中在i后面的比i小的数一定按严格递减排列.否则出栈系列不合法。</p><p><a href="https://iknow-pic.cdn.bcebos.com/6a63f6246b600c331b414b12174c510fd9f9a134"><img src="https://iknow-pic.cdn.bcebos.com/6a63f6246b600c331b414b12174c510fd9f9a134?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_jpg" alt="img"></a></p><p>1．进栈（PUSH）算法</p><p>①若TOP≥n时，则给出溢出信息，作出错处理（进栈前首先检查栈是否已满，满则溢出；不满则作②）；</p><p>②置TOP=TOP+1（栈指针加1，指向进栈地址）；</p><p>③S(TOP)=X，结束（X为新进栈的元素）；</p><p>2．退栈（POP）算法</p><p>①若TOP≤0，则给出下溢信息，作出错处理(退栈前先检查是否已为空栈， 空则下溢；不空则作②)；</p><p>②X=S(TOP)，（退栈后的元素赋给X）：</p><p>③TOP=TOP-1，结束（栈指针减1，指向栈顶）。</p><h2 id="相关真题收集"><a href="#相关真题收集" class="headerlink" title="相关真题收集"></a>相关真题收集</h2><p>1.最大容量为n的循环队列采用教材例题所示的存储结构，队尾指针是rear，队头是front，则队空的条件是（ B）。</p><ul><li> A</li></ul><p>  (rear+1)%n==front</p><ul><li> B</li></ul><p>  rear==front</p><ul><li> C</li></ul><p>  rear+1==front</p><ul><li> D<a href="javascript:void(0);">(rear-l)%n==front</a></li></ul><p>解题方法：只要判断rear=front=0的选项即可</p><p>2.循环队列存储在数组A[0..m]中，则入队时的操作为（D ）。</p><ul><li> A</li></ul><p>  rear=rear+1</p><ul><li> B</li></ul><p>  rear=(rear+1)%(m-1)</p><ul><li> C</li></ul><p>  rear=(rear+1)%m</p><ul><li> D<a href="javascript:void(0);">rear=(rear+1)%(m+1)</a></li></ul><p>3.设栈S和队列Q的初始状态为空，元素e1、e2、e3、e4、e5和e6依次进入栈S，一个元素出栈后即进入Q，若6个元素出队的序列是e2、e4、e3、e6、e5和e1，则栈S的容量至少应该是（B ）。</p><ul><li><p>A   2</p></li><li><p>B   3</p></li><li><p>C   4</p></li><li><p> D    <a href="javascript:void(0);">6</a></p></li></ul><p>解题方法：   出队先出e2表示e1，e2进栈后出e2(这时栈的容量最大为2)，接着出e4，e3表示e3，e4进栈后出e4，e3(这时栈的容量最大为3)，再出e6，e5表示e5，e6进栈后出e6，e5(这时栈的容量最大为3)，最后出e1，所以答案应该是 3</p><h2 id="更新中…"><a href="#更新中…" class="headerlink" title="更新中…"></a>更新中…</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构中的小妙招（更新中）&quot;&gt;&lt;a href=&quot;#数据结构中的小妙招（更新中）&quot; class=&quot;headerlink&quot; title=&quot;数据结构中的小妙招（更新中）&quot;&gt;&lt;/a&gt;数据结构中的小妙招（更新中）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前言：本节用于收藏</summary>
      
    
    
    
    <category term="数据结构" scheme="https://a2914475618.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构资料" scheme="https://a2914475618.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
</feed>
