<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一位可可爱爱的编橙爱好者</title>
  <icon>https://www.gravatar.com/avatar/560d60bc4bbfec4b10e3ea23f4d15430</icon>
  <subtitle>欢迎来到爱的小屋</subtitle>
  <link href="https://a2914475618.github.io/atom.xml" rel="self"/>
  
  <link href="https://a2914475618.github.io/"/>
  <updated>2021-10-08T07:33:40.076Z</updated>
  <id>https://a2914475618.github.io/</id>
  
  <author>
    <name>Lu sir</name>
    <email>2914475618@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker</title>
    <link href="https://a2914475618.github.io/2021/10/05/Docker/"/>
    <id>https://a2914475618.github.io/2021/10/05/Docker/</id>
    <published>2021-10-05T09:03:06.000Z</published>
    <updated>2021-10-08T07:33:40.076Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="docker" scheme="https://a2914475618.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>spring boot</title>
    <link href="https://a2914475618.github.io/2021/10/05/spring-boot/"/>
    <id>https://a2914475618.github.io/2021/10/05/spring-boot/</id>
    <published>2021-10-05T05:23:46.000Z</published>
    <updated>2021-10-08T07:32:57.680Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="spring boot" scheme="https://a2914475618.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>shiro</title>
    <link href="https://a2914475618.github.io/2021/10/01/shiro/"/>
    <id>https://a2914475618.github.io/2021/10/01/shiro/</id>
    <published>2021-10-01T01:44:24.000Z</published>
    <updated>2021-10-08T07:33:10.098Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="shiro" scheme="https://a2914475618.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="https://a2914475618.github.io/2021/09/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>https://a2914475618.github.io/2021/09/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</id>
    <published>2021-09-29T10:46:09.000Z</published>
    <updated>2021-09-29T11:26:26.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><p>声明：该笔记内容来自清华大学软件工程<a href="https://www.xuetangx.com/course/THU08091000367/7754180?channel=i.area.recent_search">软件工程 - 清华大学 - 学堂在线 (xuetangx.com)</a></p><h2 id="软件工程概述"><a href="#软件工程概述" class="headerlink" title="软件工程概述"></a>软件工程概述</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><ul><li>软件是软件工程的研究对象，也是软件工程的产品形态与客观存在</li><li>工程是将理论和知识应用于实践的科学，其目的是经济有效的解决实际问题</li><li>软件致力解决如何以经济有效的方法开发高质量软件</li><li>包含软件和工程</li></ul><h3 id="2-本质特征"><a href="#2-本质特征" class="headerlink" title="2.本质特征"></a>2.本质特征</h3><ul><li>复杂性</li><li>一致性</li><li>可变性-》造成软件开发困难的原因</li><li>不可见性</li></ul><h3 id="3-面临的挑战"><a href="#3-面临的挑战" class="headerlink" title="3.面临的挑战"></a>3.面临的挑战</h3><ol><li>客户不满意</li><li>项目过程失控</li><li>风险与成本问题</li><li>无力管理团队</li></ol><blockquote><p>软件 能独立存在，需要依附于 定的环境（如硬件、网络以及其他软件）</p><p> 用户层次： 系列实现各种功能的图形化界面</p><p>计算机层次：软件 = 程序 + 数据 + 文档</p><p> 程序：计算机 以接受的 系列指令，运行时 以提供所要求的的功能和性能</p><p> 数据：使得程序能够适当地操作信息的数据结构</p><p> 文档：描述程序的研制过程、方法和使用的图文资料</p></blockquote><h3 id="4-基本概念"><a href="#4-基本概念" class="headerlink" title="4.基本概念"></a>4.基本概念</h3><p>将系统性的、规范化的、 定量的方法应用于软件的开发、运行和维护，即工程化应用到软件商</p><h3 id="5-基本要素"><a href="#5-基本要素" class="headerlink" title="5.基本要素"></a>5.基本要素</h3><ol><li><p>过程</p><p> 一系列开发活动，将客户需求转化成客户满意的产品</p><ol><li>问题定义</li><li>需求开发</li><li>软件设计</li><li>软件构造</li><li>软件测试</li></ol></li><li><p>方法</p><ol><li>面向过程：以算法作为基本构造单元，强调自顶向下的功能分解，将功能和数据进行一定程度的分离</li><li>面向对象：以类为基本程序单元，对象是类的实例化，对象之间以消息传递为基本手段</li><li>面向构件：寻求比类的粒度更大的且易于 用的构件，期望实现软件的再工程</li><li>面向服务：在应用表现层次上将软件构件化，即应用业务过程由服务组 ，而服务由构件组装而 </li></ol></li><li><p>工具</p><ol><li>软件构造工具</li><li>软件测试工具</li><li>软件工程管理工具</li><li>软件维护工具</li><li>软件建模工具</li></ol></li></ol><h3 id="6-软件开发基本策略"><a href="#6-软件开发基本策略" class="headerlink" title="6.软件开发基本策略"></a>6.软件开发基本策略</h3><ol><li><p>软件复用</p><p>构造一个新的系统 必从零做起，直接复用已有的构件进行组装。</p></li><li><p>分而治之</p><p>将一个大的问题分解成若干个简单的问题，然后逐个解决</p></li><li><p>逐步演进</p><p>软件开发是自底向上逐步有序的生长过程</p></li><li><p>优化折中</p></li></ol><h2 id="软件开发过程"><a href="#软件开发过程" class="headerlink" title="软件开发过程"></a>软件开发过程</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><h4 id="过程方法"><a href="#过程方法" class="headerlink" title="过程方法"></a>过程方法</h4><blockquote><p>过程方法是系统地识别和管理组织内所使用的过程，保证更有效地获得期望的结果</p></blockquote><h4 id="软件过程分类"><a href="#软件过程分类" class="headerlink" title="软件过程分类"></a>软件过程分类</h4><ol><li><p>管理过程</p><p>衡量和评价实现过程和 过程的效能建立起组织的质量管理体系</p></li><li><p>实现过程</p><p>提供有价值的产品或服务的关键性活动</p></li><li><p>支持过程</p></li></ol><h4 id="软件开发过程-1"><a href="#软件开发过程-1" class="headerlink" title="软件开发过程"></a>软件开发过程</h4><ol><li>问题提出</li><li>可行性研究</li><li>可行性分析报告</li><li>需求开发</li><li>软件设计</li><li>软件构造</li><li>软件测试</li><li>软件维护</li><li>软件项目管理</li><li>软件配置管理</li></ol><h3 id="2-软件过程模型"><a href="#2-软件过程模型" class="headerlink" title="2.软件过程模型"></a>2.软件过程模型</h3><blockquote><p>软件过程模型是对软件过程的抽象描述</p></blockquote><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><p>将基本的开发活动看做是一系列界限分明的独立阶段，这是一种计划驱动的软件过程，有利于规范软件开发活动</p><h4 id="原始化模型"><a href="#原始化模型" class="headerlink" title="原始化模型"></a>原始化模型</h4><p>原型是 一个部分开发的产品，用于加强对系统地理解，有助于明确需求和选择可行的设计策略。</p><h4 id="迭代化开发（增量）"><a href="#迭代化开发（增量）" class="headerlink" title="迭代化开发（增量）"></a>迭代化开发（增量）</h4><p>将描述、开发和验证等不同活动交织在 起，在开发过程中建立一系列版本，将系统一部分一部分地逐步交付。</p><h4 id="可转换模型"><a href="#可转换模型" class="headerlink" title="可转换模型"></a>可转换模型</h4><p>利用自动化的手段，通过一系列转换将需求规格化为一个可 交付使用的系统。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;软件工程&quot;&gt;&lt;a href=&quot;#软件工程&quot; class=&quot;headerlink&quot; title=&quot;软件工程&quot;&gt;&lt;/a&gt;软件工程&lt;/h1&gt;&lt;p&gt;声明：该笔记内容来自清华大学软件工程&lt;a href=&quot;https://www.xuetangx.com/course/THU</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="软件工程" scheme="https://a2914475618.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://a2914475618.github.io/2021/09/27/Mybatis/"/>
    <id>https://a2914475618.github.io/2021/09/27/Mybatis/</id>
    <published>2021-09-27T01:29:28.000Z</published>
    <updated>2021-10-07T07:40:42.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><blockquote><p>界面层： 和用户打交道的， 接收用户的请求参数， 显示处理结果的。（jsp ，html ，servlet）<br>业务逻辑层： 接收了界面层传递的数据，计算逻辑，调用数据库，获取数据<br>数据访问层： 就是访问数据库， 执行对数据的查询，修改，删除等等的。</p><p>三层对应的包<br>    界面层： controller包 （servlet）<br>    业务逻辑层： service 包（XXXService类）<br>    数据访问层： dao包（XXXDao类）</p><p>   三层中类的交互<br>    用户使用界面层–&gt; 业务逻辑层—&gt;数据访问层（持久层）–&gt;数据库（mysql）</p><p>   三层对应的处理框架<br>    界面层—servlet—springmvc（框架）<br>    业务逻辑层—service类–spring（框架）<br>    数据访问层—dao类–mybatis（框架）</p></blockquote><h2 id="基础简介"><a href="#基础简介" class="headerlink" title="基础简介"></a>基础简介</h2><blockquote><p> mybatis框架<br>  一个框架，早期叫做ibatis, 代码在github。<br>  mybatis是 MyBatis SQL Mapper Framework for Java （sql映射框架）<br>  1）sql mapper :sql映射<br>     可以把数据库表中的一行数据 映射为 一个java对象。<br>   一行数据可以看做是一个java对象。操作这个对象，就相当于操作表中的数据</p><p>  2） Data Access Objects（DAOs） : 数据访问 ， 对数据库执行增删改查。</p></blockquote><p> mybatis提供了哪些功能：</p><blockquote><ol><li>提供了创建Connection ,Statement, ResultSet的能力 ，不用开发人员创建这些对象了</li><li>提供了执行sql语句的能力， 不用你执行sql</li><li>提供了循环sql， 把sql的结果转为java对象， List集合的能力<br>  while (rs.next()) {<br>Student stu = new Student();<br>stu.setId(rs.getInt(“id”));<br>stu.setName(rs.getString(“name”));<br>stu.setAge(rs.getInt(“age”));<br>//从数据库取出数据转为 Student 对象，封装到 List 集合<br>stuList.add(stu);<br>  }<br>   4.提供了关闭资源的能力，不用你关闭Connection, Statement, ResultSet</li></ol><p> 开发人员做的是： 提供sql语句<br> 最后是： 开发人员提供sql语句–mybatis处理sql—开发人员得到List集合或java对象（表中的数据）</p></blockquote><p> 总结：<br> mybatis是一个sql映射框架，提供的数据库的操作能力。增强的JDBC,使用mybatis让开发人员集中精神写sql就可以了，不必关心Connection,Statement,ResultSet的创建，销毁，sql的执行。 </p><h2 id="约束文件"><a href="#约束文件" class="headerlink" title="约束文件"></a>约束文件</h2><p>核心配置文件的约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>映射文件的约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><blockquote><ol><li>添加Mybatis的坐标</li><li>创建user数据表</li><li>编写User实体类</li><li>编写映射文件UserMapper.xml</li><li>编写核心文件sqlMapConfig.xml</li><li>编写测试类</li></ol></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><ol><li><p>mybatis执行更新操作时  要提交事务  </p><p>sqlSession.commit();</p></li></ol></blockquote><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lusir.dao.UserImpl;</span><br><span class="line"><span class="keyword">import</span> com.lusir.domin.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/27 - 10:20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获得核心配置文件</span></span><br><span class="line">        InputStream is= Resources.getResourceAsStream(<span class="string">&quot;sqlMapperConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获得Session工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        <span class="comment">//获得session回话对象</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//执行相关操作</span></span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用CEUD映射配置"><a href="#常用CEUD映射配置" class="headerlink" title="常用CEUD映射配置"></a>常用CEUD映射配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.lusir.domin.User&quot;</span>&gt;</span></span><br><span class="line">        select * from  user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增加操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lusir.domin.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.lusir.domin.User&quot;</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">        set  username=#&#123;username&#125;,password=$&#123;password&#125;</span><br><span class="line">        where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        delete  from  user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心数据库环境配置"><a href="#核心数据库环境配置" class="headerlink" title="核心数据库环境配置"></a>核心数据库环境配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///db1?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com.lusir.mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="相关标签"><a href="#相关标签" class="headerlink" title="相关标签"></a>相关标签</h3><blockquote><p>environment标签</p><ol><li>transactionManager<ol><li>JDBC  使用JDBC的提交和回滚设置 依赖从数据源得到的连接来管理事务作用域</li><li>MANAGED 什么也不做</li></ol></li><li>dataSource<ol><li> POOLED 使用连接池</li><li>UNPOOLED  不使用连接池  每次请求时打开和关闭连接</li><li>JNDI</li></ol></li></ol><p>mapper标签   加载映射配置文件</p><ol><li>resource</li><li>url</li><li>class</li><li>package  扫包  将包内的映射器接口实现全部注册为映射器</li></ol><p>properties标签</p><p>可以将数据源的信息单独抽取成一个properties文件，可以额外配置的propertis文件</p><p>typeAliases标签</p><p>在核心配置文件中定义别名，可以在resultType 和paramsType 中使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.lusir.domin.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="DAO层通过代理来创建对象"><a href="#DAO层通过代理来创建对象" class="headerlink" title="DAO层通过代理来创建对象"></a>DAO层通过代理来创建对象</h3><p>必须满足规范：</p><ol><li>映射文件中的命名空间必须为对应接口的全类名</li><li>映射文件中的resultType必须与接口中对应方法返回类型相同，paramType同上</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lusir.dao.UserImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from  user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lusir.domin.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/27 - 14:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserImpl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lusir.dao.UserImpl;</span><br><span class="line"><span class="keyword">import</span> com.lusir.domin.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/27 - 10:20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获得核心配置文件</span></span><br><span class="line">        InputStream is= Resources.getResourceAsStream(<span class="string">&quot;sqlMapperConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获得Session工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        <span class="comment">//获得session回话对象</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//执行相关操作</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; userList = sqlSession.selectList(&quot;userMapper.findAll&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(userList);</span></span><br><span class="line">        <span class="comment">//使用这种方法来创建对象</span></span><br><span class="line">        UserImpl mapper = sqlSession.getMapper(UserImpl.class);</span><br><span class="line">        List&lt;User&gt; all = mapper.findAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主要类的介绍"><a href="#主要类的介绍" class="headerlink" title="主要类的介绍"></a>主要类的介绍</h2><blockquote><p>  1） Resources： mybatis中的一个类， 负责读取主配置文件<br>   InputStream in = Resources.getResourceAsStream(“mybatis.xml”);</p><p>  2)SqlSessionFactoryBuilder : 创建SqlSessionFactory对象，<br>     SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();<br>    //创建SqlSessionFactory对象<br>    SqlSessionFactory factory = builder.build(in);</p><p> 3）SqlSessionFactory ： 重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。<br>    在整个项目中，有一个就够用了。</p><p>   SqlSessionFactory:接口 ， 接口实现类： DefaultSqlSessionFactory<br>   SqlSessionFactory作用： 获取SqlSession对象。SqlSession sqlSession = factory.openSession();</p><p>   openSession()方法说明：<br>    1. openSession() ：无参数的， 获取是非自动提交事务的SqlSession对象<br>        2. openSession(boolean): openSession(true) 获取自动提交事务的SqlSession.<br>                 openSession(false) 非自动提交事务的SqlSession对象</p><p> 4)SqlSession:<br>  SqlSession接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback()<br>  SqlSession接口的实现类DefaultSqlSession。</p><p>  使用要求： SqlSession对象不是线程安全的，需要在方法内部使用， 在执行sql语句之前，使用openSession()获取SqlSession对象。<br>  在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。</p></blockquote><ol><li>动态代理： 使用SqlSession.getMapper(dao接口.class) 获取这个dao接口的对象</li><li>传入参数： 从java代码中把数据传入到mapper文件的sql语句中。<br>  1）parameterType ： 写在mapper文件中的 一个属性。 表示dao接口中方法的参数的数据类型。<br> 例如StudentDao接口<br> public Student selectStudentById(Integer id) </li></ol><ol start="2"><li>一个简单类型的参数：<br>简单类型： mybatis把java的基本数据类型和String都叫简单类型。<br>在mapper文件获取简单类型的一个参数的值，使用 #{任意字符}</li></ol><p>   接口：public Student selectStudentById(Integer id)<br>   mapper:select id,name, email,age from student where id=#{studentId}</p><ol start="3"><li><p>多个参数，使用@Param命名参数<br> 接口 public List<Student> selectMulitParam(@Param(“myname”) String name, @Param(“myage”) Integer age)<br> 使用 @Param(“参数名”) String name<br> mapper文件：</p></li><li><p>多个参数，使用java对象</p></li></ol><pre><code>语法 #&#123;属性名&#125;</code></pre><p>  vo: value object , 放一些存储数据的类。比如说 提交请求参数， name ,age<br>     现在想把name ,age 传给一个service 类。</p><p>  vo: view object , 从servlet把数据返回给浏览器使用的类，表示显示结果的类。</p><p>  pojo: 普通的有set， get方法的java类。 普通的java对象</p><pre><code> Servlet --- StudentService( addStudent( MyParam param) )</code></pre><p>  entity（domain域）: 实体类， 和数据库中的表对应的类， </p><ol start="5"><li><h1 id="和"><a href="#和" class="headerlink" title="和 $"></a>和 $</h1></li></ol><p>   select id,name, email,age from student where id=#{studentId}</p><p>的结果： select id,name, email,age from student where id=? </p><pre><code>select id,name, email,age from student where id=$&#123;studentId&#125;</code></pre><p>   $ 的结果：select id,name, email,age from student where id=1001</p><p>   String sql=”select id,name, email,age from student where id=” + “1001”;<br>   使用的Statement对象执行sql， 效率比PreparedStatement低。</p><p>   $:可以替换表名或者列名， 你能确定数据是安全的。可以使用$</p><p>和 $区别</p><ol><li><p>#使用 ？在sql语句中做站位的， 使用PreparedStatement执行sql，效率高</p></li><li><p>#能够避免sql注入，更安全。</p></li><li><p>$不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低</p></li><li><p>$有sql注入的风险，缺乏安全性。</p></li><li><p>$:可以替换表名或者列名</p></li><li><p>mybatis的输出结果<br>mybatis执行了sql语句，得到java对象。</p></li></ol><p>   1）resultType结果类型， 指sql语句执行完毕后， 数据转为的java对象， java类型是任意的。<br>    resultType结果类型的它值 1. 类型的全限定名称  2. 类型的别名， 例如 java.lang.Integer别名是int</p><pre><code>处理方式：  1. mybatis执行sql语句， 然后mybatis调用类的无参数构造方法，创建对象。  2. mybatis把ResultSet指定列值付给同名的属性。  &lt;select id=&quot;selectMultiPosition&quot; resultType=&quot;com.bjpowernode.domain.Student&quot;&gt; select id,name, email,age from student&lt;/select&gt; 对等的jdbc ResultSet rs = executeQuery(&quot; select id,name, email,age from student&quot; ) while(rs.next())&#123;    Student student = new Student();      student.setId(rs.getInt(&quot;id&quot;));      student.setName(rs.getString(&quot;name&quot;)) &#125;</code></pre><ol start="2"><li>定义自定义类型的别名</li></ol><pre><code>1）在mybatis主配置文件中定义，使&lt;typeAlias&gt;定义别名2）可以在resultType中使用自定义别名</code></pre><p>  3）resultMap:结果映射， 指定列名和java对象的属性对应关系。<br>    1）你自定义列值赋值给哪个属性<br>     2）当你的列名和属性名不一样时，一定使用resultMap</p><pre><code> resultMap和resultType不要一起用，二选一</code></pre><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><blockquote><p> 动态sql: sql的内容是变化的，可以根据条件获取到不同的sql语句。<br>      主要是where部分发生变化。</p><p> 动态sql的实现，使用的是mybatis提供的标签， <if> ,<where>,<foreach></p><p> 1)<if>是判断条件的，<br>  语法<if test="判断java对象的属性值"><br>      部分sql语句<br>    </if></p><p> 2)<where> 用来包含 多个<if>的， 当多个if有一个成立的， <where>会自动增加一个where关键字，<br>      并去掉 if中多余的 and ，or等。</p><p> 3）<foreach> 循环java中的数组，list集合的。 主要用在sql的in语句中。<br>  学生id是 1001,1002,1003的三个学生</p><p>   select * from student where id in (1001,1002,1003)</p><p>   public List<Student> selectFor(List<Integer> idlist)</p><p>   List<Integer> list = new …<br>   list.add(1001);<br>   list.add(1002);<br>   list.add(1003);</p><p>   dao.selectFor(list)</p>   <foreach collection="" item="" open="" close="" separator="">       #{xxx}  </foreach><p>  collection:表示接口中的方法参数的类型， 如果是数组使用array , 如果是list集合使用list<br>   item:自定义的，表示数组和集合成员的变量<br>   open:循环开始是的字符<br>   close:循环结束时的字符<br>  separator:集合成员之间的分隔符</p><p> 4）sql代码片段， 就是复用一些语法<br>  步骤<br>   1.先定义 <sql id="自定义名称唯一"> sql语句， 表名，字段等 </sql><br>  2.再使用， <include refid="id的值" /></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">数据库的属性配置文件： 把数据库连接信息放到一个单独的文件中。 和mybatis主配置文件分开。</span><br><span class="line">目的是便于修改，保存，处理多个数据库的信息。</span><br><span class="line"></span><br><span class="line">   1）在resources目录中定义一个属性配置文件， xxxx.properties ,例如 jdbc.properties</span><br><span class="line">    在属性配置文件中， 定义数据，格式是 key&#x3D;value </span><br><span class="line">     key： 一般使用 . 做多级目录的。</span><br><span class="line">     例如 jdbc.mysql.driver  , jdbc.driver, mydriver</span><br><span class="line">     jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">     jdbc.url&#x3D;jdbc:mysql&#x2F;&#x2F;.....</span><br><span class="line">     jdbc.username&#x3D;root</span><br><span class="line">     jdbc.password&#x3D;123456</span><br><span class="line">     </span><br><span class="line">   2）在mybatis的主配置文件，使用&lt;property&gt; 指定文件的位置</span><br><span class="line">     在需要使用值的地方， $&#123;key&#125;</span><br><span class="line"></span><br><span class="line"> 2.mapper文件，使用package指定路径</span><br><span class="line">   &lt;mappers&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--第二种方式： 使用包名</span><br><span class="line">      name: xml文件（mapper文件）所在的包名, 这个包中所有xml文件一次都能加载给mybatis</span><br><span class="line">      使用package的要求：</span><br><span class="line">       1. mapper文件名称需要和接口名称一样， 区分大小写的一样</span><br><span class="line">       2. mapper文件和dao接口需要在同一目录</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;com.bjpowernode.dao&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><h2 id="核心配置文件深入"><a href="#核心配置文件深入" class="headerlink" title="核心配置文件深入"></a>核心配置文件深入</h2><blockquote><p>typeHandlers标签   实现数据库类型字段和java字段之间的转换</p><p>plugins标签</p><p>pageHelper插件</p><ol><li>步骤：</li><li>导入PageHelper</li><li>在Mybatis核心配置文件中配置pageHelper</li><li>测试分页数据获取</li></ol><p>相关用法：</p><ol><li>PageHelper.startPage()</li><li>PageInfo</li></ol></blockquote><h2 id="配置一对一"><a href="#配置一对一" class="headerlink" title="配置一对一"></a>配置一对一</h2><p>重点在于association标签使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动指定字段与实体属性的映射关系</span></span><br><span class="line"><span class="comment">            column: 数据表的字段名称</span></span><br><span class="line"><span class="comment">            property：实体的属性名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;result column=&quot;uid&quot; property=&quot;user.id&quot;&gt;&lt;/result&gt;</span></span><br><span class="line"><span class="comment">        &lt;result column=&quot;username&quot; property=&quot;user.username&quot;&gt;&lt;/result&gt;</span></span><br><span class="line"><span class="comment">        &lt;result column=&quot;password&quot; property=&quot;user.password&quot;&gt;&lt;/result&gt;</span></span><br><span class="line"><span class="comment">        &lt;result column=&quot;birthday&quot; property=&quot;user.birthday&quot;&gt;&lt;/result&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            property: 当前实体(order)中的属性名称(private User user)</span></span><br><span class="line"><span class="comment">            javaType: 当前实体(order)中的属性的类型(User)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">         SELECT *,o.id oid FROM orders o,USER u WHERE o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置一对多"><a href="#配置一对多" class="headerlink" title="配置一对多"></a>配置一对多</h2><p>配置多表   加入resultmap</p><p>重点在与collection标签使用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;userMap&quot;</span> type=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        &lt;id column=&quot;uid&quot; property=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line">        &lt;result column=&quot;username&quot; property=&quot;username&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column=&quot;password&quot; property=&quot;password&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;!--配置集合信息</span><br><span class="line">            property:集合名称</span><br><span class="line">            ofType：当前集合中的数据类型</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;collection property=<span class="string">&quot;orderList&quot;</span> ofType=<span class="string">&quot;order&quot;</span>&gt;</span><br><span class="line">            &lt;!--封装order的数据--&gt;</span><br><span class="line">            &lt;id column=&quot;oid&quot; property=&quot;id&quot;&gt;&lt;/id&gt;</span><br><span class="line">            &lt;result column=&quot;ordertime&quot; property=&quot;ordertime&quot;&gt;&lt;/result&gt;</span><br><span class="line">            &lt;result column=&quot;total&quot; property=&quot;total&quot;&gt;&lt;/result&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;findAll&quot;</span> resultMap=<span class="string">&quot;userMap&quot;</span>&gt;</span><br><span class="line">        SELECT *,o.id oid FROM USER u,orders o WHERE u.id=o.uid</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="配置多对多"><a href="#配置多对多" class="headerlink" title="配置多对多"></a>配置多对多</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD </span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&lt;mapper&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string">    &lt;resultMap id=&quot;</span>userRoleMap<span class="meta-string">&quot; type=&quot;</span>user<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;!--user的信息--&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;id column=&quot;</span>userId<span class="meta-string">&quot; property=&quot;</span>id<span class="meta-string">&quot;&gt;&lt;/id&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;result column=&quot;</span>username<span class="meta-string">&quot; property=&quot;</span>username<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;result column=&quot;</span>password<span class="meta-string">&quot; property=&quot;</span>password<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;result column=&quot;</span>birthday<span class="meta-string">&quot; property=&quot;</span>birthday<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;!--user内部的roleList信息--&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;collection property=&quot;</span>roleList<span class="meta-string">&quot; ofType=&quot;</span>role<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">            &lt;id column=&quot;</span>roleId<span class="meta-string">&quot; property=&quot;</span>id<span class="meta-string">&quot;&gt;&lt;/id&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">            &lt;result column=&quot;</span>roleName<span class="meta-string">&quot; property=&quot;</span>roleName<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">            &lt;result column=&quot;</span>roleDesc<span class="meta-string">&quot; property=&quot;</span>roleDesc<span class="meta-string">&quot;&gt;&lt;/result&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        &lt;/collection&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">    &lt;/resultMap&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string">    &lt;select id=&quot;</span>findUserAndRoleAll<span class="meta-string">&quot; resultMap=&quot;</span>userRoleMap<span class="meta-string">&quot;&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        SELECT * FROM USER u,sys_user_role ur,sys_role r WHERE u.id=ur.userId AND ur.roleId=r.id</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">    &lt;/select&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string"></span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&lt;/mapper&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><blockquote><ol><li>Result  实现结果集封装</li><li>Results 可以于Result一起使用，封装多个结果集</li><li>One实现一对一结果集</li><li>Many实现一对多结果集</li></ol><p>注解开发还是需要在sqlMapConfig文件中配置mappers</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">package</span>=<span class="string">&quot;要扫描注解的接口全类名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Order;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.One;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from orders where uid=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from orders&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;ordertime&quot;,property = &quot;ordertime&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;total&quot;,property = &quot;total&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;user&quot;, //要封装的属性名称</span></span><br><span class="line"><span class="meta">                    column = &quot;uid&quot;, //根据那个字段去查询user表的数据</span></span><br><span class="line"><span class="meta">                    javaType = User.class, //要封装的实体类型</span></span><br><span class="line"><span class="meta">                    //select属性 代表查询那个接口的方法获得数据</span></span><br><span class="line"><span class="meta">                    one = @One(select = &quot;com.itheima.mapper.UserMapper.findById&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Select(&quot;select *,o.id oid from orders o,user u where o.uid=u.id&quot;)</span></span><br><span class="line"><span class="comment">    @Results(&#123;</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;oid&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;ordertime&quot;,property = &quot;ordertime&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;total&quot;,property = &quot;total&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;uid&quot;,property = &quot;user.id&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;username&quot;,property = &quot;user.username&quot;),</span></span><br><span class="line"><span class="comment">            @Result(column = &quot;password&quot;,property = &quot;user.password&quot;)</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    public List&lt;Order&gt; findAll();*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一对多和多对多"><a href="#一对多和多对多" class="headerlink" title="一对多和多对多"></a>一对多和多对多</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(id=true ,column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;username&quot;,property = &quot;username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;password&quot;,property = &quot;password&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;orderList&quot;,</span></span><br><span class="line"><span class="meta">                    column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                    javaType = List.class,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.itheima.mapper.OrderMapper.findByUid&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndOrderAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM USER&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true,column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;username&quot;,property = &quot;username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;password&quot;,property = &quot;password&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;roleList&quot;,</span></span><br><span class="line"><span class="meta">                    column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                    javaType = List.class,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.itheima.mapper.RoleMapper.findByUid&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndRoleAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h2><p>……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis&quot;&gt;&lt;a href=&quot;#Mybatis&quot; class=&quot;headerlink&quot; title=&quot;Mybatis&quot;&gt;&lt;/a&gt;Mybatis&lt;/h1&gt;&lt;h2 id=&quot;三层架构&quot;&gt;&lt;a href=&quot;#三层架构&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Mybatis" scheme="https://a2914475618.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>For My Love</title>
    <link href="https://a2914475618.github.io/2021/09/25/My-Love/"/>
    <id>https://a2914475618.github.io/2021/09/25/My-Love/</id>
    <published>2021-09-25T05:34:35.000Z</published>
    <updated>2021-09-25T05:50:37.050Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to real.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
    <category term="love" scheme="https://a2914475618.github.io/tags/love/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://a2914475618.github.io/2021/09/25/Maven/"/>
    <id>https://a2914475618.github.io/2021/09/25/Maven/</id>
    <published>2021-09-25T02:21:58.000Z</published>
    <updated>2021-09-29T11:35:53.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><blockquote><p>pom.xml</p><p> |</p><p>POM (Project Object Model) 项目对象模型</p><p> |</p><p>依赖管理 (Dependency)</p><p> |</p><p>本地</p><p> |</p><p>私服</p><p>|</p><p>中央仓库</p><p>核心：POM 依赖管理 项目构建生命周期 (包含无数的插件，maven自带)</p><p>好处：开发结构统一</p></blockquote><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ol><li>需要配置MAVEN_HOME</li><li>测试 mvn</li></ol><h2 id="Maven基础知识"><a href="#Maven基础知识" class="headerlink" title="Maven基础知识"></a>Maven基础知识</h2><h3 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1.仓库"></a>1.仓库</h3><p>存储资源，包含各种jar包</p><p>本地仓库配置 在conf文件夹下有一个settting.xml文件，修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;LocalRepository&gt;你想要放置的目录&lt;&#x2F;LocalRepository&gt;</span><br></pre></td></tr></table></figure><h3 id="2-坐标"><a href="#2-坐标" class="headerlink" title="2.坐标"></a>2.坐标</h3><p>maven中定位资源的位置</p><ol><li>groupId 定义隶属于组织名称</li><li>artifactId 当前项目的名称</li><li>version 项目版本号</li><li>packaging 定义项目的打包方式</li></ol><h2 id="IDEA中使用Maven"><a href="#IDEA中使用Maven" class="headerlink" title="IDEA中使用Maven"></a>IDEA中使用Maven</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h1&gt;&lt;h2 id=&quot;什么是Maven&quot;&gt;&lt;a href=&quot;#什么是Maven&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Maven" scheme="https://a2914475618.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="https://a2914475618.github.io/2021/09/22/Java%E5%9F%BA%E7%A1%80/"/>
    <id>https://a2914475618.github.io/2021/09/22/Java%E5%9F%BA%E7%A1%80/</id>
    <published>2021-09-22T02:21:58.000Z</published>
    <updated>2021-10-07T09:29:22.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="易混淆知识点"><a href="#易混淆知识点" class="headerlink" title="易混淆知识点"></a>易混淆知识点</h2><blockquote><ol><li><p>List 是一个有序集合，可以存放重复的数据 (有序：存进是什么顺序，取出时还是什么顺序)</p><pre><code>    (1).ArrayList 底层是数组适合查询，不适合增删元素。    (2).LiskedList 底层是双向链表适合增删元素，不适合查询操作。    (3).Vector 底层和ArrayList相同，但是Vector是线程安全的，效率较低很少使用</code></pre></li><li><p>Set 是一个无序集合，不允许放重复的数据 (无序不可重复，存进和取出的顺序不一样)</p><pre><code>    (1).HashSet 底层是哈希表/散列表    (2).TreeSet 继承sartedSet接口（无需不可重复，但存进去的元素可以按照元素的大小自动排序）</code></pre></li><li><p>Map 是一个无序集合，以键值对的方式存放数据，键对象不允许重复，值对象可以重复。</p></li></ol><p>​        (1).HashMap实现不同步，线程不安全。 HashTable线程安全</p><p>​        (2).HashMap中的key-value都是存储在Entry中的。</p><p>​        (3).HashMap可以存null键和null值，不保证元素的顺序恒久不变，它的底层使用的是数组和链表，通过hashCode()方法和equals方法保证键的唯一性</p></blockquote><h2 id="数据类型使用"><a href="#数据类型使用" class="headerlink" title="数据类型使用"></a>数据类型使用</h2><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><blockquote><p>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。</p><p>HashSet 允许有 null 值。</p><p>HashSet 是无序的，即不会记录插入的顺序。</p><p>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</p><p>HashSet 实现了 Set 接口。</p></blockquote><ol><li>add()  添加元素</li><li>contains()  判断元素是否存在</li><li>remove   删除元素</li><li>clear   清除所有元素</li><li>size   计算元素数量</li><li>foreash来进行迭代元素</li><li></li></ol><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ol><li><p>length()  获取长度</p></li><li><p>charAt(int index) 获取某个位置的字符</p></li><li><p>indexOf(char  ch)   返回某个字符第一次出现的位置</p><p>indexOf(char  ch,int  fromIndex)   从某个位置开始查询</p><p>LastIndexOf(char  index)    从最后查询某个字符出现的位置</p></li><li><p>boolean contains(str)   是否有字串</p></li><li><p>boolean  isEmpty()   判断长度是否为0</p></li><li><p>boolean  startWith(str)  是否以指定内容开头</p></li><li><p>boolean  endsWith(str)   是否以指定内容结尾</p></li><li><p>boolean  equals(str)    判断字符串内容是否相同</p></li><li><p>char[]  toCharArray()   将字符串转为字符数组</p></li><li><p>valueOf(int)  将基本类型转为字符串</p></li><li><p>String  replace(oldchar,newchar)</p></li><li><p>String split(regex)</p></li><li><p>String substring(begin)</p></li><li><p>String substring(begin,end)</p></li><li><p>toUpperCase()  大写</p></li><li><p>toLowerCase()  小写</p></li><li><p>trim()  去除多个空格</p></li><li><p>compareTo(String)  对两个字符串进行自然顺序的比较</p></li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ol><li><p>add(Object e) 向ArrayList集合中添加元素</p></li><li><p>size()   返回ArrayList集合中元素个数</p></li><li><p>get(int index)  返回集合中对应位置的元素</p></li><li><p>add(int index,Object e) 向指定位置添加元素</p></li><li><p>set(int i ,Object e) 将索引i位置替换为e并返回替代的元素</p></li><li><p>clear() 清空集合中的元素</p></li><li><p>isEmpty() 判断集合容器是否为空</p></li><li><p>iterator()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">Iterator&lt;String&gt; iterator=list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>contains(Object o) 判断集合中是否含有指定元素</p></li><li><p>remove(int index)  移除列表中指定位置的元素，并返回</p></li><li><p>remove(Object o) 移除指定元素</p></li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ol><li>put(key,value)  将映射存到Map集合中</li><li>get(Object o)  返回指定键所映射的值，没有key对应的值则返回null,即获取Key对应的value</li><li>size()   返回Map集合中数据数量</li><li>clear()  清空Map集合</li><li>isEmpty()  判断集合中是否有数据</li><li>remove(Object key) 移除</li><li>values()  返回Map集合中所有value组成的Collection数据类型</li><li>keySet()  返回Map集合中所有key组成的Set集合</li><li>entrySet()  将Map集合每个key-value转换为一个Entry对象并返回由所有的Entry对象组成的Set集合</li><li>iterator迭代器<ol><li>与get方法结合</li><li>与entry对象结合</li></ol></li></ol><h3 id="如何选择集合类型"><a href="#如何选择集合类型" class="headerlink" title="如何选择集合类型"></a>如何选择集合类型</h3><blockquote><p>是否是键值对象形式:<br>是：Map<br>键是否需要排序:<br>是：TreeMap<br>否：HashMap<br>不知道，就使用HashMap。<br>　　 否：Collection<br>元素是否唯一:<br>是：Set<br>元素是否需要排序:<br>是：TreeSet<br>否：HashSet<br>不知道，就使用HashSet　<br>否：List<br>要安全吗:<br>是：Vector(其实我们也不用它,后面我们讲解了多线程以后，我在给你回顾用谁)<br>否：ArrayList或者LinkedList<br>增删多：LinkedList<br>查询多：ArrayList<br>不知道，就使用ArrayList</p></blockquote><h2 id="类型相互转换"><a href="#类型相互转换" class="headerlink" title="类型相互转换"></a>类型相互转换</h2><ol><li><p>char 转换为 String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = String.valueOf(<span class="string">&#x27;c&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>String 转换为 char</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回指定位置的字符</span></span><br><span class="line">String.charAt(index)</span><br><span class="line"><span class="comment">//包含整个String的字符数组</span></span><br><span class="line">String.toCharArray()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h1&gt;&lt;h2 id=&quot;易混淆知识点&quot;&gt;&lt;a href=&quot;#易混淆知识点&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="Java基础" scheme="https://a2914475618.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring mvc</title>
    <link href="https://a2914475618.github.io/2021/09/20/Spring-mvc/"/>
    <id>https://a2914475618.github.io/2021/09/20/Spring-mvc/</id>
    <published>2021-09-20T08:21:15.000Z</published>
    <updated>2021-10-07T05:14:27.139Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="spring mvc" scheme="https://a2914475618.github.io/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://a2914475618.github.io/2021/09/18/spring/"/>
    <id>https://a2914475618.github.io/2021/09/18/spring/</id>
    <published>2021-09-18T00:53:50.000Z</published>
    <updated>2021-10-07T07:09:16.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote><p>Ioc(反转控制)  和  Aop</p><p>方便解耦</p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.springtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/18 - 19:24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext ctx=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        User user=ctx.getBean(<span class="string">&quot;user&quot;</span>,User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.go();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lusir.springtest.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IOC概念"><a href="#IOC概念" class="headerlink" title="IOC概念"></a>IOC概念</h2><blockquote><p>对象创建和对象之间的调用过程，交给spring管理</p></blockquote><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><blockquote><p>核心：</p><ol><li>xml解析</li><li>工厂模式<ul><li>利用第三个类来创建对象</li></ul></li><li>反射</li></ol></blockquote><p>Ioc解耦过程</p><blockquote><ol><li>用xml配置文件，配置创建的对象</li><li>创建工厂类，在类中</li><li>通过反射创建对象</li></ol></blockquote><p>Ioc接口</p><blockquote><ol><li><p>Ioc思想基于IOC完成，Ioc容器底层就是对象工厂</p></li><li><p>spring提供IOC容器实现两种方式</p><ul><li>BeanFactory:IOC容器基本实现，是Spring内部使用的接口，不提供给开发人员使用——加载配置文件的时候不会创建对象，在获取对象时 才会取创建对象</li><li>ApplicationContext：是BeanFactory接口的子接口，提供更多强大的功能，一般由开发人员使用——在加载配置文件的时候就会把文件对象进行创建</li></ul></li></ol></blockquote><p>Ioc操作Bean管理</p><blockquote><ol><li>Bean管理指的是两个操作</li><li>Spring创建对象</li><li>spring注入属性</li></ol></blockquote><blockquote><p>实现方式两种</p><p>1.xml配置文件方式</p><p>2.注解方式</p></blockquote><p>xml创建对象默认执行无参数构造方法</p><blockquote><p>注入属性</p><ol><li><p>set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name指的属性的名字  value指的属性的值  ref是引用对象</span><br></pre></td></tr></table></figure><p>也可以使用P命名空间</p></li><li><p>构造参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">//name 参数名   </span><br></pre></td></tr></table></figure></li></ol><p>注入的三种数据类型</p><ol><li><p>普通数据类型  value</p></li><li><p>引用数据类型  ref</p></li><li><p>集合数据类型   list  map  props set ref引用</p><p>ref标签在集合中注入对象属性</p><p>提取list集合属性注入  引入util</p></li></ol><p>注入空值字面量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reason&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性值包含特殊值符号  写在CDate里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;adress&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入其他配置文件</p><ul><li><p>可以根据层来拆xml   可以根据业务来拆xml</p></li><li><p>在主文件引入其他模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resourve</span>=<span class="string">&quot;xxxxx.xml&quot;</span>  /<span class="attr">import</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="Aop概念"><a href="#Aop概念" class="headerlink" title="Aop概念"></a>Aop概念</h2><blockquote><p>面向切面编程   将各个部分隔离</p><p>不通过修改源代码的方式，在主干里添加功能</p></blockquote><h3 id="底层原理-1"><a href="#底层原理-1" class="headerlink" title="底层原理"></a>底层原理</h3><blockquote><p>使用动态代理</p></blockquote><blockquote><p>两种情况下</p><ol><li><p>有接口，jdk动态代理</p><p>创建接口实现类的代理对象  增强类的方法</p></li><li><p>没有接口，CGLIB动态代理</p><p>创建当前类子类的代理对象  来增强类的方法</p></li></ol></blockquote><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><blockquote><p>proxy类   </p><p>newProxyInstance方法   </p><p>方法参数</p><ol><li><p>类加载器</p></li><li><p>增强方法所在的类，这个类实现的接口，支持多个接口</p></li><li><p>实现InvocationHandler接口，创建代理对象，写增强的方法</p></li><li><p>```java<br>Proxy.newProxyInstance(类加载器，代理对象的类，实现InnocationHandler接口的类)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">            </span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">            </span><br><span class="line">import java.util.Arrays;</span><br><span class="line">            </span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author lusir</span><br><span class="line"> * @date 2021&#x2F;9&#x2F;21 - 16:00</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Class[] interfaces&#x3D;&#123;UserDao.class&#125;;</span><br><span class="line">        UserImpl userDao&#x3D;new  UserImpl();</span><br><span class="line">        &#x2F;&#x2F;</span><br><span class="line">        UserDao u&#x3D;(UserDao) Proxy.newProxyInstance(main.class.getClassLoader(),interfaces,new UserDaoProxy(userDao));</span><br><span class="line">        u.add(1,3);</span><br><span class="line">    &#125;</span><br><span class="line">            </span><br><span class="line">    static class UserDaoProxy implements InvocationHandler&#123;</span><br><span class="line">         Object obj;</span><br><span class="line">        UserDaoProxy (Object obj)&#123;</span><br><span class="line">            this.obj&#x3D;obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">            &#x2F;&#x2F;方法之前</span><br><span class="line">            System.out.println(&quot;这是在方法之前执行的.....&quot;+method.getName()+&quot;传递的参数是&quot;+ Arrays.toString(args));</span><br><span class="line">            &#x2F;&#x2F;执行</span><br><span class="line">           Object res&#x3D;method.invoke(obj,args);</span><br><span class="line">            &#x2F;&#x2F;执行后</span><br><span class="line">            System.out.println(&quot;方法执行完毕.....&quot;);</span><br><span class="line">            return res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/21 - 15:59</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/21 - 15:58</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><blockquote><ol><li><p>连接点</p><p>类里面哪些方法可以被增强，这些方法是连接点</p></li><li><p>切入点</p><p>实际被增强的方法，成为切入点</p></li><li><p>通知（增强）</p><p>实际增强的逻辑部分为通知</p><p>通知类型</p><ol><li>前置通知  方法前</li><li>后置通知  方法后</li><li>环绕通知   方法前后</li><li>异常通知     </li><li>最终通知   finally</li></ol></li><li><p>切面</p><p>把通知应用到切入点的过程</p></li></ol></blockquote><h3 id="AOP操作"><a href="#AOP操作" class="headerlink" title="AOP操作"></a>AOP操作</h3><blockquote><p>用AspectJ实现Aop操作</p><p>AspectJ  独立Aop框架  一般把他和Spring框架一起使用</p><p>实现方式：</p><ol><li>基于XML配置</li><li>基于注解（经常使用）</li></ol><p>切入点表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：对哪个类中的哪个方法进行增强</span><br><span class="line">结构：execution([权限修饰符][返回类型][类的全路径]，[方法名称],([参数列表]))</span><br><span class="line">eg：</span><br><span class="line">execution(* com.lusir.dao.UserDao.add(..))</span><br><span class="line">..表示参数</span><br><span class="line">eg：所有方法增强</span><br><span class="line">execution(* com.lusir.dao.UserDao.*(..))</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="Aop操作（AspectJ注解）"><a href="#Aop操作（AspectJ注解）" class="headerlink" title="Aop操作（AspectJ注解）"></a>Aop操作（AspectJ注解）</h3><blockquote><ol><li><p>创建类，在类里面定义方法</p></li><li><p>创建增强类（编写增强逻辑）</p><p>在增强类里面创建方法，让不同的方法代表不同的通知类型</p></li><li><p>进行通知的配置</p><ol><li>在spring配置文件中，开启注解扫描</li><li>使用注解创建User和UserProxy对象</li><li>在增强类里面添加注解@Aspect</li><li>在spring配置文件中开启生成代理对象</li></ol></li><li><p>配置不同类型的通知</p><ol><li>Before注解表示作为前置通知 ，里面写切入点表达式</li><li>After 后置通知</li><li>AfterReturning  最终通知</li><li>AftrThrowing  异常通知</li><li>Around  环绕通知</li></ol></li><li><p>公共切入点抽取</p><ol><li>加入Pointcut注解</li></ol></li><li><p>有多个增强类对同一个方法增强，设置增强类优先级</p><ol><li>在增强类上添加注解@Order(数字值)，值越小，优先级越高</li></ol></li></ol></blockquote><h2 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><blockquote><p>id  唯一标识</p><p>class   全类名</p><p>scope 指定bean个数   作用域</p><ol><li><p>singleton  默认  单例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例化个数为1</span><br><span class="line">实例化时机：spring核心文件被加载时，实例化配置的Bean实例</span><br><span class="line">bean的生命周期：</span><br><span class="line">   对象创建：当应用加载，创建容器时，对象就被创建了</span><br><span class="line">   对象运行：只要容器在，对象就一直活着</span><br><span class="line">   对象销毁：当应用卸载，销毁容器时，对象就被销毁了</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>prototype  多例的    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例化个数为多个</span><br><span class="line">实例化时机：调用getBean()时实例化BEAN</span><br><span class="line">bean的生命周期：</span><br><span class="line">   对象创建：使用对象时创建按新的实例</span><br><span class="line">   对象运行：只要对象在使用，对象就一直活着</span><br><span class="line">   对象销毁：当对象长时间不用时，被JAVA的垃圾回收器回收了</span><br></pre></td></tr></table></figure></li></ol><p>Bean的生命周期配置：</p><ol><li>init-method  指定初始化方法</li><li>destory-method  指定销毁时方法</li></ol><p>Bean实例化方式</p><ol><li><p>工厂静态方式实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.lusir.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>工厂实例方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;全类名&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>无参构造(最常用)</p></li></ol><p>Bean的依赖注入</p><ol><li>构造方法</li><li>set方法</li></ol><p>Bean的分类</p><ol><li><p>普通Bean   在XML中定义什么返回什么</p></li><li><p>工厂Bean</p><p>创建类，让这个类作为工厂bean，实现接口FactoryBean   getObject方法</p><p>实现接口方法，在实现的方法定义返回的bean类型</p></li></ol></blockquote><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><blockquote><ol><li>通过构造器创建Bean实例（无参数构造）</li><li>为bean的属性设置值和对其他bean引用（调用set方法）</li><li>调用bean的初始化的方法（需要进行配值）</li><li>bean使用</li><li>容器关闭时，销毁bean的方法<ol><li>init-method  指定初始化方法</li><li>destory-method  指定销毁时方法</li></ol></li></ol></blockquote><h4 id="Spring自动装配"><a href="#Spring自动装配" class="headerlink" title="Spring自动装配"></a>Spring自动装配</h4><blockquote><p>根据指定装配规则，Spring自动将匹配的属性值注入,</p><p>aotowire可以实现自动装配</p><p>两个参数  byName  byType (相同类型的会出现问题)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;全类名&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="外部文件注入"><a href="#外部文件注入" class="headerlink" title="外部文件注入"></a>外部文件注入</h4><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;.property文件&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//加上表达式  $&#123;property文件的key值&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Spring相关Api"><a href="#Spring相关Api" class="headerlink" title="Spring相关Api"></a>Spring相关Api</h2><blockquote><ol><li><p>ClassPathXmlApplicationContext</p><p>从类的根路径下加载配置文件</p></li><li><p>FileSystemXmlApplicationContext</p><p>从磁盘路径上加载配置文件   绝对地址</p></li><li><p>AnnotationConfigApplicationContext</p><p>使用注解配置容器时，用此类来创建spring容器</p></li></ol><p>getBean()</p><ol><li>参数1   string id</li><li>参数2   Class 类型</li></ol></blockquote><h2 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h2><h3 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h3><p>注解可以作用在类上，方法上面，属性上面</p><p>注解目的：让配置更加简洁</p><blockquote><p>注解扫描：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.aaaa&quot;</span>&gt;</span>&lt;/context :component-scan&gt;</span><br></pre></td></tr></table></figure><p>@Componeent   创建对象</p><p>@Controller  在WEB层实例化BEAN</p><p>@Autowired//按照数据类型从Spring容器中进行匹配的</p><p>@Qualifier(“Name”)//按照id </p><p>@Resource(name=”userDao”)//相当于上面两个相加</p><p>@Value(“”)//设置普通类型    另外一种使用方法  Value(“${jdbc.driver}”)</p><p>@Scope//设置bean范围</p><p>@PostConstruct  bean 的初始方法</p><p>@PreDestroy  bean的销毁方法</p></blockquote><h3 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h3><blockquote><p>专门创建一个Spring核心配置类，替代xml配置</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20210920130417.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标志该类是Spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//&lt;import resource=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCofiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span>  <span class="comment">//Spring会将当前方法的返回值以指定名称存储到Spring容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注解归总"><a href="#注解归总" class="headerlink" title="注解归总:"></a>注解归总:</h3><blockquote><p>Configuration把一个类作为一个IoC容器，它的某个方法头上如果注册了@Bean，就会作为这个Spring容器中的Bean。<br>@Scope注解 作用域<br>@Lazy(true) 表示延迟初始化</p><p><strong>@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</strong></p><p><strong>@Repository用于标注数据访问组件，即DAO组件。</strong></p><p>***@Service用于标注业务层组件、<br>***</p><p><em><strong>@Controller用于标注控制层组件（如struts中的action）</strong></em></p><p><strong>@Scope用于指定scope作用域的（用在类上）</strong></p><p><strong>@Autowired 默认按类型装配，如果我们想使用按名称装配，可以结合@Qualifier注解一起使用。如下：</strong><br><strong>@Autowired @Qualifier(“personDaoBean”) 存在多个实例配合使用</strong></p><p><strong>@Resource默认按名称装配，当找不到与名称匹配的bean才会按类型装配。</strong></p><p>*<br>@PostConstruct用于指定初始化方法（用在方法上）<br>@PreDestory用于指定销毁方法（用在方法上）<br>@DependsOn：定义Bean初始化及销毁时的顺序<br>@Primary：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常<br>@PostConstruct 初始化注解<br>@PreDestroy 摧毁注解 默认 单例 启动就加载<br>@Async异步方法调用*</p></blockquote><h3 id="注解的区分"><a href="#注解的区分" class="headerlink" title="注解的区分"></a>注解的区分</h3><blockquote><ul><li><p>@Component注解在类上使用表明这个类是个组件类，需要Spring为这个类创建bean。</p></li><li><p>@Bean注解使用在方法上，告诉Spring这个方法将会返回一个Bean对象，需要把返回的对象注册到Spring的应用上下文中</p></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Ioc(反转控制)  和  Aop&lt;/p&gt;
&lt;p&gt;方便解耦&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Spring" scheme="https://a2914475618.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java web</title>
    <link href="https://a2914475618.github.io/2021/09/14/Java-web/"/>
    <id>https://a2914475618.github.io/2021/09/14/Java-web/</id>
    <published>2021-09-14T06:36:56.000Z</published>
    <updated>2021-10-08T07:34:01.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h1><blockquote><p>后期学习路径</p><p>ssm框架  简化web开发的经典框架</p><p>spring boot 简化spring 开发的框架</p><p>spring cloud：微服务开发解决方案</p><p>各种中间件技术：</p><ol><li>redis</li><li>mongodb</li><li>ra’bbi’tmq</li><li>elasticSearch</li></ol><p>容器技术：</p><p>Docker</p><p>业务解决方案</p></blockquote><h2 id="java知识内容补充"><a href="#java知识内容补充" class="headerlink" title="java知识内容补充"></a>java知识内容补充</h2><h3 id="junit单元测试"><a href="#junit单元测试" class="headerlink" title="junit单元测试"></a>junit单元测试</h3><blockquote><p>黑盒测试：关注结果是否正确</p><p>白盒测试：关注程序具体的执行流程</p></blockquote><p>junit：白盒测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;步骤</span><br><span class="line">1.定义一个测试类 名字为 class+Test</span><br><span class="line"></span><br><span class="line">2.定义一个测试方法：可以独立运行</span><br><span class="line">方法名：testADdd</span><br><span class="line">返回值：void</span><br><span class="line">参数列表：空参</span><br><span class="line">3.给方法加@Test</span><br><span class="line">4.导入junit依赖环境</span><br></pre></td></tr></table></figure><blockquote><p>断言：我断言的结果为多少</p><p>Assert.assertEquals</p><p>如果测试的结果与我断言的相同，则测试成功，否则错误</p><p> 注解：</p><p>@Test     单元测试注解</p><p>@Before  在所有的测试方法之前先执行</p><p>@After    在所有的测试方法执行完成后，都会自动执行该方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.junit.CalcTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.go.clac.clac;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.regexp.internal.RESyntaxException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 15:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;close...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clac a=<span class="keyword">new</span> clac();</span><br><span class="line">        <span class="keyword">int</span> result=a.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testDel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        clac b=<span class="keyword">new</span> clac();</span><br><span class="line">        <span class="keyword">int</span> result=b.del(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>框架设计的灵魂</p><p>框架：半成品软件，简化编码</p><p>反射：将类的各个组成部分封装为其他对象。这就是反射机制</p><ul><li>好处：在程序运行中，操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ul><p>获取class对象的方式：</p><ol><li>class.forName(“全类名”)：将字节码加载进内存，返回class对象   多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li><li>类名.class:通过类名的属性 class来获取  多用于参数的传递</li><li>对象.getClass:getclass()在object对象中定义   多用于对象的获取字节码的方式</li></ol></blockquote><h4 id="获取class的对象"><a href="#获取class的对象" class="headerlink" title="获取class的对象"></a>获取class的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 16:02</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.通过全类名获取</span></span><br><span class="line">        Class cls1=Class.forName(<span class="string">&quot;cn.go.demo1.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//2.类名.class</span></span><br><span class="line">        Class cls2=Person.class;</span><br><span class="line">        <span class="comment">//3.对象.getClass</span></span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">        Class cls3=p.getClass();</span><br><span class="line">        <span class="keyword">if</span> (cls3 == cls1) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cls1==cls2)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">true</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结论</span></span><br><span class="line">同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，无论通过那种方式获取的<span class="class"><span class="keyword">class</span>对象都是同一个</span></span><br></pre></td></tr></table></figure><h4 id="class的获取Field方法"><a href="#class的获取Field方法" class="headerlink" title="class的获取Field方法"></a>class的获取Field方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>field[] getFields() 获取所有Public修饰的成员变量</span><br><span class="line"><span class="number">2.</span> <span class="function">field <span class="title">getField</span><span class="params">(string name)</span> 获取其中一个field</span></span><br><span class="line"><span class="function">3.field[] <span class="title">getDeclaredFields</span><span class="params">()</span> 获取所有的成员变量，不考虑修饰符  包括Public</span></span><br><span class="line"><span class="function">4.field <span class="title">getDeclaredField</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"><span class="comment">//私有的不能直接访问  需要忽略访问权限修饰的安全检查</span></span></span><br><span class="line"><span class="function">a.<span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span><span class="comment">//暴力反射  a是一个类的属性字段</span></span></span><br><span class="line"><span class="function"><span class="comment">//带declared  需要通过setAccessible(true) 暴力反射</span></span></span><br><span class="line"><span class="function">获取值 get</span></span><br><span class="line"><span class="function">设置值 set</span></span><br></pre></td></tr></table></figure><h4 id="class的获取Constructor方法"><a href="#class的获取Constructor方法" class="headerlink" title="class的获取Constructor方法"></a>class的获取Constructor方法</h4><blockquote><p>获取构造方法门</p><p>Constructor getConstructors(…paramterTypes)</p><p>得到构造器后可以用她创建对象</p><p>construct.newInstance()</p><p>class.newInstance()</p></blockquote><h4 id="class的获取Methods的方法"><a href="#class的获取Methods的方法" class="headerlink" title="class的获取Methods的方法"></a>class的获取Methods的方法</h4><blockquote><p>获取Method</p><p>Method obj=personClass.getMethod(“eat” )</p><p>执行方法    .invoke()</p><p>Person p =new Person()</p><p>obj.invoke(p)</p><p>获取方法名</p><p>.getName()</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><blockquote><p>写一个框架类，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行    其中任意方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 17:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实现</span></span><br><span class="line"><span class="comment">//    1.配置文件</span></span><br><span class="line"><span class="comment">//    2.反射</span></span><br><span class="line"><span class="comment">//    步骤</span></span><br><span class="line"><span class="comment">//    将需要创建的对象的全类名和需要执行的方法定义在配置文件中</span></span><br><span class="line"><span class="comment">//    在程序中加载读取配置文件</span></span><br><span class="line"><span class="comment">//    使用反射技术来加载类文件进内存</span></span><br><span class="line"><span class="comment">//    创建对象</span></span><br><span class="line"><span class="comment">//    执行方法</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line"><span class="comment">//        1.加载配置文件</span></span><br><span class="line">        Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">//        2.获取class目录下的配置文件</span></span><br><span class="line"><span class="comment">//        loader 类加载器</span></span><br><span class="line">        ClassLoader loader=ReflectTest.class.getClassLoader();</span><br><span class="line"><span class="comment">//        3.获取字节流</span></span><br><span class="line">        InputStream is=loader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line"><span class="comment">//        4.调用加载</span></span><br><span class="line">        pro.load(is);</span><br><span class="line"><span class="comment">//        5.获取配置文件中的数据</span></span><br><span class="line">        String className=pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName=pro.getProperty(<span class="string">&quot;methodsName&quot;</span>);</span><br><span class="line"><span class="comment">//        6.加载该类进内存</span></span><br><span class="line">        Class cls=Class.forName(className);</span><br><span class="line"><span class="comment">//        7.创建对象</span></span><br><span class="line">        Object obj=cls.newInstance();</span><br><span class="line"><span class="comment">//        8.获取方法对象</span></span><br><span class="line">        Method meth=cls.getMethod(methodName);</span><br><span class="line"><span class="comment">//        9.执行方法</span></span><br><span class="line">        meth.invoke(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><blockquote><p>Annotation </p><p>使用注解   @注解名称</p><p>1.编译检查  @override  检查该方法是否重写了父类的方法</p><p>2.编写文档    javadoc 命令</p><p>3.代码分析   使用反射</p></blockquote><h4 id="jdk内置注解"><a href="#jdk内置注解" class="headerlink" title="jdk内置注解"></a>jdk内置注解</h4><blockquote><p>@override</p><p>@oeprecated    表示已过时</p><p>@SuppressWarnings:   压制警告</p><p>@SuppressWarnings(“all”) 一般放在类上</p></blockquote><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><blockquote><p>格式：</p><ol><li>元注解</li><li>public @interface 注解名称{}</li></ol><p>public interface MyAnno extends Java.lang.annotation.Annotation{}</p><p>注解本质上就是一个接口，该接口默认继承</p><p>属性：接口中的抽象方法</p><p>属性的返回值有下列取值：</p><ol><li>基本数据类型</li><li>string</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ol><p>定义了属性，在使用时需要给属性赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">show2</span><span class="params">()</span> <span class="keyword">default</span> &quot;lisi&quot;</span>;</span><br><span class="line">    <span class="function">Person <span class="title">per</span><span class="params">()</span></span>;  <span class="comment">//Person  为枚举类型</span></span><br><span class="line">    <span class="function">MyAnno <span class="title">anno2</span><span class="params">()</span></span>;<span class="comment">//MyAnno  注解</span></span><br><span class="line">    String[] show3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@MyAnno(show1&#x3D;1,show2&#x3D;&quot;zhangsan&quot;)</span><br><span class="line">public class Worker &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;其他同理</span><br></pre></td></tr></table></figure><p>若定义了default  则调用时可以不赋值</p><p>数组赋值时，用{}包裹</p></blockquote><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><blockquote><p>@Target:描述能够作用的位置</p><p>@Retention:描述注解被保留的阶段</p><p>@Documented:描述注解是否被抽取到api文档中</p><p>@Inherited:描述注解是否被子类继承 子类自动继承</p></blockquote><h4 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h4><p>在程序中使用（解析）注解：获取注解中定义的属性值</p><blockquote><p>使用注解可以来代替配置文件</p><p>步骤：</p><ol><li>获取注解定义的位置的对象（class,method,field)</li><li>获取指定的的注解 getAnnotation(class)</li><li>调用注解中的抽象方法获取配置的属性值</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pro(className=&quot;cn.itcast.anno.demo&quot;,methodName=&quot;show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class test=AnnoTest.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取注解对象</span></span><br><span class="line">        Pro an=test.getAnnotation(pro.class);</span><br><span class="line">        </span><br><span class="line">        String className=an.className;</span><br><span class="line">        String methodName=an.methodName;</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        System.out.println(methodName);</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单测试的框架"><a href="#简单测试的框架" class="headerlink" title="简单测试的框架"></a>简单测试的框架</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.go.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.go.clac.clac;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/14 - 19:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Check</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        1.创建计算器对象</span></span><br><span class="line">        clac c=<span class="keyword">new</span> clac();</span><br><span class="line"><span class="comment">//        2.创建字节码文件对象</span></span><br><span class="line">        Class cls=c.getClass();</span><br><span class="line"><span class="comment">//        3.获取该类所有的方法</span></span><br><span class="line">        Method[] methods=cls.getMethods();</span><br><span class="line">        <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent((Check.class)))&#123; <span class="comment">//判断是否有check注解</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(c);<span class="comment">//执行方法</span></span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"><span class="comment">//                    捕获异常</span></span><br><span class="line">                    number ++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><blockquote><p>net start mysql</p><p>net stop mysql</p></blockquote><h3 id="mySql登录"><a href="#mySql登录" class="headerlink" title="mySql登录"></a>mySql登录</h3><blockquote><p>mysql -u root -p root </p><p>mysql -ip -u root -p 密码 </p><p>mysql –host=ip –user=root –password=root</p></blockquote><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><blockquote><p>结构化查询语言</p><p>操作所有的关系型数据库的规则</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;show databases  查看有哪些数据库</span><br></pre></td></tr></table></figure><blockquote><p>sql 语句以分号结尾</p><p>三种注释</p><p>*单行注释  –注释内容 或者 #内容</p><p><em>多行注释   /</em> *  注释内容    */</p><p>DDL(操作数据库、表)</p><p>DQL(查询表中的数据)</p><p>DML(增删改表中的数据)</p><p>DCL(授权)‘</p><p>show create database 数据库名称 </p><p>//查询某个数据库的字符集</p></blockquote><h4 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建数据库</span><br><span class="line">create database db1;</span><br><span class="line">&#x2F;&#x2F;加条件判断</span><br><span class="line">create database if not exists db1;</span><br><span class="line">&#x2F;&#x2F;创建数据库时指定字符集</span><br><span class="line">create database db3 character set gbk;</span><br><span class="line">&#x2F;&#x2F;同时写</span><br><span class="line">cteate databse  if not exists db2 character set gbk;</span><br><span class="line">&#x2F;&#x2F;修改数据库的字符集</span><br><span class="line">alter database db3 character set utf8;</span><br><span class="line">&#x2F;&#x2F;删除数据库</span><br><span class="line">drop database db3;</span><br><span class="line">&#x2F;&#x2F;加入判断</span><br><span class="line">drop database if exists db3;</span><br><span class="line">&#x2F;&#x2F;查询当前正在使用的数据库</span><br><span class="line">select database()</span><br><span class="line">&#x2F;&#x2F;使用数据库</span><br><span class="line">use db1;</span><br></pre></td></tr></table></figure><h4 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>查询数据库中所有表的名称</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询表结构</span><br><span class="line"><span class="keyword">desc</span> 表名</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>创建表  最后一列不需要逗号</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">列名<span class="number">1</span> 数据类型<span class="number">1</span>；</span><br><span class="line">列名<span class="number">2</span> 数据类型<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line">)；   </span><br><span class="line"><span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>) 小数点最后最大<span class="number">5</span>位，保留两位</span><br><span class="line"><span class="type">timestamp</span> 时间戳类型 若没赋值，则默认使用当前系统时间</span><br><span class="line"><span class="type">varchar</span>(<span class="number">20</span>) 指定最大字符长度</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>复制表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu <span class="keyword">like</span> student; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu rename <span class="keyword">to</span> student;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改表的字符集</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="type">character</span> <span class="keyword">set</span> 字符集名称;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>添加一列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span>  列名 数据类型</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改列名称 类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 列名 新列名 新数据类型；</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 新数据类型;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="操作表中的数据"><a href="#操作表中的数据" class="headerlink" title="操作表中的数据"></a>操作表中的数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>添加数据</span><br><span class="line"><span class="keyword">insert</span>  <span class="type">int</span> 表名 (列名<span class="number">1</span>，列名<span class="number">2.</span>..) <span class="keyword">values</span> (value1,value2...)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除数据</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line">若没加条件则删除所有数据 不推荐使用</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除表，在创建一个一摸一样的空表  类似于删除表中所有数据</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> stu;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>修改数据</span><br><span class="line">update 表名 <span class="keyword">set</span> 列名<span class="number">1</span><span class="operator">=</span>value1,列名<span class="number">2</span><span class="operator">=</span>value2 <span class="keyword">where</span> 条件</span><br><span class="line">如果不加条件，则修改表中所有的数据</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询表中记录的格式</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> 表名列表</span><br><span class="line"><span class="keyword">where</span> 条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组字段</span><br><span class="line"><span class="keyword">having</span> 分组之后的条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序字段</span><br><span class="line">limit 分页限定</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>去重 <span class="keyword">distinct</span></span><br><span class="line">如果有<span class="keyword">Null</span>参与的计算，结果都是<span class="keyword">null</span></span><br><span class="line"><span class="keyword">select</span> name,chinese,math,IFNULL(chinese,<span class="number">0</span>)<span class="operator">+</span>IFNULL(math,<span class="number">0</span>) <span class="keyword">as</span> 别名 <span class="keyword">from</span> student</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>通过IFNULL(字段,默认值) 可以设置计算时的默认值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参数信息"><a href="#参数信息" class="headerlink" title="参数信息"></a>参数信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">参数名称                    参数说明                                                                                                                         缺省值     最低版本要求</span><br><span class="line">user                      数据库用户名（用于连接数据库）                                                                                                                  所有版本</span><br><span class="line">password                   用户密码（用于连接数据库）                                                                                                                     所有版本</span><br><span class="line">useUnicode              是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为true                                                   false     1.1g</span><br><span class="line">characterEncoding       当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbk                                                                           false     1.1g</span><br><span class="line">autoReconnect                当数据库连接异常中断时，是否自动重新连接？                                                                                           false     1.1</span><br><span class="line">autoReconnectForPools     是否使用针对数据库连接池的重连策略                                                                                                     false     3.1.3</span><br><span class="line">failOverReadOnly         自动重连成功后，连接是否设置为只读？                                                                                                    true     3.0.12</span><br><span class="line">maxReconnects           autoReconnect设置为true时，重试连接的次数                                                                                                 3     1.1</span><br><span class="line">initialTimeout        autoReconnect设置为true时，两次重连之间的时间间隔，单位：秒                                                                                    2     1.1</span><br><span class="line">connectTimeout       和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本                                                            0     3.0.1</span><br><span class="line">socketTimeout          socket操作（读写）超时，单位：毫秒。 0表示永不超时                                                                                            0     3.0.1</span><br></pre></td></tr></table></figure><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><blockquote><p>Java dataBase Connectivity  java 数据库连接</p><p>Jdbc本质：定义了操作所有关系型数据库的规则 定义了一套接口</p><p>实现类：数据库驱动</p></blockquote><p>步骤</p><blockquote><p>1.导入驱动Jar包</p><p>2.注册驱动</p><p>3.获取数据库连接对象 Connection</p><p>4.定义 sql</p><p>5.获取执行sql语句的对象 statement</p><p>6.执行sql，接受返回的结果</p><p>7.处理结果</p><p>8.释放资源</p></blockquote><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/15 - 17:10</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Javadbcon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line"><span class="comment">//        注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//        获取数据库连接对象</span></span><br><span class="line">        Connection con=DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="comment">//        定义sql语句</span></span><br><span class="line">        String  sql=<span class="string">&quot;update test set age=100 where id=1&quot;</span>;</span><br><span class="line"><span class="comment">//        获取执行sql的对象    Statement</span></span><br><span class="line">        Statement statement=con.createStatement();</span><br><span class="line"><span class="comment">//        执行sql方法</span></span><br><span class="line">        <span class="keyword">int</span> count=statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"><span class="comment">//        释放资源</span></span><br><span class="line">        con.close();</span><br><span class="line">        statement.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="详解操作对象"><a href="#详解操作对象" class="headerlink" title="详解操作对象"></a>详解操作对象</h3><h4 id="1-DriverManager"><a href="#1-DriverManager" class="headerlink" title="1.DriverManager"></a>1.DriverManager</h4><blockquote><p>驱动管理对象</p><p>功能：</p><ol><li>注册驱动  告诉程序该使用哪一个数据库驱动jar</li><li>通过 Class.forName(“com.mysql.jdbc.Driver”)</li><li>mysql5之后的驱动jar包可以省略  因为jar包里已经配置了</li><li>获取数据库连接</li><li>getConnection(String url,String user,String password)</li><li>url:指定连接的路径   语法 ：jdbc:mysql://ip地址(域名):端口号/数据库名称</li></ol></blockquote><h4 id="2-Connection"><a href="#2-Connection" class="headerlink" title="2.Connection"></a>2.Connection</h4><blockquote><p>数据库连接对象</p><p>1.获取执行sql的对象</p><p>Statement createStatement() </p><p>2.管理事务</p><ol><li>开启事务  setAutoCommit(boolean autoCommit) 设置参数位false </li><li>提交事务 commit()</li><li>回滚事务 rollback()</li></ol></blockquote><h4 id="3-Statement"><a href="#3-Statement" class="headerlink" title="3.Statement"></a>3.Statement</h4><blockquote><p>执行sql的对象   </p><p>执行静态sql  参数给定值</p><ol><li><p>execute(sql) 可以执行任何sql</p></li><li><p>executeUpdate(sql) 可以执行dml(curd)语句  ddl语句(create 表 ,alter,drop)很少</p><p>返回值：返回的是影响的行数，可以通过返回值判断是否执行成功</p></li><li><p>executeQuery(sql) 查询查询语句  </p><p>返回值：结果集对象</p></li><li><p>释放资源应该放在finnally</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">statement.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(con!=<span class="keyword">null</span>)&#123;</span><br><span class="line">con.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>4.ResultSet</p><blockquote><p>结果集对象</p><p>封装查询结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游标向下移动一行</span></span><br><span class="line">next()</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">getInt(参数)</span><br><span class="line">    <span class="number">1.</span><span class="keyword">int</span> 代表列的编号 从<span class="number">1</span>开始</span><br><span class="line">    <span class="number">2.</span>string 列的名称 </span><br><span class="line">getString(参数)</span><br><span class="line">   同理</span><br></pre></td></tr></table></figure><p>方法的返回值是 ResultSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string sql=<span class="string">&quot;select * from table&quot;</span></span><br><span class="line">statement =con.createStatement();</span><br><span class="line">re=statement.executeQuery(sql)<span class="comment">//返回的是结果集</span></span><br><span class="line"><span class="comment">//处理结果</span></span><br><span class="line">rs.next();</span><br><span class="line"><span class="keyword">int</span> id=rs.getInt(<span class="number">1</span>);</span><br><span class="line">String name=rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(id)</span><br><span class="line">System.out.println(name)</span><br></pre></td></tr></table></figure><p>使用时的注意：</p><ol><li>游标向下一行</li><li>判断是否有数据</li><li>获取数据</li></ol><p>next（）方法返回布尔值</p><p>正确使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(rs.next())&#123;</span><br><span class="line">int id&#x3D;rs.getInt(1);</span><br><span class="line">String name&#x3D;rs.getString(&quot;name&quot;);</span><br><span class="line">System.out.println(id)</span><br><span class="line">System.out.println(name)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;打印出所有的行的值</span><br></pre></td></tr></table></figure></blockquote><h5 id="抽取jdbc工具类"><a href="#抽取jdbc工具类" class="headerlink" title="抽取jdbc工具类"></a>抽取jdbc工具类</h5><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///db1</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>JDBCUtils类</p><blockquote><p>获取src路径下的文件的方式     ClassLoader()类加载器</p><p>Properties pro=new Properties();</p><p>ClassLoader loader=JDBCUtils.class.getClassLoader();<br>//        3.获取字节流<br>   Url res=loader.getResourceAsStream(“jdbc.properties”);</p><p>String path=res.getPath();</p><p>pro.load(new FileReader(path))</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 创建Properties集合类。</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res  = classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">           <span class="comment">// System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span></span><br><span class="line">            <span class="comment">//2. 加载文件</span></span><br><span class="line">           <span class="comment">// pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            <span class="comment">//4. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-PreparedSteatment"><a href="#5-PreparedSteatment" class="headerlink" title="5.PreparedSteatment"></a>5.PreparedSteatment</h4><blockquote><p>执行sql对象 更加强大</p><p>执行动态sql  </p></blockquote><h5 id="Sql注入问题"><a href="#Sql注入问题" class="headerlink" title="Sql注入问题"></a>Sql注入问题</h5><blockquote><p>在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</p><ol><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a<pre><code>     2. sql：select * from user where username = &#39;fhdsjkf&#39; and password = &#39;a&#39; or &#39;a&#39; = &#39;a&#39; </code></pre></li></ol><p>解决sql注入问题：使用PreparedStatement对象来解决</p><p>预编译的SQL：参数使用?作为占位符  给问号赋值就行</p><ol start="4"><li><p>步骤：</p><pre><code>     1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar     2. 注册驱动     3. 获取数据库连接对象 Connection     4. 定义sql         * 注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;     5. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql)      6. 给？赋值：         * 方法： setXxx(参数1,参数2)             * 参数1：？的位置编号 从1 开始             * 参数2：？的值     7. 执行sql，接受返回结果，不需要传递sql语句     8. 处理结果     9. 释放资源</code></pre><ol start="5"><li>注意：后期都会使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol></li></ol></blockquote><p>使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 练习：</span></span><br><span class="line"><span class="comment"> * * 需求：</span></span><br><span class="line"><span class="comment"> * 1. 通过键盘录入用户名和密码</span></span><br><span class="line"><span class="comment"> * 2. 判断用户是否登录成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo9</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.键盘录入，接受用户名和密码</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">new</span> JDBCDemo9().login2(username, password);</span><br><span class="line">        <span class="comment">//3.判断结果，输出不同语句</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String username ,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || password == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stmt =  <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user where username = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+password+<span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4.执行查询</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">           <span class="comment">/* if(rs.next())&#123;//如果有下一行，则返回true</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">           <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,stmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法,使用PreparedStatement实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login2</span><span class="params">(String username ,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || password == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt =  <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给?赋值</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>,username);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">//4.执行查询,不需要传递sql</span></span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">           <span class="comment">/* if(rs.next())&#123;//如果有下一行，则返回true</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                return false;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,pstmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jdbc控制事务"><a href="#jdbc控制事务" class="headerlink" title="jdbc控制事务"></a>jdbc控制事务</h3><blockquote><ol><li><p>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p></li><li><p>操作：</p><ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li><p>使用Connection对象来管理事务</p><ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt1 = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstmt2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="comment">//2.1 张三 - 500</span></span><br><span class="line">            String sql1 = <span class="string">&quot;update account set balance = balance - ? where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//2.2 李四 + 500</span></span><br><span class="line">            String sql2 = <span class="string">&quot;update account set balance = balance + ? where id = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取执行sql对象</span></span><br><span class="line">            pstmt1 = conn.prepareStatement(sql1);</span><br><span class="line">            pstmt2 = conn.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">//4. 设置参数</span></span><br><span class="line">            pstmt1.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt1.setInt(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            pstmt2.setDouble(<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">            pstmt2.setInt(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            pstmt1.executeUpdate();</span><br><span class="line">            <span class="comment">// 手动制造异常</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            pstmt2.executeUpdate();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(pstmt1,conn);</span><br><span class="line">            JDBCUtils.close(pstmt2,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><blockquote><p>解决资源浪费</p><p>池子   容器   存放数据库连接的容器</p><ol><li><p>概念：其实就是一个容器(集合)，存放数据库连接的容器。</p><pre><code> 当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</code></pre></li><li><p>好处：</p><ol><li>节约资源</li><li>用户访问高效</li></ol></li><li><p>实现：</p><ol><li><p>标准接口：DataSource   javax.sql包下的</p><ol><li>方法：<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li></ol></li><li><p>一般我们不去实现它，有数据库厂商来实现</p><ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol></li></ol></blockquote><h4 id="C3p0"><a href="#C3p0" class="headerlink" title="C3p0"></a>C3p0</h4><blockquote><p>C3P0：数据库连接池技术</p><ul><li>步骤：<ol><li>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，<ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li>定义配置文件：<ul><li>名称： c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li>创建核心对象 数据库连接池对象 ComboPooledDataSource</li><li>获取连接： getConnection</li></ol></li><li>代码：<br>   //1.创建数据库连接池对象<br>   DataSource ds  = new ComboPooledDataSource();<br>   //2. 获取连接对象<br>   Connection conn = ds.getConnection();</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.datasource.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * c3p0演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">       <span class="comment">/* //1. 获取DataSource，使用默认配置</span></span><br><span class="line"><span class="comment">        DataSource ds  = new ComboPooledDataSource();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //2.获取连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int i = 1; i &lt;= 11 ; i++) &#123;</span></span><br><span class="line"><span class="comment">            Connection conn = ds.getConnection();</span></span><br><span class="line"><span class="comment">            System.out.println(i+&quot;:&quot;+conn);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            if(i == 5)&#123;</span></span><br><span class="line"><span class="comment">                conn.close();//归还连接到连接池中</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//testNamedConfig();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testNamedConfig</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.1 获取DataSource，使用指定名称配置</span></span><br><span class="line">        DataSource ds  = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">&quot;otherc3p0&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            Connection conn = ds.getConnection();</span><br><span class="line">            System.out.println(i+<span class="string">&quot;:&quot;</span>+conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Druid数据库连接池实现"><a href="#Druid数据库连接池实现" class="headerlink" title="Druid数据库连接池实现"></a>Druid数据库连接池实现</h4><blockquote><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p><ol><li>步骤：<ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol></li></ol><ul><li>代码：<br>   //3.加载配置文件<br>   Properties pro = new Properties();<br>   InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(“druid.properties”);<br>   pro.load(is);<br>   //4.获取连接池对象<br>   DataSource ds = DruidDataSourceFactory.createDataSource(pro);<br>   //5.获取连接<br>   Connection conn = ds.getConnection();</li></ul><ol start="2"><li>定义工具类<ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li></ol></blockquote><h5 id="数据库连接池工具类"><a href="#数据库连接池工具类" class="headerlink" title="数据库连接池工具类"></a>数据库连接池工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.定义成员变量 DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">       <span class="comment">/* if(stmt != null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                stmt.close();</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(conn != null)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                conn.close();//归还连接</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">       close(<span class="keyword">null</span>,stmt,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs , Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><blockquote><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p><p>步骤：</p><ol><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li>queryForList():查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li>query():查询结果，将结果封装为JavaBean对象<ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JdbcTemplate入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.创建JDBCTemplate对象</span></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">        <span class="comment">//3.调用方法</span></span><br><span class="line">        String sql = <span class="string">&quot;update account set balance = 5000 where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">3</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.domain.Emp;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Junit单元测试，可以让方法独立执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取JDBCTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 修改1号数据的 salary 为 10000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 定义sql</span></span><br><span class="line">        String sql = <span class="string">&quot;update emp set salary = 10000 where id = 1001&quot;</span>;</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 添加一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>, <span class="string">&quot;郭靖&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.删除刚才添加的记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from emp where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.查询id为1001的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp where id = ? or id = ?&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Emp <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String ename = rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> job_id = rs.getInt(<span class="string">&quot;job_id&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> mgr = rs.getInt(<span class="string">&quot;mgr&quot;</span>);</span><br><span class="line">                Date joindate = rs.getDate(<span class="string">&quot;joindate&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> salary = rs.getDouble(<span class="string">&quot;salary&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> bonus = rs.getDouble(<span class="string">&quot;bonus&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> dept_id = rs.getInt(<span class="string">&quot;dept_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setEname(ename);</span><br><span class="line">                emp.setJob_id(job_id);</span><br><span class="line">                emp.setMgr(mgr);</span><br><span class="line">                emp.setJoindate(joindate);</span><br><span class="line">                emp.setSalary(salary);</span><br><span class="line">                emp.setBonus(bonus);</span><br><span class="line">                emp.setDept_id(dept_id);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7. 查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select count(id) from emp&quot;</span>;</span><br><span class="line">        Long total = template.queryForObject(sql, Long.class);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><blockquote><p>可拓展标记语言</p><p>标签自定义</p><p>功能：</p><ol><li>存储数据</li><li>作为配置文件</li><li>在网络中传输</li><li>跨平台</li></ol></blockquote><blockquote><p>概念：Extensible Markup Language 可扩展标记语言</p><ul><li><p>可扩展：标签都是自定义的。 <user>  <student></p></li><li><p>功能</p><ul><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li><p>xml与html的区别</p><ol><li>xml标签都是自定义的，html标签是预定义。</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据</li></ol></li><li><p>w3c:万维网联盟</p></li></ul><ol><li>语法：</li></ol><ul><li><p>基本语法：</p><ol><li>xml文档的后缀名 .xml</li><li>xml第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号(单双都可)引起来</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol></li><li><p>快速入门：</p>  <?xml version='1.0' ?>  <users>      <user id='1'>          <name>zhangsan</name>          <age>23</age>          <gender>male</gender>          <br/>      </user>                                                    <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>  </users></li><li><p>组成部分：</p><ol><li><p>文档声明</p><ol><li>格式：<?xml 属性列表 ?></li><li>属性列表：<ul><li>version：版本号，必须的属性</li><li>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</li><li>standalone：是否独立<ul><li>取值：<ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul></li></ul></li></ol></li><li><p>指令(了解)：结合css的</p><ul><li><?xml-stylesheet type="text/css" href="a.css" ?></li></ul></li><li><p>标签：标签名称自定义的</p><ul><li>规则：<ul><li>名称可以包含字母、数字以及其他的字符 </li><li>名称不能以数字或者标点符号开始 </li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始 </li><li>名称不能包含空格 </li></ul></li></ul></li><li><p>属性：</p><p> id属性值唯一</p></li><li><p>文本：</p></li></ol><ul><li><p>CDATA区：在该区域中的数据会被原样展示</p><ul><li>格式：  <![CDATA[ 数据 ]]></li></ul></li><li><p>约束：规定xml文档的书写规则</p><ul><li><p>作为框架的使用者(程序员)：</p><ol><li>能够在xml中引入约束文档</li><li>能够简单的读懂约束文档</li></ol></li><li><p>分类：</p><ol><li><p>DTD:一种简单的约束技术</p></li><li><p>Schema:一种复杂的约束技术</p><p>DTD：</p></li></ol><ul><li><p>引入dtd文档到xml文档中</p><pre><code>* 内部dtd：将约束规则定义在xml文档中* 外部dtd：将约束的规则定义在外部的dtd文件中    * 本地：&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;    * 网络：&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</code></pre><p>Schema:</p><pre><code>* 引入：        1.填写xml文档的根元素        2.引入xsi前缀.  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;        3.引入xsd文件命名空间.  xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;        4.为每一个xsd约束声明一个前缀,作为标识  xmlns=&quot;http://www.itcast.cn/xml&quot; </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://www.itcast.cn/xml&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.itcast.cn/xml  student.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></blockquote><blockquote><ul><li>xml常见的解析器：<ol><li>JAXP：sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li>PULL：Android操作系统内置的解析器，sax方式的。</li></ol><ul><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。<ul><li>快速入门：<ul><li>步骤：<ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li></ul></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">     String path = JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line">     <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">     Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">     <span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">     Elements elements = document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">     System.out.println(elements.size());</span><br><span class="line">     <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">     Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">     <span class="comment">//3.2获取数据</span></span><br><span class="line">     String name = element.text();</span><br><span class="line">     System.out.println(name);</span><br></pre></td></tr></table></figure><ul><li>对象的使用：<pre><code>  1. Jsoup：工具类，可以解析html或xml文档，返回Document      * parse：解析html或xml文档，返回Document          * parse(File in, String charsetName)：解析xml或html文件的。          * parse(String html)：解析xml或html字符串          * parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象  可以用来爬虫  2. Document：文档对象。代表内存中的dom树      * 获取Element对象          * getElementById(String id)：根据id属性值获取唯一的element对象          * getElementsByTag(String tagName)：根据标签名称获取元素对象集合          * getElementsByAttribute(String key)：根据属性名称获取元素对象集合          * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合  3. Elements：元素Element对象的集合。可以当做 ArrayList&lt;Element&gt;来使用  4. Element：元素对象      1. 获取子元素对象          * getElementById(String id)：根据id属性值获取唯一的element对象          * getElementsByTag(String tagName)：根据标签名称获取元素对象集合          * getElementsByAttribute(String key)：根据属性名称获取元素对象集合          * getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合  2. 获取属性值      * String attr(String key)：根据属性名称获取属性值  3. 获取文本内容      * String text():获取文本内容      * String html():获取标签体的所有内容(包括字标签的字符串内容)                                                                                                                                                                                    Node：节点对象  * 是Document和Element的父类</code></pre></li></ul></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* 快捷查询方式：</span><br><span class="line"><span class="number">1.</span> selector:选择器</span><br><span class="line">* 使用的方法：<span class="function">Elements<span class="title">select</span><span class="params">(String cssQuery)</span></span></span><br><span class="line"><span class="function">* 语法：参考Selector类中定义的语法</span></span><br><span class="line"><span class="function">2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</span></span><br><span class="line"><span class="function">* 使用Jsoup的Xpath需要额外导入jar包。</span></span><br><span class="line"><span class="function">* 查询w3cshool参考手册，使用xpath的语法完成查询</span></span><br><span class="line"><span class="function">* 代码：</span></span><br><span class="line"><span class="function"><span class="comment">//1.获取student.xml的path</span></span></span><br><span class="line"><span class="function">        String path </span>= JsoupDemo6.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.结合xpath语法查询</span></span><br><span class="line">        <span class="comment">//4.1查询所有student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">&quot;//student&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2查询所有student标签下的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">&quot;//student/name&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3查询student标签下带有id属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">&quot;//student/name[@id]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line"></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">&quot;//student/name[@id=&#x27;itcast&#x27;]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote><ul><li>常见的java相关的web服务器软件：<ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">* JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</span><br><span class="line"></span><br><span class="line">* Tomcat：web服务器软件</span><br><span class="line">1. 下载：http:&#x2F;&#x2F;tomcat.apache.org&#x2F;</span><br><span class="line">2. 安装：解压压缩包即可。</span><br><span class="line">* 注意：安装目录建议不要有中文和空格</span><br><span class="line">3. 卸载：删除目录就行了</span><br><span class="line">4. 启动：</span><br><span class="line">* bin&#x2F;startup.bat ,双击运行该文件即可</span><br><span class="line">* 访问：浏览器输入：http:&#x2F;&#x2F;localhost:8080 回车访问自己</span><br><span class="line">  http:&#x2F;&#x2F;别人的ip:8080 访问别人</span><br><span class="line"></span><br><span class="line">* 可能遇到的问题：</span><br><span class="line">1. 黑窗口一闪而过：</span><br><span class="line">* 原因： 没有正确配置JAVA_HOME环境变量</span><br><span class="line">* 解决方案：正确配置JAVA_HOME环境变量</span><br><span class="line"></span><br><span class="line">2. 启动报错：</span><br><span class="line">1. 暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</span><br><span class="line">* netstat -ano</span><br><span class="line">2. 温柔：修改自身的端口号</span><br><span class="line">* conf&#x2F;server.xml</span><br><span class="line">* &lt;Connector port&#x3D;&quot;8888&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">               connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">               redirectPort&#x3D;&quot;8445&quot; &#x2F;&gt;</span><br><span class="line">* 一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</span><br><span class="line">* 好处：在访问时，就不用输入端口号</span><br><span class="line">5. 关闭：</span><br><span class="line">1. 正常关闭：</span><br><span class="line">* bin&#x2F;shutdown.bat</span><br><span class="line">* ctrl+c</span><br><span class="line">2. 强制关闭：</span><br><span class="line">* 点击启动窗口的×</span><br><span class="line">6. 配置:</span><br><span class="line">* 部署项目的方式：</span><br><span class="line">1. 直接将项目放到webapps目录下即可。</span><br><span class="line">* &#x2F;hello：项目的访问路径--&gt;虚拟目录</span><br><span class="line">* 简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</span><br><span class="line">* war包会自动解压缩</span><br><span class="line"></span><br><span class="line">2. 配置conf&#x2F;server.xml文件</span><br><span class="line">在&lt;Host&gt;标签体中配置</span><br><span class="line">&lt;Context docBase&#x3D;&quot;D:\hello&quot; path&#x3D;&quot;&#x2F;hehe&quot; &#x2F;&gt;</span><br><span class="line">* docBase:项目存放的路径</span><br><span class="line">* path：虚拟目录</span><br><span class="line"></span><br><span class="line">3. 在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写</span><br><span class="line">&lt;Context docBase&#x3D;&quot;D:\hello&quot; &#x2F;&gt;</span><br><span class="line">* 虚拟目录：xml文件的名称</span><br><span class="line"></span><br><span class="line">* 静态项目和动态项目：</span><br><span class="line">* 目录结构</span><br><span class="line">* java动态项目的目录结构：</span><br><span class="line">-- 项目的根目录</span><br><span class="line">-- WEB-INF目录：</span><br><span class="line">-- web.xml：web项目的核心配置文件</span><br><span class="line">-- classes目录：放置字节码文件的目录</span><br><span class="line">-- lib目录：放置依赖的jar包</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><blockquote><p>server  applet</p><p>Servlet 就是一个接口，定义了浏览器访问到的规则</p><p>快速入门：</p><ol><li><p>创建JavaEE项目</p></li><li><p>定义一个类，实现Servlet接口</p><ul><li>public class ServletDemo1 implements Servlet</li></ul></li><li><p>实现接口中的抽象方法</p></li><li><p>配置Servlet</p><p>  在web.xml中配置：</p> <!--配置Servlet --> <servlet>     <servlet-name>demo1</servlet-name>     <servlet-class>cn.itcast.web.servlet.ServletDemo1</servlet-class> </servlet>          <servlet-mapping>     <servlet-name>demo1</servlet-name>     <url-pattern>/demo1</url-pattern> </servlet-mapping></li></ol><ul><li><p>执行原理：</p><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容。</li><li>如果有，则在找到对应的<servlet-class>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li><li><p>Servlet中的生命周期方法：</p><ol><li>被创建：执行init方法，只执行一次</li></ol><ul><li><p>Servlet什么时候被创建？</p><ul><li><p>默认情况下，第一次被访问时，Servlet被创建</p></li><li><p>可以配置执行Servlet的创建时机。</p><ul><li><p>在<servlet>标签下配置</p><ol><li><p>第一次被访问时，创建</p><pre><code>   * &lt;load-on-startup&gt;的值为负数</code></pre><p>   在服务器启动时，创建</p><ul><li><load-on-startup>的值为0或正整数</li></ul></li></ol></li></ul></li></ul></li></ul></li></ul><pre><code>    * Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的        * 多个用户同时访问时，可能存在线程安全问题。        * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值                                2. 提供服务：执行service方法，执行多次    * 每次访问Servlet时，Service方法都会被调用一次。3. 被销毁：执行destroy方法，只执行一次    * Servlet被销毁时执行。服务器关闭时，Servlet被销毁    * 只有服务器正常关闭时，才会执行destroy方法。    * destroy方法在Servlet被销毁之前执行，一般用于释放资源<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">* Servlet3<span class="number">.0</span>：</span><br><span class="line">* 好处：</span><br><span class="line">* 支持注解配置。可以不需要web.xml了。</span><br><span class="line">                                </span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1.</span> 创建JavaEE项目，选择Servlet的版本<span class="number">3.0</span>以上，可以不创建web.xml</span><br><span class="line"><span class="number">2.</span> 定义一个类，实现Servlet接口</span><br><span class="line"><span class="number">3.</span> 复写方法</span><br><span class="line"><span class="number">4.</span> 在类上使用<span class="meta">@WebServlet</span>注解，进行配置</span><br><span class="line">* <span class="meta">@WebServlet(&quot;资源路径&quot;)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line">                                </span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line">                                </span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line">                                </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line">                                </span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">                                </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">                                </span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">                                </span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">                                </span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">                                </span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>                                <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">idead与tomcat的相关配置</span><br><span class="line">1. IDEA会为每一个tomcat部署的项目单独建立一份配置文件</span><br><span class="line">* 查看控制台的log：Using CATALINA_BASE:   &quot;C:\Users\fqy\.IntelliJIdea2018.1\system\tomcat\_itcast&quot;</span><br><span class="line">                                </span><br><span class="line">2. 工作空间项目    和     tomcat部署的web项目</span><br><span class="line">* tomcat真正访问的是“tomcat部署的web项目”，&quot;tomcat部署的web项目&quot;对应着&quot;工作空间项目&quot; 的web目录下的所有资源</span><br><span class="line">* WEB-INF目录下的资源不能被浏览器直接访问。</span><br><span class="line">3. 断点调试：使用&quot;小虫子&quot;启动 dubug 启动</span><br></pre></td></tr></table></figure></code></pre></blockquote><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><pre><code>1. request对象和response对象的原理    1. request和response对象是由服务器创建的。我们来使用它们    2. request对象是来获取请求消息，response对象是来设置响应消息2. request对象继承体系结构：        ServletRequest        --    接口        |    继承    HttpServletRequest    -- 接口        |    实现    org.apache.catalina.connector.RequestFacade 类(tomcat)3. request功能：    1. 获取请求消息数据        1. 获取请求行数据            * GET /day14/demo1?name=zhangsan HTTP/1.1            * 方法：                1. 获取请求方式 ：GET                    * String getMethod()                  2. (*)获取虚拟目录：/day14                    * String getContextPath()                3. 获取Servlet路径: /demo1                    * String getServletPath()                4. 获取get方式请求参数：name=zhangsan                    * String getQueryString()                5. (*)获取请求URI：/day14/demo1                    * String getRequestURI():        /day14/demo1                    * StringBuffer getRequestURL()  :http://localhost/day14/demo1                    * URL:统一资源定位符 ： http://localhost/day14/demo1    中华人民共和国                    * URI：统一资源标识符 : /day14/demo1                    共和国                                6. 获取协议及版本：HTTP/1.1                    * String getProtocol()                7. 获取客户机的IP地址：                    * String getRemoteAddr()                        2. 获取请求头数据            * 方法：                * (*)String getHeader(String name):通过请求头的名称获取请求头的值                * Enumeration&lt;String&gt; getHeaderNames():获取所有的请求头名称                    3. 获取请求体数据:            * 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数            * 步骤：                1. 获取流对象                    *  BufferedReader getReader()：获取字符输入流，只能操作字符数据                    *  ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据                        * 在文件上传知识点后讲解                2. 再从流对象中拿数据</code></pre><p>​                </p><pre><code>    2. 其他功能：        1. 获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数            1. String getParameter(String name):根据参数名称获取参数值    username=zs&amp;password=123            2. String[] getParameterValues(String name):根据参数名称获取参数值的数组  hobby=xx&amp;hobby=game            3. Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称            4. Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合            * 中文乱码问题：                * get方式：tomcat 8 已经将get方式乱码问题解决了                * post方式：会乱码                    * 解决：在获取参数前，设置request的编码request.setCharacterEncoding(&quot;utf-8&quot;)        2. 请求转发：一种在服务器内部的资源跳转方式            1. 步骤：                1. 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)                2. 使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response)             2. 特点：                1. 浏览器地址栏路径不发生变化                2. 只能转发到当前服务器内部资源中。                3. 转发是一次请求(f12发现只有一次请求，多个资源中使用同一个请求)        3. 共享数据：            * 域对象：一个有作用范围的对象，可以在范围内共享数据            * request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据 记住是请求转发            * 方法：                1. void setAttribute(String name,Object obj):存储数据                2. Object getAttitude(String name):通过键获取值                3. void removeAttribute(String name):通过键移除键值对        4. 获取ServletContext：            * ServletContext getServletContext()</code></pre><blockquote><p>BeanUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; map=req.getParamenterMap();</span><br><span class="line">User loginUser=<span class="keyword">new</span> User();</span><br><span class="line">BeanUtils.populate(loginUsers,map)<span class="comment">//可以将post里的所有参数自动放进实体类里</span></span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></blockquote><h4 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h4><pre><code>* 用户登录案例需求：    1.编写login.html登录页面        username &amp; password 两个输入框    2.使用Druid数据库连接池技术,操作mysql，day14数据库中user表    3.使用JdbcTemplate技术封装JDBC    4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您    5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* 分析</span><br><span class="line"></span><br><span class="line">* 开发步骤</span><br><span class="line">1. 创建项目，导入html页面，配置文件，jar包</span><br><span class="line">2. 创建数据库环境</span><br><span class="line">CREATE DATABASE day14;</span><br><span class="line">USE day14;</span><br><span class="line">CREATE TABLE USER(</span><br><span class="line"></span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(32) UNIQUE NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(32) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">3. 创建包cn.itcast.domain,创建类User</span><br><span class="line">package cn.itcast.domain;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 用户的实体类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    private int id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br></pre></td></tr></table></figure><pre><code>            public int getId() &#123;                return id;            &#125;                    public void setId(int id) &#123;                this.id = id;            &#125;                    public String getUsername() &#123;                return username;            &#125;                    public void setUsername(String username) &#123;                this.username = username;            &#125;                    public String getPassword() &#123;                return password;            &#125;                    public void setPassword(String password) &#123;                this.password = password;            &#125;                    @Override            public String toString() &#123;                return &quot;User&#123;&quot; +                        &quot;id=&quot; + id +                        &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +                        &quot;, password=&#39;&quot; + password + &#39;\&#39;&#39; +                        &#39;&#125;&#39;;            &#125;        &#125;    4. 创建包cn.itcast.util,编写工具类JDBCUtils        package cn.itcast.util;        import com.alibaba.druid.pool.DruidDataSourceFactory;                import javax.sql.DataSource;        import javax.xml.crypto.Data;        import java.io.IOException;        import java.io.InputStream;        import java.sql.Connection;        import java.sql.SQLException;        import java.util.Properties;                /**         * JDBC工具类 使用Durid连接池         */        public class JDBCUtils &#123;                    private static DataSource ds ;                    static &#123;                        try &#123;                    //1.加载配置文件                    Properties pro = new Properties();                    //使用ClassLoader加载配置文件，获取字节输入流                    InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);                    pro.load(is);                            //2.初始化连接池对象                    ds = DruidDataSourceFactory.createDataSource(pro);                        &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125; catch (Exception e) &#123;                    e.printStackTrace();                &#125;            &#125;                    /**             * 获取连接池对象             */            public static DataSource getDataSource()&#123;                return ds;            &#125;</code></pre><p>​            </p><pre><code>            /**             * 获取连接Connection对象             */            public static Connection getConnection() throws SQLException &#123;                return  ds.getConnection();            &#125;        &#125;    5. 创建包cn.itcast.dao,创建类UserDao,提供login方法                package cn.itcast.dao;        import cn.itcast.domain.User;        import cn.itcast.util.JDBCUtils;        import org.springframework.dao.DataAccessException;        import org.springframework.jdbc.core.BeanPropertyRowMapper;        import org.springframework.jdbc.core.JdbcTemplate;                /**         * 操作数据库中User表的类         */        public class UserDao &#123;                    //声明JDBCTemplate对象共用            private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());                    /**             * 登录方法             * @param loginUser 只有用户名和密码             * @return user包含用户全部数据,没有查询到，返回null             */            public User login(User loginUser)&#123;                try &#123;                    //1.编写sql                    String sql = &quot;select * from user where username = ? and password = ?&quot;;                    //2.调用query方法                    User user = template.queryForObject(sql,                            new BeanPropertyRowMapper&lt;User&gt;(User.class),                            loginUser.getUsername(), loginUser.getPassword());</code></pre><p>​            </p><pre><code>                    return user;                &#125; catch (DataAccessException e) &#123;                    e.printStackTrace();//记录日志                    return null;                &#125;            &#125;        &#125;        6. 编写cn.itcast.web.servlet.LoginServlet类        package cn.itcast.web.servlet;        import cn.itcast.dao.UserDao;        import cn.itcast.domain.User;                import javax.servlet.ServletException;        import javax.servlet.annotation.WebServlet;        import javax.servlet.http.HttpServlet;        import javax.servlet.http.HttpServletRequest;        import javax.servlet.http.HttpServletResponse;        import java.io.IOException;        @WebServlet(&quot;/loginServlet&quot;)        public class LoginServlet extends HttpServlet </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.设置编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取请求参数</span></span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">//3.封装user对象</span></span><br><span class="line">        User loginUser = <span class="keyword">new</span> User();</span><br><span class="line">        loginUser.setUsername(username);</span><br><span class="line">        loginUser.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用UserDao的login方法</span></span><br><span class="line">        UserDao dao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        User user = dao.login(loginUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断user</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/failServlet&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            <span class="comment">//存储数据</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            <span class="comment">//转发</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/successServlet&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 编写FailServlet和SuccessServlet类</span><br><span class="line"><span class="meta">@WebServlet(&quot;/successServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取request域中共享的user对象</span></span><br><span class="line">        User user = (User) request.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//给页面写一句话</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置编码</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;登录成功！&quot;</span>+user.getUsername()+<span class="string">&quot;,欢迎您&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br></pre></td></tr></table></figure><pre><code>        @WebServlet(&quot;/failServlet&quot;)        public class FailServlet extends HttpServlet &#123;            protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;                //给页面写一句话                        //设置编码                response.setContentType(&quot;text/html;charset=utf-8&quot;);                //输出                response.getWriter().write(&quot;登录失败，用户名或密码错误&quot;);                    &#125;                    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;                this.doPost(request,response);            &#125;        &#125;    8. login.html中form表单的action路径的写法        * 虚拟目录+Servlet的资源路径    9. BeanUtils工具类，简化数据封装        * 用于封装JavaBean的        1. JavaBean：标准的Java类            1. 要求：                1. 类必须被public修饰                2. 必须提供空参的构造器                3. 成员变量必须使用private修饰                4. 提供公共setter和getter方法            2. 功能：封装数据        2. 概念：            成员变量：            属性：setter和getter方法截取后的产物                例如：getUsername() --&gt; Username--&gt; username        3. 方法：            1. setProperty()            2. getProperty()            3. populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</code></pre><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>今日内容</p><pre><code>1. HTTP协议：响应消息2. Response对象3. ServletContext对象</code></pre><p> HTTP协议：</p><pre><code>1. 请求消息：客户端发送给服务器端的数据    * 数据格式：        1. 请求行        2. 请求头        3. 请求空行        4. 请求体2. 响应消息：服务器端发送给客户端的数据    * 数据格式：        1. 响应行            1. 组成：协议/版本 响应状态码 状态码描述            2. 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。                1. 状态码都是3位数字                 2. 分类：                    1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码                    2. 2xx：成功。代表：200                    3. 3xx：重定向。代表：302(重定向)，304(访问缓存)                    4. 4xx：客户端错误。                        * 代表：                            * 404（请求路径没有对应的资源）                             * 405：请求方式没有对应的doXxx方法                    5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</code></pre><p>​                    </p><pre><code>        2. 响应头：            1. 格式：头名称： 值            2. 常见的响应头：                1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式                2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据                    * 值：                        * in-line:默认值,在当前页面内打开                        * attachment;filename=xxx：以附件形式打开响应体。文件下载        3. 响应空行        4. 响应体:传输的数据     响应字符串格式        HTTP/1.1 200 OK        Content-Type: text/html;charset=UTF-8        Content-Length: 101        Date: Wed, 06 Jun 2018 07:08:42 GMT        &lt;html&gt;          &lt;head&gt;            &lt;title&gt;$Title$&lt;/title&gt;          &lt;/head&gt;          &lt;body&gt;          hello , response          &lt;/body&gt;        &lt;/html&gt;</code></pre><p>Response对象</p><pre><code>* 功能：设置响应消息    1. 设置响应行        1. 格式：HTTP/1.1 200 ok        2. 设置状态码：setStatus(int sc)     2. 设置响应头：setHeader(String name, String value)             3. 设置响应体：        * 使用步骤：            1. 获取输出流                * 字符输出流：PrintWriter getWriter()                * 字节输出流：ServletOutputStream getOutputStream()            2. 使用输出流，将数据输出到客户端浏览器* 案例：    1. 完成重定向        * 重定向：资源跳转的方式        * 代码实现：            //1. 设置状态码为302            response.setStatus(302);            //2.设置响应头location            response.setHeader(&quot;location&quot;,&quot;/day15/responseDemo2&quot;);            //简单的重定向方法            response.sendRedirect(&quot;/day15/responseDemo2&quot;);        * 重定向的特点:redirect            1. 地址栏发生变化            2. 重定向可以访问其他站点(服务器)的资源            3. 重定向是两次请求。不能使用request对象来共享数据        * 转发的特点：forward            1. 转发地址栏路径不变            2. 转发只能访问当前服务器下的资源            3. 转发是一次请求，可以使用request对象来共享数据                * forward 和  redirect 区别                    * 路径写法：            1. 路径分类                1. 相对路径：通过相对路径不可以确定唯一资源                    * 如：./index.html                    * 不以/开头，以.开头路径                    * 规则：找到当前资源和目标资源之间的相对位置关系                        * ./：当前目录                        * ../:后退一级目录                2. 绝对路径：通过绝对路径可以确定唯一资源                    * 如：http://localhost/day15/responseDemo2        /day15/responseDemo2                    * 以/开头的路径                    * 规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出                        * 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)                            * 建议虚拟目录动态获取：request.getContextPath()                            * &lt;a&gt; , &lt;form&gt; 重定向...                        * 给服务器使用：不需要加虚拟目录                            * 转发路径</code></pre><p>​<br>​                        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> 服务器输出字符数据到浏览器</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1.</span> 获取字符输出流</span><br><span class="line"><span class="number">2.</span> 输出数据</span><br><span class="line"></span><br><span class="line">* 注意：</span><br><span class="line">* 乱码问题：</span><br><span class="line"><span class="number">1.</span> PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-<span class="number">8859</span>-<span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 设置该流的默认编码</span><br><span class="line"><span class="number">3.</span> 告诉浏览器响应体使用的编码</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单的形式，设置编码，是在获取流之前设置</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="number">3.</span> 服务器输出字节数据到浏览器</span><br><span class="line">* 步骤：</span><br><span class="line"><span class="number">1.</span> 获取字节输出流   response.getOutputStream()</span><br><span class="line"><span class="number">2.</span> 输出数据   .write(<span class="string">&quot;hello&quot;</span>,getBytes())</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 验证码</span><br><span class="line"><span class="number">1.</span> 本质：图片</span><br><span class="line"><span class="number">2.</span> 目的：防止恶意表单注册</span><br></pre></td></tr></table></figure><p>ServletContext对象：</p><pre><code>1. 概念：代表整个web应用，可以和程序的容器(服务器)来通信2. 获取：    1. 通过request对象获取        request.getServletContext();    2. 通过HttpServlet获取        this.getServletContext();3. 功能：    1. 获取MIME类型：        * MIME类型:在互联网通信过程中定义的一种文件数据类型            * 格式： 大类型/小类型   text/html        image/jpeg        * 获取：String getMimeType(String file)      2. 域对象：共享数据        1. setAttribute(String name,Object value)        2. getAttribute(String name)        3. removeAttribute(String name)        * ServletContext对象范围：所有用户所有请求的数据  甚至换一个浏览器打开也能访问，用它我们需要谨慎，作用时间长，范围大，数据会一直驻留在服务器里    3. 获取文件的真实(服务器)路径        1. 方法：String getRealPath(String path)               String b = context.getRealPath(&quot;/b.txt&quot;);//web目录下资源访问             System.out.println(b);                String c = context.getRealPath(&quot;/WEB-INF/c.txt&quot;);//WEB-INF目录下的资源访问            System.out.println(c);                String a = context.getRealPath(&quot;/WEB-INF/classes/a.txt&quot;);//src目录下的资源访问            src下的文件会加载到WEB-INF下的classes文件夹中            System.out.println(a);</code></pre><p>案例：</p><pre><code>* 文件下载需求：    1. 页面显示超链接    2. 点击超链接后弹出下载提示框    3. 完成图片文件下载* 分析：    1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求    2. 任何资源都必须弹出下载提示框    3. 使用响应头设置资源的打开方式：        * content-disposition:attachment;filename=xxx* 步骤：    1. 定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename    2. 定义Servlet        1. 获取文件名称        2. 使用字节输入流加载文件进内存        3. 指定response的响应头： content-disposition:attachment;filename=xxx        4. 将数据写出到response输出流* 问题：    * 中文文件问题        * 解决思路：            1. 获取客户端使用的浏览器版本信息            2. 根据不同的版本信息，设置filename的编码方式不同</code></pre><h4 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/checkCodeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一对象，在内存中图片(验证码图片对象)</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();<span class="comment">//画笔对象</span></span><br><span class="line">        g.setColor(Color.PINK);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2画边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width - <span class="number">1</span>,height - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">&quot;&quot;</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片输出到页面展示</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>,response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="案例：文件下载"><a href="#案例：文件下载" class="headerlink" title="案例：文件下载"></a>案例：文件下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.web.utils.DownLoadUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/downloadServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求参数，文件名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">&quot;/img/&quot;</span> + filename);</span><br><span class="line">        <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>,mimeType);</span><br><span class="line">        <span class="comment">//3.2设置响应头打开方式:content-disposition</span></span><br><span class="line">        <span class="comment">//解决中文文件名问题</span></span><br><span class="line">        <span class="comment">//1.获取user-agent请求头、</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h3><pre><code>1. 概念：    * 生活中的过滤器：净水器,空气净化器，土匪、    * web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。    * 过滤器的作用：        * 一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤...2. 快速入门：    1. 步骤：        1. 定义一个类，实现接口Filter        2. 复写方法        3. 配置拦截路径            1. web.xml            2. 注解    2. 代码：        @WebFilter(&quot;/*&quot;)//访问所有资源之前，都会执行该过滤器        public class FilterDemo1 implements Filter &#123;            @Override            public void init(FilterConfig filterConfig) throws ServletException &#123;                    &#125;                    @Override            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;                System.out.println(&quot;filterDemo1被执行了....&quot;);</code></pre><p>​            </p><pre><code>                //放行                filterChain.doFilter(servletRequest,servletResponse);                    &#125;                    @Override            public void destroy() &#123;                    &#125;        &#125;3. 过滤器细节：    1. web.xml配置            &lt;filter&gt;            &lt;filter-name&gt;demo1&lt;/filter-name&gt;            &lt;filter-class&gt;cn.itcast.web.filter.FilterDemo1&lt;/filter-class&gt;        &lt;/filter&gt;        &lt;filter-mapping&gt;            &lt;filter-name&gt;demo1&lt;/filter-name&gt;            &lt;!-- 拦截路径 --&gt;            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;        &lt;/filter-mapping&gt;    2. 过滤器执行流程        1. 执行过滤器        2. 执行放行后的资源        3. 回来执行过滤器放行代码下边的代码    3. 过滤器生命周期方法        1. init:在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源        2. doFilter:每一次请求被拦截资源时，会执行。执行多次        3. destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源    4. 过滤器配置详解        * 拦截路径配置：            1. 具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行            2. 拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行            3. 后缀名拦截： *.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行            4. 拦截所有资源：/*        访问所有资源时，过滤器都会被执行        * 拦截方式配置：资源被访问的方式            * 注解配置：                * 设置dispatcherTypes属性                    1. REQUEST：默认值。浏览器直接请求资源                    2. FORWARD：转发访问资源                    3. INCLUDE：包含访问资源                    4. ERROR：错误跳转资源                    5. ASYNC：异步访问资源            * web.xml配置                * 设置&lt;dispatcher&gt;&lt;/dispatcher&gt;标签即可                5. 过滤器链(配置多个过滤器)        * 执行顺序：如果有两个过滤器：过滤器1和过滤器2            1. 过滤器1            2. 过滤器2            3. 资源执行            4. 过滤器2            5. 过滤器1         * 过滤器先后顺序问题：            1. 注解配置：按照类名的字符串比较规则比较，值小的先执行                * 如： AFilter 和 BFilter，AFilter就先执行了。            2. web.xml配置： &lt;filter-mapping&gt;谁定义在上边，谁先执行4. 案例：    1. 案例1_登录验证        * 需求：            1. 访问day17_case案例的资源。验证其是否登录            2. 如果登录了，则直接放行。            3. 如果没有登录，则跳转到登录页面，提示&quot;您尚未登录，请先登录&quot;。</code></pre><p>​    </p><pre><code>    2. 案例2_敏感词汇过滤        * 需求：            1. 对day17_case案例录入的数据进行敏感词汇过滤            2. 敏感词汇参考《敏感词汇.txt》            3. 如果是敏感词汇，替换为 ***         * 分析：            1. 对request对象进行增强。增强获取参数相关方法            2. 放行。传递代理对象        * 增强对象的功能：            * 设计模式：一些通用的解决固定问题的方式            1. 装饰模式            2. 代理模式                * 概念：                    1. 真实对象：被代理的对象                    2. 代理对象：                    3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的                 * 实现方式：                     1. 静态代理：有一个类文件描述代理模式                     2. 动态代理：在内存中形成代理类                        * 实现步骤：                            1. 代理对象和真实对象实现相同的接口                            2. 代理对象 = Proxy.newProxyInstance();                            3. 使用代理对象调用方法。                            4. 增强方法                        * 增强方式：                            1. 增强参数列表                            2. 增强返回值类型                            3. 增强方法体执行逻辑    </code></pre><h4 id="案例：敏感词汇过滤"><a href="#案例：敏感词汇过滤" class="headerlink" title="案例：敏感词汇过滤"></a>案例：敏感词汇过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 敏感词汇过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建代理对象，增强getParameter方法</span></span><br><span class="line"></span><br><span class="line">        ServletRequest proxy_req = (ServletRequest) Proxy.newProxyInstance(req.getClass().getClassLoader(), req.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//增强getParameter方法</span></span><br><span class="line">                <span class="comment">//判断是否是getParameter方法</span></span><br><span class="line">                <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;getParameter&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//增强返回值</span></span><br><span class="line">                    <span class="comment">//获取返回值</span></span><br><span class="line">                    String value = (String) method.invoke(req,args);</span><br><span class="line">                    <span class="keyword">if</span>(value != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(value.contains(str))&#123;</span><br><span class="line">                                value = value.replaceAll(str,<span class="string">&quot;***&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">return</span>  value;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断方法名是否是 getParameterMap</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断方法名是否是 getParameterValue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> method.invoke(req,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.放行</span></span><br><span class="line">        chain.doFilter(proxy_req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//敏感词汇集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.获取文件真实路径</span></span><br><span class="line">            ServletContext servletContext = config.getServletContext();</span><br><span class="line">            String realPath = servletContext.getRealPath(<span class="string">&quot;/WEB-INF/classes/敏感词汇.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//2.读取文件</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(realPath));</span><br><span class="line">            <span class="comment">//3.将文件的每一行数据添加到list中</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="案例：登录验证"><a href="#案例：登录验证" class="headerlink" title="案例：登录验证"></a>案例：登录验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录验证的过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(req);</span><br><span class="line">        <span class="comment">//0.强制转换</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取资源请求路径</span></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        <span class="comment">//2.判断是否包含登录相关资源路径,要注意排除掉 css/js/图片/验证码等资源</span></span><br><span class="line">        <span class="keyword">if</span>(uri.contains(<span class="string">&quot;/login.jsp&quot;</span>) || uri.contains(<span class="string">&quot;/loginServlet&quot;</span>) || uri.contains(<span class="string">&quot;/css/&quot;</span>) || uri.contains(<span class="string">&quot;/js/&quot;</span>) || uri.contains(<span class="string">&quot;/fonts/&quot;</span>) || uri.contains(<span class="string">&quot;/checkCodeServlet&quot;</span>)  )&#123;</span><br><span class="line">            <span class="comment">//包含，用户就是想登录。放行</span></span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//不包含，需要验证用户是否登录</span></span><br><span class="line">            <span class="comment">//3.从获取session中获取user</span></span><br><span class="line">            Object user = request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//登录了。放行</span></span><br><span class="line">                chain.doFilter(req, resp);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//没有登录。跳转登录页面</span></span><br><span class="line"></span><br><span class="line">                request.setAttribute(<span class="string">&quot;login_msg&quot;</span>,<span class="string">&quot;您尚未登录，请登录&quot;</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(request,resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// chain.doFilter(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h3><pre><code>* 概念：web的三大组件之一。    * 事件监听机制        * 事件    ：一件事情        * 事件源 ：事件发生的地方        * 监听器 ：一个对象        * 注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码* ServletContextListener:监听ServletContext对象的创建和销毁    * 方法：        * void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法        * void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法    * 步骤：        1. 定义一个类，实现ServletContextListener接口        2. 复写方法        3. 配置            1. web.xml                    &lt;listener&gt;                      &lt;listener-class&gt;cn.itcast.web.listener.ContextLoaderListener&lt;/listener-class&gt;                    &lt;/listener&gt;                    * 指定初始化参数&lt;context-param&gt;            2. 注解：                * @WebListener</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Web&quot;&gt;&lt;a href=&quot;#Java-Web&quot; class=&quot;headerlink&quot; title=&quot;Java Web&quot;&gt;&lt;/a&gt;Java Web&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;后期学习路径&lt;/p&gt;
&lt;p&gt;ssm框架  简化web开发的经典框架</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="java web" scheme="https://a2914475618.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>windows Dos批处理脚本</title>
    <link href="https://a2914475618.github.io/2021/09/13/windows-Dos%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    <id>https://a2914475618.github.io/2021/09/13/windows-Dos%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-09-13T05:34:22.000Z</published>
    <updated>2021-09-22T13:29:02.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dos批处理脚本学习"><a href="#Dos批处理脚本学习" class="headerlink" title="Dos批处理脚本学习"></a>Dos批处理脚本学习</h1><h2 id="入门概述"><a href="#入门概述" class="headerlink" title="入门概述"></a>入门概述</h2><blockquote><p>batch file 批处理文件使用cmd.exe执行</p><p>脚本以bat为后缀</p><p>使用一系列内置命令进行自动化操作</p><p>例如： 匹配规则删除文件    新建文件、日志等   甚至可以创建计算机病毒 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;默认关闭显示的盘符信息</span><br><span class="line">@echo off</span><br><span class="line">&#x2F;&#x2F;输出内容</span><br><span class="line">echo hello world</span><br><span class="line">&#x2F;&#x2F;暂停 否则看不到控制台</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">内置命令</span><br><span class="line">&#x2F;&#x2F;查看当前网络的配置信息</span><br><span class="line">ipconfig</span><br><span class="line">&#x2F;&#x2F;清屏</span><br><span class="line">cls</span><br><span class="line">&#x2F;&#x2F;查看当前目录文件</span><br><span class="line">dir</span><br><span class="line">&#x2F;&#x2F;查看文件内容</span><br><span class="line">type</span><br><span class="line">type a.txt</span><br><span class="line">&#x2F;&#x2F;常用内置工具命令</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;lpl_lpl_lpl&#x2F;article&#x2F;details&#x2F;87775506</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;klchang&#x2F;p&#x2F;4771101.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部命令</span><br><span class="line">&#x2F;&#x2F;例如python  java等相关命令  mongo</span><br></pre></td></tr></table></figure><h2 id="运算操作"><a href="#运算操作" class="headerlink" title="运算操作"></a>运算操作</h2><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命令模式  set &#x2F;a 1+2</span><br><span class="line">&#x2F;&#x2F;执行1+2  &#x2F;a代表算术运算</span><br><span class="line">文本模式</span><br><span class="line">@echo off</span><br><span class="line">set &#x2F;a var&#x3D;1+2</span><br><span class="line">echo %var%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="重定向运算"><a href="#重定向运算" class="headerlink" title="重定向运算"></a>重定向运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; 代表将结果存储的位置 会覆盖内容</span><br><span class="line">&gt;&gt; 不会覆盖内容  追加</span><br><span class="line">echo &quot;hellow&quot; &gt; a.txt 会创建一个a.txt同时将内容写入</span><br><span class="line">用type 查看内容</span><br><span class="line"></span><br><span class="line">&lt;  右边内容覆盖调左边的内容</span><br><span class="line">&lt;&lt; 右边内容添加到左边的内容后</span><br></pre></td></tr></table></figure><h3 id="多命令运算"><a href="#多命令运算" class="headerlink" title="多命令运算"></a>多命令运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;具有短路  第一个命令执行错误则第二个命令也不会执行</span><br><span class="line">&amp;&amp;   eg：aaaa &amp;&amp; ipconfig</span><br><span class="line">&#x2F;&#x2F;或  第一个执行则第二个也不会执行 短路</span><br><span class="line">||</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="管道操作"><a href="#管道操作" class="headerlink" title="管道操作"></a>管道操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;  | 管道符号</span><br><span class="line">A | B  A的输出等于B的输入</span><br><span class="line">dir | find &quot;.txt&quot; </span><br><span class="line">&#x2F;&#x2F;dir的输出等于 find查找的输入</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;netstat -an  输出当前所有的网络连接</span><br></pre></td></tr></table></figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;主命令 子命令 参数 操作 选项</span><br><span class="line">net user test test &#x2F; add  添加用户  拒绝访问</span><br><span class="line">&#x2F;?  &#x2F;help  获取详细的帮助信息</span><br></pre></td></tr></table></figure><h3 id="批处理文件参数传递"><a href="#批处理文件参数传递" class="headerlink" title="批处理文件参数传递"></a>批处理文件参数传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.bat文件接受参数使用%num</span><br><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">echo %admin</span><br><span class="line">echo %password</span><br><span class="line">net user %admin %password &#x2F;add</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">执行</span><br><span class="line">1.bat zhangsan 123456</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过rem 命令添加注释</span><br></pre></td></tr></table></figure><h3 id="炫酷命令提示符"><a href="#炫酷命令提示符" class="headerlink" title="炫酷命令提示符"></a>炫酷命令提示符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">color 设置默认的控制台前景和背景颜色</span><br><span class="line">color &#x2F;? 查看帮助颜色的相关内容</span><br><span class="line">只能设置单次的颜色</span><br><span class="line">&#x2F;&#x2F;设置标题</span><br><span class="line">title 设置命令提示窗口的标题</span><br></pre></td></tr></table></figure><h3 id="时间相关命令"><a href="#时间相关命令" class="headerlink" title="时间相关命令"></a>时间相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date &#x2F;t  显示当前时间</span><br><span class="line">time &#x2F;t   显示详细时间 包括秒</span><br></pre></td></tr></table></figure><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start 启动一个窗口</span><br><span class="line">start 1.bat 启动这个批处理程序</span><br><span class="line">start &#x2F;b 不会新建一个窗口</span><br><span class="line">start &#x2F;? 查看相关的帮助信息</span><br></pre></td></tr></table></figure><h3 id="调用其他Bat文件"><a href="#调用其他Bat文件" class="headerlink" title="调用其他Bat文件"></a>调用其他Bat文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call 调用其他的批处理文件程序</span><br><span class="line">call 2.bat</span><br><span class="line">调用文件中不能进行参数的传递</span><br></pre></td></tr></table></figure><h3 id="任务列表查看命令"><a href="#任务列表查看命令" class="headerlink" title="任务列表查看命令"></a>任务列表查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasklist 查看本地或者远程上运行的进程列表</span><br><span class="line">tasklist &#x2F;fi &quot;pie eq 12352&quot;  筛选出Pid为12352的</span><br><span class="line">其他内容为 查看  tasklist &#x2F;?</span><br></pre></td></tr></table></figure><h3 id="任务关闭命令"><a href="#任务关闭命令" class="headerlink" title="任务关闭命令"></a>任务关闭命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">taskkill 使用该工具按照进程id 或映像名称终止任务</span><br><span class="line">taskkill &#x2F;? 查看帮助</span><br></pre></td></tr></table></figure><h3 id="文件夹结构查看命令"><a href="#文件夹结构查看命令" class="headerlink" title="文件夹结构查看命令"></a>文件夹结构查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tree  查看文件夹的结构</span><br><span class="line">tree &#x2F;a</span><br><span class="line">tree &#x2F;f 显示子文件</span><br><span class="line">tree 也可以在后面跟上path 指定目录</span><br></pre></td></tr></table></figure><h3 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br><span class="line">shutdown &#x2F;?</span><br><span class="line">shutdown &#x2F;i 打开可视化界面 执行远程主机的关机操作</span><br><span class="line">shutdown &#x2F;p 关闭本地计算机</span><br></pre></td></tr></table></figure><h3 id="计划任务命令"><a href="#计划任务命令" class="headerlink" title="计划任务命令"></a>计划任务命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">at 22：00 &quot;notopad.exe&quot;</span><br><span class="line">通过at指定时间</span><br><span class="line">at 查看有哪些计划任务</span><br><span class="line">at 编号 &#x2F;delete  删除计划任务</span><br></pre></td></tr></table></figure><h3 id="批处理环境变量"><a href="#批处理环境变量" class="headerlink" title="批处理环境变量"></a>批处理环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set</span><br><span class="line">通过set可以获取系统中的一下环境变量</span><br><span class="line">echo %OS%</span><br></pre></td></tr></table></figure><h2 id="文件夹或文件相关命令"><a href="#文件夹或文件相关命令" class="headerlink" title="文件夹或文件相关命令"></a>文件夹或文件相关命令</h2><h3 id="目录浏览"><a href="#目录浏览" class="headerlink" title="目录浏览"></a>目录浏览</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br><span class="line">查看当前目录</span><br><span class="line">dir &#x2F;A 查看所有的文件 包括隐藏文件</span><br><span class="line">dir &#x2F;？查看帮助信息</span><br></pre></td></tr></table></figure><h3 id="目录新建与删除"><a href="#目录新建与删除" class="headerlink" title="目录新建与删除"></a>目录新建与删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">mkdir &#x2F;a&#x2F;b&#x2F;c创建多级目录</span><br><span class="line">简写 md</span><br><span class="line"></span><br><span class="line">rmdir删除目录</span><br><span class="line">简写rd</span><br><span class="line">rmdir  &#x2F;s 删除一个目录树</span><br><span class="line">&#x2F;q  安静模式  不进行提示</span><br><span class="line">redir  test</span><br></pre></td></tr></table></figure><h3 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd  </span><br><span class="line">.当前目录</span><br><span class="line">..上一级目录</span><br></pre></td></tr></table></figure><h3 id="目录重命名"><a href="#目录重命名" class="headerlink" title="目录重命名"></a>目录重命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ren 重命名</span><br><span class="line">rename</span><br><span class="line">ren test test1 重命名为test1</span><br><span class="line">ren path name1 name2</span><br><span class="line">如果为当前目录下  则不用夹path</span><br></pre></td></tr></table></figure><h3 id="目录复制"><a href="#目录复制" class="headerlink" title="目录复制"></a>目录复制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy</span><br><span class="line">copy test2 test1 将test2中的文件复制到test1中</span><br></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del</span><br><span class="line">del path  *.txt 删除该路径下所有的txt文件</span><br></pre></td></tr></table></figure><h3 id="文件移动"><a href="#文件移动" class="headerlink" title="文件移动"></a>文件移动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move</span><br><span class="line">移动文件并重命名文件和目录</span><br></pre></td></tr></table></figure><h2 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h2><h3 id="用户操作命令"><a href="#用户操作命令" class="headerlink" title="用户操作命令"></a>用户操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br><span class="line">&#x2F;&#x2F;创建并修改计算机上的用户账户</span><br><span class="line">net user &#x2F;add 新增</span><br><span class="line">net user &#x2F;delete 删除</span><br></pre></td></tr></table></figure><h3 id="用户组操作命令"><a href="#用户组操作命令" class="headerlink" title="用户组操作命令"></a>用户组操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net localgroup  admin指的是用户</span><br><span class="line">net localgruop user admin &#x2F;delete 删除</span><br><span class="line">net localgroup administrators admin  &#x2F;add 添加</span><br></pre></td></tr></table></figure><h3 id="网络联通检测命令"><a href="#网络联通检测命令" class="headerlink" title="网络联通检测命令"></a>网络联通检测命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ping</span><br><span class="line">ping www.baidu.com  </span><br><span class="line">ping 127.0.0.1  用来检测本地ip协议栈是否运行正常</span><br></pre></td></tr></table></figure><h3 id="网络连接命令"><a href="#网络连接命令" class="headerlink" title="网络连接命令"></a>网络连接命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 进行端口连接 和主机的测试</span><br></pre></td></tr></table></figure><h3 id="路由信息查看命令"><a href="#路由信息查看命令" class="headerlink" title="路由信息查看命令"></a>路由信息查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tracert</span><br><span class="line">tracert 192.168.0.1</span><br><span class="line">tracert www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="网络适配器命令"><a href="#网络适配器命令" class="headerlink" title="网络适配器命令"></a>网络适配器命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><h3 id="ARP信息命令"><a href="#ARP信息命令" class="headerlink" title="ARP信息命令"></a>ARP信息命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp</span><br><span class="line">显示和修改地址解析协议（arp）使用的ip到物理的地址转换表</span><br></pre></td></tr></table></figure><h2 id="条件判断结构"><a href="#条件判断结构" class="headerlink" title="条件判断结构"></a>条件判断结构</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set var&#x3D;hello</span><br><span class="line">if %var%&#x3D;&#x3D;hello (echo ok) else (echo no)</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;去掉请按任意键继续</span><br><span class="line">pause&gt;nul 输出到空设备</span><br></pre></td></tr></table></figure><h3 id="文件是否存在判断"><a href="#文件是否存在判断" class="headerlink" title="文件是否存在判断"></a>文件是否存在判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exist 判断是否存在</span><br><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">rem 用来判断当前文件是否存在</span><br><span class="line">if exist C:\\.... (echo ok) else (echo no)</span><br><span class="line"></span><br><span class="line">pause&gt;nul</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;eg:1  for &#x2F;d %%名称 in (路径&#x2F;*) do具体操作</span><br><span class="line">for &#x2F;d %%a in (*) do echo %%a</span><br><span class="line">&#x2F;&#x2F;eg:2</span><br><span class="line">for &#x2F;d %%a in (*) do if %%a&#x3D;&#x3D;test rd %%a</span><br><span class="line"></span><br><span class="line">for只会遍历文件夹或者目录  不会遍历文件</span><br></pre></td></tr></table></figure><h3 id="遍历目录和子目录下文件"><a href="#遍历目录和子目录下文件" class="headerlink" title="遍历目录和子目录下文件"></a>遍历目录和子目录下文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;r &quot;目录路径&quot; %%v in (匹配规则 例如*.py) </span><br><span class="line">do 执行操作 %%v</span><br></pre></td></tr></table></figure><h3 id="遍历数字"><a href="#遍历数字" class="headerlink" title="遍历数字"></a>遍历数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;L %%v in (start,step,end) do 具体操作</span><br></pre></td></tr></table></figure><h3 id="遍历文件内容"><a href="#遍历文件内容" class="headerlink" title="遍历文件内容"></a>遍历文件内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;f %%v in(文件名) do 具体操作</span><br></pre></td></tr></table></figure><h2 id="virus脚本分析"><a href="#virus脚本分析" class="headerlink" title="virus脚本分析"></a>virus脚本分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:loop</span><br><span class="line">md virus</span><br><span class="line">cd virus</span><br><span class="line">goto loop</span><br><span class="line">pause&gt;nul</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="交互操作"><a href="#交互操作" class="headerlink" title="交互操作"></a>交互操作</h2><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">goto跳转语句</span><br><span class="line"></span><br><span class="line">:first &#x2F;&#x2F;命名代码块</span><br><span class="line">set &#x2F;p opt&#x3D;</span><br><span class="line">if %opt%&#x3D;&#x3D;1 goto one</span><br><span class="line">if %opt%&#x3D;&#x3D;2 goto two</span><br><span class="line">echo Invalid option</span><br><span class="line">goto first</span><br><span class="line"></span><br><span class="line">:one</span><br><span class="line">echo your choice one</span><br><span class="line">pause&gt;nul</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:two</span><br><span class="line">echo your choice two</span><br><span class="line">pause&gt;nul</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="计划执行"><a href="#计划执行" class="headerlink" title="计划执行"></a>计划执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at 10:00 AM &#x2F;every:SU,M,TU,W,TH,F,SA &quot;C:\1.bat&quot;</span><br><span class="line">也可以设置定时关机</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dos批处理脚本学习&quot;&gt;&lt;a href=&quot;#Dos批处理脚本学习&quot; class=&quot;headerlink&quot; title=&quot;Dos批处理脚本学习&quot;&gt;&lt;/a&gt;Dos批处理脚本学习&lt;/h1&gt;&lt;h2 id=&quot;入门概述&quot;&gt;&lt;a href=&quot;#入门概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="bat批处理" scheme="https://a2914475618.github.io/tags/bat%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://a2914475618.github.io/2021/09/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://a2914475618.github.io/2021/09/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-09-12T11:32:53.000Z</published>
    <updated>2021-09-22T13:32:17.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出现1个</span><br><span class="line"></span><br><span class="line">d?代表d字符要出现一次或者0次,也就是d可有可无</span><br><span class="line">*匹配0个或者多个字符   ab*c 代表b可以没有也可以出现多次</span><br><span class="line">+匹配出现1次以上的字符  ab+c  代表的是b至少有一个的匹配</span><br><span class="line">&#123;&#125;可以指定出现的次数  &#123;2&#125; 字符出现2次  &#123;2，6&#125;字符出现2到6次  a&#123;2,&#125; 两次以上</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;出现多个</span><br><span class="line">()可以指定重复的字符串 (ab)+   ab至少出现1次以上</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;或运算符</span><br><span class="line">a(b|c)  代表匹配的   ab  或者  ac</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符类</span><br><span class="line">[] 代表匹配的字符只能取自他们</span><br><span class="line">[abc]+  代表匹配a 或  b  或  c</span><br><span class="line">[a-z]+  代表匹配所有的小写字母</span><br><span class="line">[a-zA-Z0-9] 代表匹配所有的字母和数字</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  ^ 字符</span><br><span class="line">代表匹配除了^以外的其他字符</span><br><span class="line">[^0-9]+ 代表所有的非数字字符(包括换行符)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;元字符</span><br><span class="line">\d  代表数字字符</span><br><span class="line">\D  代表非数字字符</span><br><span class="line">\w  代表单词字符 也就是所有的英文  数字  下划线</span><br><span class="line">\W  代表非单词字符</span><br><span class="line">\s  代表空白符  同时包含TAB  和换行符</span><br><span class="line">\S  代表非空白字符</span><br><span class="line">\b  字符的边界</span><br><span class="line">.  代表任意字符 但不包含换行符 </span><br><span class="line">^会匹配行首</span><br><span class="line">$匹配行尾</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;贪婪与懒惰匹配</span><br><span class="line">&lt;.+&gt; 会匹配整个span标签</span><br><span class="line"></span><br><span class="line">&lt;span&gt;111&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">需要改成 懒惰匹配</span><br><span class="line">&lt;.+?&gt;就只会匹配一个span标签</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="正则" scheme="https://a2914475618.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://a2914475618.github.io/2021/09/11/postredis/"/>
    <id>https://a2914475618.github.io/2021/09/11/postredis/</id>
    <published>2021-09-11T13:09:08.000Z</published>
    <updated>2021-10-05T06:44:58.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>适用场景：</p><ol><li><p>原始业务功能设计</p><ol><li>秒杀</li><li>618活动</li><li>双11活动</li><li>排队购票</li></ol></li><li><p>运营平台监控到的突发高频访问数据</p><p>突发时政要闻，被强势关注围观</p></li><li><p>高频、复杂的统计数据</p><p>在线人数</p><p>投票排行榜</p></li><li><p>附加功能</p><p>单服务升级集群</p><p>session管理</p><p>toekn管理</p></li></ol><blockquote><p>nosql  不仅仅是sql   </p><p>解决性能的问题 打破传统的模式</p><p>这种类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展 （属性字段太多，100000个字段）</p><p>数据之间无关系，容易扩展，在架构层面上带来了可扩展的能力</p><p>rdbs 关系数据库   acid  关系数据库的特性  bson josn的二进制流（mongodb）中</p><p>nosql  键值对存储  </p><p>高速缓存 强悍的是Memcache    数据类型丰富 redis</p><p>redis 的印象           1.kv 键值对      2.   cache缓存       3.persistence持久化</p><p>互联网3v  volume 海量   variety  多样   velocity  实时  </p><p>3高   高并发   高可扩    高性能</p></blockquote><p>session问题：</p><blockquote><p>分布式中session的共享问题</p><ol><li>cookie     安全性问题</li><li>session复制    空间浪费，数据冗余</li></ol><p>nosql不需要io操作，放在内存中，能够作为缓存使用</p></blockquote><p>应用场景：</p><ol><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高扩展性的</li></ol><p>不适用场景：</p><ol><li>需要事务支持</li><li>处理复杂的关系</li></ol><p>大数据时代数据库分类：</p><ol><li>行式数据库</li><li>列式数据库</li></ol><blockquote><p>默认有16个数据库</p><p>select 1  切换库</p></blockquote><h2 id="redis-key相关命令"><a href="#redis-key相关命令" class="headerlink" title="redis key相关命令"></a>redis key相关命令</h2><blockquote><p>keys *查看当前库所有key   (匹配：keys *1)</p><p>exists key判断某个key是否存在</p><p>type key 查看你的key是什么类型</p><p>del key    删除指定的key数据</p><p>unlink key  根据value选择非阻塞删除</p><p>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</p><p>expire key 10  10秒钟：为给定的key设置过期时间</p><p>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</p></blockquote><h2 id="数据库操作相关命令"><a href="#数据库操作相关命令" class="headerlink" title="数据库操作相关命令"></a>数据库操作相关命令</h2><blockquote><p>select命令切换数据库</p><p>dbsize查看当前数据库的key的数量</p><p>flushdb清空当前库</p><p>flushall通杀全部库</p></blockquote><p>数据类型指的是value的值</p><h2 id="Redis字符串"><a href="#Redis字符串" class="headerlink" title="Redis字符串"></a>Redis字符串</h2><blockquote><p>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p><p>内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set   &lt;key&gt;&lt;value&gt;添加键值对</span><br><span class="line">get   &lt;key&gt;查询对应键值</span><br><span class="line">append  &lt;key&gt;&lt;value&gt;将给定的&lt;value&gt; 追加到原值的末尾</span><br><span class="line">strlen  &lt;key&gt;获得值的长度</span><br><span class="line">setnx  &lt;key&gt;&lt;value&gt;只有在 key 不存在时    设置 key 的值</span><br><span class="line"></span><br><span class="line">incr  &lt;key&gt;</span><br><span class="line">将 key 中储存的数字值增1</span><br><span class="line">只能对数字值操作，如果为空，新增值为1</span><br><span class="line">decr  &lt;key&gt;</span><br><span class="line">将 key 中储存的数字值减1</span><br><span class="line">只能对数字值操作，如果为空，新增值为-1</span><br><span class="line">incrby &#x2F; decrby  &lt;key&gt;&lt;步长&gt;将 key 中储存的数字值增减。自定义步长。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mset  &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;  ..... </span><br><span class="line">同时设置一个或多个 key-value对  </span><br><span class="line">mget  &lt;key1&gt;&lt;key2&gt;&lt;key3&gt; .....</span><br><span class="line">同时获取一个或多个 value  </span><br><span class="line">msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;  ..... </span><br><span class="line">同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</span><br><span class="line">原子性，有一个失败则都失败</span><br><span class="line"></span><br><span class="line">getrange  &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</span><br><span class="line">获得值的范围，类似java中的substring，前包，后包</span><br><span class="line">setrange  &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</span><br><span class="line">用 &lt;value&gt;  覆写&lt;key&gt;所储存的字符串值，从&lt;起始位置&gt;开始(索引从0开始)。</span><br><span class="line"></span><br><span class="line">setex  &lt;key&gt;&lt;过期时间&gt;&lt;value&gt;</span><br><span class="line">设置键值的同时，设置过期时间，单位秒。</span><br><span class="line">getset &lt;key&gt;&lt;value&gt;</span><br><span class="line">以新换旧，设置了新值同时获得旧值。</span><br></pre></td></tr></table></figure><h2 id="Redis列表"><a href="#Redis列表" class="headerlink" title="Redis列表"></a>Redis列表</h2><blockquote><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lpush&#x2F;rpush  &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt; .... 从左边&#x2F;右边插入一个或多个值。</span><br><span class="line">lpop&#x2F;rpop  &lt;key&gt;从左边&#x2F;右边吐出一个值。值在键在，值光键亡。</span><br><span class="line"></span><br><span class="line">rpoplpush  &lt;key1&gt;&lt;key2&gt;从&lt;key1&gt;列表右边吐出一个值，插到&lt;key2&gt;列表左边。</span><br><span class="line"></span><br><span class="line">lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</span><br><span class="line">按照索引下标获得元素(从左到右)</span><br><span class="line">lrange mylist 0 -1   0左边第一个，-1右边第一个，（0-1表示获取所有）</span><br><span class="line">lindex &lt;key&gt;&lt;index&gt;按照索引下标获得元素(从左到右)</span><br><span class="line">llen &lt;key&gt;获得列表长度 </span><br><span class="line"></span><br><span class="line">linsert &lt;key&gt;  before &lt;value&gt;&lt;newvalue&gt;在&lt;value&gt;的后面插入&lt;newvalue&gt;插入值</span><br><span class="line">lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;从左边删除n个value(从左到右)</span><br><span class="line">lset&lt;key&gt;&lt;index&gt;&lt;value&gt;将列表key下标为index的值替换成value</span><br></pre></td></tr></table></figure><p>数据结构：</p><blockquote><p>List的数据结构为快速链表quickList。</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist。</p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p></blockquote><h2 id="Redis集合"><a href="#Redis集合" class="headerlink" title="Redis集合"></a>Redis集合</h2><blockquote><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以****自动排重****的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p><p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的****复杂度都是O(1)****。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ..... </span><br><span class="line">将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</span><br><span class="line">smembers &lt;key&gt;取出该集合的所有值。</span><br><span class="line">sismember &lt;key&gt;&lt;value&gt;判断集合&lt;key&gt;是否为含有该&lt;value&gt;值，有1，没有0</span><br><span class="line">scard&lt;key&gt;返回该集合的元素个数。</span><br><span class="line">srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt; .... 删除集合中的某个元素。</span><br><span class="line">spop &lt;key&gt;随机从该集合中吐出一个值。</span><br><span class="line">srandmember &lt;key&gt;&lt;n&gt;随机从该集合中取出n个值。不会从集合中删除 。</span><br><span class="line">smove &lt;source&gt;&lt;destination&gt;value把集合中一个值从一个集合移动到另一个集合</span><br><span class="line">sinter &lt;key1&gt;&lt;key2&gt;返回两个集合的交集元素。</span><br><span class="line">sunion &lt;key1&gt;&lt;key2&gt;返回两个集合的并集元素。</span><br><span class="line">sdiff &lt;key1&gt;&lt;key2&gt;返回两个集合的差集元素(key1中的，不包含key2中的)</span><br></pre></td></tr></table></figure><p> 数据结构：</p><blockquote><p>Set数据结构是dict字典，字典是用哈希表实现的。</p><p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p></blockquote><h2 id="Redis哈希"><a href="#Redis哈希" class="headerlink" title="Redis哈希"></a>Redis哈希</h2><blockquote><p>Redis hash 是一个键值对集合。</p><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>类似Java里面的Map&lt;String,Object&gt;</p><p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key/value结构来存储</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hset &lt;key&gt;&lt;field&gt;&lt;value&gt;给&lt;key&gt;集合中的  &lt;field&gt;键赋值&lt;value&gt;</span><br><span class="line">hget &lt;key1&gt;&lt;field&gt;从&lt;key1&gt;集合&lt;field&gt;取出 value </span><br><span class="line">hmset &lt;key1&gt;&lt;field1&gt;&lt;value1&gt;&lt;field2&gt;&lt;value2&gt;... 批量设置hash的值</span><br><span class="line">hexists&lt;key1&gt;&lt;field&gt;查看哈希表 key 中，给定域 field 是否存在。 </span><br><span class="line">hkeys &lt;key&gt;列出该hash集合的所有field</span><br><span class="line">hvals &lt;key&gt;列出该hash集合的所有value</span><br><span class="line">hincrby &lt;key&gt;&lt;field&gt;&lt;increment&gt;为哈希表 key 中的域 field 的值加上增量 1   -1</span><br><span class="line">hsetnx &lt;key&gt;&lt;field&gt;&lt;value&gt;将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</span><br></pre></td></tr></table></figure><p>数据结构：</p><blockquote><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p></blockquote><h2 id="Redis有序集合"><a href="#Redis有序集合" class="headerlink" title="Redis有序集合"></a>Redis有序集合</h2><blockquote><p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。</p><p>不同之处是有序集合的每个成员都关联了一个<em><strong>*评分（score）*</strong></em>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">zadd  &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;…</span><br><span class="line">将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</span><br><span class="line">zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;  [WITHSCORES]   </span><br><span class="line">返回有序集 key 中，下标在&lt;start&gt;&lt;stop&gt;之间的元素</span><br><span class="line">带WITHSCORES，可以让分数一起和值返回到结果集。</span><br><span class="line">zrangebyscore key minmax [withscores] [limit offset count]</span><br><span class="line">返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </span><br><span class="line">zrevrangebyscore key maxmin [withscores] [limit offset count]               </span><br><span class="line">同上，改为从大到小排列。 </span><br><span class="line">zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;      为元素的score加上增量</span><br><span class="line">zrem  &lt;key&gt;&lt;value&gt;删除该集合下，指定值的元素 </span><br><span class="line">zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;统计该集合，分数区间内的元素个数 </span><br><span class="line">zrank &lt;key&gt;&lt;value&gt;返回该值在集合中的排名，从0开始。</span><br></pre></td></tr></table></figure><p>数据结构：</p><blockquote><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p><p>zset底层使用了两个数据结构</p><p>（1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p><p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p></blockquote><h2 id="Redis-Bitmaps"><a href="#Redis-Bitmaps" class="headerlink" title="Redis Bitmaps"></a>Redis Bitmaps</h2><blockquote><p>​    Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><p>（1） Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p><p>Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.setbit</span><br><span class="line">setbit&lt;key&gt;&lt;offset&gt;&lt;value&gt;设置Bitmaps中某个偏移量的值（0或1）</span><br><span class="line">2.getbit</span><br><span class="line">getbit&lt;key&gt;&lt;offset&gt;获取Bitmaps中某个偏移量的值统计字符串被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</span><br><span class="line">3.bitcount</span><br><span class="line">统计字符串被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</span><br><span class="line">4.bitop</span><br><span class="line">bitop  and(or&#x2F;not&#x2F;xor) &lt;destkey&gt; [key…]</span><br><span class="line">bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</span><br></pre></td></tr></table></figure><blockquote><p>适合存储活跃用户</p></blockquote><h2 id="Redis-HyperLoglog"><a href="#Redis-HyperLoglog" class="headerlink" title="Redis HyperLoglog"></a>Redis HyperLoglog</h2><blockquote><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pfadd</span><br><span class="line">pfadd &lt;key&gt;&lt; element&gt; [element ...]   添加指定元素到 HyperLogLog 中pfcount&lt;key&gt; [key ...] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</span><br><span class="line">pfcount</span><br><span class="line">pfcount&lt;key&gt; [key ...] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</span><br><span class="line">pfmerage</span><br><span class="line">pfmerge&lt;destkey&gt;&lt;sourcekey&gt; [sourcekey ...]  将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Redis-Geospatial"><a href="#Redis-Geospatial" class="headerlink" title="Redis Geospatial"></a>Redis Geospatial</h2><blockquote><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、geoadd</span><br><span class="line">geoadd&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;&lt;member&gt; [longitude latitude member...]   添加地理位置（经度，纬度，名称）</span><br><span class="line">2.geopos</span><br><span class="line">geopos  &lt;key&gt;&lt;member&gt; [member...]  获得指定地区的坐标值</span><br><span class="line">3.geodist</span><br><span class="line">geodist&lt;key&gt;&lt;member1&gt;&lt;member2&gt;  [m|km|ft|mi ]  获取两个位置之间的直线距离</span><br><span class="line">4.georadius</span><br><span class="line">georadius&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;radius  m|km|ft|mi   以给定的经纬度为中心，找出某一半径内的元素</span><br></pre></td></tr></table></figure><h2 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是串联多个命令防止别的命令插队。</p></blockquote><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><blockquote><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过discard来放弃组队。  </p></blockquote><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><blockquote><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。    </p></blockquote><h3 id="事务冲突"><a href="#事务冲突" class="headerlink" title="事务冲突"></a>事务冲突</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><blockquote><p><em><strong>*悲观锁(Pessimistic Lock)*</strong></em>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。****传统的关系型数据库里边就用到了很多这种锁机制*<em><strong>，比如</strong></em>*行锁*<em><strong>，</strong></em>*表锁*<em><strong>等，</strong></em>*读锁*<em><strong>，</strong></em>*写锁****等，都是在做操作之前先上锁。</p></blockquote><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><blockquote><p><em><strong>*乐观锁(Optimistic Lock)*</strong>***</em>*,**** 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。****乐观锁适用于多读的应用类型，这样可以提高吞吐量****。Redis就是利用这种check-and-set机制实现事务的。</p></blockquote><h4 id="WATCH-key-key…"><a href="#WATCH-key-key…" class="headerlink" title="WATCH key [key…]"></a>WATCH key [key…]</h4><blockquote><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务<em><strong>*执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。*</strong></em></p></blockquote><h4 id="UNWTACH"><a href="#UNWTACH" class="headerlink" title="UNWTACH"></a>UNWTACH</h4><blockquote><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p></blockquote><h3 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h3><blockquote><p>单独的隔离操作 </p><p>n 事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p><p>没有隔离级别的概念 </p><p>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</p><p> 不保证原子性 </p><p>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;适用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;原始业务功能设计&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;秒杀&lt;/li&gt;
&lt;li&gt;61</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="redis" scheme="https://a2914475618.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>node.js</title>
    <link href="https://a2914475618.github.io/2021/09/07/node-js/"/>
    <id>https://a2914475618.github.io/2021/09/07/node-js/</id>
    <published>2021-09-07T07:02:09.000Z</published>
    <updated>2021-10-07T07:41:27.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="①静态服务器创建"><a href="#①静态服务器创建" class="headerlink" title="①静态服务器创建"></a>①静态服务器创建</h2><ul><li>通过fs模块读取文件</li><li>通过http模块创建web服务</li><li>通过Path模块来获取后缀</li><li>通过url模块来解析参数</li></ul><h3 id="common-js"><a href="#common-js" class="headerlink" title="common.js"></a>common.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getMime = <span class="function"><span class="keyword">function</span> (<span class="params">extname</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (extname) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.html&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.css&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;text/css&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;.js&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.getFileMime = <span class="function"><span class="keyword">function</span> (<span class="params">extname</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./data/mime.json&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                reject(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> mimeObj=<span class="built_in">JSON</span>.parse(data.toString());</span><br><span class="line">            <span class="comment">// console.log(mimeObj[extname]);</span></span><br><span class="line">            resolve(mimeObj[extname]);</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">exports.getFileMime = function (extname) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    var data=fs.readFileSync(&#x27;./data/mime.json&#x27;); //同步方法</span></span><br><span class="line"><span class="comment">    let mimeObj=JSON.parse(data.toString());   </span></span><br><span class="line"><span class="comment">    return mimeObj[extname];    </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common=<span class="built_in">require</span>(<span class="string">&#x27;./module/common.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//1、获取地址</span></span><br><span class="line">    <span class="keyword">let</span> pathname=url.parse(req.url).pathname;    </span><br><span class="line">    pathname=pathname==<span class="string">&#x27;/&#x27;</span>?<span class="string">&#x27;/index.html&#x27;</span>:pathname;    </span><br><span class="line">    <span class="keyword">let</span> extname=path.extname(pathname);</span><br><span class="line"> <span class="comment">//2、通过fs模块读取文件</span></span><br><span class="line">    <span class="keyword">if</span>(pathname!=<span class="string">&#x27;/favicon.ico&#x27;</span>)&#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./static&#x27;</span>+pathname,<span class="keyword">async</span> (err,data)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;                </span><br><span class="line">                res.writeHead(<span class="number">404</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span>&#125;);  </span><br><span class="line">                res.end(<span class="string">&#x27;404这个页面不存在&#x27;</span>);               </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> mime=<span class="keyword">await</span> common.getFileMime(extname);</span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span>+mime+<span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span>&#125;);  </span><br><span class="line">            res.end(data);            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="②EJS模板引擎"><a href="#②EJS模板引擎" class="headerlink" title="②EJS模板引擎"></a>②EJS模板引擎</h2><p>通过npm i ejs 安装</p><p>动态渲染页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ejs.renderFile(path,&#123;&#125;,(err,data)&#x3D;&gt;&#123;</span><br><span class="line">res.writerHead(200,&#123;&#39;Content-Type&#39;:&#39;text&#x2F;htmlcharset&#x3D;&quot;utf-8&quot;&#125;);</span><br><span class="line">res.end(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;% &#39;脚本&#39; 标签，用于流程控制，无输出。</span><br><span class="line">&lt;%_ 删除其前面的空格符</span><br><span class="line">&lt;%&#x3D; 输出数据到模板（输出是转义 HTML 标签）</span><br><span class="line">&lt;%- 输出非转义的数据到模板</span><br><span class="line">&lt;%# 注释标签，不执行、不输出内容</span><br><span class="line">&lt;%% 输出字符串 &#39;&lt;%&#39;</span><br><span class="line">%&gt; 一般结束标签</span><br><span class="line">-%&gt; 删除紧随其后的换行符</span><br><span class="line">_%&gt; 将结束标签后面的空格符删除</span><br></pre></td></tr></table></figure><p>文档地址：<a href="https://ejs.bootcss.com/#install">EJS – 嵌入式 JavaScript 模板引擎 | EJS 中文文档 (bootcss.com)</a></p><h2 id="③路由封装"><a href="#③路由封装" class="headerlink" title="③路由封装"></a>③路由封装</h2><h3 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">&#x27;./module/routes&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建静态web服务</span></span><br><span class="line">    routes.static(req, res, <span class="string">&#x27;static&#x27;</span>);</span><br><span class="line">    <span class="comment">//路由</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.parse(req.url).pathname.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>);      </span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/news      pathname=news  </span></span><br><span class="line">    <span class="comment">//http://127.0.0.1:3000/login      pathname=login  </span></span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/xxxx      pathname=xxxx   app.xxxx不存在 </span></span><br><span class="line">    <span class="keyword">let</span> extname = path.extname(pathname);</span><br><span class="line">    <span class="keyword">if</span> (!extname) &#123;   <span class="comment">//如果有后缀名的话让静态web服务去处理 </span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            routes[pathname](req, res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            routes[<span class="string">&#x27;error&#x27;</span>](req, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="routes-js"><a href="#routes-js" class="headerlink" title="routes.js"></a>routes.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有方法</span></span><br><span class="line"><span class="keyword">let</span> getFileMime = <span class="function"><span class="keyword">function</span> (<span class="params">extname</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = fs.readFileSync(<span class="string">&#x27;./data/mime.json&#x27;</span>); <span class="comment">//同步方法</span></span><br><span class="line">    <span class="keyword">let</span> mimeObj = <span class="built_in">JSON</span>.parse(data.toString());</span><br><span class="line">    <span class="keyword">return</span> mimeObj[extname];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = &#123;</span><br><span class="line">    <span class="keyword">static</span>: <span class="function">(<span class="params">req, res,staticPath</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//1、获取地址</span></span><br><span class="line">        <span class="keyword">let</span> pathname = url.parse(req.url).pathname;      </span><br><span class="line">        <span class="keyword">let</span> extname = path.extname(pathname);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//2、通过fs模块读取文件</span></span><br><span class="line">        <span class="keyword">if</span> (pathname != <span class="string">&#x27;/favicon.ico&#x27;</span> &amp;&amp; extname) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> data = fs.readFileSync(<span class="string">&#x27;./&#x27;</span> + staticPath + pathname);</span><br><span class="line">                <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                    <span class="keyword">let</span> mime = getFileMime(extname);</span><br><span class="line">                    res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span> + mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">                    res.end(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    login: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      ejs.renderFile(<span class="string">&#x27;./views/form.ejs&#x27;</span>,&#123;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">        res.end(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    news: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;       </span><br><span class="line">        res.end(<span class="string">&#x27;news&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    doLogin:<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;       </span><br><span class="line">         <span class="comment">//获取post传值        </span></span><br><span class="line">         <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">         req.on(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">             postData+=chunk;</span><br><span class="line">         &#125;)</span><br><span class="line">         req.on(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(postData);</span><br><span class="line">            res.end(postData);</span><br><span class="line">         &#125;)</span><br><span class="line">         </span><br><span class="line">    &#125;,<span class="attr">error</span>:<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.login(&#x27;req&#x27;,&#x27;res&#x27;)</span></span><br><span class="line"><span class="comment">// app[&#x27;login&#x27;](&#x27;req&#x27;,&#x27;res&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=app;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="④原生node-js封装express框架"><a href="#④原生node-js封装express框架" class="headerlink" title="④原生node.js封装express框架"></a>④原生node.js封装express框架</h2><h3 id="app-js-2"><a href="#app-js-2" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app=<span class="built_in">require</span>(<span class="string">&#x27;./module/route&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册web服务</span></span><br><span class="line">http.createServer(app).listen(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">app.static(<span class="string">&quot;static&quot;</span>);    <span class="comment">//修改默认静态web目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line">app.get(<span class="string">&#x27;/login&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html;charset=&quot;utf-8&quot;&#x27; &#125;);</span></span><br><span class="line">    <span class="comment">// res.end(&#x27;执行登录操作&#x27;);</span></span><br><span class="line">    ejs.renderFile(<span class="string">&quot;./views/form.ejs&quot;</span>,&#123;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        res.send(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/doLogin&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">    res.send(req.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="route-js"><a href="#route-js" class="headerlink" title="route.js"></a>route.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展res</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeRes</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    res.send = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据后缀名获取文件类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileMime</span>(<span class="params">extname</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = fs.readFileSync(<span class="string">&#x27;./data/mime.json&#x27;</span>); <span class="comment">//同步方法</span></span><br><span class="line">    <span class="keyword">let</span> mimeObj = <span class="built_in">JSON</span>.parse(data.toString());</span><br><span class="line">    <span class="keyword">return</span> mimeObj[extname];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态web服务的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initStatic</span>(<span class="params">req, res, staticPath</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、获取地址</span></span><br><span class="line">    <span class="keyword">let</span> pathname = url.parse(req.url).pathname;</span><br><span class="line">    <span class="comment">// pathname = pathname == &#x27;/&#x27; ? &#x27;/index.html&#x27; : pathname;</span></span><br><span class="line">    <span class="keyword">let</span> extname = path.extname(pathname);</span><br><span class="line">    <span class="comment">//2、通过fs模块读取文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (extname) &#123;  <span class="comment">//如果有后缀名用静态web服务处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data = fs.readFileSync(<span class="string">&#x27;./&#x27;</span> + staticPath + pathname);</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                <span class="keyword">let</span> mime = getFileMime(extname);</span><br><span class="line">                res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;&#x27;</span> + mime + <span class="string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">                res.end(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> G = &#123;</span><br><span class="line">        _get: &#123;&#125;,</span><br><span class="line">        _post: &#123;&#125;,</span><br><span class="line">        staticPath: <span class="string">&#x27;static&#x27;</span> <span class="comment">//，默认静态web目录</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> app = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//扩展res的方法</span></span><br><span class="line">        changeRes(res);</span><br><span class="line">        <span class="comment">//配置静态web服务</span></span><br><span class="line">        initStatic(req, res, G.staticPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> pathname = url.parse(req.url).pathname;</span><br><span class="line">        <span class="comment">//获取请求类型</span></span><br><span class="line">        <span class="keyword">let</span> method = req.method.toLowerCase();</span><br><span class="line">        <span class="built_in">console</span>.log(method);</span><br><span class="line">        <span class="keyword">let</span> extname = path.extname(pathname);</span><br><span class="line">        <span class="keyword">if</span> (!extname) &#123;  <span class="comment">//如果有后缀名用静态web处理</span></span><br><span class="line">            <span class="keyword">if</span> (G[<span class="string">&#x27;_&#x27;</span> + method][pathname]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method == <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">                    G[<span class="string">&#x27;_&#x27;</span> + method][pathname](req, res);  <span class="comment">//执行方法</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//post  获取post的数据 把它绑定到req.body</span></span><br><span class="line">                    <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                    req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">                        postData += chunk;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        req.body = postData;</span><br><span class="line">                        G[<span class="string">&#x27;_&#x27;</span> + method][pathname](req, res);  <span class="comment">//执行方法</span></span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.writeHead(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span> &#125;);</span><br><span class="line">                res.end(<span class="string">&#x27;页面不存在&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get请求</span></span><br><span class="line">    app.get = <span class="function"><span class="keyword">function</span> (<span class="params">str, cb</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//注册方法</span></span><br><span class="line">        G._get[str] = cb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//post请求</span></span><br><span class="line">    app.post = <span class="function"><span class="keyword">function</span> (<span class="params">str, cb</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//注册方法</span></span><br><span class="line">        G._post[str] = cb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置静态web服务目录</span></span><br><span class="line">    app.static = <span class="function"><span class="keyword">function</span> (<span class="params">staticPath</span>) </span>&#123;</span><br><span class="line">        G.staticPath = staticPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = server();</span><br></pre></td></tr></table></figure><h2 id="⑤MongoDb"><a href="#⑤MongoDb" class="headerlink" title="⑤MongoDb"></a>⑤MongoDb</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>NoSql   不仅仅是Sql</li><li>没有行列概念、用Json存储数据</li><li>集合相当于表，文档相当于行</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">use db <span class="operator">/</span><span class="operator">/</span>使用数据库,添加一条数据后创建数据库</span><br><span class="line"><span class="keyword">show</span> dbs <span class="operator">/</span><span class="operator">/</span>查看有哪些数据库</span><br><span class="line">db.user.insert&lt;&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:20&#125;&gt;//插入数据</span><br><span class="line"><span class="keyword">show</span> collections <span class="operator">/</span><span class="operator">/</span>查看有哪些表</span><br><span class="line">db.user.find()<span class="operator">/</span><span class="operator">/</span>查看表中有哪些数据</span><br><span class="line">db.dropDatabase() <span class="operator">/</span><span class="operator">/</span>删除数据库</span><br><span class="line">db.user.drop()<span class="operator">/</span><span class="operator">/</span>删除表</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.find(&#123;&quot;age&quot;:20&#125;)//查找年龄等于20的数据</span><br><span class="line">db.user.distinct(&quot;name&quot;)<span class="operator">/</span><span class="operator">/</span>过滤到name中的重复数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:22&#125;&#125;)//年龄大于22的数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$lt:22&#125;&#125;)//小于22的数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gte:25&#125;&#125;)//年龄大于等于25的数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$lte:22&#125;&#125;)//年龄小于等于22的数据</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:22,$lt:30&#125;&#125;)//年龄大于22,小于30的数据</span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/zhang/&#125;)//模糊查询，包含zhang</span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/^zh/&#125;)//模糊查询，以zh开头的</span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/zh$/&#125;)//模糊查询，以zh结尾的</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.find(&#123;&#125;,&#123;name:1&#125;)//只显示name这一列</span><br><span class="line">db.user.find().sort(&#123;&quot;age&quot;:1&#125;)//升序</span><br><span class="line">db.user.find().sort(&#123;&quot;age&quot;:-1&#125;)//降序</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:10,&quot;name&quot;:&quot;张三&quot;&#125;)//年龄为10并且姓名为张三的数据</span><br><span class="line">db.user.find().limit(<span class="number">5</span>)<span class="operator">/</span><span class="operator">/</span>查询前<span class="number">5</span>条数据</span><br><span class="line">db.user.find().<span class="keyword">skip</span>(<span class="number">10</span>)<span class="operator">/</span><span class="operator">/</span>跳过<span class="number">10</span>条数据</span><br><span class="line">db.user.find.skip(<span class="number">2</span>).limit(<span class="number">2</span>)<span class="operator">/</span><span class="operator">/</span>查询第三条和第四条数据  用于分页</span><br><span class="line">db.user.find.<span class="built_in">count</span>()<span class="operator">/</span><span class="operator">/</span>统计数量</span><br><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:22&#125;&#125;).count()//统计年龄大于22的数据</span><br><span class="line">db.user.find(&#123;$or:[&#123;&quot;age&quot;:20&#125;,&#123;&quot;age&quot;:21&#125;]&#125;)//年龄等于20或者等于21的数据</span><br><span class="line">db.user.findOne()<span class="operator">/</span><span class="operator">/</span>只查询第一条数据</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.update(&#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;,&#123;$set:&#123;&quot;name&quot;:&quot;张三&quot;&#125;&#125;)//更新数据 前一个是查询的条件</span><br><span class="line">db.user.update(&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:20&#125;,&#123;$set:&#123;&quot;sex&quot;:&quot;男&quot;&#125;&#125;)//增加列</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>不出现$<span class="keyword">set</span>则为完整替换，即代表整条数据被替换</span><br><span class="line">db.user.update(&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:20&#125;,&#123;$set:&#123;&quot;sex&quot;:&quot;男&quot;&#125;&#125;,multi:true)//一次性替换多条数据</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.remove(&#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;)//删除姓名为zhangsan 的数据</span><br><span class="line">db.user.remove(&#123;&quot;age&quot;:12&#125;,&#123;justOne:true&#125;)//删除年龄为12的数据,justOne仅删除第一条的数据</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="查询具体的执行时间"><a href="#查询具体的执行时间" class="headerlink" title="查询具体的执行时间"></a>查询具体的执行时间</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find().explain(&quot;executionStats&quot;)</span><br></pre></td></tr></table></figure><h4 id="索引基本操作"><a href="#索引基本操作" class="headerlink" title="索引基本操作"></a>索引基本操作</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">db.user.ensureIndex(&#123;&quot;name&quot;:1&#125;)//创建索引  1是升序 -1是降序</span><br><span class="line">db.user.getIndexes()<span class="operator">/</span><span class="operator">/</span>查看当前表是否有索引</span><br><span class="line">db.user.dropIndex(&#123;&quot;name&quot;:1&#125;)//删除索引</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>复合索引</span><br><span class="line">db.user.ensureIndex(&#123;&quot;name&quot;:1,&quot;age&quot;:1&#125;)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>唯一索引</span><br><span class="line">db.user.ensureIndex(&#123;&quot;name&quot;:1&#125;,&#123;&quot;unique&quot;:true&#125;)</span><br></pre></td></tr></table></figure><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ues admin</span><br><span class="line"><span class="keyword">show</span> users<span class="operator">/</span><span class="operator">/</span>查看有哪些角色 root超级管理员 dbOwner数据库管理员</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">              <span class="keyword">user</span>:<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">              pwd:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">              roles:[&#123;role:&#x27;root&#x27;,db:&#x27;admin&#x27;&#125;]</span><br><span class="line">              &#125;)</span><br><span class="line">db.dropUser()<span class="operator">/</span><span class="operator">/</span>删除管理员</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;修改mongodb数据库配置文件mongod.cfg</span><br><span class="line">&#x2F;&#x2F;配置</span><br><span class="line">security:</span><br><span class="line">authorization:enabled</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重启Mongodb</span><br><span class="line">cmd+services.msc</span><br><span class="line">重启服务</span><br><span class="line">mongo admin -u 用户名 -p 密码</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.updateUser(&#39;admin&#39;,&#123;pwd:&quot;password&quot;&#125;)&#x2F;&#x2F;修改用户名密码</span><br><span class="line">db.auth(&quot;admin&quot;,&quot;password&quot;)&#x2F;&#x2F;密码认证</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="聚合管道"><a href="#聚合管道" class="headerlink" title="聚合管道"></a>聚合管道</h3><p>使用聚合管道可以对集合中的文档进行变换和组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$project  增加、删除、重命名字段    select</span><br><span class="line">$match    条件匹配。只满足条件的文档才能进入下一阶段  having where</span><br><span class="line">$limit    限制结果的数量  </span><br><span class="line">$skip     跳过文档数量  </span><br><span class="line">$sort     条件排序 order by</span><br><span class="line">$group    条件组合结果   group by</span><br><span class="line">$lookup   用于引入其他集合的数据 表关联查询  join</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>$project 查出所需的两列，过滤其他信息</span><br><span class="line">db.order.aggregate([&#123;</span><br><span class="line">$project:&#123;order_id:1,trade_no:1&#125;</span><br><span class="line">&#125;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$math  相当于find里面的参数，查询条件  价格大于<span class="number">90</span></span><br><span class="line">db.order.aggregate([&#123;</span><br><span class="line">$project:&#123;order_id:1,trade_no:1&#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    $match:&#123;&quot;price&quot;:&#123;$gte:90&#125;&#125;</span><br><span class="line">                    &#125;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$<span class="keyword">group</span>   进行分组和统计</span><br><span class="line">db.order_item.aggregate([&#123;</span><br><span class="line">    $group:&#123;_id:&quot;$order_id&quot;,total:&#123;$sum:&quot;$num&quot;&#125;&#125;</span><br><span class="line">                         &#125;])</span><br><span class="line">                         </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>sort     升序或者降序排列</span><br><span class="line">db.order.aggregate([&#123;</span><br><span class="line">$project:&#123;order_id:1,trade_no:1&#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    $match:&#123;&quot;price&quot;:&#123;$gte:90&#125;&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">     $sort:&#123;&quot;all_price&quot;:-1&#125;               </span><br><span class="line">                    &#125;])</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$limit    限制返回几条数据</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$<span class="keyword">skip</span>    跳过几条数据</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>$lookup   表关联</span><br><span class="line">db.order.aggregate([&#123;</span><br><span class="line">$lookup:&#123;</span><br><span class="line">              <span class="keyword">from</span>:&quot;order_item&quot;,</span><br><span class="line">              localField:&quot;order_id&quot;,</span><br><span class="line">              foreignField:&quot;order_id&quot;,</span><br><span class="line">              <span class="keyword">as</span>:&quot;items&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">&#125;])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="备份和还原"><a href="#备份和还原" class="headerlink" title="备份和还原"></a>备份和还原</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;备份</span><br><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class="line">&#x2F;&#x2F;导入</span><br><span class="line">mongorestore -h dbhost -d dbname dbdirectory</span><br><span class="line">若有用户名和密码则在dbname 后面加入 -u username -p pwd</span><br></pre></td></tr></table></figure><h2 id="⑥node-js操作mongodb"><a href="#⑥node-js操作mongodb" class="headerlink" title="⑥node.js操作mongodb"></a>⑥node.js操作mongodb</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;安装模块</span><br><span class="line">npm install mongodb --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; MongoClient &#125; = <span class="built_in">require</span>(<span class="string">&quot;mongodb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义连接数据库地址</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;mongodb://127.0.0.1:27017/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义操作数据库</span></span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">&quot;testdb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化MongoClient 传入数据库连接地址</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">client.connect(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功&quot;</span>)</span><br><span class="line">  <span class="keyword">let</span> db = client.db(dbName)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找数据</span></span><br><span class="line">    db.collection(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    .find(&#123;&#125;)<span class="comment">//在此处写查找条件</span></span><br><span class="line">    .toArray(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">      <span class="comment">//关闭数据库</span></span><br><span class="line">      client.close()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//增加数据</span></span><br><span class="line">     db.collection(<span class="string">&#x27;user&#x27;</span>).insertOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;老王&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">50</span>&#125;,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(err)&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(err)</span><br><span class="line">             <span class="keyword">return</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;增加成功&quot;</span>)</span><br><span class="line">         client.close()</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改数据</span></span><br><span class="line">    db.collection(<span class="string">&#x27;user&#x27;</span>).updateOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">12</span>&#125;&#125;,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;修改成功&quot;</span>)</span><br><span class="line">        client.close()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除数据</span></span><br><span class="line">    db.collection(<span class="string">&quot;user&quot;</span>).deleteOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>&#125;,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">        client.close()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;./module/route&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; MongoClient &#125; = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;mongodb://localhost:27017&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">&#x27;itying&#x27;</span>;</span><br><span class="line"><span class="comment">// const client = new MongoClient(url,&#123; useUnifiedTopology: true &#125;);</span></span><br><span class="line"><span class="comment">//注册web服务</span></span><br><span class="line">http.createServer(app).listen(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">// app.static(&quot;public&quot;);    //修改默认静态web目录</span></span><br><span class="line"><span class="comment">//配置路由</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    MongoClient.connect(url,&#123; <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err, client</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        db.collection(<span class="string">&quot;user&quot;</span>).find(&#123;&#125;).toArray(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;            </span><br><span class="line">            client.close();</span><br><span class="line">            ejs.renderFile(<span class="string">&quot;./views/index.ejs&quot;</span>, &#123;</span><br><span class="line">                list: result</span><br><span class="line">            &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">                res.send(data);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/register&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    ejs.renderFile(<span class="string">&quot;./views/register.ejs&quot;</span>,&#123;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        res.send(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/doRegister&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// name=zhangsan&amp;age=13</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     &quot;name&quot;:&quot;zhangsan&quot;,</span></span><br><span class="line">    <span class="comment">//     &quot;age&quot;:13</span></span><br><span class="line">    <span class="comment">// &#125;    </span></span><br><span class="line">    <span class="keyword">let</span> body=querystring.parse(req.body);</span><br><span class="line">    MongoClient.connect(url,&#123; <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;,<span class="function">(<span class="params">err,client</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> db=client.db(dbName);</span><br><span class="line"></span><br><span class="line">        db.collection(<span class="string">&quot;user&quot;</span>).insertOne(body,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;增加数据成功&quot;</span>);</span><br><span class="line">            res.send(<span class="string">&quot;增加数据成功&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="⑦express框架"><a href="#⑦express框架" class="headerlink" title="⑦express框架"></a>⑦express框架</h2><h3 id="使用express"><a href="#使用express" class="headerlink" title="使用express"></a>使用express</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;安装express</span><br><span class="line">cnpm i express --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;你好 express&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/article&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;新闻页面&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/register&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  <span class="comment">//get:显示数据</span></span><br><span class="line">    res.send(<span class="string">&quot;注册页面&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/doLogin&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;   <span class="comment">//post:增加数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行登录&quot;</span>)</span><br><span class="line">    res.send(<span class="string">&quot;执行登录&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.put(<span class="string">&quot;/editUser&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  <span class="comment">//put：主要用于修改数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;修改用户&quot;</span>)</span><br><span class="line">    res.send(<span class="string">&quot;修改用户&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.delete(<span class="string">&quot;/deleteUser&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  <span class="comment">//delete：主要用于删除数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行删除&quot;</span>)</span><br><span class="line">    res.send(<span class="string">&quot;执行删除&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由里面配置多级目录  http://localhost:3000/admin/user/edit</span></span><br><span class="line">app.get(<span class="string">&quot;/admin/user/add&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;admin user add&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/admin/user/edit&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;admin user  edit&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态路由  配置路由的时候也要注意顺序</span></span><br><span class="line">app.get(<span class="string">&quot;/article/add&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;article add&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/article/:id&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id=req.params[<span class="string">&quot;id&quot;</span>]    <span class="comment">//获取动态路由</span></span><br><span class="line">    res.send(<span class="string">&quot;动态路由&quot;</span>+id)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//get 传值  http://localhost:3000/product?id=123&amp;cid=123</span></span><br><span class="line">app.get(<span class="string">&quot;/product&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> query = req.query   <span class="comment">//获取get传值</span></span><br><span class="line">    <span class="built_in">console</span>.log(query)</span><br><span class="line">    res.send(<span class="string">&quot;product-&quot;</span>+query.id)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h3 id="express-ejs-静态文件托管"><a href="#express-ejs-静态文件托管" class="headerlink" title="express+ejs+静态文件托管"></a>express+ejs+静态文件托管</h3><ul><li>express默认集成了ejs</li></ul><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.在 app.js 的头上定义 ejs:,代码如下: </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var ejs = require(&#x27;ejs&#x27;); </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.注册 html 模板引擎代码如下： </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">app.engine(&#x27;html&#x27;,ejs.__express);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.将模板引擎换成 html 代码如下:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">app.set(&#x27;view engine&#x27;, &#x27;html&#x27;); </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.修改模板文件的后缀为.html。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.engine(<span class="string">&quot;html&quot;</span>,ejs.__express)</span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;html&quot;</span>)</span><br><span class="line"><span class="comment">//配置静态web目录</span></span><br><span class="line">app.use(express.static(<span class="string">&quot;static&quot;</span>))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title = <span class="string">&quot;你好ejs&quot;</span>;</span><br><span class="line">    res.render(<span class="string">&quot;index&quot;</span>,&#123;</span><br><span class="line">        title:title</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/news&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userinfo=&#123;</span><br><span class="line">        username:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        age:<span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> article=<span class="string">&quot;&lt;h3&gt;我是一个h3&lt;/h3&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> list=[<span class="string">&quot;1111&quot;</span>,<span class="string">&quot;22222&quot;</span>,<span class="string">&quot;3333333&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newsList=[</span><br><span class="line">        &#123;</span><br><span class="line">            title:<span class="string">&quot;新闻1111&quot;</span>,          </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            title:<span class="string">&quot;新闻122222&quot;</span>,          </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            title:<span class="string">&quot;新闻33331&quot;</span>,          </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            title:<span class="string">&quot;新闻44444&quot;</span>,          </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    res.render(<span class="string">&quot;news&quot;</span>,&#123; <span class="comment">//渲染模板，内置ejs</span></span><br><span class="line">        userinfo:userinfo,</span><br><span class="line">        article:article,</span><br><span class="line">        flag:<span class="literal">true</span>,</span><br><span class="line">        score:<span class="number">60</span>,</span><br><span class="line">        list:list,</span><br><span class="line">        newsList:newsList</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>news.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;base.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;绑定数据111&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;&lt;%&#x3D;userinfo.username%&gt;---&lt;%&#x3D;userinfo.age%&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&lt;%&#x3D;article%&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&lt;%-article%&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;条件判断&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%if(flag&#x3D;&#x3D;true)&#123;%&gt;</span><br><span class="line">        &lt;strong&gt;flag&#x3D;true&lt;&#x2F;strong&gt;</span><br><span class="line">    &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%if(score&gt;&#x3D;60)&#123;%&gt;</span><br><span class="line">        &lt;p&gt;及格&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;%&#125;else&#123;%&gt;</span><br><span class="line">       不及格</span><br><span class="line">    &lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;循环遍历&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;%for(let i&#x3D;0;i&lt;list.length;i++)&#123;%&gt;</span><br><span class="line">            &lt;li&gt;&lt;%&#x3D;list[i]%&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;%&#125;%&gt;        </span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;%for(let i&#x3D;0;i&lt;newsList.length;i++)&#123;%&gt;</span><br><span class="line">            &lt;li&gt;&lt;%&#x3D;newsList[i].title%&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;%&#125;%&gt;        </span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%- include(&#39;footer.html&#39;) %&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>footer.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer&gt;</span><br><span class="line">    &lt;h1&gt;公共的底部&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;footer&gt;</span><br></pre></td></tr></table></figure><h3 id="express中间件"><a href="#express中间件" class="headerlink" title="express中间件"></a>express中间件</h3><blockquote><p>中间件就是匹配路由之前或者匹配路由完成做的一系列的操作。中间件中如果想往下匹配的话，那么需要写next()</p></blockquote><h4 id="1-应用级中间件"><a href="#1-应用级中间件" class="headerlink" title="1.应用级中间件"></a>1.应用级中间件</h4><p>常用于权限权限判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、应用级中间件 (用于权限判断)</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())    </span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-路由级中间件"><a href="#2-路由级中间件" class="headerlink" title="2.路由级中间件"></a>2.路由级中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//2、路由级中间件(用的比较少)</span></span><br><span class="line">app.get(<span class="string">&quot;/news/add&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// res.send(&quot;执行增加新闻&quot;)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行增加新闻&quot;</span>)</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-错误处理中间件"><a href="#3-错误处理中间件" class="headerlink" title="3.错误处理中间件"></a>3.错误处理中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3、错误处理中间件  /css/base.css 处理404</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">   res.status(<span class="number">404</span>).send(<span class="string">&quot;404&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-内置中间件"><a href="#4-内置中间件" class="headerlink" title="4.内置中间件"></a>4.内置中间件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//4、内置中间件</span></span><br><span class="line">app.use(express.static(<span class="string">&quot;static&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="5-第三方中间件"><a href="#5-第三方中间件" class="headerlink" title="5.第三方中间件"></a>5.第三方中间件</h4><p>有很多很多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取post传过来的数据</span></span><br><span class="line"><span class="comment">1、cnpm install body-parser --save</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、var bodyParser = require(&#x27;body-parser&#x27;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、配置中间件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    app.use(bodyParser.json())</span></span><br><span class="line"><span class="comment">4、接收post数据</span></span><br><span class="line"><span class="comment">    req.body</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.engine(<span class="string">&quot;html&quot;</span>,ejs.__express)</span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;html&quot;</span>)</span><br><span class="line"><span class="comment">//配置静态web目录</span></span><br><span class="line">app.use(express.static(<span class="string">&quot;static&quot;</span>))</span><br><span class="line"><span class="comment">//配置第三方中间件</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">// req.query 获取get传值</span></span><br><span class="line">   res.render(<span class="string">&quot;login&quot;</span>,&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/doLogin&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">// req.body 获取post传值</span></span><br><span class="line">   <span class="keyword">var</span> body = req.body;</span><br><span class="line">   <span class="built_in">console</span>.log(body)</span><br><span class="line">   res.send(<span class="string">&quot;执行提交&quot;</span>+body.username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h3 id="express-cookie使用"><a href="#express-cookie使用" class="headerlink" title="express cookie使用"></a>express cookie使用</h3><ul><li>同浏览器同域名下数据共享</li><li>http无状态协议</li><li>页面间共享登录人信息</li><li>根据你浏览的商品，将商品存在cookie中，推荐相近的商品给你</li><li>购物车功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装cnpminstlalcookie-parser--save</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>引入varcookieParser=<span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>设置中间件app.use(cookieParser());</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>设置cookieres.cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&#x27;zhangsan&#x27;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">900000</span>,<span class="attr">httpOnly</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>获取cookiereq.cookies.namejs</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/937314f5f21e8809ba3ee0739d72797.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br><span class="line"><span class="comment">//配置cookieParser中间件</span></span><br><span class="line">app.use(cookieParser(<span class="string">&quot;ityingaaa&quot;</span>))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  </span><br><span class="line">    <span class="comment">//设置cookie  如果cookie没有过期的话，关闭浏览器后重新打开,cookie不会销毁</span></span><br><span class="line">    <span class="comment">// res.cookie(&quot;username&quot;,&quot;zhangsan&quot;,&#123;maxAge:1000*60*60&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// res.cookie(&quot;username&quot;,&quot;zhangsan&quot;,&#123;maxAge:1000*60*60,path:&quot;/article&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//多个域名共享cookie  aaa.itying.com   bbb.itying.com </span></span><br><span class="line">    <span class="comment">// res.cookie(&quot;username&quot;,&quot;zhangsan1111&quot;,&#123;maxAge:1000*60*60,domain:&quot;.itying.com&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中文cookie</span></span><br><span class="line">    <span class="comment">// res.cookie(&quot;username&quot;,&quot;张三&quot;,&#123;maxAge:1000*60*60&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cookie的加密   </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1、配置中间件的时候需要传入加密的参数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    app.use(cookieParser(&quot;itying&quot;))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2、 res.cookie(&quot;username&quot;,&quot;zhangsan&quot;,&#123;maxAge:1000*60*60,signed:true&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3、req.signedCookies</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    res.cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="attr">signed</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    res.send(<span class="string">&quot;你好 express aaa&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/article&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取cookie</span></span><br><span class="line">    <span class="keyword">let</span> username=req.cookies.username;</span><br><span class="line">    <span class="built_in">console</span>.log(username)</span><br><span class="line">    res.send(<span class="string">&quot;新闻页面--&quot;</span>+username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/user&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="comment">//获取cookie</span></span><br><span class="line">     <span class="keyword">let</span> username=req.cookies.username;</span><br><span class="line">     <span class="built_in">console</span>.log(username)     </span><br><span class="line">    res.send(<span class="string">&quot;用户--&quot;</span>+username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/product&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取加密的cookie</span></span><br><span class="line">    <span class="keyword">let</span> username=req.signedCookies.username</span><br><span class="line">    <span class="built_in">console</span>.log(username)     </span><br><span class="line">   res.send(<span class="string">&quot;product--&quot;</span>+username)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h3 id="express-session使用"><a href="#express-session使用" class="headerlink" title="express session使用"></a>express session使用</h3><ul><li>记录客户状态的机制</li><li>保存在服务端</li><li>发送第一次请求时，创建session对象，生成key,value键值对，将key给客户端，客户端访问服务端时携带key，找到对应的value</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*session的使用：</span></span><br><span class="line"><span class="comment">https://www.npmjs.com/package/express-session</span></span><br><span class="line"><span class="comment">1、cnpm install express-session --save</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、const session = require(&#x27;express-session&#x27;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3、配置session的中间件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">app.use(session(&#123;</span></span><br><span class="line"><span class="comment">    secret: &#x27;this is session&#x27;, //服务器端生成 session 的签名</span></span><br><span class="line"><span class="comment">    name:&quot;itying&quot;, //修改session对应cookie的名称</span></span><br><span class="line"><span class="comment">    resave: false, //强制保存 session 即使它并没有变化</span></span><br><span class="line"><span class="comment">    saveUninitialized: true, //强制将未初始化的 session 存储</span></span><br><span class="line"><span class="comment">    cookie: &#123; </span></span><br><span class="line"><span class="comment">        maxAge:1000*60*30,</span></span><br><span class="line"><span class="comment">        secure: false  // true 表示只有https协议才能访问cookie  </span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    rolling:true  //在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span></span><br><span class="line"><span class="comment">&#125;))</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4、使用</span></span><br><span class="line"><span class="comment"> 设置： req.session.username=&quot;张三&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 获取：req.session.username</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"> 删除session  req.session.username=&quot;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="comment">//配置session的中间件</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: <span class="string">&#x27;this is session&#x27;</span>, <span class="comment">//服务器端生成 session 的签名</span></span><br><span class="line">    name:<span class="string">&quot;itying&quot;</span>, <span class="comment">//修改session对应cookie的名称</span></span><br><span class="line">    resave: <span class="literal">false</span>, <span class="comment">//强制保存 session 即使它并没有变化</span></span><br><span class="line">    saveUninitialized: <span class="literal">true</span>, <span class="comment">//强制将未初始化的 session 存储</span></span><br><span class="line">    cookie: &#123; </span><br><span class="line">        maxAge:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">30</span>,</span><br><span class="line">        secure: <span class="literal">false</span>  <span class="comment">// true 表示只有https协议才能访问cookie  </span></span><br><span class="line">    &#125;,</span><br><span class="line">    rolling:<span class="literal">true</span>  <span class="comment">//在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取seesion</span></span><br><span class="line">    <span class="keyword">if</span>(req.session.username || req.session.age)&#123;</span><br><span class="line">        res.send(req.session.username+<span class="string">&quot;--&quot;</span>+req.session.age+<span class="string">&quot;-已登录&quot;</span>)        </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.send(<span class="string">&quot;没有登录&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  </span><br><span class="line">    <span class="comment">//设置seesion</span></span><br><span class="line">    req.session.username=<span class="string">&quot;张三&quot;</span></span><br><span class="line">    req.session.age=<span class="number">20</span></span><br><span class="line">    res.send(<span class="string">&quot;执行登录&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/loginOut&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;  </span><br><span class="line">    <span class="comment">//1、设置session的过期时间为0  (它会把所有的session都销毁)</span></span><br><span class="line">    <span class="comment">// req.session.cookie.maxAge=0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、销毁指定session</span></span><br><span class="line">    <span class="comment">// req.session.username=&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、销毁session  destroy</span></span><br><span class="line"></span><br><span class="line">    req.session.destroy()</span><br><span class="line"></span><br><span class="line">    res.send(<span class="string">&quot;退出登录&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h4 id="将session保存在数据库中"><a href="#将session保存在数据库中" class="headerlink" title="将session保存在数据库中"></a>将session保存在数据库中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">session保存在数据库里面</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;connect-mongo</span><br><span class="line"></span><br><span class="line">1、配置express-session</span><br><span class="line"></span><br><span class="line">2、安装connect-mongo </span><br><span class="line">    cnpm i connect-mongo --save</span><br><span class="line"></span><br><span class="line">3、引入</span><br><span class="line">const MongoStore &#x3D; require(&#39;connect-mongo&#39;)(session);</span><br><span class="line"></span><br><span class="line">4、配置中间件</span><br><span class="line">    app.use(session(&#123;</span><br><span class="line">        secret: &#39;this is session&#39;, &#x2F;&#x2F;服务器端生成 session 的签名</span><br><span class="line">        name:&quot;itying&quot;, &#x2F;&#x2F;修改session对应cookie的名称</span><br><span class="line">        resave: false, &#x2F;&#x2F;强制保存 session 即使它并没有变化</span><br><span class="line">        saveUninitialized: true, &#x2F;&#x2F;强制将未初始化的 session 存储</span><br><span class="line">        cookie: &#123; </span><br><span class="line">            maxAge:1000*60*30,</span><br><span class="line">            secure: false  &#x2F;&#x2F; true 表示只有https协议才能访问cookie  </span><br><span class="line">        &#125;,</span><br><span class="line">        rolling:true,  &#x2F;&#x2F;在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span><br><span class="line">        store: new MongoStore(&#123;</span><br><span class="line">            url: &#39;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;shop&#39;,      </span><br><span class="line">            touchAfter: 24 * 3600 &#x2F;&#x2F; 不管发出了多少请求 在24小时内只更新一次session， 除非你改变了这个session </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;connect-redis</span><br><span class="line"></span><br><span class="line">    https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;connect-mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const express &#x3D; require(&#39;express&#39;)</span><br><span class="line">const session &#x3D; require(&#39;express-session&#39;)</span><br><span class="line">const MongoStore &#x3D; require(&#39;connect-mongo&#39;)(session);</span><br><span class="line">const app&#x3D;express()</span><br><span class="line">&#x2F;&#x2F;配置session的中间件</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: &#39;this is session&#39;, &#x2F;&#x2F;服务器端生成 session 的签名</span><br><span class="line">    name:&quot;itying&quot;, &#x2F;&#x2F;修改session对应cookie的名称</span><br><span class="line">    resave: false, &#x2F;&#x2F;强制保存 session 即使它并没有变化</span><br><span class="line">    saveUninitialized: true, &#x2F;&#x2F;强制将未初始化的 session 存储</span><br><span class="line">    cookie: &#123; </span><br><span class="line">        maxAge:1000*60*30,</span><br><span class="line">        secure: false  &#x2F;&#x2F; true 表示只有https协议才能访问cookie  </span><br><span class="line">    &#125;,</span><br><span class="line">    rolling:true,  &#x2F;&#x2F;在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span><br><span class="line">    store: new MongoStore(&#123;</span><br><span class="line">        url: &#39;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;shop&#39;,      </span><br><span class="line">        touchAfter: 24 * 3600 &#x2F;&#x2F; 不管发出了多少请求 在24小时内只更新一次session， 除非你改变了这个session </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.get(&quot;&#x2F;&quot;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;获取seesion</span><br><span class="line">    if(req.session.username || req.session.age)&#123;</span><br><span class="line">        res.send(req.session.username+&quot;--&quot;+req.session.age+&quot;-已登录&quot;)        </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        res.send(&quot;没有登录&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&quot;&#x2F;login&quot;,(req,res)&#x3D;&gt;&#123;  </span><br><span class="line">    &#x2F;&#x2F;设置seesion</span><br><span class="line">    req.session.username&#x3D;&quot;张三&quot;</span><br><span class="line">    req.session.age&#x3D;20</span><br><span class="line">    res.send(&quot;执行登录&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&quot;&#x2F;loginOut&quot;,(req,res)&#x3D;&gt;&#123;  </span><br><span class="line">    &#x2F;&#x2F;1、设置session的过期时间为0  (它会把所有的session都销毁)</span><br><span class="line">    &#x2F;&#x2F; req.session.cookie.maxAge&#x3D;0</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;2、销毁指定session</span><br><span class="line">    &#x2F;&#x2F; req.session.username&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;3、销毁session  destroy</span><br><span class="line"></span><br><span class="line">    req.session.destroy()</span><br><span class="line"></span><br><span class="line">    res.send(&quot;退出登录&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure><h3 id="express路由模块化"><a href="#express路由模块化" class="headerlink" title="express路由模块化"></a>express路由模块化</h3><p>使用express模块化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router=express.Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;res.send(<span class="string">&#x27;用户列表&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/add,function(req,res)&#123;res.send(&#x27;</span>增加用户<span class="string">&#x27;)&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">router.get(&#x27;</span>/edit,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;res.send(<span class="string">&#x27;修改用户&#x27;</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=router</span><br></pre></td></tr></table></figure><p>挂载模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user=<span class="built_in">require</span>(<span class="string">&#x27;./routes/user)//...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app.use(&#x27;</span>/user,user)</span><br></pre></td></tr></table></figure><h3 id="multer上传文件"><a href="#multer上传文件" class="headerlink" title="multer上传文件"></a>multer上传文件</h3><p>单文件上传</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> tools=&#123;</span><br><span class="line">    <span class="function"><span class="title">multer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> storage = multer.diskStorage(&#123;</span><br><span class="line">            <span class="comment">//配置上传的目录</span></span><br><span class="line">            destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">                cb(<span class="literal">null</span>, <span class="string">&#x27;static/upload&#x27;</span>) <span class="comment">//上传之前目录必须存在</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//修改上传后的文件名</span></span><br><span class="line">            filename: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//1、获取后缀名</span></span><br><span class="line">                <span class="keyword">let</span> extname= path.extname(file.originalname);</span><br><span class="line">                <span class="comment">//2、根据时间戳生成文件名</span></span><br><span class="line">                cb(<span class="literal">null</span>, <span class="built_in">Date</span>.now()+extname)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> upload = multer(&#123; <span class="attr">storage</span>: storage &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> upload;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">md5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=tools</span><br></pre></td></tr></table></figure><p>多文件上传看官方文档</p><h2 id="⑧mongoose"><a href="#⑧mongoose" class="headerlink" title="⑧mongoose"></a>⑧mongoose</h2><h4 id="mongoose增删改查"><a href="#mongoose增删改查" class="headerlink" title="mongoose增删改查"></a>mongoose增删改查</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入mongoose</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、建立连接  </span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/eggcms&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、操作users表（集合）   定义一个Schema   Schema里面的对象和数据库表里面的字段需要一一对应</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line"></span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    age:<span class="built_in">Number</span>,</span><br><span class="line">    status:<span class="built_in">Number</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、定义数据库模型  操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// model里面的第一个参数 要注意：1首字母大写  2、要和数据库表（集合 ）名称对应  这个模型会和模型名称相同的复数的数据库表建立连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var User=mongoose.model(&#x27;User&#x27;,UserSchema);    // 默认会操作 users表（集合）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> User=mongoose.model(<span class="string">&#x27;User&#x27;</span>,UserSchema,<span class="string">&#x27;user&#x27;</span>);  <span class="comment">//默认会操作第三个参数配置的表  user表（集合）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5、查询users表的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// User.find(&#123;&#125;,function(err,doc)&#123; </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     if(err)&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//         console.log(err);</span></span><br><span class="line">    <span class="comment">//         return;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     console.log(doc);</span></span><br><span class="line">    <span class="comment">// &#125;)  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//6、增加数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.1实例化 Model     通过实例化User Molde 创建增加的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.2 实例.save()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// var u=new User(&#123;</span></span><br><span class="line">    <span class="comment">//     name:&#x27;李四&#x27;,</span></span><br><span class="line">    <span class="comment">//     age:20,</span></span><br><span class="line">    <span class="comment">//     status:1</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// u.save(function(err)&#123;</span></span><br><span class="line">    <span class="comment">//     if(err)&#123;</span></span><br><span class="line">    <span class="comment">//         console.log(err);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//         return;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     console.log(&#x27;成功&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;);  //执行增加操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//6、更新数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入mongoose</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、建立连接  </span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/eggcms&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、定义一个Schema </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> NewsSchema=mongoose.Schema(&#123;</span><br><span class="line">    title:<span class="string">&quot;string&quot;</span>,</span><br><span class="line">    author:<span class="built_in">String</span>,</span><br><span class="line">    pic:<span class="built_in">String</span>,</span><br><span class="line">    content:<span class="built_in">String</span>,</span><br><span class="line">    status:<span class="built_in">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、定义操作数据库的Model</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> News=mongoose.model(<span class="string">&#x27;News&#x27;</span>,NewsSchema,<span class="string">&#x27;news&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//5、增加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过实例化 Model 创建增加的数据</span></span><br><span class="line">    <span class="comment">// var news=new News(&#123;</span></span><br><span class="line">    <span class="comment">//     title:&quot;我是一个新闻11111&quot;,</span></span><br><span class="line">    <span class="comment">//     author:&#x27;张三1&#x27;,</span></span><br><span class="line">    <span class="comment">//     content:&#x27;我是新闻的内容&#x27;,</span></span><br><span class="line">    <span class="comment">//     status:1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// news.save(function(err)&#123;</span></span><br><span class="line">    <span class="comment">//     if(err)&#123;</span></span><br><span class="line">    <span class="comment">//         return console.log(err);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//      console.log(&#x27;成功&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//6、修改数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// News.updateOne(</span></span><br><span class="line"><span class="comment">//     &#123;&quot;_id&quot;:&quot;5b7563e2ba3c6747d0612204&quot;&#125;,   </span></span><br><span class="line"><span class="comment">//     &#123;&quot;title&quot;:&quot;我是一个新闻2222&quot;&#125;,</span></span><br><span class="line"><span class="comment">//     function(err,doc)&#123;</span></span><br><span class="line"><span class="comment">//         if(err)&#123;</span></span><br><span class="line"><span class="comment">//                 return console.log(err);</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             console.log(doc)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">News.deleteOne(&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;5b7563e2ba3c6747d0612204&quot;</span>&#125;, <span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="mongoose配置默认参数"><a href="#mongoose配置默认参数" class="headerlink" title="mongoose配置默认参数"></a>mongoose配置默认参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mongoose 默认参数、mongoose 模块化 、mongoose性能疑问</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// mongoose 默认参数：增加数据的时候，如果不传入数据会使用默认配置的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//useNewUrlParser这个属性会在url里识别验证用户所需的db,未升级前是不需要指定的,升级到一定要指定。</span></span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/eggcms&#x27;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据表（集合的）映射  注意：字段名称必须和数据库保持一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line"></span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    age:<span class="built_in">Number</span>,</span><br><span class="line">    status:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="number">1</span>   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义model操作数据库 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserModel=mongoose.model(<span class="string">&quot;User&quot;</span>,UserSchema,<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据的查找</span></span><br><span class="line"><span class="comment">// UserModel.find(&#123;&#125;,function(err,doc)&#123;</span></span><br><span class="line"><span class="comment">//     if(err)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         console.log(err);</span></span><br><span class="line"><span class="comment">//         return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     console.log(doc);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据的增加</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// var user=new UserModel(&#123;</span></span><br><span class="line"><span class="comment">//     name:&#x27;张三88888888888888&#x27;,</span></span><br><span class="line"><span class="comment">//     age:40,</span></span><br><span class="line"><span class="comment">//     status:1,</span></span><br><span class="line"><span class="comment">//     sex:&quot;男&quot;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// user.save(function(err)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     if(err)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         console.log(err);</span></span><br><span class="line"><span class="comment">//         return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;增加数据成功&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user=<span class="keyword">new</span> UserModel(&#123;</span><br><span class="line">    name:<span class="string">&#x27;张三6666666666666666&#x27;</span>,</span><br><span class="line">    age:<span class="number">30</span>    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;增加数据成功&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mongoose模块化"><a href="#mongoose模块化" class="headerlink" title="mongoose模块化"></a>mongoose模块化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//useNewUrlParser这个属性会在url里识别验证用户所需的db,未升级前是不需要指定的,升级到一定要指定。</span></span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://127.0.0.1:27017/eggcms&#x27;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=mongoose;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mongoose预定义模式修饰符"><a href="#mongoose预定义模式修饰符" class="headerlink" title="mongoose预定义模式修饰符"></a>mongoose预定义模式修饰符</h4><blockquote><p>包括lowercase uppercase trim</p><p>以及自定义修饰符  set  和     get(不经常使用)</p></blockquote><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;./db.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FocusSchema=mongoose.Schema(&#123;</span><br><span class="line">    title:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        trim:<span class="literal">true</span>    <span class="comment">//定义 mongoose模式修饰符 去掉空格</span></span><br><span class="line">    &#125;,   </span><br><span class="line">    pic:<span class="built_in">String</span>,    </span><br><span class="line">    redirect:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">parmas</span>)</span>&#123;   <span class="comment">//增加数据的时候对redirect字段进行处理</span></span><br><span class="line">            <span class="comment">// parmas可以获取redirect的值 、    返回的数据就是redirect在数据库实际保存的值</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             www.baidu.com              http://www.baidu.com</span></span><br><span class="line"><span class="comment">             http://www.baidu.com       http://www.baidu.com</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span>(!parmas)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(parmas.indexOf(<span class="string">&#x27;http://&#x27;</span>)!=<span class="number">0</span> &amp;&amp; parmas.indexOf(<span class="string">&#x27;https://&#x27;</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;http://&#x27;</span>+parmas;</span><br><span class="line">               &#125;</span><br><span class="line">                <span class="keyword">return</span> parmas</span><br><span class="line"></span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    status:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=mongoose.model(<span class="string">&#x27;Focus&#x27;</span>,FocusSchema,<span class="string">&#x27;focus&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var mongoose&#x3D;require(&#39;.&#x2F;db.js&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var NewsSchema&#x3D;mongoose.Schema(&#123;</span><br><span class="line">    title:&#123;</span><br><span class="line">        type:String,</span><br><span class="line">        trim:true    &#x2F;&#x2F;定义 mongoose模式修饰符 去掉空格</span><br><span class="line">    &#125;,</span><br><span class="line">    author:String,</span><br><span class="line">    pic:String,    </span><br><span class="line">    content:String,</span><br><span class="line">    status:&#123;</span><br><span class="line">        type:Number,</span><br><span class="line">        default:1</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports&#x3D;mongoose.model(&#39;News&#39;,NewsSchema,&#39;news&#39;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mongoose索引"><a href="#mongoose索引" class="headerlink" title="mongoose索引"></a>mongoose索引</h4><h5 id="配置索引"><a href="#配置索引" class="headerlink" title="配置索引"></a>配置索引</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DeviceSchema=newmongoose.Schema(&#123;</span><br><span class="line">    sn:&#123;</span><br><span class="line">    type:<span class="built_in">Number</span>,<span class="comment">//唯一索引</span></span><br><span class="line">    unique:<span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">  name:&#123;<span class="attr">type</span>:<span class="built_in">String</span>,<span class="comment">//普通索引</span></span><br><span class="line">      index:<span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="扩展mongoose静态方法和实例方法"><a href="#扩展mongoose静态方法和实例方法" class="headerlink" title="扩展mongoose静态方法和实例方法"></a>扩展mongoose静态方法和实例方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> UserModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/user.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// var user = new UserModel(&#123;</span></span><br><span class="line"><span class="comment">//     name: &#x27;赵六&#x27;,</span></span><br><span class="line"><span class="comment">//     sn:&#x27;123456781&#x27;,</span></span><br><span class="line"><span class="comment">//     age: 29</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// user.save();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// UserModel.findBySn(&#x27;123456781&#x27;,function()&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UserModel.findBySn(<span class="string">&#x27;123456782&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(docs)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> UserModel(&#123;</span><br><span class="line">    name: <span class="string">&#x27;赵六&#x27;</span>,</span><br><span class="line">    sn:<span class="string">&#x27;123456781&#x27;</span>,</span><br><span class="line">    age: <span class="number">29</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// user.save();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user.print();   <span class="comment">//自定义的实例方法</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;./db.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line">     </span><br><span class="line">    name:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>       </span><br><span class="line">    &#125;,</span><br><span class="line">    sn:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        index:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age:<span class="built_in">Number</span>,       </span><br><span class="line">    status:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//静态方法 </span></span><br><span class="line"> </span><br><span class="line">UserSchema.statics.findBySn=<span class="function"><span class="keyword">function</span>(<span class="params">sn,cb</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//通过 find方法获取 sn的数据    this 关键字获取当前的model</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">this</span>.find(&#123;<span class="string">&quot;sn&quot;</span>:sn&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line">        cb(err,docs)</span><br><span class="line">    &#125;)   </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 实例方法   (基本不用)</span></span><br><span class="line"> </span><br><span class="line">UserSchema.methods.print=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我是一个实例方法&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports=mongoose.model(<span class="string">&#x27;User&#x27;</span>,UserSchema,<span class="string">&#x27;user&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="mongoose-数据校验"><a href="#mongoose-数据校验" class="headerlink" title="mongoose 数据校验"></a>mongoose 数据校验</h4><p>放在schema里验证传入的数据</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">required:表示这个数据必须传入</span><br><span class="line"></span><br><span class="line">max:用于Number类型数据，最大值</span><br><span class="line"></span><br><span class="line">min:用于Number类型数据，最小值</span><br><span class="line"></span><br><span class="line">enum:枚举类型，要求数据必须满足枚举值enum:[&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;]</span><br><span class="line"></span><br><span class="line">match:增加的数据必须符合match（正则）的规则</span><br><span class="line"></span><br><span class="line">maxlength：最大值</span><br><span class="line"></span><br><span class="line">minlength：最小值</span><br></pre></td></tr></table></figure><p>自定义验证器 通过validate</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;./db.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//mongoose数据校验:用户通过mongoose给mongodb数据库增加数据的时候，对数据的合法性进行的验证</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//mongoose里面定义Schema:字段类型，修饰符、默认参数 、数据校验都是为了数据库数据的一致性</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Schema，为数据库对象的集合,每个schema会映射到mongodb中的一个collection,定义Schema可以理解为表结构的定义</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,<span class="comment">//指定类型</span></span><br><span class="line">        trim:<span class="literal">true</span>,   <span class="comment">//修饰符         </span></span><br><span class="line">        required:<span class="literal">true</span>     </span><br><span class="line">    &#125;,</span><br><span class="line">    sn:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        index:<span class="literal">true</span>,  <span class="comment">//索引.</span></span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span>&#123;  <span class="comment">//自定义修饰符</span></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// maxlength:20,</span></span><br><span class="line">        <span class="comment">// minlength:10</span></span><br><span class="line">        <span class="comment">// match:/^sn(.*)/ ,</span></span><br><span class="line">        validate: <span class="function"><span class="keyword">function</span>(<span class="params">sn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sn.length &gt;= <span class="number">10</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">         </span><br><span class="line">    &#125;,   </span><br><span class="line">    age:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        min:<span class="number">0</span>,    <span class="comment">//用在number类型上面</span></span><br><span class="line">        max:<span class="number">150</span></span><br><span class="line">    &#125;,       </span><br><span class="line">    status:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>, </span><br><span class="line">        <span class="keyword">default</span>:<span class="string">&#x27;success&#x27;</span>, <span class="comment">//默认值</span></span><br><span class="line">        enum:[<span class="string">&#x27;success&#x27;</span>,<span class="string">&#x27;error&#x27;</span>]   <span class="comment">//status的值必须在 对应的数组里面  注意枚举是用在String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports=mongoose.model(<span class="string">&#x27;User&#x27;</span>,UserSchema,<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mongoose聚合管道"><a href="#mongoose聚合管道" class="headerlink" title="mongoose聚合管道"></a>mongoose聚合管道</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">db.order.aggregate([</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      $lookup:</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          from: &quot;order_item&quot;,</span></span><br><span class="line"><span class="comment">          localField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          foreignField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          as: &quot;items&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">   &#125;,</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    $match:&#123;&quot;all_price&quot;:&#123;$gte:90&#125;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">])</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> OrderModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/order.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//查询order 表的数据</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    OrderModel.find(&#123;&#125;,function(err,docs)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        console.log(docs);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//order表关联order_item</span></span><br><span class="line">OrderModel.aggregate([</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        $lookup:</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">from</span>: <span class="string">&quot;order_item&quot;</span>,</span><br><span class="line">            localField: <span class="string">&quot;order_id&quot;</span>,</span><br><span class="line">            foreignField: <span class="string">&quot;order_id&quot;</span>,</span><br><span class="line">            <span class="keyword">as</span>: <span class="string">&quot;items&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        $match:&#123;<span class="string">&quot;all_price&quot;</span>:&#123;<span class="attr">$gte</span>:<span class="number">90</span>&#125;&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">],<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(docs))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">db.order.aggregate([</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      $lookup:</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          from: &quot;order_item&quot;,</span></span><br><span class="line"><span class="comment">          localField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          foreignField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          as: &quot;items&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">   &#125;,</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    $match:&#123;&quot;all_price&quot;:&#123;$gte:90&#125;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">])</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*查询order_item，找出商品名称是酸奶的商品，酸奶这个商品对应的订单的订单号以及订单的总价格*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> OrderItemModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/order_item.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> OrderModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/order.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//第一种实现方式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    OrderItemModel.find(&#123;&quot;_id&quot;:&quot;5b743da92c327f8d1b360546&quot;&#125;,function(err,docs)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        // console.log(docs);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        var order_item=JSON.parse(JSON.stringify(docs));</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        var order_id=order_item[0].order_id;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        OrderModel.find(&#123;&quot;order_id&quot;:order_id&#125;,function(err,order)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">            //    console.log(order);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">            order_item[0].order_info=order[0];</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">            console.log(order_item)</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//第二种方式 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//mongoose中获取ObjectId           mongoose.Types.ObjectId</span></span><br><span class="line"> </span><br><span class="line">OrderItemModel.aggregate([</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">      $lookup:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">from</span>: <span class="string">&quot;order&quot;</span>,</span><br><span class="line">          localField: <span class="string">&quot;order_id&quot;</span>,</span><br><span class="line">          foreignField: <span class="string">&quot;order_id&quot;</span>,</span><br><span class="line">          <span class="keyword">as</span>: <span class="string">&quot;order_info&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;,&#123;</span><br><span class="line">    $match:&#123;<span class="attr">_id</span>: mongoose.Types.ObjectId(<span class="string">&#x27;5b743da92c327f8d1b360546&#x27;</span>)&#125;</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">],<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(docs))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>N个表关联查询</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">db.order.aggregate([</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      $lookup:</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          from: &quot;order_item&quot;,</span></span><br><span class="line"><span class="comment">          localField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          foreignField: &quot;order_id&quot;,</span></span><br><span class="line"><span class="comment">          as: &quot;items&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">   &#125;,</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    $match:&#123;&quot;all_price&quot;:&#123;$gte:90&#125;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">])</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> ArticleModel=<span class="built_in">require</span>(<span class="string">&#x27;./model/article.js&#x27;</span>);</span><br><span class="line"><span class="comment">//查询文章信息</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ArticleModel.find(&#123;&#125;,function(err,docs)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    console.log(docs);</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//查询文章信息 并显示文章的分类 以及文章的作者信息</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//两个表关联查询</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ArticleModel.aggregate([</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">      &#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        $lookup: &#123;</span></span><br><span class="line"><span class="comment">          from: &quot;articlecate&quot;,</span></span><br><span class="line"><span class="comment">          localField: &quot;cid&quot;,</span></span><br><span class="line"><span class="comment">          foreignField: &quot;_id&quot;,</span></span><br><span class="line"><span class="comment">          as: &quot;cate&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    ],function(err,docs)&#123;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">      console.log(docs[2].cate)</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//三个表关联查询</span></span><br><span class="line"> ArticleModel.aggregate([</span><br><span class="line">  &#123;</span><br><span class="line"> </span><br><span class="line">    $lookup: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">&quot;articlecate&quot;</span>,</span><br><span class="line">      localField: <span class="string">&quot;cid&quot;</span>,</span><br><span class="line">      foreignField: <span class="string">&quot;_id&quot;</span>,</span><br><span class="line">      <span class="keyword">as</span>: <span class="string">&quot;cate&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line"> </span><br><span class="line">    $lookup: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">      localField: <span class="string">&quot;author_id&quot;</span>,</span><br><span class="line">      foreignField: <span class="string">&quot;_id&quot;</span>,</span><br><span class="line">      <span class="keyword">as</span>: <span class="string">&quot;user&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">],<span class="function"><span class="keyword">function</span>(<span class="params">err,docs</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(docs));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="⑨koa框架"><a href="#⑨koa框架" class="headerlink" title="⑨koa框架"></a>⑨koa框架</h2><ul><li>基本思路和express差不多，最大的特点就是可以避免异步嵌套</li></ul><h3 id="需了解的Koa知识点"><a href="#需了解的Koa知识点" class="headerlink" title="需了解的Koa知识点"></a>需了解的Koa知识点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa=<span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app=koa();</span><br><span class="line">app.use(<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;你好 koa&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数处理异步</span></span><br><span class="line"><span class="keyword">var</span> getData=<span class="function">(<span class="params">cb</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        cb(name);<span class="comment">//这样才能拿到Name的值</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">getData(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///Promise处理异步</span></span><br><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name=<span class="string">&quot;张三&quot;</span></span><br><span class="line">        resolve(name)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">///await用法 将异步转换为同步</span></span><br><span class="line"><span class="keyword">var</span> getData=<span class="keyword">async</span>()=&gt;&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125; <span class="comment">////返回的是一个promise对象</span></span><br><span class="line"><span class="keyword">var</span> test=<span class="keyword">async</span>()=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> d=<span class="keyword">await</span> getData();</span><br><span class="line">    <span class="built_in">console</span>.log(d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="koa路由"><a href="#koa路由" class="headerlink" title="koa路由"></a>koa路由</h3><p>需要安装Koa-router配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">cnpm i koa-router --save</span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="keyword">var</span> Koa=<span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> Router=<span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">var</span> router=<span class="keyword">new</span> Router()</span><br><span class="line"><span class="comment">//ctx 包含了request和response等信息</span></span><br><span class="line">router.get(<span class="string">&quot;/&quot;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;首页&quot;</span></span><br><span class="line">    </span><br><span class="line">&#125;).get(<span class="string">&quot;/news&quot;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;新闻页面&quot;</span></span><br><span class="line">&#125;).get(<span class="string">&quot;/shop&quot;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123; <span class="comment">///ctx.query 返回格式化后的参数列表 对象 ctx.querystring 返回的是请求的参数字符串</span></span><br><span class="line">    ctx.body=<span class="string">&quot;get传值&quot;</span>         <span class="comment">///当然也可以从ctx.request中获取值</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.query)</span><br><span class="line">&#125;).get(<span class="string">&quot;/book/:aid/:cid&quot;</span>,<span class="keyword">async</span>(ctx)=&gt;&#123; <span class="comment">///动态路由里可以传入多个值</span></span><br><span class="line">    ctx.body=ctx.params <span class="comment">//获取传值内容</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动路由</span></span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.use(router.allowedMethods())</span><br><span class="line">app.listen(<span class="number">3001</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="koa中间件"><a href="#koa中间件" class="headerlink" title="koa中间件"></a>koa中间件</h3><ul><li>中间件就是匹配路由之前或者匹配路由之后完成的一些列操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用级中间件</span></span><br><span class="line"><span class="comment">//匹配任何路由</span></span><br><span class="line"><span class="comment">//如果不写next，这个路由匹配了之后就不会继续向下匹配</span></span><br><span class="line">app.use(<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">    <span class="keyword">await</span> next()<span class="comment">//当前路由匹配之后继续向下匹配</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">///路由中间件</span></span><br><span class="line">router.get(<span class="string">&quot;/router&quot;</span>,<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;向下匹配&quot;</span>)</span><br><span class="line">    next()<span class="comment">//继续向下匹配</span></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&quot;/router&quot;</span>,<span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">    ctx.body=<span class="string">&quot;第二个router页面&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">///错误处理中间件</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;这是开始中间件01&quot;</span>)</span><br><span class="line">    next()</span><br><span class="line">    <span class="keyword">if</span>(ctx.status==<span class="number">404</span>)&#123;</span><br><span class="line">        ctx.status=<span class="number">404</span>;</span><br><span class="line">        ctx.body=<span class="string">&quot;这是一个404页面&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ctx.url)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Node.js&quot;&gt;&lt;/a&gt;Node.js&lt;/h1&gt;&lt;h2 id=&quot;①静态服务器创建&quot;&gt;&lt;a href=&quot;#①静态服务器创建&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="node" scheme="https://a2914475618.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="https://a2914475618.github.io/2021/08/21/React/"/>
    <id>https://a2914475618.github.io/2021/08/21/React/</id>
    <published>2021-08-21T12:37:00.000Z</published>
    <updated>2021-09-23T07:55:30.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">react绑定属性要换成classname</span><br><span class="line"></span><br><span class="line">for 要换成htmlfor</span><br><span class="line"></span><br><span class="line">style 要写出 style&#x3D;&#123;&#123;&quot;color&quot;:&#39;red&#125;&#125;</span><br><span class="line"></span><br><span class="line">其他的属性和以前的写法是一样的 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引入图片</span><br><span class="line"></span><br><span class="line">import logo from &#39;.&#x2F;&#39;</span><br><span class="line">&lt;img src&#x3D;&#123;logo&#125; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">所有的模板要被一个根节点包含起来</span><br><span class="line"></span><br><span class="line">模板元素不用加引号</span><br><span class="line"></span><br><span class="line">循环数据要加key</span><br><span class="line"></span><br><span class="line">遍历数组的两种方式</span><br><span class="line"></span><br><span class="line">改变state的值</span><br><span class="line"></span><br><span class="line">this.setState(&#123;</span><br><span class="line"></span><br><span class="line">msg:&#39;改变后的值&#39;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios需要在后端设置允许跨域</span><br><span class="line"></span><br><span class="line">fetch-jsonp 允许跨域</span><br><span class="line"></span><br><span class="line">通过在路由后面加上&#x2F;:aid 配置动态路由</span><br><span class="line"></span><br><span class="line">this.props.match.params.id获取动态路由的传值</span><br><span class="line"></span><br><span class="line">可以通过Url模块来解析url地址 cnpm install url --save</span><br><span class="line"></span><br><span class="line">无论是动态路由还是get传值 都可以通过this.props中的属性找到参数</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="前端框架" scheme="https://a2914475618.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="React" scheme="https://a2914475618.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>vue基础知识</title>
    <link href="https://a2914475618.github.io/2021/08/08/postvue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://a2914475618.github.io/2021/08/08/postvue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-08-08T08:14:19.000Z</published>
    <updated>2021-09-22T13:26:18.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue基础知识"><a href="#vue基础知识" class="headerlink" title="vue基础知识"></a>vue基础知识</h1><h3 id="什么是vue生命周期？"><a href="#什么是vue生命周期？" class="headerlink" title="什么是vue生命周期？"></a>什么是vue生命周期？</h3><p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载DOM-渲染、更新-渲染、卸载等一系列的过程，我们称这是 Vue 的生命周期。</p><h3 id="vue生命周期的作用是什么"><a href="#vue生命周期的作用是什么" class="headerlink" title="vue生命周期的作用是什么"></a>vue生命周期的作用是什么</h3><p>Vue 所有的功能的实现都是围绕其生命周期进行的，在生命周期的不同阶段调用对应的钩子函数可以实现组件数据管理和DOM渲染两大重要功能。<br> 生命周期中有多个事件钩子，在控制整个vue实例的过程时更容易形成好的逻辑。</p><h3 id="第一次页面加载会触发哪几个钩子？"><a href="#第一次页面加载会触发哪几个钩子？" class="headerlink" title="第一次页面加载会触发哪几个钩子？"></a>第一次页面加载会触发哪几个钩子？</h3><p>beforeCreate ， created ， beforeMount ，mounted 这几个钩子</p><h3 id="简述每个周期具体适合哪些场景？"><a href="#简述每个周期具体适合哪些场景？" class="headerlink" title="简述每个周期具体适合哪些场景？"></a>简述每个周期具体适合哪些场景？</h3><ul><li>beforeCreate：创建前，此阶段为实例初始化之后，this指向创建的实例，此时的数据观察事件机制都未形成，不能获得DOM节点。<br>data，computed，watch，methods 上的方法和数据均不能访问。<br>可以在这加个loading事件。</li><li>created：创建后，此阶段为实例已经创建，完成数据（data、props、computed）的初始化导入依赖项。<br>可访问 data computed watch methods 上的方法和数据。<br>初始化完成时的事件写在这里，异步请求也适宜在这里调用（请求不宜过多，避免白屏时间太长）。<br>可以在这里结束loading事件，还做一些初始化，实现函数自执行。<br>未挂载DOM，若在此阶段进行DOM操作一定要放在Vue.nextTick()的回调函数中。</li><li>beforeMount：挂载前，虽然得不到具体的DOM元素，但vue挂载的根节点已经创建，下面vue对DOM的操作将围绕这个根元素继续进行。<br>beforeMount这个阶段是过渡性的，一般一个项目只能用到一两次。</li><li>mounted：挂载，完成创建vm.$el，和双向绑定<br>完成挂载DOM和渲染，可在mounted钩子函数中对挂载的DOM进行操作。<br>可在这发起后端请求，拿回数据，配合路由钩子做一些事情。</li><li>beforeUpdate：数据更新前，数据驱动DOM。<br>在数据更新后虽然没有立即更新数据，但是DOM中的数据会改变，这是vue双向数据绑定的作用。<br>可在更新前访问现有的DOM，如手动移出添加的事件监听器。</li><li>updated：数据更新后，完成虚拟DOM的重新渲染和打补丁。<br>组件DOM已完成更新，可执行依赖的DOM操作。<br>注意：不要在此函数中操作数据（修改属性），会陷入死循环。</li><li>activated：在使用vue-router时有时需要使用<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>来缓存组件状态，这个时候created钩子就不会被重复调用了。<br>如果我们的子组件需要在每次加载的时候进行某些操作，可以使用activated钩子触发。</li><li>deactivated：<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>组件被移除时使用。</li><li>beforeDestroy：销毁前，<br>可做一些删除提示，如：您确定删除xx吗？</li><li>destroyed：销毁后，当前组件已被删除，销毁监听事件，组件、事件、子实例也被销毁。<br>这时组件已经没有了，无法操作里面的任何东西了。</li></ul><h3 id="父子组件的生命周期"><a href="#父子组件的生命周期" class="headerlink" title="父子组件的生命周期"></a>父子组件的生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">当子组件挂载完成后，父组件才会挂载。</span><br><span class="line"></span><br><span class="line">当子组件完成挂在后，父组件会主动执行一次beforeUpdated&#x2F;updated钩子函数（仅首次）</span><br><span class="line"></span><br><span class="line">父子组件在data变化中是分别监控的，但是更新props中的数据是关联的。</span><br><span class="line"></span><br><span class="line">销毁父组件时，先将子组件销毁后才会销毁父组件。</span><br><span class="line"></span><br><span class="line">兄弟组件的初始化（mounted之前）是分开进行，挂载是从上到下依次进行</span><br><span class="line"></span><br><span class="line">当没有数据关联时，兄弟组件之间的更新和销毁是互不关联的</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue基础知识&quot;&gt;&lt;a href=&quot;#vue基础知识&quot; class=&quot;headerlink&quot; title=&quot;vue基础知识&quot;&gt;&lt;/a&gt;vue基础知识&lt;/h1&gt;&lt;h3 id=&quot;什么是vue生命周期？&quot;&gt;&lt;a href=&quot;#什么是vue生命周期？&quot; class=&quot;he</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="vue基础知识" scheme="https://a2914475618.github.io/tags/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Es6</title>
    <link href="https://a2914475618.github.io/2021/07/28/es6/"/>
    <id>https://a2914475618.github.io/2021/07/28/es6/</id>
    <published>2021-07-28T01:58:43.000Z</published>
    <updated>2021-09-22T13:33:02.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习知识点"><a href="#vue学习知识点" class="headerlink" title="vue学习知识点"></a>vue学习知识点</h1><h2 id="1-箭头函数"><a href="#1-箭头函数" class="headerlink" title="1.箭头函数"></a>1.箭头函数</h2><ol><li>this是静态的，this始终指向函数声明时所在作用域下的this的值</li><li>箭头函数不能作为构造去实例化对象</li><li>不能使用arguments变量</li><li>箭头函数适合与this无关的回调：定时器，数组的回调方式</li><li>不适合与this有关的回调：事件回调，对象的方法    因为1 </li></ol><p>2.element plus 中通过resetFields()重置表单所有项</p><p>3.<strong>1、window.open方法有三个参数：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.open(url, [name], [configuration])</span><br><span class="line">其中：</span><br><span class="line">url：为要新打开页面的url</span><br><span class="line">name：为新打开窗口的名字，可以通过此名字获取该窗口对象</span><br><span class="line">configuration：为新打开窗口的一些配置项，比如是否有菜单栏、滚动条、长高等等信息</span><br><span class="line"></span><br><span class="line">_top&quot;、&quot;_blank&quot;、&quot;_selft&quot;具有特殊意义的名称。</span><br><span class="line">    _blank：在新窗口显示目标网页</span><br><span class="line">    _self：在当前窗口显示目标网页</span><br><span class="line">    _top：框架网页中在上部窗口中显示目标网页</span><br></pre></td></tr></table></figure><p>4.rest参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*es6引入了rest参数，用于获取函数的实参，用来代替arguments*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">data</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line">data(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)<span class="comment">//返回的是[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;],就可以使用filter,some,every,map</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*rest参数必须要放在参数的最后</span></span><br></pre></td></tr></table></figure><p>5.扩展运算符(…)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展运算符能将数组转换为逗号分隔的参数序列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用：</span></span><br><span class="line"><span class="keyword">const</span> list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> list2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">//数组的合并    </span></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">const</span> team=list1.concat(list2)</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">const</span> team=[...list1,...list2]</span><br><span class="line"><span class="comment">//数组的克隆</span></span><br><span class="line">    <span class="keyword">const</span>  list_1=[...list1]</span><br><span class="line"><span class="comment">//将伪数组转换为真正的数组</span></span><br></pre></td></tr></table></figure><p>6.迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es6提供for of 供可迭代的使用</span></span><br><span class="line"><span class="comment">//获取iterator</span></span><br><span class="line"><span class="keyword">const</span> list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> iterator=list[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">iterator.next()  <span class="comment">// 结果为  1,false</span></span><br><span class="line">iterator.next()<span class="comment">// 2,false</span></span><br><span class="line">iterator.next()<span class="comment">//3  false</span></span><br><span class="line">iterator.next()<span class="comment">//4  false</span></span><br><span class="line">iterator.next()<span class="comment">//undefined true</span></span><br></pre></td></tr></table></figure><p>7.生成器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成器其实就是一个特殊的函数</span></span><br><span class="line"><span class="comment">//异步编程 文件操作  网络操作（ajax,request) 数据库操作</span></span><br><span class="line"><span class="comment">//yield函数代码的分隔符</span></span><br><span class="line"><span class="comment">//通过next方法来控制向下执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">&#x27;hello generator&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator=gen()</span><br><span class="line"><span class="comment">//console.log(iterator)</span></span><br><span class="line">iterator.next()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成器函数实例</span></span><br><span class="line"><span class="comment">//一秒钟后打印111，在上面执行完2秒钟之后打印222，在上面执行完3秒钟之后打印333</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">interator.next(<span class="number">111</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">interator.next(<span class="number">222</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">333</span>);</span><br><span class="line">interator.next(<span class="number">333</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> userData=<span class="keyword">yield</span> one()<span class="comment">//111</span></span><br><span class="line"><span class="keyword">let</span> goodData=<span class="keyword">yield</span> two()<span class="comment">//222</span></span><br><span class="line"><span class="keyword">let</span> otherData=<span class="keyword">yield</span> three()<span class="comment">//333</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> interator=gen()</span><br><span class="line">interator.next()</span><br></pre></td></tr></table></figure><p>8.Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise是一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> p=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> data=<span class="string">&#x27;数据库中的用户数据&#x27;</span></span><br><span class="line">resolve(data)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="comment">//成功的回调 resolve</span></span><br><span class="line"><span class="built_in">console</span>.log(value)<span class="comment">//数据库中的用户数据</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;<span class="comment">//失败的回调 reject</span></span><br><span class="line"><span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>9.then</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;then方法的返回结果是一个promise对象，对象的状态由回调函数的执行结果决定</span><br><span class="line">&#x2F;&#x2F;then方法可以链式回调的</span><br></pre></td></tr></table></figure><p>10.set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>.<span class="string">&#x27;3&#x27;</span>.<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s)<span class="comment">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;]</span></span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="built_in">console</span>.log(s.size)<span class="comment">//4</span></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">s.add(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">s.delete(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"><span class="comment">//检测</span></span><br><span class="line">s.has(<span class="string">&#x27;1&#x27;</span>)  <span class="comment">//true</span></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">s.clear()</span><br><span class="line"><span class="comment">//for of 遍历</span></span><br><span class="line"><span class="comment">//数组去重</span></span><br><span class="line"><span class="keyword">let</span> result=[...new <span class="built_in">Set</span>(s)]<span class="comment">//集合会自动去除重复的元素，扩展运算符将元素展开，最后放在集合里</span></span><br><span class="line">s.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;<span class="comment">//利用filter来去重</span></span><br><span class="line"><span class="keyword">return</span> s.indexOf(item)===indedx</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//交集</span></span><br><span class="line"><span class="keyword">let</span> s2=[<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;5&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> result=[...new <span class="built_in">Set</span>(s)].filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> s2=<span class="keyword">new</span> <span class="built_in">Set</span>(arr2);</span><br><span class="line"><span class="keyword">if</span>(s2.has(item))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 也可以写成 s2.indexOf(item)!==-1</span></span><br><span class="line"><span class="comment">  或者 new Set(s2).has(item)*/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//并集</span></span><br><span class="line"><span class="keyword">let</span> union=[...new <span class="built_in">Set</span>([...s,...s2])]</span><br><span class="line"><span class="comment">//差集</span></span><br><span class="line"><span class="keyword">let</span> diff=[...new <span class="built_in">Set</span>(s)].filter(<span class="function"><span class="params">item</span>=&gt;</span>!(<span class="keyword">new</span> <span class="built_in">Set</span>(s2).has(item)))</span><br></pre></td></tr></table></figure><p>11.map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现了iterator接口  可使用扩展运算符和 for of遍历</span><br><span class="line">let m&#x3D;new Map()</span><br><span class="line">&#x2F;&#x2F;map 形成键值对</span><br><span class="line">m.set(&#39;name&#39;,&#39;前端&#39;)</span><br><span class="line">m.set(&#39;change&#39;,function()&#123;</span><br><span class="line">console.log(&quot;这是一个函数change&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">let key&#x3D;&#123;</span><br><span class="line">school:&#39;SHNU&#39;</span><br><span class="line">&#125;</span><br><span class="line">m.set(key,[&#39;徐汇&#39;,&#39;奉贤&#39;])</span><br><span class="line">&#x2F;&#x2F;size</span><br><span class="line">&#x2F;&#x2F;delete</span><br><span class="line">&#x2F;&#x2F;get 获取传入key值</span><br><span class="line">&#x2F;&#x2F;清空 m.clear()</span><br><span class="line">&#x2F;&#x2F;遍历 for of</span><br></pre></td></tr></table></figure><p>12.object对象的扩展方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;object.is  判断两个值是否完成相等</span><br><span class="line">&#x2F;&#x2F;object.assign 对象的合并</span><br><span class="line">&#x2F;&#x2F;object.setPortotypeOf 设置原型对象</span><br><span class="line">&#x2F;&#x2F;object.getPortotypeOf  获取原型对象</span><br></pre></td></tr></table></figure><p>13.async</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;返回结果为promise对象</span><br><span class="line">&#x2F;&#x2F;promise对象的结果由async函数执行的返回值决定</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>14.await</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;await必须写在async中</span><br><span class="line">&#x2F;&#x2F;await右侧的表达式一般为promise对象</span><br><span class="line">&#x2F;&#x2F;await返回的是promise对象成功的值</span><br><span class="line">&#x2F;&#x2F;await的promise失败了，通过try catch捕获处理</span><br><span class="line">&#x2F;&#x2F;await必须放在async中</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习知识点&quot;&gt;&lt;a href=&quot;#vue学习知识点&quot; class=&quot;headerlink&quot; title=&quot;vue学习知识点&quot;&gt;&lt;/a&gt;vue学习知识点&lt;/h1&gt;&lt;h2 id=&quot;1-箭头函数&quot;&gt;&lt;a href=&quot;#1-箭头函数&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Es6" scheme="https://a2914475618.github.io/tags/Es6/"/>
    
  </entry>
  
  <entry>
    <title>他山之石</title>
    <link href="https://a2914475618.github.io/2021/06/03/post%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://a2914475618.github.io/2021/06/03/post%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-06-03T07:49:32.000Z</published>
    <updated>2021-06-03T09:23:17.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="他山之石"><a href="#他山之石" class="headerlink" title="他山之石"></a>他山之石</h1><blockquote><p>声明：这部分为我学习中对一些小知识点的整理</p></blockquote><h2 id="1-httpSeverUtility类"><a href="#1-httpSeverUtility类" class="headerlink" title="1.httpSeverUtility类"></a>1.httpSeverUtility类</h2><blockquote><p>HttpServerUtility是一个工具类，为了在后台处理请求方便获取到一些常用的类型</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取服务器的计算机名称。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> MachineName &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="comment">// 获取和设置请求超时值（以秒计）。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> ScriptTimeout &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment">//清除前一个异常。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClearError</span>(<span class="params"></span>)</span>;</span><br><span class="line">    　　<span class="comment">//创建 COM 对象的服务器实例，该 COM 对象由对象的程序标识符 (ProgID) 标识。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">CreateObject</span>(<span class="params"><span class="built_in">string</span> progID</span>)</span>;</span><br><span class="line">        <span class="comment">//创建由对象类型标识的 COM 对象的一个服务器实例。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">CreateObject</span>(<span class="params">Type type</span>)</span>;</span><br><span class="line">        <span class="comment">//创建 COM 对象的服务器实例，该对象由对象的类标识符 (CLSID) 标识。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">CreateObjectFromClsid</span>(<span class="params"><span class="built_in">string</span> clsid</span>)</span>;</span><br><span class="line">        <span class="comment">//在当前请求的上下文中执行指定虚拟路径的处理程序。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">string</span> path</span>)</span>;</span><br><span class="line">        <span class="comment">//在当前请求的上下文中执行指定虚拟路径的处理程序，并指定是否要清除 System.Web.HttpRequest.QueryString 和 System.Web.HttpRequest.Form</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">// 在当前请求的上下文中执行指定虚拟路径的处理程序。System.IO.TextWriter 捕获执行的处理程序的输出。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">string</span> path, TextWriter writer</span>)</span>;</span><br><span class="line">        <span class="comment">//在当前请求的上下文中执行指定虚拟路径的处理程序。System.IO.TextWriter 捕获执行的处理程序的输出，布尔参数则指定是否要清除 System.Web.HttpRequest.QueryString</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">IHttpHandler handler, TextWriter writer, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//在当前请求的上下文中执行指定虚拟路径的处理程序。System.IO.TextWriter 捕获页面输出，布尔参数则指定是否要清除 System.Web.HttpRequest.QueryString</span></span><br><span class="line">        <span class="comment">//和 System.Web.HttpRequest.Form 集合。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">string</span> path, TextWriter writer, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//返回前一个异常。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Exception <span class="title">GetLastError</span>(<span class="params"></span>)</span>;</span><br><span class="line">        <span class="comment">//对 HTML 编码的字符串进行解码，并返回已解码的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">HtmlDecode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//对 HTML 编码的字符串进行解码，并将结果输出发送到 System.IO.TextWriter 输出流。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HtmlDecode</span>(<span class="params"><span class="built_in">string</span> s, TextWriter output</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 HTML 编码并返回已编码的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">HtmlEncode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 HTML 编码，并将结果输出发送到 System.IO.TextWriter 输出流。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HtmlEncode</span>(<span class="params"><span class="built_in">string</span> s, TextWriter output</span>)</span>;</span><br><span class="line">        <span class="comment">//返回与 Web 服务器上的指定虚拟路径相对应的物理文件路径。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">MapPath</span>(<span class="params"><span class="built_in">string</span> path</span>)</span>;</span><br><span class="line">        <span class="comment">//对于当前请求，终止当前页的执行，并使用指定的页 URL 路径来开始执行一个新页。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transfer</span>(<span class="params"><span class="built_in">string</span> path</span>)</span>;</span><br><span class="line">        <span class="comment">//终止当前页的执行，然后使用一个实现 System.Web.IHttpHandler 接口的自定义 HTTP 处理程序开始新请求的执行，并指定是否要清除</span></span><br><span class="line">        <span class="comment">//System.Web.HttpRequest.QueryString 和 System.Web.HttpRequest.Form 集合。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transfer</span>(<span class="params">IHttpHandler handler, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//终止当前页的执行，并使用指定的页 URL 路径来开始执行一个新页。指定是否清除 System.Web.HttpRequest.QueryString和 System.Web.HttpRequest.Form 集合。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Transfer</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//异步执行指定的 URL。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransferRequest</span>(<span class="params"><span class="built_in">string</span> path</span>)</span>;</span><br><span class="line">        <span class="comment">//异步执行指定的 URL 并保留查询字符串参数。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransferRequest</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> preserveForm</span>)</span>;</span><br><span class="line">        <span class="comment">//使用指定的 HTTP 方法和标头异步执行指定的 URL。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TransferRequest</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> preserveForm, <span class="built_in">string</span> method, NameValueCollection headers</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 URL 解码并返回已解码的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UrlDecode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//对在 URL 中接收的 HTML 字符串进行解码，并将结果输出发送到 System.IO.TextWriter 输出流。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UrlDecode</span>(<span class="params"><span class="built_in">string</span> s, TextWriter output</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 URL 编码，并返回已编码的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UrlEncode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//对字符串进行 URL 编码，并将结果输出发送到 System.IO.TextWriter 输出流。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UrlEncode</span>(<span class="params"><span class="built_in">string</span> s, TextWriter output</span>)</span>;</span><br><span class="line">        <span class="comment">//对 URL 字符串的路径部分进行 URL 编码并返回编码后的字符串。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">UrlPathEncode</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">        <span class="comment">//将 URL 字符串标记解码为使用 64 进制数字的等效字节数组。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">UrlTokenDecode</span>(<span class="params"><span class="built_in">string</span> input</span>)</span>;</span><br><span class="line">        <span class="comment">//将一个字节数组编码为使用 Base 64 编码方案的等效字符串表示形式，Base 64 是一种适于通过 URL 传输数据的编码方案。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">UrlTokenEncode</span>(<span class="params"><span class="built_in">byte</span>[] input</span>)</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="2-HttpContext类"><a href="#2-HttpContext类" class="headerlink" title="2.HttpContext类"></a>2.HttpContext类</h2><blockquote><p>1：HttpContext类它对Request、Respose、Server等等都进行了封装,并保证在整个请求周期内都可以随时随地的调用；为继承 IHttpModule 和 IHttpHandler 接口的类提供了对当前 HTTP 请求的 HttpContext 对象的引用。该对象提供对请求的内部Request、Response 和 Server 属性的访问。HttpContext的命名空间：System.Web（在 system.web.dll 中）;除了对几个对象进行封装外它还有个HttpContext.Item，通过它你可以在HttpContext的生存周期内提前存储一些临时的数据，方便随时使用。</p><p>2：生存周期：从客户端用户点击并产生了一个向服务器发送请求开始—服务器处理完请求并生成返回到客户端为止。针对每个不同用户的请求，服务器都会创建一个新的HttpContext实例直到请求结束,服务器销毁这个实例。</p><p>3：当我们创建一个一般处理程序Handler.ashx时，我们可以在文件中看到这一句 public void ProcessRequest (HttpContext context)；</p><p>4:可以通过HttpContext.Current获得当前的上下文httpContext的内容；这样可以在多处方便获取我们想要的数据；</p></blockquote><h3 id="HttpContext-Item"><a href="#HttpContext-Item" class="headerlink" title="HttpContext.Item"></a>HttpContext.Item</h3><blockquote><p>HttpContext.Item可以通过它来存储一些临时的数据</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Btn_Transfer_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        list.Add(<span class="string">&quot;踏浪帅&quot;</span>);</span><br><span class="line">        list.Add(<span class="string">&quot;www.cnblogs.com/wujy&quot;</span>);</span><br><span class="line">        HttpContext.Current.Items[<span class="string">&quot;TransferName&quot;</span>] = list;</span><br><span class="line">        Server.Transfer(<span class="string">&quot;Index.aspx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Btn_Redirect_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        list.Add(<span class="string">&quot;踏浪帅&quot;</span>);</span><br><span class="line">        list.Add(<span class="string">&quot;www.cnblogs.com/wujy&quot;</span>);</span><br><span class="line">        HttpContext.Current.Items[<span class="string">&quot;RedirectName&quot;</span>] = list;</span><br><span class="line">        Response.Redirect(<span class="string">&quot;Index.aspx&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用Server.Transfer方式我们在接收页面成功获得我们写入的数据；而Response.Redirect方式却导致数据的丢失；出现这个问题的原因是Server.Transfer是在服务器直接操作的的和调用的地方属于同一次http请求，此处如果使用Response.Redirect是从客户端重新发起了一次Http请求；而正如我们前面所说的HttpContext的生存周期只能在一个http请求才不会被服务器销毁这个实例；</p></blockquote><blockquote><p>一般的情况下尽可能用Server.Transfer方法（前提是服务器是IIS)，Server.Transfer方法更快速，而且因为只在服务器上执行，所以可以和任何浏览器兼容。</p><p>Response.Redirect其实上是当服务器碰到这条语句时发送一条指令（包含新的地址）给浏览器，然后让浏览器去发送http请求，请求Response.Redirect后面的那个新的http地址，流程如下:浏览器文件请求-&gt;服务器执行-&gt;遇到response.redirect语句-&gt;服务器发送Server.Transfer后面的地址给客户机端的浏览器-&gt;浏览器请求执行新的地址（服务器返回的Response.Redirect后面的地址）这就是一个小小的Response.Redirect的全部过程，<br>Server.Transfer语句当接受地址后是直接转向后面的地址，流程如下:浏览器文件请求-&gt;服务器执行-&gt;遇到Server.Transfer语句-&gt;服务器转向新的文件。</p></blockquote><h3 id="HttpContext对象中的Request"><a href="#HttpContext对象中的Request" class="headerlink" title="HttpContext对象中的Request"></a>HttpContext对象中的Request</h3><blockquote><p>Request 封装了客户端请求信息，是从客户端得到数据(从浏览器获取数据);常用的三种取得数据的方法是：Request.Form、Request.QueryString、Request其第三种是前两种的一个缩写，可以取代前两种情况。而前两种主要对应的Form提交时的两种不同的提交方法：分别是Post方法和Get方法。</p></blockquote><h3 id="HttpContext对象中的Response"><a href="#HttpContext对象中的Response" class="headerlink" title="HttpContext对象中的Response"></a>HttpContext对象中的Response</h3><blockquote><p>Response代表了服务器响应对象。每次客户端发出一个请求的时候，服务器就会用一个响应对象来处理这个请求，处理完这个请求之后，服务器就会销毁这个相应对象，以便继续接受其它客服端请求。</p></blockquote><p>Response主要用来一些输出的运用；只要简单记住其几个重要的属性以及方法就差不多了；</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Response.Redirect(<span class="string">&quot;Default.aspx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">string</span> FileContent = Server.MapPath(<span class="string">&quot;.&quot;</span>) + <span class="string">&quot;\\TextFile.txt&quot;</span>;</span><br><span class="line">        Response.WriteFile(FileContent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Button3_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Response.Write(<span class="string">&quot;这是第一句&quot;</span>);</span><br><span class="line">        Response.End(); <span class="comment">//停止运行，不再执行任何语句 </span></span><br><span class="line">        Response.Write(<span class="string">&quot;这是第二句&quot;</span>);</span><br><span class="line">        Response.Clear();  <span class="comment">//清空缓冲区中的所有内容输出</span></span><br><span class="line">        Response.Close();<span class="comment">//关闭当前服务器到客户端的连接</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="HttpContext对象中的Sever"><a href="#HttpContext对象中的Sever" class="headerlink" title="HttpContext对象中的Sever"></a>HttpContext对象中的Sever</h3><blockquote><p>Server对象是用于获取服务器的相关信息的对象</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder strBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;获取计算机名:&quot;</span>+HttpContext.Current.Server.MachineName+<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;获取指定相对路径在服务器上的物理路径:&quot;</span> + Server.MapPath(<span class="string">&quot;.&quot;</span>) + <span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;在服务器里实现跳转;不用再返回客户端；Server.Transfer(string Path)&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;先执行路径所代表的URL，然后执行完之后再执行本页:Server.Execute(string Path)&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;对特殊字符串的处理：Server.HtmlDecode(string s)与Server.HtmlEncode(string s)&lt;/br&gt;&quot;</span>);</span><br><span class="line">        strBuilder.Append(<span class="string">&quot;对URL路径字符串进行编解码：Server.UrlDecode(string s)与Server.UrlEncode(string s)&lt;/br&gt;&quot;</span>);</span><br><span class="line">        Response.Write(strBuilder.ToString());</span><br></pre></td></tr></table></figure><h2 id="3-base关键字"><a href="#3-base关键字" class="headerlink" title="3.base关键字"></a>3.base关键字</h2><blockquote><p>base的相关作用</p><p>1.base调用基类构造函数</p><p>2.base调用基类方法</p></blockquote><h2 id="4-this关键字"><a href="#4-this关键字" class="headerlink" title="4.this关键字"></a>4.this关键字</h2><blockquote><p>this常用用途</p><p>1.限定被相似的名称隐藏的成员</p><p>eg：this.name=name;//name的访问级别为private</p><p>2.将对象作为参数传递到其他方法</p><p>eg：Print.DoPrint(this);//将调用的对象作为参数传到方法里</p><p>3.声明索引器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> param]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _arr[param]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _arr[param] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;他山之石&quot;&gt;&lt;a href=&quot;#他山之石&quot; class=&quot;headerlink&quot; title=&quot;他山之石&quot;&gt;&lt;/a&gt;他山之石&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;声明：这部分为我学习中对一些小知识点的整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="他山之石" scheme="https://a2914475618.github.io/tags/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>C#学习</title>
    <link href="https://a2914475618.github.io/2021/06/02/postC-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://a2914475618.github.io/2021/06/02/postC-%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-06-02T11:05:39.000Z</published>
    <updated>2021-06-02T11:07:52.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-学习记录"><a href="#C-学习记录" class="headerlink" title="C#学习记录"></a>C#学习记录</h1><blockquote><p>记录学习中的重要点，嘿嘿嘿</p></blockquote><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>泛型无处不在，与接口地位相当</p><p>泛型的东西在编程的时候不能直接拿来使用的，需要特化以后才能拿来使用</p><p>类型膨胀、成员膨胀（就比如方法重载，就只有参数类型不同，其他所有逻辑都是相同的）</p><p>写在&lt;&gt;里面的成为类型参数      </p><p>泛型接口 </p><p>一个类实现的是泛型接口，则他本身也是泛型的</p><p>泛型具有良好的正交性</p><p>.net framework 常用的数据结构都是泛型的</p><p>集中在 System.Collections.Generic里</p><p>list为动态数组，没有长度限制，自动创建新的数组并把内容拷贝过去</p><p>实现IEnumerable 接口的可以被迭代</p><p>实现ICollection是一个集合接口的可以添加新元素和删除元素</p><p>泛型接口也可以有两个类型参数，如IDictionary&lt;int,string&gt;</p><p>方法也可以是泛型的，只需呀写一个泛型方法，就能接受多种不一样的类型参数</p><p>泛型委托1.ACTION委托  2.FUNCTION委托Func&lt;参数类型，参数类型，返回值类型&gt;</p><p>lamada表达式：对于逻辑简单的方法，我们不想去声明他，随调用，随申明，不想污染上下文，把名字留给更重要的方法去用</p></blockquote><h2 id="partial类"><a href="#partial类" class="headerlink" title="partial类"></a>partial类</h2><blockquote><p>允许我们把代码分成两部分，或者多部分，而且每个部分都可以以自己的版本进行更新</p><p>需要其帮我们减少派生类</p><p>允许一个类的不同部分用不同的编程语言，比如cshtml</p></blockquote><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><blockquote><p>enum </p><p>限制数据的选择范围</p><p>枚举值的处置是从0开始，也可以自己给其赋值</p><p>比特位用法 1 2 4 8 </p></blockquote><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><blockquote><p>mvc ,mvp,mvvm等模式，是事件模式更高级的用法</p><p>事件模型五个部分</p><p>1.事件的拥有者</p><p>事件的源头</p><p>2.事件成员</p><p>3.事件的响应者</p><p>哪些类被通知到</p><p>4.事件处理器</p><p>用自己的方法来响应</p><p>5.事件订阅</p><p>事件处理器与事件关联在一起，监听</p><p>委托是事件的底层基础</p><p>事件是委托的上层建筑</p></blockquote><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><blockquote><p>函数指针的升级版</p><p>函数指针c语言：typedef int(*Calc)(int a,int b);间接调用</p><p>delegate</p><p>委托是一种类</p><p>通过委托保留了函数指针</p><p>1.action委托</p><p>Action action=new Action （类名.方法)</p><p>间接调用 action.Invoke();</p><p>也可以写为action();</p><p>2.Func委托</p><p>Func&lt;int ,int ,int&gt; func =new  Func&lt;int,int,int&gt;(类名.方法）</p><hr><p>通过delegate来声明委托，自定义委托</p><p>delegate double Calc (double x,double y);</p><p>用于回调方法</p></blockquote><h2 id="mvvm模式"><a href="#mvvm模式" class="headerlink" title="mvvm模式"></a>mvvm模式</h2><blockquote><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其<strong>核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定</strong>。</p><p>　　Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发更加高效、便捷。</p><p>MVVM 由 Model、View、ViewModel 三部分构成，Model 层代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑；View 代表UI 组件，它负责将数据模型转化成UI 展现出来，ViewModel 是一个同步View 和 Model的对象。</p><p>　　<strong>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上</strong>。</p><p>　　ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM， 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p></blockquote><h2 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h2><blockquote><p>在原有的类上扩展功能</p><p>也叫做继承</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-学习记录&quot;&gt;&lt;a href=&quot;#C-学习记录&quot; class=&quot;headerlink&quot; title=&quot;C#学习记录&quot;&gt;&lt;/a&gt;C#学习记录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;记录学习中的重要点，嘿嘿嘿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;泛</summary>
      
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="C#" scheme="https://a2914475618.github.io/tags/C/"/>
    
  </entry>
  
</feed>
