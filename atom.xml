<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一位可可爱爱的编橙爱好者</title>
  <icon>https://www.gravatar.com/avatar/560d60bc4bbfec4b10e3ea23f4d15430</icon>
  <subtitle>欢迎来到爱的小屋</subtitle>
  <link href="https://a2914475618.github.io/atom.xml" rel="self"/>
  
  <link href="https://a2914475618.github.io/"/>
  <updated>2022-03-12T08:45:37.358Z</updated>
  <id>https://a2914475618.github.io/</id>
  
  <author>
    <name>Lu sir</name>
    <email>2914475618@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://a2914475618.github.io/2022/03/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://a2914475618.github.io/2022/03/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2022-03-12T02:13:38.000Z</published>
    <updated>2022-03-12T08:45:37.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="OSI七层"><a href="#OSI七层" class="headerlink" title="OSI七层"></a>OSI七层</h2><p>物理层：</p><ol><li>传送的数据单位是比特</li><li>实现了相邻计算机节点之间比特流的透明传送，屏蔽具体传输介质和物理设备的差异</li></ol><p>数据链路层：</p><ol><li>数据链路层将网路层交下来的IP数据报组装成帧，两台主机之间的数据传输，是在一段一段的链路上进行传送的</li><li>包括差错控制、地址信息等</li></ol><p>网络层：</p><ol><li>选择合适的网间路由和交换节点，确保数据及时发送</li></ol><p>运输层：</p><ol><li>负责向两台主机进程之间的通信提供通用的数据传输服务</li></ol><p>应用层：</p><ol><li>通过进程之间的交互来完成特定网络应用</li></ol><h2 id="网络是怎么连接起来的"><a href="#网络是怎么连接起来的" class="headerlink" title="网络是怎么连接起来的"></a>网络是怎么连接起来的</h2><ol><li>当我们在浏览器输入网址后，浏览器会按照一定的规则去分析这个网址的含义，根据含义生成请求（DNS解析)</li><li>协议栈会将从浏览器收到的信息打包，加上目的地址等控制信息，将包交给网卡，网卡将包转换为电信号通过网线发送出去</li><li>网络包通过物理层的集线器，链路层的交换机到达网络层的路由器进入了互联网内部，通过若干路由器的努力，我们到达了目标路由器。</li><li>通过骨干网，网络包最终到了Web服务器的局域网，碰到了防火墙进行检查，可能还会遇到缓存服务器，要访问的数据正好在缓存服务器上直接返回</li><li>网络包到达Web服务器后，数据会被拆成原始的请求信息，Web服务器根据请求消息的含义，返回响应消息，发挥给客户端</li></ol><h3 id="输入网址的过程"><a href="#输入网址的过程" class="headerlink" title="输入网址的过程"></a>输入网址的过程</h3><ol><li>解析域名，找到主机 IP。 </li><li>.浏览器利用 IP 直接与网站主机通信，三次握手，建立 TCP 连接。浏览器会以一个随机端口向 服务端的 web 程序 80 端口发起 TCP 的连接。 </li><li> 建立 TCP 连接后，浏览器向主机发起一个HTTP请求。 </li><li>服务器响应请求，返回响应数据。</li><li>浏览器解析响应内容，进行渲染，呈现给用户。</li></ol><h2 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h2><ol><li>TCP面向有连接的，UDP面向无连接的</li><li>TCP可保证可靠传输，UDP无法可靠交付</li><li>UDP报文无序，TCP有序</li><li>TCP面向字节流，UDP面向报文</li><li>TCP速度块，UDP慢</li><li>TCP只能一对一通信，UDP支持一对一，一对多，多对一和多对多交互通信</li><li>TCP首部开销大，最小20字节，最大60字节</li></ol><p>传输层无法保证数据的可靠传输，只能通过应用层来实现了。实现的方式可以参照tcp可靠性传输的方式，只是实现不在传输层，实现转移到了应用层。</p><h3 id="TCP粘包和拆包"><a href="#TCP粘包和拆包" class="headerlink" title="TCP粘包和拆包"></a>TCP粘包和拆包</h3><p>原因导致：</p><p>粘包：</p><ol><li>要发送的数据包小于 TCP 发送缓冲区剩余空间，TCP 将多个数据包写满发送缓冲区一次发送出 去，将发生粘包；</li><li> 接收端没有及时读取 TCP 发送缓冲区中的数据包，将会发生粘包。</li></ol><p>拆包：</p><ol><li>TCP 发送缓冲区剩余空间不足以发送一个完整的数据包，将发生拆包； </li><li>要发送的数据超过了最大报文长度的限制，TCP 传输数据时进行拆包；</li></ol><p>解决方案：</p><ol><li><strong>添加首部</strong>：发送端给数据包添加首部，首部中添加数据包的长度属性，这样接收端通过首部中的长度字段 就可以知道数据包的实际长度啦</li><li><strong>规整数据包</strong>：针对发送的数据包小于缓冲区大小的情况，发送端可以将不同的数据包规定成同样的长度，不 足这个长度的补充 0，接收端从缓冲区读取固定的长度数据这样就可以区分不同的数据包</li><li><strong>间隔符确定边界</strong>：发送端通过给不同的数据包添加间隔符合确定边界，接收端通过这个间隔符合就可以区分不同 的数据包</li></ol><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><ol><li>客户端请求发起连接，生成一个同步报文，生成一个随机数作为序列号x，发给服务端，并且自身进入SYN_SENT状态</li><li>服务端收到请求，若同意连接，生成确任报文，确认号为x+1,同步时选择一个随机数Seq=y作为初始化序列号，服务器进入SYN_RECV状态</li><li>客户端收到确认后，向服务端发送一个确认报文，确认号为y+1,seq=x+1，客户端和服务器都进入连接状态。</li></ol><h4 id="为什么三次而不是两次？"><a href="#为什么三次而不是两次？" class="headerlink" title="为什么三次而不是两次？"></a>为什么三次而不是两次？</h4><ol><li>防止已过期的连接请求报文突然又传送到服务器，因而产生错误和资源浪费。</li><li>三次握手才能让双方均确认自己和对方的发送和接收能力都正常。</li><li>告知对方自己的初始序号值，并确认收到对方的初始序号值。同步序列号</li></ol><h4 id="三次握手最后一个ACK确认包丢失？"><a href="#三次握手最后一个ACK确认包丢失？" class="headerlink" title="三次握手最后一个ACK确认包丢失？"></a>三次握手最后一个ACK确认包丢失？</h4><p><strong>服务端</strong>：</p><ol><li>超时重传SYN+ACK包</li><li>超过指定次数后，仍未收到ACK则关闭连接</li></ol><p><strong>客户端</strong>：</p><ol><li>客户端向服务端发送请求，服务端将以RST包响应。此时，客户端是知道三次握手失败</li></ol><h4 id="为什么客户端的TIME-WAIT状态必须等待2MSL？"><a href="#为什么客户端的TIME-WAIT状态必须等待2MSL？" class="headerlink" title="为什么客户端的TIME-WAIT状态必须等待2MSL？"></a>为什么客户端的TIME-WAIT状态必须等待2MSL？</h4><ol><li><p>确保 ACK 报文能够到达服务端，从而使服务端正常关闭连接。</p><p>第四次挥手时，客户端第四次挥手的 ACK 报文不一定会到达服务端。服务端会超时重传 FIN/ACK 报文，此时如果客户端已经断开了连接，那么就无法响应服务端的二次请求，这样服务端迟迟收不到 FIN/ACK 报文的确认，就无法正常断开连接。</p><p>MSL 是报文段在网络上存活的最长时间。客户端等待 2MSL 时间，即「客户端 ACK 报文 1MSL 超时 + 服务端 FIN 报文 1MSL 传输」，就能够收到服务端重传的 FIN/ACK 报文，然后客户端重传一次 ACK 报文，并重新启动 2MSL 计时器。如此保证服务端能够正常关闭。</p><p>如果服务端重发的 FIN 没有成功地在 2MSL 时间里传给客户端，服务端则会继续超时重试直到断开连接。</p></li><li><p>防止已失效的连接请求报文段出现在之后的连接中。</p><p>TCP 要求在 2MSL 内不使用相同的序列号。客户端在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以保证本连接持续的时间内产生的所有报文段都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。或者即使收到这些过时的报文，也可以不处理它。</p></li></ol><h3 id="TCP如何保证可靠传输"><a href="#TCP如何保证可靠传输" class="headerlink" title="TCP如何保证可靠传输"></a>TCP如何保证可靠传输</h3><ul><li><p><strong>检验和</strong>：通过检验和的方式，接收端可以检测出来数据是否有差错和异常，假如有差错就会直接丢弃TCP段，重新发送。</p></li><li><p><strong>序列号/确认应答</strong>：</p><p>序列号的作用不仅仅是应答的作用，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据。</p><p>TCP传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答。也就是发送ACK报文，这个ACK报文当中带有对应的确认序列号，告诉发送方，接收到了哪些数据，下一次的数据从哪里发。</p></li><li><p><strong>滑动窗口</strong>：滑动窗口既提高了报文传输的效率，也避免了发送方发送过多的数据而导致接收方无法正常处理的异常。</p></li><li><p><strong>超时重传</strong>：超时重传是指发送出去的数据包到接收到确认包之间的时间，如果超过了这个时间会被认为是丢包了，需要重传。最大超时时间是动态计算的。</p></li><li><p><strong>拥塞控制</strong>：在数据传输过程中，可能由于网络状态的问题，造成网络拥堵，此时引入拥塞控制机制，在保证TCP可靠性的同时，提高性能。</p></li><li><p><strong>流量控制</strong>：如果主机A 一直向主机B发送数据，不考虑主机B的接受能力，则可能导致主机B的接受缓冲区满了而无法再接受数据，从而会导致大量的数据丢包，引发重传机制。而在重传的过程中，若主机B的接收缓冲区情况仍未好转，则会将大量的时间浪费在重传数据上，降低传送数据的效率。所以引入流量控制机制，主机B通过告诉主机A自己接收缓冲区的大小，来使主机A控制发送的数据量。流量控制与TCP协议报头中的窗口大小有关。</p></li></ul><h2 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h2><h3 id="HTTP1-0与HTTP1-1的区别"><a href="#HTTP1-0与HTTP1-1的区别" class="headerlink" title="HTTP1.0与HTTP1.1的区别"></a>HTTP1.0与HTTP1.1的区别</h3><ol><li><strong>长连接</strong>：HTTP1.0每次请求需要建立一个连接，增加了三次握手四次挥手的开销。HTTP1.1起，默认开启Connection：keep-alive。持续连接有流水线方式和非流水线方式。流水线就是客户端在收到响应之前就可以继续发送请求报文。指定timeout或者max</li><li><strong>错误状态码</strong>：新增了24个状态码，如409请求的资源与资源的当前状态发生冲突</li><li><strong>缓存处理</strong>：在HTTP1.0中主要使⽤header⾥的If-Modified-Since,Expires来做为缓存判断的标 准，HTTP1.1则引⼊了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</li><li><strong>带宽优化及网络连接的使用</strong>：HTPP1.0中存在一些浪费带宽的现象。客户端只需要某个对象的一部分，而服务器却将整个对象发送过来，并且不支持断点续传。HTTP1.0中请求头中引入了range头域，它允许只请求资源的某个部分。返回状态码为206</li><li><strong>HOST处理</strong>：随着虚拟主机技术，一台物理服务器可以存在多个虚拟主机，共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</li></ol><h3 id="HTTP缓存机制"><a href="#HTTP缓存机制" class="headerlink" title="HTTP缓存机制"></a>HTTP缓存机制</h3><p>缓存规则：</p><ol><li>强制缓存。缓存没有失效则直接从缓存数据库拿到，否则再去请求服务器。</li><li>对比缓存。无论缓存是否生效，都需要于服务端发生交互</li></ol><p>两类缓存规则可以同时存在，强制缓存优先级高于对比缓存</p><p><strong>强制缓存</strong>在缓存数据未失效的情况下（即Cache-Control的max-age没有过期或者Expires的缓存时间没有过期），那么就会直接使用浏览器的缓存数据，不会再向服务器发送任何请求。强制缓存生效时，http状态码为200。这种方式页面的加载速度是最快的，性能也是很好的，但是在这期间，如果服务器端的资源修改了，页面上是拿不到的，因为它不会再向服务器发请求了。<br>![image-20220312133449121](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220312133449121.png)</p><p><strong>对比缓存</strong>，顾名思义，需要进行比较判断是否可以使用缓存。<br>浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。<br>再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。</p><p>Etag：第一次请求服务的返回给客户端当前资源在服务器的唯一标识</p><p>Last-Modified：第一次请求服务端返回的该资源的最后修改时间</p><p>If-None-Math:第二次请求时将Etag放在该字段里，服务器拿到Etag和请求的资源比对，若不同，则返回200，相同则304</p><p>if-Modified-Since：将上次服务器返回的更该时间Last-modified传出，服务器收到该字段与请求资源的修改时间进行比对，若时间大于则被更改过，返回200和请求资源，否则就返回304</p><p>当一个资源被缓存存储后，该资源应该可以被永久存储在缓存中。由于缓存只有有限的空间用于存储资源副本，所以缓存会定期地将一些副本删除，这个过程叫做<strong>缓存驱逐</strong>。另一方面，当服务器上面的资源进行了更新，那么缓存中的对应资源也应该被更新，由于HTTP是C/S模式的协议，服务器更新一个资源时，不可能直接通知客户端更新缓存，所以双方必须为该资源<strong>约定一个过期时间</strong>，在该过期时间之前，该资源（缓存副本）就是新鲜的，当过了过期时间后，该资源（缓存副本）则变为陈旧的。驱逐算法<strong>用于将陈旧的资源（缓存副本）替换为新鲜的</strong>，注意，一个陈旧的资源（缓存副本）<strong>是不会直接被清除或忽略</strong>的，当客户端发起一个请求时，缓存检索到已有一个对应的陈旧资源（缓存副本），则缓存会先将此请求附加一个<strong>If-None-Match头</strong>，然后发给目标服务器，以此来检查该资源副本是否是依然还是算新鲜的，若服务器返回了 304 (Not Modified)（该响应不会有带有实体信息），则表示此资源副本是新鲜的，这样一来，可以节省一些带宽。若<strong>服务器通过 If-None-Match 或 If-Modified-Since判断后</strong>发现已过期，那么会带有该资源的实体内容返回。</p><h3 id="HTTP1-1和HTTP2-0的区别"><a href="#HTTP1-1和HTTP2-0的区别" class="headerlink" title="HTTP1.1和HTTP2.0的区别"></a>HTTP1.1和HTTP2.0的区别</h3><ol><li><strong>传输格式</strong>：HTTP1.1基于文本格式，传输需要整体传输，不可分割的。HTTP2.0基于二进制流。引入了帧和流。每个帧会标记属于哪一个流</li><li><strong>多路复用</strong>：将HTTP消息分解为独立的帧，交错发送，然后在一段重新发送，并行交错的发送多个请求。HTTP1.1每个请求按序发送</li><li><strong>头部压缩</strong>：HTTP1.1头部带有大量信息，每次都需要重新发送。HTTP2.0通过压缩来减少传输的header大小。</li><li><strong>服务端推送</strong>：HTTP2.0允许服务器向客户端推送资源，无序客户端重新请求。</li></ol><h3 id="HTTP与HTTPS的区别"><a href="#HTTP与HTTPS的区别" class="headerlink" title="HTTP与HTTPS的区别"></a>HTTP与HTTPS的区别</h3><ol><li><strong>端口</strong>：HTTP是80，HTTPS是443</li><li><strong>安全性</strong>：HTTP明文传输，安全性差。HTTPS有加密机制</li><li><strong>协议</strong>：运行在TCP协议上。HTTPS运行在SSL协议上，SSL运行在TCP协议之上</li></ol><h3 id="HTTPS握手过程"><a href="#HTTPS握手过程" class="headerlink" title="HTTPS握手过程"></a>HTTPS握手过程</h3><ol><li>首先客户端向服务端发送一个请求，里面主要包括：一个客户端生成的<a href="https://so.csdn.net/so/search?q=%E9%9A%8F%E6%9C%BA%E6%95%B0&spm=1001.2101.3001.7020">随机数</a>（Client random），以及客户端支持的加密算法（都是对称加密算法）。</li><li>服务端收到请求后从中选出一组加密算法和HASH算法，并将自己的数字证书、以及一个自己生成的随机数（Server random）发送给客户端。</li><li>客户端收到回复后，验证证书是否有效，如果有效就生成一个随机数，然后用证书中所包含的公钥加密这个随机数生成密文，并且用服务端刚才挑选的HASH算法对这个随机数进行加密，生成的hash值称之为校验值1，然后将密文和校验值1一起发送给服务端。</li><li>服务端收到后，用自己的私钥解密出随机数，然后用HASH算法对这个随机数进行加密得到校验值2，如果校验值1和校验值2相同则说明消息未被篡改，可以信任。最后，使用该随机数，加上之前第2步中选择的加密算法，加密一段握手消息，发还给客户端。同时HASH值也带上。</li><li>客户端收到服务器端的消息后，首先检查消息是否为握手消息，然后计算HASH值是否与发回的消息一致。</li><li>握手结束后，客户端和服务器端使用握手阶段产生的随机数以及挑选出来的算法进行对称加解密的传输。</li></ol><p><img src="https://segmentfault.com/img/bVbCCMD/view" alt="preview"></p><h3 id="301状态码和302状态码的区别？"><a href="#301状态码和302状态码的区别？" class="headerlink" title="301状态码和302状态码的区别？"></a>301状态码和302状态码的区别？</h3><p><strong>共同点</strong>：301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（<strong>用户看到的效果就是他输入的地址A瞬间变成了另一个地址B</strong>）。</p><p> <strong>不同点</strong>：301表示旧地址A的资源已经被永久地移除了(这个资源不可访问了)，搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO中302好于301。</p><p><strong>补充，重定向原因</strong>：</p><ol><li>网站调整（如改变网页目录结构）；</li><li>网页被移到一个新地址；</li><li>网页扩展名改变(如应用需要把.php改成.Html或.shtml)。</li></ol><h2 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h2><h3 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h3><ul><li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li><li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li><li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li><li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li><li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</li></ul><h3 id="Cookie和Session配合"><a href="#Cookie和Session配合" class="headerlink" title="Cookie和Session配合"></a>Cookie和Session配合</h3><ol><li>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建对应的 Session ，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，</li><li>浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。</li><li>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端</li><li>服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</li></ol><h2 id="Get和Post的区别"><a href="#Get和Post的区别" class="headerlink" title="Get和Post的区别"></a>Get和Post的区别</h2><p><strong>用途</strong>：</p><p> get 请求用来从服务器获取资源 </p><p>post 请求用来向服务器提交数据 </p><p><strong>表单的提交方式：</strong></p><p> get 请求直接将表单数据以 name1=value1&amp;name2=value2 的形式拼接到 URL 上（<a href="http://www/">http://www</a>. baidu.com/action?name1=value1&amp;name2=value2），多个参数参数值需要用 &amp; 连接起来并 且用 ? 拼接到 action 后面；</p><p> post 请求将表单数据放到请求头或者请求的消息体中。 </p><p><strong>传输数据的大小限制：</strong> </p><p>get 请求传输的数据受到 URL 长度的限制，而 URL 长度是由浏览器决定的； </p><p>post 请求传输数据的大小理论上来说是没有限制的。 </p><p><strong>参数的编码：</strong> </p><p>get 请求的参数会在地址栏明文显示，使用 URL 编码的文本格式传递参数； </p><p>post 请求使用二进制数据多重编码传递参数。 </p><p><strong>缓存：</strong> </p><p>get 请求可以被浏览器缓存被收藏为标签；</p><p> post 请求不会被缓存也不能被收藏为标签。</p><h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h2><p>2**成功，操作被成功接收并处理</p><p>200 OK：表示从客户端发送给服务器的请求被正常处理并返回；</p><p>204 No Content：表示客户端发送给客户端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分（没有资源可以返回）；</p><p>206 Patial Content：表示客户端进行了范围请求，并且服务器成功执行了这部分的GET请求，响应报文中包含由Content-Range指定范围的实体内容。</p><p>3**重定向，需要进一步的操作以完成请求</p><p>301 Moved Permanently：永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL；</p><p>302 Found：临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL；</p><pre><code>   301与302的区别：前者是永久移动，后者是临时移动（之后可能还会更改URL）</code></pre><p>303 See Other：表示请求的资源被分配了新的URL，应使用GET方法定向获取请求的资源；</p><pre><code>  302与303的区别：后者明确表示客户端应当采用GET方式获取资源</code></pre><p>304 Not Modified：表示客户端发送附带条件（是指采用GET方法的请求报文中包含if-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码；</p><p>307 Temporary Redirect：临时重定向，与303有着相同的含义，307会遵照浏览器标准不会从POST变成GET；（不同浏览器可能会出现不同的情况）；</p><p>4**客户端错误，请求包含语法错误或无法完成请求</p><p>400 Bad Request：表示请求报文中存在语法错误；</p><p>401 Unauthorized：未经许可，需要通过HTTP认证；</p><p>403 Forbidden：服务器拒绝该次访问（访问权限出现问题）</p><p>404 Not Found：表示服务器上无法找到请求的资源，除此之外，也可以在服务器拒绝请求但不想给拒绝原因时使用；</p><p>5**服务器错误，服务器在处理请求的过程中发生了错误</p><p>500 Inter Server Error：表示服务器在执行请求时发生了错误，也有可能是web应用存在的bug或某些临时的错误时；</p><p>503 Server Unavailable：表示服务器暂时处于超负载或正在进行停机维护，无法处理请求；</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>SQL 注入就是在用户输入的字符串中加入 SQL 语句，如果在设计不良的程序中忽略了检查，那么这些注入进去的 SQL 语句就会被数据库服务器误认为是正常的 SQL 语句而运行，攻击者就可以执行计划外的命令或访问未被授权的数据。</p><p><strong>SQL注入的原理主要有以下 4 点</strong></p><ul><li>恶意拼接查询</li><li>利用注释执行非法命令</li><li>传入非法参数</li><li>添加额外条件</li></ul><p><strong>避免SQL注入的一些方法</strong>：</p><ul><li>限制数据库权限，给用户提供仅仅能够满足其工作的最低权限。</li><li>对进入数据库的特殊字符（’”\尖括号&amp;*;等）转义处理。</li><li>提供参数化查询接口，不要直接使用原生SQL。</li></ul><p>Mybatis启用了预编译功能。原理是采用了预编译的方法，先将SQL语句中可被客户端控制的参数集进行编译，生成对应的临时变量集，再使用对应的设置方法，为临时变量集里面的元素进行赋值，赋值函数setString()，会对传入的参数进行强制类型检查和安全检查，所以就避免了SQL注入的产生。<strong>类似于函数传参，进行参数检查</strong></p><h2 id="同源策略以及解决方案"><a href="#同源策略以及解决方案" class="headerlink" title="同源策略以及解决方案"></a>同源策略以及解决方案</h2><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以xyz.com下的js脚本采用ajax读取abc.com里面的文件数据是会被拒绝的。</p><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p><p>当浏览器执行 JS 脚本的时候，会检测脚本要访问的协议、域名、端口号是不是和当前网址一致，如 果不一致就是<strong>跨域</strong>。跨域是不允许的，这种限制叫做浏览器的同源策略<strong>，简单点的说法就是浏览器 不允许一个源中加载脚本与其他源中的资源进行交互</strong>。那么如何实现跨域呢？ </p><p>JSONP</p><p>CORS方式</p><p>CORS（Cross-Origin Resource Sharing）即跨域资源共享，需要浏览器和服务器同时支持，这种 请求方式分为简单请求和非简单请求。</p><p>代理方式</p><p>跨域限制是浏览器的同源策略导致的，使用 nginx 当做服务器访问别的服务的 HTTP 接口是不需要 执行 JS 脚步不存在同源策略限制的，所以可以利用 Nginx 创建一个代理服务器，这个代理服务器的 域名跟浏览器要访问的域名一致，然后通过这个代理服务器修改 cookie 中的域名为要访问的 HTTP 接口的域名，通过反向代理实现跨域。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h1&gt;&lt;h2 id=&quot;OSI七层&quot;&gt;&lt;a href=&quot;#OSI七层&quot; class=&quot;headerlink&quot; title=&quot;OSI</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java并发</title>
    <link href="https://a2914475618.github.io/2022/03/10/Java%E5%B9%B6%E5%8F%91/"/>
    <id>https://a2914475618.github.io/2022/03/10/Java%E5%B9%B6%E5%8F%91/</id>
    <published>2022-03-10T04:33:25.000Z</published>
    <updated>2022-03-12T02:03:53.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h1><h2 id="一、Java线程池核心参数与工作流程"><a href="#一、Java线程池核心参数与工作流程" class="headerlink" title="一、Java线程池核心参数与工作流程"></a>一、Java线程池核心参数与工作流程</h2><h3 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h3><ol><li>降低资源消耗。通过重复利用已经创建的线程降低线程创建和销毁造成的消耗</li><li>提高响应速度。任务到达时，不需要等待线程的创建能立即执行</li><li>对线程的管理。线程无限制的创建。消耗系统资源，对线程统一的管理和监控</li></ol><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>![image-20220310124016436](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220310124016436.png)</p><ol><li>线程池执行submit/execute时向线程池添加任务</li><li>当任何小于核心线程数时，则创建新线程</li><li>当大于了核心线程数时，判断阻塞队列是否已经满了，若没有满，则把线程任务添加到队列中</li><li>若已经满了，则判断是否大于了最大的线程数，若大于了最大的线程数，则进行饱和策略否则就创建新线程</li></ol><h3 id="线程池的核心参数"><a href="#线程池的核心参数" class="headerlink" title="线程池的核心参数"></a>线程池的核心参数</h3><ol><li>corePoolSize:核心线程大小。线程池运行，核心线程就不会停止。</li><li>maximumPoolSize::线程池中最大的线程数量</li><li>keepAliveTime:非核心线程空闲后，保持存活的时间</li><li>workQuere：阻塞队列，用于存储等待运行的任务</li><li>threadFactory:线程工厂。新建线程。每当线程池创建一个新的线程时都是通过线程工厂方法来完成的。</li><li>RejectedExecutionHandler:拒绝策略处理新任务<ol><li>AbortPolicy：默认策略，直接抛出RejectedExecutionException</li><li>Discardpolicy：不处理，直接丢弃</li><li>DiscardOldestPolicy：将等待队列队首的任务丢弃，执行当前任务</li><li>CallerRunsPolicy：由线程之外的线程直接调用run执行</li></ol></li></ol><h3 id="线程池的类型"><a href="#线程池的类型" class="headerlink" title="线程池的类型"></a>线程池的类型</h3><ol><li>FixedThreadPool。固定的线程数的线程池。</li><li>SingleThreadExecutor。只有一个线程的线程池</li><li>CachedThreadPool。根据需要创建新线程的线程池。如果主线程提交的任务高于线程处理任务的速度时，CachedThreadPool会不断创建新的线程。极端情况下会耗尽CPU的资源</li><li>ScheduledThreadPoolExecutor。在给定的延迟后执行任务，或者定期执行任务。</li></ol><h3 id="合理配置线程池参数"><a href="#合理配置线程池参数" class="headerlink" title="合理配置线程池参数"></a>合理配置线程池参数</h3><p>看我们的业务是IO密集型还是CPU密集型</p><ol><li>CPU密集型：任务需要大量的计算，没有阻塞，CPU一直全速运行。N+1</li><li>IO密集型：任务需要大量的IO，即大量的阻塞。故需要多配置线程数。2*N</li></ol><h2 id="二、Volatile底层原理"><a href="#二、Volatile底层原理" class="headerlink" title="二、Volatile底层原理"></a>二、Volatile底层原理</h2><p>volatile是轻量级的同步机制，volatile保证变量对所有线程的可见性，不保证原子性</p><ol><li>对volatile变量进行写操作时，JVM会向处理器发送一条LOCK前缀的命令，将该命令所在缓存行数据写回到系统内存</li><li>由于缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己的缓存是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会把当前处理器的缓存行设置为无效状态，重新从系统内存中把数据读到处理器缓存中</li></ol><p>缓存一致性协议：CPU写数据时，发现操作的变量是共享变量，会发出信号通过其他CPU将该变量的缓存行设置为无效，从内存中重新读取</p><p>作用：</p><ol><li><p>保证对共享变量的可见性</p></li><li><p>禁止指令重排序</p><p>指令重排序是JVM为了优化指令，提高效率，不影响单线程程序结果的前提下进行的。</p><p>对一个Volatile字段进行写操作，JAVA内存模型将在写操作后插入写屏障命令，把之前的写入都刷新到内存</p></li></ol><h2 id="三、Synchronized"><a href="#三、Synchronized" class="headerlink" title="三、Synchronized"></a>三、Synchronized</h2><p>用法：</p><ol><li>修饰普通方法，锁定的是该对象实例</li><li>修饰静态方法，锁定的是类对象，也就是给该类上锁  同等于静态代码块</li><li>修饰代码块：指定加锁对象就给对象加锁，指定加锁类就是对该类加锁</li></ol><h3 id="底层原理："><a href="#底层原理：" class="headerlink" title="底层原理："></a>底层原理：</h3><ol><li>synchronized修饰同步代码块是通过监视器锁，其中monitorenter执行同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置。当minotor被持有后，将处于锁定状态。monitor对象存放在每个java对象头中</li><li>内部包含一个计数器，计数器为0则可以获取成功，获取后计数器置为1。释放锁时也要将锁计数器置为0</li><li>synchronized修饰的方法并没有monitor相关指令，而是使用的是ACC_SYNCHRONIZED标识，表明为一个同步方法，JVM通过该标识来判断方法是否声明为一个同步方法，从而执行相应的异步调用</li></ol><p>synchronized和Lock的区别？</p><ol><li>synchronized可以给类、方法、代码块加锁，而Lock只能给代码块加锁</li><li>synchronized不需要手动获取锁和释放锁。Lock需要自己加锁和释放锁，使用不当会造成死锁</li><li>通过Lock可以直到有没有成功获取到锁，而synchronized并不知道</li></ol><h3 id="Synchronized和ReentrantLock的区别？"><a href="#Synchronized和ReentrantLock的区别？" class="headerlink" title="Synchronized和ReentrantLock的区别？"></a>Synchronized和ReentrantLock的区别？</h3><ol><li>ReentrantLockLock需要显式的获取锁和释放锁</li><li>都支持可重入的</li><li>Synchronized是非公平锁，可能带来饥饿问题，ReentrantLock可以设置为公平锁，默认不公平</li><li>ReentrantLock等待获取锁是可中断的，线程可以放弃获取锁，synchronized是无限期等待下去</li><li>ReentrantLock可设置超时获取锁。在指定的时间内还没有获取到锁，则返回</li><li>tryLock方法可以尝试非阻塞的获取锁，如果能获取就返回true，否则为false</li></ol><h3 id="synchronized锁升级原理"><a href="#synchronized锁升级原理" class="headerlink" title="synchronized锁升级原理"></a>synchronized锁升级原理</h3><ol><li>在锁对象的对象头中有一个threadid字段，第一次访问为空,JVM让其持有偏向锁，将threadid设置为其线程Id</li><li>再次进入时判断threadid是否与其线程id一致</li><li>若一致则直接使用该对象</li><li>若不一致则升级为轻量锁，通过自旋循坏来获取锁，执行一定次数后，若还没获取到该对象</li><li>就升级为重量级锁，构成了synchronized的锁升级</li></ol><h3 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h3><ol><li>锁消除：在JIT编译时，对运行上下文进行扫描，去除不可能存在竞争的锁。</li><li>锁粗化：通过扩大锁的范围，避免反复加锁和释放锁。例如在循环体中加锁</li><li>自旋锁和自适应锁：共享数据的锁定状态持续时间短，切换线程不值得，通过让线程循环等待锁的释放。当自旋一定次数时，就用传统方式去挂起线程。</li><li>自适应锁也就是自旋的次数不固定，根据前一次在该锁的自旋时间和拥有者的状态来决定次数</li></ol><h3 id="引入偏向锁和轻量级锁目的"><a href="#引入偏向锁和轻量级锁目的" class="headerlink" title="引入偏向锁和轻量级锁目的"></a>引入偏向锁和轻量级锁目的</h3><p>重量级锁底层依赖于系统的同步函数来实现，在 linux 中使用 pthread_mutex_t（互斥锁）来实现。</p><p>这些底层的同步函数操作会涉及到：操作系统用户态和内核态的切换、进程的上下文切换，而这些操作都是比较耗时的，因此重量级锁操作的开销比较大。</p><p>在很多情况下，可能获取锁时只有一个线程，或者是多个线程交替获取锁，在这种情况下，使用重量级锁就不划算了，因此引入了偏向锁和轻量级锁来降低没有并发竞争时的锁开销。</p><h3 id="CAS原理及实现"><a href="#CAS原理及实现" class="headerlink" title="CAS原理及实现"></a>CAS原理及实现</h3><p>Compare and swap 即比较和交换。具体的实现在Atomic包下的类</p><p>CAS是一种无锁的非阻塞算法的实现</p><ul><li><p>CAS 包含了 3 个操作数：</p><p>需要读写的内存值 V</p><p>旧的预期值 A</p><p>要修改的更新值 B</p></li><li><p>当且仅当 V 的值等于 A 时，CAS 通过原子方式用新值 B 来更新 V 的 值，否则不会执行任何操作（他的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。）</p></li></ul><p>缺陷：</p><ol><li><p>ABA问题</p><p>通过AtomicStampedReference解决，带有标记的原子引用类，通过控制变量值的版本保证正确性</p></li><li><p>循环时间开销</p></li><li><p>只能保证一个变量的原子操作。硬件造成，每次只能对一个赋值</p><ol><li>使用互斥锁</li><li>Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在 一个对象里来进行CAS操作。</li></ol></li></ol><h2 id="四、ThreadLocal"><a href="#四、ThreadLocal" class="headerlink" title="四、ThreadLocal"></a>四、ThreadLocal</h2><p>ThreadLocal，即线程本地变量。如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝，多个线程操作这个变量的时候，实际是操作自己本地内存里面的变量，从而起到线程隔离的作用，避免了线程安全问题。</p><ol><li>每一个线程都有属于自己的一个threadLocalMap对象，key就是threadlocal本身，value就是threadlocal对应的泛型值</li><li>每个线程都往自己的threadlocalMap中存，实现了线程隔离</li></ol><p>内存泄漏：</p><ol><li>每个Thread都有⼀个ThreadLocalMap的内部属性，map的key是ThreaLocal，定义为弱引用，value是 强引用类型。</li><li>GC的时候会自动回收key，而value的回收取决于Thread对象的生命周期。</li><li>一般会通过线 程池的方式复用Thread对象节省资源，这也就导致了Thread对象的生命周期比较长，这样便一直存在一 条强引用链的关系：Thread –&gt; ThreadLocalMap–&gt;Entry–&gt;Value</li><li>随着任务的执行，value就有可能 越来越多且无法释放，最终导致内存泄漏。</li></ol><p>解决方法：使用完threadlocal后，及时调用remove方法释放内存空间</p><h2 id="五、线程间的通信方式"><a href="#五、线程间的通信方式" class="headerlink" title="五、线程间的通信方式"></a>五、线程间的通信方式</h2><ol><li>volatile   轻量级的同步机制，volatile保证变量对所有线程的可见性，不保证原子性</li><li>synchronized   保证线程对变量访问的可见性和排他性</li><li>等候通知机制   wait/notify为Object对象的方法，调用该方法需要获得对象的锁。对象调用wait后释放锁，将线程放到对象的等待队列，当通知线程调用此对象的notify方法时，不会立即返回，而是等候队列中谁拿到锁谁才可以返回。</li></ol><h2 id="六、AQS"><a href="#六、AQS" class="headerlink" title="六、AQS"></a>六、AQS</h2><h3 id="AQS核心思想"><a href="#AQS核心思想" class="headerlink" title="AQS核心思想"></a>AQS核心思想</h3><ol><li>如果请求的共享资源空闲，则将当前请求资源的线程设置为有效，并将共享资源设置为锁定状态</li><li>如果请求资源被占用，就需要一套线程阻塞等待以及被唤醒时锁分配的机制</li></ol><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>同步器依赖内部的同步队列（一个FIFO双向队列）来完成同步状态的管理</p><ol><li>当前线程获取同步状态时，同步器会将当前线程以及等待状态（独自或共享）构造称为一个节点并将其加入同步队列并进行自旋</li><li>当同步状态释放时，会把首节点中的后继节点对应的线程唤醒，使其再次尝试获取同步状态</li></ol><p>场景题：</p><p>一、交替打印100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lusir.base;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lusir</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/12 - 9:21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadConsoleTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Num n=<span class="keyword">new</span> Num();</span><br><span class="line">        Thread a=<span class="keyword">new</span> Thread(<span class="keyword">new</span> CountSum1(n));</span><br><span class="line">        Thread b=<span class="keyword">new</span> Thread(<span class="keyword">new</span> CountSum2(n));</span><br><span class="line">        a.start();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CountSum1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        CountSum1(Num num)&#123;<span class="keyword">this</span>.num1=num;&#125;</span><br><span class="line"></span><br><span class="line">        Num num1;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(num1.num&lt;<span class="number">100</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (num1)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(num1.flag)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            num1.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread()+<span class="string">&quot;-&quot;</span>+num1.num);</span><br><span class="line">                    num1.setNum(++num1.num);</span><br><span class="line">                    num1.flag=!num1.flag;</span><br><span class="line">                    num1.notify();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CountSum2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        CountSum2(Num num)&#123;<span class="keyword">this</span>.num1=num;&#125;</span><br><span class="line"></span><br><span class="line">        Num num1;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (num1)&#123;</span><br><span class="line">                <span class="keyword">while</span>(num1.num&lt;<span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!num1.flag)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            num1.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread()+<span class="string">&quot;-&quot;</span>+num1.num);</span><br><span class="line">                    num1.setNum(++num1.num);</span><br><span class="line">                    num1.flag=!num1.flag;</span><br><span class="line">                    num1.notify();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span></span>&#123;</span><br><span class="line">     <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">     <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java并发&quot;&gt;&lt;a href=&quot;#Java并发&quot; class=&quot;headerlink&quot; title=&quot;Java并发&quot;&gt;&lt;/a&gt;Java并发&lt;/h1&gt;&lt;h2 id=&quot;一、Java线程池核心参数与工作流程&quot;&gt;&lt;a href=&quot;#一、Java线程池核心参数与工作流程&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java容器</title>
    <link href="https://a2914475618.github.io/2022/03/07/Java%E5%AE%B9%E5%99%A8/"/>
    <id>https://a2914475618.github.io/2022/03/07/Java%E5%AE%B9%E5%99%A8/</id>
    <published>2022-03-07T11:22:26.000Z</published>
    <updated>2022-03-10T07:25:20.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h1><h2 id="一、ArrayList与LinkedList"><a href="#一、ArrayList与LinkedList" class="headerlink" title="一、ArrayList与LinkedList"></a>一、ArrayList与LinkedList</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ol><li>ArrayList底层是一个动态Object[]数组</li><li>初始容量为10，当容量不足时就会进行扩容，扩容时自动创建更大容量数组，并将原数组所有元素拷贝过去，导致效率降低</li><li>查询效率高，向末尾插入元素时效率高</li><li>扩容效率低，且无法存储大数据量，很难找到一块很大的连续内存空间</li><li>增删元素效率低，需要移动元素</li><li>大多数情况下是用来查询所以尽管线程不安全也会使用它</li></ol><p>ArrayList的扩容机制：</p><ol><li>每次add方法时都对list 的容量进行判断，如果容量不足，就进行grow扩容</li><li>初始是扩容程1.5倍，如果还不够的化，就将长度等于传进来的需要长度</li><li>调用Arrays.copyOf方法复制数组到指定的空间</li></ol><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ol><li>底层是一个双向链表</li><li>增删效率低，查询效率高</li><li>每次查找从头节点开始</li></ol><h3 id="ArrayList-与-LinkedList-区别"><a href="#ArrayList-与-LinkedList-区别" class="headerlink" title="ArrayList 与 LinkedList 区别"></a>ArrayList 与 LinkedList 区别</h3><ol><li>ArrayList底层是动态对象数组，LinkedList底层使用的双向链表结构</li><li>两者都是不能保证线程安全的</li><li>对于随机访问的get和set方法，ArrayList速度优于LinkedList</li><li>对于新增和删除元素，LinkedList速度要优于ArrayList。因为ArrayList在新增和删除元素时，可能扩容和复制元素。LinkedList实例化对象需要时间外，只需修改指针即可。</li><li>内存空间占用：ArrayList在List列表的尾端会预留出一定的容量空间，Linkedlist需要存放直接后继和前驱。</li><li>ArrayList遍历性能更高因为内存的连续性</li></ol><h2 id="二、HashMap"><a href="#二、HashMap" class="headerlink" title="二、HashMap"></a>二、HashMap</h2><h3 id="底层实现原理"><a href="#底层实现原理" class="headerlink" title="底层实现原理"></a>底层实现原理</h3><p>1.8以前底层是数组和链表一起使用，链表散列。</p><p>1.8以后解决哈希树冲突时有了较大的变化，单链表元素超过8，则将单链表转换为红黑树，如果结点小于6个，将红黑树重新变为单链表</p><h3 id="解决hash冲突的方式"><a href="#解决hash冲突的方式" class="headerlink" title="解决hash冲突的方式"></a>解决hash冲突的方式</h3><ol><li><p>开放地址法</p><p>以哈希后的值为自变量再进行哈希。因此开放地址所需要的hash长度大于等于所需存放的长度</p></li><li><p>再哈希法</p><p>提供不同的hash函数，直到没有发生冲突。增加了计算时间</p></li><li><p>链地址法</p><p>将哈希值相同的元素构成一个单链表。适用于经常进行插入和删除的情况</p></li></ol><p>hashMap中的hash方法，使用该方法是为了防止一些实现比较差的hashCode方法，通过扰动函数减少碰撞</p><h3 id="扩容过程"><a href="#扩容过程" class="headerlink" title="扩容过程"></a>扩容过程</h3><h4 id="1-7以前"><a href="#1-7以前" class="headerlink" title="1.7以前"></a>1.7以前</h4><p>新节点采用的是头插法，线程扩容元素时，会将元素顺序改变，导致两个线程中出现元素的相互指向形成循环链表，还有可能造成数据丢失</p><h4 id="1-8后"><a href="#1-8后" class="headerlink" title="1.8后"></a>1.8后</h4><p>元素个数大于了threshold时，会进行扩容，使用两倍的容量代替原有的数组，采用尾插法将原数组拷贝到新数组</p><p>put方法</p><ol><li>先查看table是否为空，若为空的化就先进行扩容</li><li>根据key用哈希算法计算出数组索引，如果索引对应的位置没有Node，则直接插入</li><li>如果有则判断该Node的key是否等于插入的key，是的化直接覆盖</li><li>否则看该Node是不是一个TreeNode，是的化则按照红黑树进行插入</li><li>否则则遍历链表准备插入，判断链表长度是不是大于8</li><li>大于8的话就转化为红黑树插入键值对，否则的话，若key存在就覆盖，否则就链表尾部插入</li><li>判断size是不是大于了threshold，若大于了的话就进行扩容</li></ol><p>get方法</p><ol><li>如果table为null，或者索引对应的位置为null直接返回null</li><li>否则判断该位置的key是否与目标key相同，否则的话判断该结点是否是TreeNode</li><li>若是则用红黑树的查找方法，若不是则遍历链表查找</li><li>若都没有，则返回null</li></ol><p>红黑树特点：</p><ol><li>每个结点黑色或者是红色</li><li>根节点是黑色</li><li>每个叶子结点是黑色</li><li>一个结点是红色，则子节点必须是黑色</li><li>一个结点到该节点的子孙节点所有路径上包含相同数目的黑结点</li></ol><p>红黑树是对ALV的优化，要求部分平衡，用非严格的平衡来换取增删结点时候旋转次数的降低，提高了了插入和删除的性能</p><p>当节点数小于8时，单链表的查询性能可以得到满足，但是红黑树需要通过左旋、右旋、变色来保持性能，一开始就是用红黑树的话，增删结点效率比较慢，浪费性能。且树节点一般时普通结点的两倍大</p><p>hashmap的长度为何时2的幂次？</p><ol><li>因为hash值过大，大概40亿个映射，但是内存是放不下的，因此就通过模数组的长度</li><li>hash%length==hash&amp;（length-1）满足的条件为长度为2的幂次，且&amp;能提高效率</li></ol><h3 id="HashMap的线程不安全性"><a href="#HashMap的线程不安全性" class="headerlink" title="HashMap的线程不安全性"></a>HashMap的线程不安全性</h3><h4 id="1-8以前"><a href="#1-8以前" class="headerlink" title="1.8以前"></a>1.8以前</h4><p>扩容时会出现循环链表，还有可能造成数据丢失的可能</p><p>1.8以后</p><p>多线程put元素时，若两个线程已经在判断完哈希碰撞，其中一个线程挂起，修改了数据，另外一个线程就将前一个线程的数据覆盖掉了，从而线程不安全</p><p>在++size时其中一个线程挂起，则两个线程增加了2但是size却只增加了1</p><h3 id="HashMap和HashTable的区别"><a href="#HashMap和HashTable的区别" class="headerlink" title="HashMap和HashTable的区别"></a>HashMap和HashTable的区别</h3><ol><li><p>都实现了Map接口</p></li><li><p>HashMap线程不安全，HashTable线程安全</p></li><li><p>HashMap可以存储NULL的键值，HashTable不能存储</p><p><strong>原因</strong>：map.get()时需要先通过containKey来判断是否有该key值，但是在多线程的情况下，可能出现其他线程将这个key值删掉</p></li><li><p>HashTable直接使用对象的hashcode，HashMap需要重新计算</p></li><li><p>HashMap继承的是AbstractMap，HashTable继承的是Dictionary类</p></li><li><p>初始化容量不同，hashmap初始容量为16，hashtable初始容量为11，负载因子都是0.75</p></li><li><p>扩容机制，HashMap扩容当前容量翻倍，HashTable是当前容量翻倍+1</p></li><li><p>HashMap链表长度超过8时，链表转化为红黑树。而HashTable没有这样的机制</p></li></ol><h2 id="三、Fail-Fast-和-Fail-Safe"><a href="#三、Fail-Fast-和-Fail-Safe" class="headerlink" title="三、Fail Fast 和  Fail  Safe"></a>三、Fail Fast 和  Fail  Safe</h2><h3 id="Fail-Fast"><a href="#Fail-Fast" class="headerlink" title="Fail  Fast"></a>Fail  Fast</h3><p>集合中维护了一个modCount，每当对集合就行修改时都会让该值加一，多线程情况下，迭代器每次的hasNext和next方法都会检查该值，若被修改则会抛出Concurrent Modification Exception</p><p>java.util下的包都是</p><p>解决方法：</p><ol><li>通过Collections.synchronized方法来使得内容的同步锁</li><li>使用CopyOnWriteArrayList替换ArrayList</li></ol><h3 id="Fail-Safe"><a href="#Fail-Safe" class="headerlink" title="Fail Safe"></a>Fail Safe</h3><p>采用安全失败的集合容器，遍历时不直接在集合内容上进行访问，而是复制一个备份，在该集合上进行操作</p><p>缺点：</p><ol><li>需要复制集合，产生大量的无效对象，开销大</li><li>无法保证读取的数据是目前原始数据结构中的数据</li></ol><h2 id="四、线程安全类"><a href="#四、线程安全类" class="headerlink" title="四、线程安全类"></a>四、线程安全类</h2><p>线程安全：</p><ol><li>Vector</li><li>Stack</li><li>HashTable</li><li>ConcurrentHashMap</li></ol><p>线程不安全：</p><ol><li>HashMap</li><li>ArrayList</li><li>LinkedList</li><li>HashSet</li><li>TreeSet</li></ol><h2 id="五、ConcurrentHashMap"><a href="#五、ConcurrentHashMap" class="headerlink" title="五、ConcurrentHashMap"></a>五、ConcurrentHashMap</h2><p>HashTable是锁住整个table，意味着所有的线程都在竞争同一把锁</p><h3 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h3><p>锁分离技术</p><h4 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h4><p>一个Segment数组和多个HashEntry组成+链表</p><p>put方法</p><ol><li>Segment实现了ReentrantLock，带有锁的功能</li><li>执行put时根据key的hash定位Segment的位置，如果还未初始化则通过CAS进行赋值</li><li>进行第二次Hash，找到相应的HashEntry的位置，通过继承的锁的特性通过tryLock方法去获取锁，如果成功则直接插入相应的位置</li><li>如果已经有线程获取Segment的锁，当前线程就会以自旋的方式去tryLock</li></ol><h4 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h4><p>Node数组+链表+红黑树数据结构，并发控制使用Synchronized和CAS来操作</p><p>put方法</p><ol><li>如果没有初始化就先调用initTable方法进行初始化</li><li>如果没有hash冲突就直接CAS插入</li><li>如果还在扩容就先就行扩容</li><li>如果存在hash冲突，就加锁来保证线程安全<ol><li>链表形式</li><li>红黑树形式</li></ol></li><li>链表长度大于8时，Node数据将会超过64时时将链表转化为红黑树的结构</li><li>添加成功后会调用addCount方法统计size，并检查是否需要扩容</li></ol><h3 id="放弃分段锁的原因？"><a href="#放弃分段锁的原因？" class="headerlink" title="放弃分段锁的原因？"></a>放弃分段锁的原因？</h3><ol><li>JDK1.7中通过控制Segment个数控制并发级别。随着元素的增多，每个Segment包含元素越多，锁的粒度会越来越大，竞争也会越来越激烈</li><li>分段会造成内存空间的碎片化，浪费内存空间</li><li>JDK1.8发生冲突时，对链表头街点加synchronized加锁，没有冲突则用CAS操作</li><li>元素增多时1.8的粒度维持在一个较低的水平，只需对头结点加锁，减少内存开销</li></ol><h3 id="扩容方式"><a href="#扩容方式" class="headerlink" title="扩容方式"></a>扩容方式</h3><h4 id="JDK1-7-1"><a href="#JDK1-7-1" class="headerlink" title="JDK1.7"></a>JDK1.7</h4><ol><li>每个Segment只管自己的扩容，互相之间并不影响</li><li>对链表中的元素进行遍历，将最后一段新下标相同的连续元素中的第一个记为lastRun</li><li>将从LastRUn到结尾整体迁移到新数组对应的下标处</li><li>链表的头节点到lastRUn只能逐个复制</li></ol><h4 id="JDK1-8-1"><a href="#JDK1-8-1" class="headerlink" title="JDK1.8"></a>JDK1.8</h4><p>![image-20220308152820045](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220308152820045.png)</p><h3 id="HashSet的底层原理"><a href="#HashSet的底层原理" class="headerlink" title="HashSet的底层原理"></a>HashSet的底层原理</h3><p>HashSet基于HashMap实现的。HashSet中的元素实际上是由HashMap的key保存的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java容器&quot;&gt;&lt;a href=&quot;#Java容器&quot; class=&quot;headerlink&quot; title=&quot;Java容器&quot;&gt;&lt;/a&gt;Java容器&lt;/h1&gt;&lt;h2 id=&quot;一、ArrayList与LinkedList&quot;&gt;&lt;a href=&quot;#一、ArrayList与Lin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java核心知识</title>
    <link href="https://a2914475618.github.io/2022/03/07/Java%E9%9D%A2%E7%BB%8F-0/"/>
    <id>https://a2914475618.github.io/2022/03/07/Java%E9%9D%A2%E7%BB%8F-0/</id>
    <published>2022-03-07T03:08:27.000Z</published>
    <updated>2022-03-07T11:21:34.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java核心知识"><a href="#Java核心知识" class="headerlink" title="Java核心知识"></a>Java核心知识</h1><h2 id="一、多态的实现原理"><a href="#一、多态的实现原理" class="headerlink" title="一、多态的实现原理"></a>一、多态的实现原理</h2><p>多态的含义是一个行为有着不同的表现形式的能力。如动物都有叫的行为但是每种动物叫的表现又有不同。</p><p>实现多态的三要素 ：继承，重写，父类引用指向子类对象</p><ol><li>静态多态性：通过重载实现，相同的方法有不同的参数列表，根据参数的不同，做出不同的处理。</li><li>动态多态性：在子类中重写父类的方法。运行期间判断所引用对象的实际类型，调用对应的方法。</li></ol><h2 id="二、Java的基本类型"><a href="#二、Java的基本类型" class="headerlink" title="二、Java的基本类型"></a>二、Java的基本类型</h2><ol><li>boolean    1</li><li>byte  8</li><li>char  16</li><li>short   16</li><li>int   32</li><li>float   32</li><li>long    64</li><li>double   64</li></ol><p>进行比较运算和加减混合运算时  会进行  拆箱</p><p>equls比较和向ArrayList和HashMap添加基础类型时   装箱</p><p>Interger 的   缓存范围是   -128 到127  返回的是同一个对象   直接返回对象  若不在该范围 则重新new</p><h2 id="三、String的不可变性"><a href="#三、String的不可变性" class="headerlink" title="三、String的不可变性"></a>三、String的不可变性</h2><p>String是一个不可变final类 不允许被继承</p><p>里面所有的成员变量都是final</p><p>final带来的好处</p><ol><li>线程安全。</li><li>支持hash映射和缓存。</li><li>字符串常量池优化。String对象创建后，会缓存到字符串常量池中，下次创建对象是可以直接返回缓存的引用</li></ol><p>New String(“lusir”)创建几个对象？</p><ol><li>若字符串常量池里没有”lusir”这个对象，则会创建两个。一个放在字符串常量池中，一个放在堆上</li><li>若有，则new String会再堆上创建一个</li></ol><h2 id="四、String、StringBuffer、StringBuilder的区别"><a href="#四、String、StringBuffer、StringBuilder的区别" class="headerlink" title="四、String、StringBuffer、StringBuilder的区别"></a>四、String、StringBuffer、StringBuilder的区别</h2><p>1.可变性</p><p>String不可变</p><p>StringBuffer和StringBuilder都继承于AbstractStringBuilder   其中的char[]value不是final的</p><p>2.线程安全性</p><p>String线程安全</p><p>StringBuilder不是线程安全</p><p>StringBuffer线程安全，内部使用synchronzied进行同步</p><h2 id="五、object方法"><a href="#五、object方法" class="headerlink" title="五、object方法"></a>五、object方法</h2><ol><li><p>toString方法默认输出对象地址，可以重写toString方法，按照重写逻辑输出对象值</p></li><li><p>equals默认比较的是两个引用变量是否指向同一个对象（内存地址）。可以通过重写方法来比较对象的成员变量是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           Person person = (Person) o;</span><br><span class="line">           <span class="keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p>hashCode将与对象相关的信息映射成一个哈希值,默认的实现hashCode值是根据内存地址转换算出来的</p></li><li><p>clone。java赋值是得到一个对象的引用，如果要得到副本需要使用clone方法，但它的可见性是protected方法。该对象要使用clone方法的前提是该对象实现了Clone接口。否则将会抛出CloneNotSupportedException异常。覆盖Clone方法，可见性提升到public</p></li><li><p>getClass返回此Object的运行时类，用于java反射机制</p></li><li><p>当前线程调用对象的wait方法时，当前线程释放对象锁，进入等待状态。唤醒方法：其他线程调用此对象的notify()或者notifyAll()   或者等待事件wait(long timeout)自动唤醒。只有对象获取obj对象锁之后才能用obj.wait()</p></li><li><p>notify唤醒在此线程上等待的单个线程，notify唤醒在此对象上的所有线程。</p></li></ol><h2 id="六、深拷贝和浅拷贝？"><a href="#六、深拷贝和浅拷贝？" class="headerlink" title="六、深拷贝和浅拷贝？"></a>六、深拷贝和浅拷贝？</h2><p>浅拷贝：拷贝对象和原始对象的引用类型引用同一个对象</p><p>深拷贝：拷贝对象和原始对象的引用类型引用不用的对象</p><p>![image-20220307141614762](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220307141614762.png)</p><h2 id="七、创建对象的方式"><a href="#七、创建对象的方式" class="headerlink" title="七、创建对象的方式"></a>七、创建对象的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>使用 <span class="keyword">new</span> 关键字(最常用)：</span><br><span class="line"></span><br><span class="line">ObjectName obj = <span class="keyword">new</span> ObjectName();</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用反射的Class类的newInstance()方法：</span><br><span class="line"></span><br><span class="line">ObjectName obj = ObjectName.class.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>使用反射的Constructor类的newInstance()方法：</span><br><span class="line"></span><br><span class="line">ObjectName obj = ObjectName.class.getConstructor.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>使用对象克隆clone()方法：</span><br><span class="line"></span><br><span class="line">ObjectName obj = obj.clone();</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>使用反序列化(ObjectInputStream)的readObject()方法：</span><br><span class="line"></span><br><span class="line">ObjectName obj = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(FILE_NAME)).readObject();</span><br></pre></td></tr></table></figure><h2 id="八、类实例化的顺序"><a href="#八、类实例化的顺序" class="headerlink" title="八、类实例化的顺序"></a>八、类实例化的顺序</h2><p>1.静态属性，静态代码块</p><p>2.普通属性，普通代码块</p><p>3.构造方法</p><h2 id="九、-与Equals"><a href="#九、-与Equals" class="headerlink" title="九、==与Equals"></a>九、==与Equals</h2><p>![image-20220307144504500](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220307144504500.png)</p><h2 id="十、static与final"><a href="#十、static与final" class="headerlink" title="十、static与final"></a>十、static与final</h2><p>static在内存中只有一个副本，它当且仅当类初次加载的时候会被初始化，可以修改，各个对象共同拥有该静态变量</p><p>final代表该变量不可变，对象引用的化代表该引用只能指向该对象。</p><h2 id="十一、接口与抽象类的区别"><a href="#十一、接口与抽象类的区别" class="headerlink" title="十一、接口与抽象类的区别"></a>十一、接口与抽象类的区别</h2><ol><li>抽象类可以有方法实现，而接口方法只能是抽象方法</li><li>抽象类成员变量可以是各种类型的，接口的成员变量只能是public static final类型</li><li>接口中不能有静态代码块及静态方法，而抽象类可以有静态代码块和静态方法</li><li>一个类只能继承一个抽象类，一个类可以实现多个接口</li><li>抽象类抽象的是对整个类进行抽象，包括属性、行为，接口只能对行为抽象</li><li>继承抽象类的是具有相似特点的类，而实现接口却可以是不同的类</li></ol><h2 id="十二、Java中的异常体系"><a href="#十二、Java中的异常体系" class="headerlink" title="十二、Java中的异常体系"></a>十二、Java中的异常体系</h2><p>Java中的异常主要分为Error和Exception</p><p>Error是JVM 无法解决的严重问题，如栈溢出（StackOverflowError）、内存溢出（OOM）等。程序无 法处理的错误。</p><p>Exception是其它因编程错误或偶然的外在因素导致的一般性问题。可以在代码中进行处理。如：空指针 异常、数组下标越界等。分为RuntimeException和checkedException。</p><ol><li>RuntimeException是Java虚拟机在程序正常运行期间抛出的异常，捕获并处理该异常</li><li>CheckedException在编译期间检查异常，要求程序在可能出现异常的地方通过try catch捕获异常并处理异常，比如IO</li></ol><p>![image-20220307154505066](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220307154505066.png)</p><p>![image-20220307154532899](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220307154532899.png)</p><h2 id="十三、throw和throws区别"><a href="#十三、throw和throws区别" class="headerlink" title="十三、throw和throws区别"></a>十三、throw和throws区别</h2><p>throw:抛出一个具体的异常对象</p><p>throws:用在方法签名中，声明该方法可能抛出异常。</p><h2 id="十四、同步，异步，阻塞和非阻塞"><a href="#十四、同步，异步，阻塞和非阻塞" class="headerlink" title="十四、同步，异步，阻塞和非阻塞"></a>十四、同步，异步，阻塞和非阻塞</h2><p>同步：发出调用时，没有得到结果前，该调用就不返回</p><p>异步：调用发出后，被调用者返回结果通知给调用者，通过回调函数处理结果</p><p>阻塞：关注的是线程的状态，调用结果返回前，线程会被挂起，只有返回结果才会运行</p><p>非阻塞调用：指不能立刻得到结果之前，该调用不会阻塞当前线程</p><h2 id="十五、序列化和反序列化"><a href="#十五、序列化和反序列化" class="headerlink" title="十五、序列化和反序列化"></a>十五、序列化和反序列化</h2><p>序列化：把内存中的对象转换为字节序列的过程。</p><p> 反序列化：把字节序列恢复为Java对象的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream stream=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(FILE_NAME));</span><br><span class="line">        stream.readObject();</span><br><span class="line">        ObjectOutputStream stream=<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:/Users/Lu  sir/Desktop/test.txt&quot;</span>));</span><br><span class="line">        Person person=<span class="keyword">new</span> Person(<span class="number">11</span>,<span class="string">&quot;lusir&quot;</span>);</span><br><span class="line">        stream.writeObject(person);</span><br><span class="line">        stream.writeObject(<span class="keyword">new</span> Date());</span><br><span class="line">        ObjectInputStream in=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:/Users/Lu  sir/Desktop/test.txt&quot;</span>));</span><br><span class="line">        System.out.println(in.readObject().toString());</span><br><span class="line">        System.out.println((Date)in.readObject());</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java核心知识&quot;&gt;&lt;a href=&quot;#Java核心知识&quot; class=&quot;headerlink&quot; title=&quot;Java核心知识&quot;&gt;&lt;/a&gt;Java核心知识&lt;/h1&gt;&lt;h2 id=&quot;一、多态的实现原理&quot;&gt;&lt;a href=&quot;#一、多态的实现原理&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kafka面经</title>
    <link href="https://a2914475618.github.io/2022/03/06/Kafka%E9%9D%A2%E7%BB%8F/"/>
    <id>https://a2914475618.github.io/2022/03/06/Kafka%E9%9D%A2%E7%BB%8F/</id>
    <published>2022-03-06T10:42:57.000Z</published>
    <updated>2022-03-06T10:54:00.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka面经"><a href="#Kafka面经" class="headerlink" title="Kafka面经"></a>Kafka面经</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kafka面经&quot;&gt;&lt;a href=&quot;#Kafka面经&quot; class=&quot;headerlink&quot; title=&quot;Kafka面经&quot;&gt;&lt;/a&gt;Kafka面经&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>操作系统面经</title>
    <link href="https://a2914475618.github.io/2022/03/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E7%BB%8F/"/>
    <id>https://a2914475618.github.io/2022/03/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E7%BB%8F/</id>
    <published>2022-03-05T06:30:03.000Z</published>
    <updated>2022-03-10T08:54:12.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统面经"><a href="#操作系统面经" class="headerlink" title="操作系统面经"></a>操作系统面经</h1><h2 id="进程和线程的区别？"><a href="#进程和线程的区别？" class="headerlink" title="进程和线程的区别？"></a>进程和线程的区别？</h2><ol><li>进程是<strong>资源分配的最小单位</strong>，线程是<strong>CPU调度的最小单位</strong></li><li>一个进程可以<strong>有多个线程</strong>，而一个线程是只属于一个进程，线程是依赖于进程存在的。</li><li>进程拥有自己独立的<strong>内存单元</strong>，而多个线程共享该进程的内存</li><li>系统开销：进程在创建和销毁时，系统都为它们<strong>分配和回收资源</strong>，代价要高于线程的创建和销毁的开销。进程切换比线程切换开销更大，进程涉及到<strong>CPU环境的保存和新进程运行时的CPU环境变量</strong>。而线程只需要保存和设置部分进程器的内容，不<strong>涉及存储器管</strong>理方面的操作。</li><li>通信：进程间通过<strong>管道，系统IPC</strong>（消息队列，信号量，信号，共享内存）和<strong>套接字Socke</strong>t进行通信，而线程通过<strong>全局变量</strong>来进行通信，volitile需要进程的同步和互斥手段辅助。</li><li>进程间不会相互影响，<strong>一个进程中的某个线程挂掉会导致整个进程挂掉。</strong></li></ol><p>操作系统的任务调度实际上调度对象是<strong>线程</strong>，进程只是给线程提供了虚拟内存，全局变量等资源。</p><h2 id="不同通信方式优缺点"><a href="#不同通信方式优缺点" class="headerlink" title="不同通信方式优缺点"></a>不同通信方式优缺点</h2><p>![image-20220305162717837](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220305162717837.png)</p><h2 id="进程间的通讯方式"><a href="#进程间的通讯方式" class="headerlink" title="进程间的通讯方式"></a>进程间的通讯方式</h2><p>​             1.<strong>管道/匿名管道(Pipes)</strong> ：用于具有<strong>亲缘关系的父子进程间</strong>或者<strong>兄弟进程之间</strong>的通 信。</p><ol start="2"><li><strong>有名管道(Names Pipes)</strong> : 匿名管道由于没有名字，只能用于亲缘关系的进程间通 信。为了克服这个缺点，提出了有名管道。<strong>有名管道严格遵循先进先出(first in first out)<strong>。</strong>有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。</strong> </li><li><strong>信号(Signal)</strong> ：信号是一种比较复杂的通信方式，<strong>用于通知接收进程某个事件已 经发生</strong>；</li><li><strong>消息队列(Message Queuing)</strong> ：消息队列是<strong>消息的链表</strong>,具有特定的格式,存放在 内存中并由消息队列标识符标识。<strong>管道和消息队列的通信数据都是先进先出的原 则</strong>。与管道（无名管道：<strong>只存在于内存中的文件</strong>；命名管道：<strong>存在于实际的磁盘介 质或者文件系统</strong>）不同的是<strong>消息队列存放在内核中</strong>，只有在内核重启(即，操作系 统重启)或者显示地删除一个消息队列时，该消息队列才会被真正的删除。消息队 列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的 类型读取.比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承 载无格式字 节流以及缓冲区大小受限等缺。 </li><li><strong>信号量(Semaphores)</strong> ：信号量是一个计数器，用于<strong>多进程对共享数据的访问， 信号量的意图在于进程间同步</strong>。这种通信方式主要用于解决与同步相关的问题并避 免竞争条件。 </li><li><strong>共享内存(Shared memory)</strong> ：使得多个进程可以访问同一块内存空间，<strong>不同进程 可以及时看到对方进程中对共享内存中数据的更新。</strong>这种方式需要依靠<strong>某种同步操 作</strong>，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。 </li><li><strong>套接字(Sockets)</strong> : 此方法主要用于在<strong>客户端和服务器之间通过网络进行通信</strong>。套 接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是<strong>不同主机之间的进程 进行双向通信的端点</strong>，简单的说就是通信的两方的一种约定，用套接字中的相关函 数来完成通信过程。</li></ol><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><ol><li>创建状态</li><li>就绪状态。获得了除处理器以外的一切所需资源，一旦得到处理器资源即可运行。</li><li>运行状态。进程正在处理器上运行。</li><li>阻塞状态。等待某一事件暂停运行如等待某资源可用或IO操作完成。</li><li>结束状态。进程从系统中消失。</li></ol><h2 id="用户态和内核态"><a href="#用户态和内核态" class="headerlink" title="用户态和内核态"></a>用户态和内核态</h2><ol><li>用户态：进程可以直接读取用户程序的数据</li><li>内核态：进程几乎可以访问计算机的任何资源，不受限制</li></ol><p>我们运行的程序基本都是再用户态，若需要调用操作系统提供的内核态级别的功能的时候，就需要<strong>系统调用</strong>方式向操作系统提出服务请求，由操作系统代为完成。</p><p>系统调用按功能分为如下几类：</p><ol><li>设备管理</li><li>文件管理</li><li>进程控制</li><li>进程通信</li><li>内存管理</li></ol><h2 id="线程间的同步方式"><a href="#线程间的同步方式" class="headerlink" title="线程间的同步方式"></a>线程间的同步方式</h2><blockquote><ol><li>互斥量(Mutex)：采⽤互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。 因为互斥对象只有⼀个，所以可以保证公共资源不会被多个线程同时访问。⽐如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。 </li><li>信号量(Semphares) ：它允许同⼀时刻多个线程访问同⼀资源，但是需要控制同⼀时刻访 问此资源的最⼤线程数量 </li><li>事件(Event) :Wait/Notify：通过通知操作的⽅式来保持多线程同步，还可以⽅便的实现多线 程优先级的⽐᫾操</li></ol></blockquote><h2 id="进程、线程、协程的异同"><a href="#进程、线程、协程的异同" class="headerlink" title="进程、线程、协程的异同"></a>进程、线程、协程的异同</h2><p>协程：</p><ul><li>没有线程的切换，完全是由程序所控制。没有内核切换的开销，不加锁的全局访问变量</li><li>不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突</li><li>用户态的轻量级线程，线程内部调度的基本单位</li><li>异步机制，非抢占式</li></ul><h2 id="死锁的产生条件"><a href="#死锁的产生条件" class="headerlink" title="死锁的产生条件"></a>死锁的产生条件</h2><ol><li>互斥使用</li><li>占有且等待</li><li>不可抢占</li><li>循环等待</li></ol><p>如何避免？</p><p>![image-20220305181551402](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220305181551402.png)</p><h2 id="虚拟内存作用及介绍"><a href="#虚拟内存作用及介绍" class="headerlink" title="虚拟内存作用及介绍"></a>虚拟内存作用及介绍</h2><ol><li>虚拟内存是一种内存管理技术</li><li>为每个进程提供一个连续虚拟地址空间，使得每一个进程具有独占主存的错觉，通过将内存扩展到硬盘空间，使得程序可以拥有超过系统物理内存大小的内存空间</li><li>使用这种技术的系统使得大型程序的编写更加容易，对物理内存的使用也更有效率</li></ol><h2 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h2><p>较短的时间内，成勋执行局限于某一小部分，程序访问的存储空间也局限于某个区域。</p><p>包括：</p><ol><li>事件局部性</li><li>空间局部性</li></ol><p>![image-20220305183809274](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220305183809274.png)</p><h2 id="虚拟内存的技术实现"><a href="#虚拟内存的技术实现" class="headerlink" title="虚拟内存的技术实现"></a>虚拟内存的技术实现</h2><p>建立在离散分配的内存管理方式</p><ol><li>请求分页存储管理</li><li>请求分段存储管理</li><li>请求段页式存储管理</li></ol><h2 id="进程的调度算法"><a href="#进程的调度算法" class="headerlink" title="进程的调度算法"></a>进程的调度算法</h2><p>![image-20220305184725934](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220305184725934.png)</p><p>![image-20220305184945371](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220305184945371.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;操作系统面经&quot;&gt;&lt;a href=&quot;#操作系统面经&quot; class=&quot;headerlink&quot; title=&quot;操作系统面经&quot;&gt;&lt;/a&gt;操作系统面经&lt;/h1&gt;&lt;h2 id=&quot;进程和线程的区别？&quot;&gt;&lt;a href=&quot;#进程和线程的区别？&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis面经</title>
    <link href="https://a2914475618.github.io/2022/03/04/Redis%E9%9D%A2%E7%BB%8F/"/>
    <id>https://a2914475618.github.io/2022/03/04/Redis%E9%9D%A2%E7%BB%8F/</id>
    <published>2022-03-04T08:27:32.000Z</published>
    <updated>2022-03-10T10:38:04.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis面经"><a href="#Redis面经" class="headerlink" title="Redis面经"></a>Redis面经</h1><h2 id="一、什么是Redis？"><a href="#一、什么是Redis？" class="headerlink" title="一、什么是Redis？"></a>一、什么是Redis？</h2><ol><li>C语言开发的数据库</li><li>Redis数据存放在内存中，读写速度快，广泛用于缓存方向</li><li>也经常用来做分布锁，甚至是消息队列</li><li>提供多种数据类型支持不同业务。</li><li>支持事务、持久化、多种集群方案数据备份</li><li>高性能的非关系性数据库</li></ol><p>优点：</p><ol><li>基于内存操作</li><li>单线程（6.0以前）的处理所有网络请求，避免线程切换开销以及所线程的竞争问题</li><li>支持多种数据类型</li><li>支持持久化。包括RDB和AOF两种操作</li><li>支持事务。Redis的所有操作都是原子性的</li><li>支持主从复制</li></ol><p>缺点</p><ol><li>数据库容量受到物理内存的限制，不适合海量数据的高性能读写</li></ol><p>应用场景：</p><ol><li>缓存热点数据</li><li>利用redis自增操作的原子性，实现计数器功能，比如统计点赞数，访问数</li><li>简单的消息队列，使用自身的发布-订阅模式，实现异步操作</li><li>限速器 限制某个用户访问接口的频率。比如秒杀</li><li>好友关系。利用集合的命令，如交集、并集、差级</li></ol><blockquote><p><strong>同步和异步</strong>的概念描述的是用户线程与内核的交互方式：同步是指用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行；而异步是指用户线程发起IO请求后仍继续执行，当内核IO操作完成后会通知用户线程，或者调用用户线程注册的回调函数。</p><p><strong>阻塞和非阻塞</strong>的概念描述的是用户线程调用内核IO操作的方式：阻塞是指IO操作需要彻底完成后才返回到用户空间；而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。</p><p>IO多路复用：<strong>同一个线程内同时处理多个IO请求的目的</strong></p></blockquote><h2 id="二、Redis单线程模型"><a href="#二、Redis单线程模型" class="headerlink" title="二、Redis单线程模型"></a>二、Redis单线程模型</h2><p>Redis基于Reactor模式来设计开发了自己的一套高效的事件处理模型</p><p>Redis通过多路IO复用来监听客户端的大量链接（或者说是监听多个socket），将事件及类型注册到内核中监听每个事件是否发生。让Redis不需要创建多余的线程监听客户端的连接，降低资源的消耗。</p><h2 id="三、redis6-0之前为什么不使用多线程"><a href="#三、redis6-0之前为什么不使用多线程" class="headerlink" title="三、redis6.0之前为什么不使用多线程"></a>三、redis6.0之前为什么不使用多线程</h2><ol><li>实现简单，不用考虑底层数据结构的线程安全性</li><li>Redis的性能瓶颈不在cpu，主要再内存和网络。避免过多的上下文切换消耗</li><li>避免同步机制的开销</li></ol><h2 id="四、redis6-0以后为何引入了多线程？"><a href="#四、redis6-0以后为何引入了多线程？" class="headerlink" title="四、redis6.0以后为何引入了多线程？"></a>四、redis6.0以后为何引入了多线程？</h2><ol><li>提高网络IO读写性能，主要用在网络读写这类耗时操作</li></ol><h2 id="五、Memcached和Redis的区别"><a href="#五、Memcached和Redis的区别" class="headerlink" title="五、Memcached和Redis的区别"></a>五、Memcached和Redis的区别</h2><ol><li>Redis单核，M多核</li><li>Redis支持多种数据结构，M结构单一</li><li>Redis支持数据持久化，M不支持</li><li>Redis提供主从同步机制和cluster集群能力</li><li>Redis使用单线程的多路IO复用，M使用多线程的非阻塞IO模型</li></ol><h2 id="Keys命令和Scan命令"><a href="#Keys命令和Scan命令" class="headerlink" title="Keys命令和Scan命令"></a>Keys命令和Scan命令</h2><p>keys命令会使得线程阻塞，直到执行完毕。</p><p>scan采用渐进式遍历的方式解决keys可能带来的阻塞问题，但是需要多次scan实现keys命令</p><h2 id="Redis基本数据结构"><a href="#Redis基本数据结构" class="headerlink" title="Redis基本数据结构"></a>Redis基本数据结构</h2><p>sortedSet  底层使用字典+跳表（/压缩列表）</p><p>![image-20220304205320531](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304205320531.png)</p><p><strong>SortedSet和List</strong>异同点</p><p>相同点：</p><ol><li>都是有序的</li><li>都可以获得某个范围内的元素</li></ol><p>不同点：</p><ol><li>List基于双向链表实现，获取两端元素快，中间慢</li><li>SortedSet基于散列表和跳表实现，访问元素时间复杂度为OlogN</li><li>List不能简单的调整某个元素的值，SortedSet可以（修改Score）</li><li>SortedSet更耗内存</li></ol><h2 id="缓存过期"><a href="#缓存过期" class="headerlink" title="缓存过期"></a>缓存过期</h2><p>给缓存设置过期时间主要原因：</p><p>内存是有限的，缓存中的数据不能一直保存。</p><p>redis通过一个过期字典来保存数据的过期时间。键指向Redis数据库中的某个key，val为Long long类型，保存了该key的过期时间。</p><h3 id="过期的删除策略"><a href="#过期的删除策略" class="headerlink" title="过期的删除策略"></a>过期的删除策略</h3><p>缓存更新</p><ol><li><p>惰性删除</p><p>只有在你取出key的时候对数据进行过期检查。对CPU友好，但可能会造成太多过期的key没有被删除</p></li><li><p>定期删除</p><p>每隔一段时间抽取一批key执行删除过期的key操作。redis底层限定删除操作执行的时长和频率来减少删除操作对CPU时间的影响。</p></li></ol><p>定期删除对内存更友好，惰性删除对CPU更友好。REDIS采用两种相结合。</p><h3 id="Redis内存淘汰机制"><a href="#Redis内存淘汰机制" class="headerlink" title="Redis内存淘汰机制"></a>Redis内存淘汰机制</h3><p>![image-20220304191057519](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304191057519.png)</p><h2 id="Redis持久化机制"><a href="#Redis持久化机制" class="headerlink" title="Redis持久化机制"></a>Redis持久化机制</h2><h3 id="快照（RDB）"><a href="#快照（RDB）" class="headerlink" title="快照（RDB）"></a>快照（RDB）</h3><p>通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。可以对快照进行备份，复制给其他服务器（主从结构）</p><p>默认的持久化方式</p><p>![image-20220304212041470](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304212041470.png)</p><p>![image-20220304210455351](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304210455351.png)</p><p>触发方式：</p><ol><li><p>手动触发：用户执行SAVE或BGSAVE命令。SAVE会阻塞客户端请求，BGSAVE异步进行快照操作</p></li><li><p>被动触发</p><p>![image-20220304210648128](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304210648128.png)</p></li></ol><p>优点</p><ol><li>因为使用了 快照数据  数据恢复远远快于AOF方式</li><li>使用单独的进程来进行持久化，主线程不会阻塞。保证了Redis的高性能</li></ol><p>缺点</p><ol><li>数据无法坐到实时持久化。fork操作属于重量级，频繁执行成本太高</li><li>存在版本Redis无法兼容RDB格式问题</li></ol><h3 id="只追加文件（AOF）"><a href="#只追加文件（AOF）" class="headerlink" title="只追加文件（AOF）"></a>只追加文件（AOF）</h3><p>持久化的实时性更好。每执行一条更改Redis中的数据的命令，Redis就将该命令写进AOf缓冲区，AOF缓冲区根据对应的策略向硬盘做同步操作。</p><p>默认情况下30秒执行一次同步操作。防止缓冲区数据丢失，也可以主动要求缓冲区数据同步到硬盘。</p><p>![image-20220304212101222](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304212101222.png)</p><p>![image-20220304212144748](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304212144748.png)</p><p>优点：</p><ol><li>AOF可以更好的保证数据不丢失，可以配置AOF每秒执行一次fsync操作。</li><li>AOF以append-only写入，没有磁盘寻址的开销</li></ol><h2 id="RDB和AOF如何选择"><a href="#RDB和AOF如何选择" class="headerlink" title="RDB和AOF如何选择"></a>RDB和AOF如何选择</h2><ol><li>数据不敏感，可以从其他地方得到，使用RDB</li><li>数据重要且能承受几分钟的数据丢失，使用RDB</li><li>用内存存数据，需要持久化，RDB和AOF都开启</li><li>值用AOF  优先使用everysec的配置</li></ol><p>当RDB和AOF都开启时，优先使用AOF恢复数据，因为更完成</p><h3 id="Redis4-0的混合持久化"><a href="#Redis4-0的混合持久化" class="headerlink" title="Redis4.0的混合持久化"></a>Redis4.0的混合持久化</h3><p>![image-20220304192219013](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304192219013.png)</p><p>AOF重写可以产生一个新的AOF文件。这个新的AOF文件和原有的AOF文件所保存的数据库状态一样，但体积更小。</p><h2 id="Redis事务特性"><a href="#Redis事务特性" class="headerlink" title="Redis事务特性"></a>Redis事务特性</h2><ol><li>单独的隔离操作：事务中的所有命令会被序列化、按顺序执行，在执行的过程中不会被其他客户端发送来的命令打断</li><li>没有隔离级别的概念：队列中的命令在事务没有被提交之前不会被实际执行</li><li>不保证原子性：redis中的一个事务中如果存在命令执行失败，那么其他命令依然会被执行，没有回滚机制</li></ol><blockquote><p> 在redis中，对于一个存在问题的命令，如果在入队的时候就已经出错，整个事务内的命令将都不会被执行（其后续的命令依然可以入队），如果这个错误命令在入队的时候并没有报错，而是在执行的时候出错了，那么redis默认跳过这个命令执行后续命令。也就是说，redis只实现了部分事务。</p></blockquote><p>redis不支持事务回滚，不满足原子性。但是单条命令是原子性的。</p><p>redis事务提供了一种将多个命令打包的功能。然后再按顺序执行打包中的所有命令。并且不会被打断。</p><ol><li>redis不支持回滚</li><li>一个事务中的命令出现错误则所有命令都不执行</li><li>一个事务中出现运行错误，正确的命令会被执行</li></ol><h2 id="Redis常见部署方式"><a href="#Redis常见部署方式" class="headerlink" title="Redis常见部署方式"></a>Redis常见部署方式</h2><ol><li>单机版。很少使用。存在的问题：内存容量有限、处理能力有限、无法高可用</li><li>主从模式。主结点挂掉好，需要重新指定master，可用性不高</li><li>哨兵模式。哨兵进程主动选举新的Master，但是每个结点存储的数据是一样的，浪费内存空间。需要自动容错容灾时使用。</li><li>Redis 集群。海量数据+高并发+高可用。主结点的容量总和就是集群可缓存的数据容量。</li></ol><p>主从复制：</p><p>多个数据库之间的数据同步。主库写，从库读。</p><p>![image-20220304214921699](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304214921699.png)</p><p>哨兵机制：</p><p>![image-20220304215303880](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220304215303880.png)</p><p>Redis Cluster</p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>大量请求的key不存在与缓存中，导致请求直接到了数据库，根本没有走缓存。数据库中也返回空数据。（黑客攻击）。数据库中没数据则缓存中也不会有数据，两次无用的查询。    </p><p>解决方法：</p><ol><li><p>做好参数校验，不合法的参数直接抛出异常返回给客户端。</p></li><li><p>缓存和数据库都查不到某个key的数据就写一个到redis中去并设置时间（尽量短一点）</p></li><li><p>布隆过滤器</p><p>把所有可能的请求都放在布隆过滤器中。先判断发来的请求是否再布隆过滤器中。不存在的话就直接返回参数错误信息给客户端。</p><p>存在小概率会误判。布隆过滤器说某个元素不在，就一定不在。</p></li></ol><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受了大量请求。</p><p>又或者是</p><p>大量访问数据（热点缓存）在某一个时刻大面积失效，导致请求都落在了数据库上。</p><p>解决方法：</p><ol><li>采用Redis集群，避免单机问题造成整个缓存服务器都没发用。</li><li>限流，避免同时处理大量请求。</li></ol><p>针对热点缓存失效情况：</p><ol><li>设置不同的失效时间比如随机设置缓存的失效时间</li><li>缓存永不失效。</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>大量的请求同时查询一个正好失效的key，就会导致大量的请求落到数据库。</p><p><strong>缓存击穿是查询失效的key，缓存穿透是查询一个不存在的key</strong></p><p>解决方案：</p><p>加分布式锁，第一个请求可以拿到锁，拿到锁的线程查询到了数据之后设置缓存，其他的线程获取锁失败后会等待50ms后重新缓存数据，避免大量的数据落到数据库。</p><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><p>系统上线后，将相关的缓存直接加到缓存系统中。避免用户请求时，先查询数据库，再更新缓存。</p><h2 id="缓存降级"><a href="#缓存降级" class="headerlink" title="缓存降级"></a>缓存降级</h2><p>访问量剧增、服务器出现问题，需要保证服务是可用的，即使是有损服务。可以自动降级也可以人工降级。</p><p>目的是为了防止redis服务故障，导致数据库跟着一起发生雪崩问题。对于不重要的缓存数据，可以服务降级。例如Redis出现问题时，不去数据库而是直接将默认值返回给用户。</p><h2 id="缓存和数据库的一致性"><a href="#缓存和数据库的一致性" class="headerlink" title="缓存和数据库的一致性"></a>缓存和数据库的一致性</h2><ol><li>先删除缓存再更新数据库，过程中有读的操作将读操作放在缓存队列中，顺序性保证写请求后才会执行读请求。若删除缓存失败则缓存与数据库数据相同，若成功若更新数据库失败，数据库中是旧数据，缓存中空数据，数据也保证一致性。成功的话更加一致</li><li>先更新数据库再删除缓存，后续请求时将数据重新写回缓存。更新后数据库到删除缓存中间数据不一致。</li><li>异步更新缓存。将操作命令封装到消息队列中，让redis自己去消费更新消息。</li></ol><h2 id="Redis的线程模型"><a href="#Redis的线程模型" class="headerlink" title="Redis的线程模型"></a>Redis的线程模型</h2><p>Redis内部使用文件事件处理器，这个文件事件处理器是单线程的，所以Redis才是单线程的。</p><p>它采用IO多路复用机制同时监听多个socket，根据socket上的事件来选择对应的事件处理器处理。</p><p>包括：</p><ol><li>多个socket</li><li>IO多路复用程序</li><li>文件事件分派器</li><li>事件处理器</li></ol><p>多个socket：</p><ol><li>并发产生不同的操作</li><li>每个操作对应不同的文件事件</li><li>IO多路复用程序监听多个socket，将socket放入队列中排队</li><li>事件分派器每次从队列中取出一个事件，把事件交给对应的事件处理器处理。</li></ol><h2 id="Redis如何实现消息队列？"><a href="#Redis如何实现消息队列？" class="headerlink" title="Redis如何实现消息队列？"></a>Redis如何实现消息队列？</h2><p>一般使用List结构作为队列，rpush生产消息,lpop消费消息。</p><ul><li>list有个指令是blpop，再没有消息的时候，会阻塞直到有消息来。</li><li>使用pub/sub主题订阅者模式，可以实现1：N的消息队列。</li><li>再消费者下线的情况下，生产者的消息会丢失，得使用更加专业的消息队列。如rq</li></ul><p>redis如何实现延时队列：</p><p>![image-20220305110327513](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220305110327513.png)</p><h2 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h2><p>![image-20220305123043127](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220305123043127.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis面经&quot;&gt;&lt;a href=&quot;#Redis面经&quot; class=&quot;headerlink&quot; title=&quot;Redis面经&quot;&gt;&lt;/a&gt;Redis面经&lt;/h1&gt;&lt;h2 id=&quot;一、什么是Redis？&quot;&gt;&lt;a href=&quot;#一、什么是Redis？&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL面经</title>
    <link href="https://a2914475618.github.io/2022/03/04/MySQL%E9%9D%A2%E7%BB%8F/"/>
    <id>https://a2914475618.github.io/2022/03/04/MySQL%E9%9D%A2%E7%BB%8F/</id>
    <published>2022-03-04T01:25:00.000Z</published>
    <updated>2022-03-12T08:51:23.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL面经"><a href="#MySQL面经" class="headerlink" title="MySQL面经"></a>MySQL面经</h1><h2 id="一、MySQL的主键有哪几种？如何选择？"><a href="#一、MySQL的主键有哪几种？如何选择？" class="headerlink" title="一、MySQL的主键有哪几种？如何选择？"></a>一、MySQL的主键有哪几种？如何选择？</h2><ol><li>自增序列<ol><li>数据库自动编号，速度快，数据库主键按顺序存放，检索更加有利</li><li>数字型，占用空间少，易排序</li><li>不支持水平分片架构</li><li>因为自增长，手动插入指定Id记录会麻烦</li></ol></li><li>UUID生成的随机值<ol><li>随机性+固定部分，值是无序的，全局唯一性，安全性，可移植性</li><li>可以在不同的数据库中迁移</li><li>针对Innodb引擎会徒增IO压力，主键的无序引起数据位置频繁变动，影响性能</li><li>UUID长度过长，一个UUID占用128个比特，增加了辅助索引的长度，占用了更多资源</li></ol></li><li>用户注册的唯一性账号，一般为字符串<ol><li>无序</li></ol></li><li>基于一套机制生成的自增的值  如序列生成器<ol><li>类似自增序列，借助第三方服务</li><li>规避自增序列的全局锁问题，提高并发</li><li>支持水平拆分</li></ol></li></ol><p><strong>选择方法：</strong></p><ol><li>若不考虑水平拆分问题选择 <strong>自增序列</strong></li><li>用户注册的账号本身唯一且非空的场景下  可做为主键字段</li><li>考虑水平拆分的问题，则采用自增序列生成器的架构</li></ol><p><strong>主键类型的选择</strong>：</p><p>整数通常是标识列最好选择，因为它很快且可以使用AUTO_INCRAMENT，如果可能，应该避免使用字符串类型作为标识列，消耗空间，且通常比数字类型慢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL面经&quot;&gt;&lt;a href=&quot;#MySQL面经&quot; class=&quot;headerlink&quot; title=&quot;MySQL面经&quot;&gt;&lt;/a&gt;MySQL面经&lt;/h1&gt;&lt;h2 id=&quot;一、MySQL的主键有哪几种？如何选择？&quot;&gt;&lt;a href=&quot;#一、MySQL的主键有哪几</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>图解TCP/IP</title>
    <link href="https://a2914475618.github.io/2021/11/25/%E5%9B%BE%E8%A7%A3TCP-IP/"/>
    <id>https://a2914475618.github.io/2021/11/25/%E5%9B%BE%E8%A7%A3TCP-IP/</id>
    <published>2021-11-25T05:06:39.000Z</published>
    <updated>2021-11-25T05:17:37.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><h2 id="1-网络基础知识"><a href="#1-网络基础知识" class="headerlink" title="1.网络基础知识"></a>1.网络基础知识</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP&quot;&gt;&lt;/a&gt;TCP/IP&lt;/h1&gt;&lt;h2 id=&quot;1-网络基础知识&quot;&gt;&lt;a href=&quot;#1-网络基础知识&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="TCP/IP" scheme="https://a2914475618.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>JAVA并发编程</title>
    <link href="https://a2914475618.github.io/2021/11/22/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://a2914475618.github.io/2021/11/22/JAVA%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2021-11-22T10:48:31.000Z</published>
    <updated>2021-12-01T12:58:35.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA并发编程"><a href="#JAVA并发编程" class="headerlink" title="JAVA并发编程"></a>JAVA并发编程</h1><h2 id="2-线程安全性"><a href="#2-线程安全性" class="headerlink" title="2.线程安全性"></a>2.线程安全性</h2><p>对象的状态是存储在实例或静态域中的数据，可能还包括其他依赖对象的域。</p><h3 id="2-1-什么是线程安全性"><a href="#2-1-什么是线程安全性" class="headerlink" title="2.1 什么是线程安全性"></a>2.1 什么是线程安全性</h3><p>当多个线程访问某个类时，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的。</p><p><strong>无状态的对象一定是线程安全的。</strong></p><h3 id="2-2-原子性"><a href="#2-2-原子性" class="headerlink" title="2.2 原子性"></a>2.2 原子性</h3><h4 id="2-2-1-竞态条件"><a href="#2-2-1-竞态条件" class="headerlink" title="2.2.1 竞态条件"></a>2.2.1 竞态条件</h4><p>某个计算的正确性取决于多个线程的交替执行时序时，就会发生竞态条件。</p><p>常见的竞态条件就是—–先检查后执行。</p><h4 id="2-2-2-复合操作"><a href="#2-2-2-复合操作" class="headerlink" title="2.2.2 复合操作"></a>2.2.2 复合操作</h4><p>原子操作是指，对于访问同一个状态的所有操作来说，这个操作是以原子方式执行的操作。要么不执行，要么全部执行完。</p><p>先检查后执行+读取、修改、写入等操作称为复合操作。</p><h3 id="2-3-加锁机制"><a href="#2-3-加锁机制" class="headerlink" title="2.3 加锁机制"></a>2.3 加锁机制</h3><h2 id="3-对象的共享性"><a href="#3-对象的共享性" class="headerlink" title="3.对象的共享性"></a>3.对象的共享性</h2><h3 id="3-1可见性"><a href="#3-1可见性" class="headerlink" title="3.1可见性"></a>3.1可见性</h3><h3 id="3-2-发布与逸出"><a href="#3-2-发布与逸出" class="headerlink" title="3.2 发布与逸出"></a>3.2 发布与逸出</h3><p><strong>发布</strong>：使一个对象能够在当前作用域之外的代码中使用。</p><p><strong>逸出</strong>：当某个不应该发布的对象被发布</p><p>发布对象最简单的方法就是<strong>将对象的引用保存到一个公有的静态变量中，以便任何类和线程都能看见该对象。</strong></p><p>使用封装的最主要原因：<strong>封装能够使得对程序的正确性进行分析变得可能，并使得无意中破坏设计约束条件变得更难。</strong></p><h3 id="3-3-线程封闭"><a href="#3-3-线程封闭" class="headerlink" title="3.3 线程封闭"></a>3.3 线程封闭</h3><p><strong>线程封闭</strong>：不共享数据。如果仅在单线程内访问数据，就不需要同步。某个对象封闭在一个线程中，这种用法将自动实现线程安全性。</p><p>Swing中大量使用了线程封闭技术。还有**JDBC(**JAVA DATABASE CONNECTIVITY)中的Connection对象。</p><h4 id="3-3-1-Ad-hoc-线程封闭"><a href="#3-3-1-Ad-hoc-线程封闭" class="headerlink" title="3.3.1 Ad-hoc 线程封闭"></a>3.3.1 Ad-hoc 线程封闭</h4><p>指的是<strong>维护线程封闭性的职责完全由程序实现来承担。</strong></p><p>对线程封闭对象的引用通常保存在共有变量中。当决定使用线程封闭技术时，通常是因为要将某个特定的子系统实现为一个单线程子系统。</p><h4 id="3-3-2-栈封闭"><a href="#3-3-2-栈封闭" class="headerlink" title="3.3.2 栈封闭"></a>3.3.2 栈封闭</h4><p>栈封闭是线程封闭的一种特例。<strong>栈封闭中，只能通过局部变量才能访问对象</strong>。</p><p>局部变量的固有属性之一就是封闭在执行线程中，他们位于执行线程的栈中，其他线程无法访问这些栈。</p><h4 id="3-3-3-ThreadLocal类"><a href="#3-3-3-ThreadLocal类" class="headerlink" title="3.3.3 ThreadLocal类"></a>3.3.3 ThreadLocal类</h4><p>线程封闭性更好的一种规范是使用ThreadLocal，<strong>这个类能使线程中的某个值与保存值的对象关联起来。</strong></p><p>ThreadLocal提供了get与set等访问接口方法，<strong>这些方法为每个使用该变量的线程都有一份独立的副本，因此get总是返回由当前执行线程在调用set时设置的最新值。</strong></p><p>ThreadLocal对象通常用于防止对可变的单实例变量或全局变量进行共享。例如JDBC中的Connection对象。</p><p>当某个频繁执行的操作需要一个临时对象，例如一个缓冲区，同时又希望避免每次执行时都重新分配该临时对象，就可以使用这个技术。</p><p>你可以将ThreadLocal<T>视为Map&lt;Thread,T&gt;的对象，其中保存了特定于该线程的值。这些特定于线程的值保存在Thread对象中，当线程终止后，这些值将会作为垃圾回收。</p><h3 id="3-4-不变性"><a href="#3-4-不变性" class="headerlink" title="3.4 不变性"></a>3.4 不变性</h3><p>如果某个对象在被创建后其状态就不能被修改，该对象就被称为不可变对象。</p><p>不可变对象一定是线程安全的。</p><p>满足以下条件时，对象是不可变的：</p><ol><li><p>对象创建以后其状态就不能修改</p></li><li><p>对象的所有域都是dinal类型</p></li><li><p>对象是正确创建的（对象的创建期间，this引用没有逸出）</p><blockquote><p>即使对象中所有的域都是final类型，这个对象也仍然是可变的,因为final类型中可以保存对可变对象的引用。</p></blockquote></li></ol><h4 id="3-4-1-Final-域"><a href="#3-4-1-Final-域" class="headerlink" title="3.4.1 Final 域"></a>3.4.1 Final 域</h4><p>关键词final用于构造不可变性对象。final类型的域是不能修改的。但是可能final修饰的引用对象是可变的</p><p>final域能确保初始化过程的安全性，从而可以不受限制地访问不可变对象，并在共享这些对象时无需同步。</p><h3 id="3-5-安全发布"><a href="#3-5-安全发布" class="headerlink" title="3.5 安全发布"></a>3.5 安全发布</h3><h4 id="3-5-2-不可变对象与初始化安全性"><a href="#3-5-2-不可变对象与初始化安全性" class="headerlink" title="3.5.2 不可变对象与初始化安全性"></a>3.5.2 不可变对象与初始化安全性</h4><p>维持初始化安全性，必须满足不可变性的所有要求：</p><ol><li>状态不可修改</li><li>所有域都是final</li><li>正确的构造过程</li></ol><h4 id="3-5-3-安全发布的常用模式"><a href="#3-5-3-安全发布的常用模式" class="headerlink" title="3.5.3  安全发布的常用模式"></a>3.5.3  安全发布的常用模式</h4><p>可变对象必须通过安全的方式来发布，通常意味着在发布和使用该对象的线程时都必须使用同步。</p><p>要安全地发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见。一个正确构造的对象可以通过以下方式来安全地发布：</p><ol><li>在静态初始化函数中初始化一个对象引用</li><li>将对象的引用保存到volatile类型的域或者AtomicReferance对象中。</li><li>将对象的引用保存到某个正确构造对象的final类型中</li><li>将对象的引用保存到一个由锁保护的域中。</li></ol><p>对象的发布需求取决于它的可变性：</p><ol><li>不可变对象可以通过任何机制来发布</li><li>事实不可变对象必须通过安全方式来发布</li><li>可变对象必须通过安全方式来发布，并且必须时线程安全的或者由某个锁保护起来</li></ol><h4 id="3-5-4-安全地共享对象"><a href="#3-5-4-安全地共享对象" class="headerlink" title="3.5.4 安全地共享对象"></a>3.5.4 安全地共享对象</h4><p>并发程序中使用和共享对象，使用的策略：</p><ol><li><strong>线程封闭</strong>。线程封闭的对象只能有一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改。</li><li><strong>只读共享</strong>。共享的只读对象可以由多个线程并发访问，但是任何线程都不能修改它。包括不可变对象和事实不可变对象。</li><li><strong>线程安全共享</strong>。线程安全的对象在其内部实现同步，因此多个线程可以通过对象的共有接口来进行访问而不需要进一步的同步。</li><li><strong>保护对象</strong>。被保护的对象只能通过持有特定锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象。</li></ol><h2 id="4-对象的组合"><a href="#4-对象的组合" class="headerlink" title="4.对象的组合"></a>4.对象的组合</h2><p>委托是创建线程安全类的一个有效的策略：只需让现有的线程安全类管理所有的状态即可。</p><p>客户端加锁是指，<strong>对于使用某个对象X的客户端代码，使用X本身用于保护其状态的锁来保护这段客户代码。</strong></p><h2 id="5-基本构建模块"><a href="#5-基本构建模块" class="headerlink" title="5.基本构建模块"></a>5.基本构建模块</h2><h3 id="5-1-同步容器类"><a href="#5-1-同步容器类" class="headerlink" title="5.1 同步容器类"></a>5.1 同步容器类</h3><p>同步容器类包括Vector和Hashtable。这些同步的封装器类由Collections.synchronizedXXX等工厂方法创建的。</p><p>这些类实现线程安全的方法是：<strong>将它们的状态封装起来，并对每个公有方法都进行同步，使得每一次只有一个线程能访问容器的状态。</strong></p><p><strong>同步容器将所有对容器状态的访问都串行化，以实现他们的线程安全性</strong>。代价是严重降低并发性，当多个线程竞争容器的锁时，吞吐量将严重降低。</p><h3 id="5-2-并发容器"><a href="#5-2-并发容器" class="headerlink" title="5.2 并发容器"></a>5.2 并发容器</h3><p><strong>并发容器是针对多个线程并发访问设计的。</strong></p><p>Java 5.0 用Concurrent-hashmap来替代同步且基于散列的map</p><p>用CopyOnWriteArrayList用于在遍历操作为只要操作的情况下替代同步的list。</p><p>在ConcurrentMap接口中增加了对一些常见复合操作的支持，如“若没有则添加”、替换以及有条件删除等。</p><p>java 5.0 新增了Queue 和 BlockingQueue。Queue用来临时保存一组等待处理的元素，提供了集中实现ConcurrentLinkedQueue,这是一个传统的先进先出队列，以及PriorityQueue,这是一个优先队列（非并发的）。</p><p>Queue是非阻塞的，如果队列为空，那么获取的元素将返回空值。</p><p>BlockingQueue扩展了Queue，增加了可阻塞的插入和获取等操作。如果队列为空，那么获取元素的操作将一致阻塞，直到队列中出现可用的空间。如果队列已满，那么插入元素的操作将一直阻塞，直到队列中出现可用的空间。</p><p>ConcurrentHashMap并不是将每个方法都在同一个锁上同步并使得每次只能有一个线程访问容器，而是使用一种粒度更大的加锁机制来实现更大程度的共享，这种机制称为分段锁</p><ul><li>任意数量的读取线程可以并发地访问Map，执行读取操作的线程和执行写入操作的线程可以并发的修改map。</li></ul><hr><p>CopyOnWriteArrayList用于替代同步List，提供更好的并发性能，迭代期间不需要对容器进行加锁或复制。</p><p>线程安全性在于只要正确地发布一个事实不可变的对象，那么在访问该对象时就不再需要进一步的同步。在每次修改时，都会创建并重新发布一个新的容器副本，从而实现可变性。</p><p>每当修改时都会复制底层数组，这需要一定的开销。仅仅当迭代操作远远多于修改操作时，菜应该使用”写入时复制”容器。</p><h3 id="5-3-阻塞队列和生产者–消费者模式"><a href="#5-3-阻塞队列和生产者–消费者模式" class="headerlink" title="5.3 阻塞队列和生产者–消费者模式"></a>5.3 阻塞队列和生产者–消费者模式</h3><p><strong>阻塞队列适合生产者–消费者模式。</strong></p><h4 id="5-3-2-串行线程封闭"><a href="#5-3-2-串行线程封闭" class="headerlink" title="5.3.2 串行线程封闭"></a>5.3.2 串行线程封闭</h4><h4 id="5-3-3-双端队列与工作密取"><a href="#5-3-3-双端队列与工作密取" class="headerlink" title="5.3.3 双端队列与工作密取"></a>5.3.3 双端队列与工作密取</h4><p>java 6中增加了deque 和 blockingDeque。Deque是一个双端队列，实现了在队列头和队列尾的高效插入和删除。</p><p><strong>双端队列适用于工作密取模式。</strong></p><p>工作密取：当双端队列为空时，它会在另一个线程的队列队尾查找新的任务，从而确保每个线程都保持忙碌状态。</p><h3 id="5-4-阻塞方法和中断方法"><a href="#5-4-阻塞方法和中断方法" class="headerlink" title="5.4 阻塞方法和中断方法"></a>5.4 阻塞方法和中断方法</h3><p>当某方法抛出一个Interrupted-Exception，表示该方法是一个阻塞方法。</p><h3 id="5-5-同步工具类"><a href="#5-5-同步工具类" class="headerlink" title="5.5 同步工具类"></a>5.5 同步工具类</h3><p>阻塞队列也可以作为同步工具类。</p><p>同步工具类包括</p><ol><li>信号量(Semaphore)</li><li>栅栏(Barrier)</li><li>闭锁(latch)</li></ol><p>他们封装了一些状态，这些状态将决定执行同步工具类的线程时继续执行 还是等待，还提供了一些方法对状态进行操作，以及另一些方法用于高效地等待同步工具类进入到预期状态。</p><h4 id="5-5-1-闭锁"><a href="#5-5-1-闭锁" class="headerlink" title="5.5.1 闭锁"></a>5.5.1 闭锁</h4><p>延迟线程的进度直到终止状态。在闭锁到达状态结束之前，这扇门是关闭的，没有任何线程能通过，当到达结束时，这扇门会打开并允许所有的线程通过。</p><p>常用的场景：1.<strong>确保某个计算在其需要的所有资源都被初始化之后才继续执行。</strong>2.<strong>确保某个服务在其依赖的所有其他服务都已经启动之后才启动。</strong>3.<strong>等到某个操作的参与者都就绪再继续执行。</strong></p><p>第一种实现方法是使用CountDownLatch类：它可以使一个或多个线程等待一组事件发生。闭锁状态包括一个计数器，<strong>计数器被初始化为一个正数，表示需要等待的事件数量。</strong></p><h4 id="5-5-2-Future-Task"><a href="#5-5-2-Future-Task" class="headerlink" title="5.5.2 Future Task"></a>5.5.2 Future Task</h4><p>也可以用作闭锁。Future Task表示的计算是通过Callable来实现的，相当于一种可生成结果的Runnable。</p><p>有三种状态：</p><ol><li>等待运行</li><li>正在运行</li><li>运行完成</li></ol><p>Future.get的行为取决于任务的状态，若任务完成则会立即返回结果。否则get将阻塞直到任务进入完成状态。</p><p>Callable表示的任务可以抛出受检查的或未受检查的异常，任何代码都可能抛出一个Error。</p><h4 id="5-5-3-信号量"><a href="#5-5-3-信号量" class="headerlink" title="5.5.3 信号量"></a>5.5.3 信号量</h4><p>计数信号量用来控制同时访问某个特定资源的操作数量。或者同时执行某个指定操作的数量。通过构造函数来指定初始许可数量。</p><p>Semaphore的操作过程：</p><ol><li>再执行操作时获取acquire许可，若没有，那么acquire将阻塞，直到有许可</li><li>使用以后通过release方法返回一个许可给信号量</li></ol><p>可以<strong>使用该技术来将任何一种容器变成有界阻塞容器</strong>。信号量的计数值会初始化为容器容量的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">BoundedHashSet</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;T&gt; set;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> Semaphore sem;</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">public</span>  <span class="title">BoundedHashSet</span><span class="params">(<span class="keyword">int</span> bound)</span></span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.set= Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;T&gt;());</span><br><span class="line">           sem=<span class="keyword">new</span> Semaphore(bound);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T o)</span><span class="keyword">throws</span>  InterruptedException</span>&#123;</span><br><span class="line">           sem.acquire();</span><br><span class="line">           <span class="keyword">boolean</span> wasAdded=<span class="keyword">false</span>;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">               wasAdded=set.add(o);</span><br><span class="line">               <span class="keyword">return</span> wasAdded;</span><br><span class="line">           &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(!wasAdded)&#123;</span><br><span class="line">                   sem.release();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">           <span class="keyword">boolean</span> wasRemoved=set.remove(<span class="number">0</span>);</span><br><span class="line">           <span class="keyword">if</span>(wasRemoved)&#123;</span><br><span class="line">               sem.release();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> wasRemoved;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-4-栅栏"><a href="#5-5-4-栅栏" class="headerlink" title="5.5.4 栅栏"></a>5.5.4 栅栏</h4><p>通过闭锁来启动一组相关的操作，或者等待一组相关的操作结束。闭锁是一次性对象，一旦进入终止状态，就不能被重置。</p><p>栅栏与闭锁类似，能阻塞一组线程直到某个事件发生。</p><p>栅栏与闭锁的区别在于：<strong>所有线程必须同时到达栅栏位置，才能继续执行。闭锁用于等待事件，而栅栏用于等待其他线程。</strong></p><p>CyclicBarrier可以使一定数量的参与方反复地再栅栏位置汇集。当线程到达栅栏位置时将调用await方法，阻塞直到所有线程都能到达栅栏位置。如果所有线程都到达了栅栏位置，那么栅栏将打开，所有线程都被释放，栅栏将被重置供下次使用。</p><p>如果成功的通过了栅栏，那么await将为每个线程返回一个唯一的到达索引号，通过这些索引号来产生一个领导线程，再下一次迭代中执行一些特殊的工作。</p><h3 id="5-6-构建高效且可伸缩的结果缓存"><a href="#5-6-构建高效且可伸缩的结果缓存" class="headerlink" title="5.6 构建高效且可伸缩的结果缓存"></a>5.6 构建高效且可伸缩的结果缓存</h3><h3 id="5-7-第一章小结"><a href="#5-7-第一章小结" class="headerlink" title="5.7 第一章小结"></a>5.7 第一章小结</h3><blockquote><p>所有的并发问题都可以归结为如何协调对并发状态的访问。可变状态越少，就越容易确保线程安全性。</p><p>尽量将域声明为final类型，除非需要他们是可变的</p><p>不可变对象一定是线程安全的</p><p>封装有利于管理复杂性</p><p>用锁来保护每一个可变变量</p><p>当保护同一个不变性条件中的所有变量时，要使用同一个锁</p><p>再执行复合操作期间时，需要持有锁。</p><p>如果从多个线程中访问同一个可变变量时没有同步机制，程序会有问题</p></blockquote><h2 id="6-任务执行"><a href="#6-任务执行" class="headerlink" title="6.任务执行"></a>6.任务执行</h2><h3 id="6-1-在线程中执行任务"><a href="#6-1-在线程中执行任务" class="headerlink" title="6.1 在线程中执行任务"></a>6.1 在线程中执行任务</h3><h4 id="6-1-1-串行地执行任务"><a href="#6-1-1-串行地执行任务" class="headerlink" title="6.1.1 串行地执行任务"></a>6.1.1 串行地执行任务</h4><p>每次只处理一个请求，通常会由于网络阻塞或连通性问题而被阻塞。</p><h4 id="6-1-2-显式地为任务创建线程"><a href="#6-1-2-显式地为任务创建线程" class="headerlink" title="6.1.2 显式地为任务创建线程"></a>6.1.2 显式地为任务创建线程</h4><p>为每个请求创建一个新的线程来提供服务，实现更高的响应性。（增加了资源消耗）</p><h4 id="6-1-3-无限制创建线程的不足"><a href="#6-1-3-无限制创建线程的不足" class="headerlink" title="6.1.3 无限制创建线程的不足"></a>6.1.3 无限制创建线程的不足</h4><ol><li>线程生命周期的开销非常高</li><li>资源消耗</li><li>稳定性</li></ol><h3 id="6-2-Executor框架"><a href="#6-2-Executor框架" class="headerlink" title="6.2 Executor框架"></a>6.2 Executor框架</h3><p>线程池简化了线程的管理工作，并且juc提供了一种灵活的线程池实现作为Executor框架的一部分。</p><p>Executor支持多种不同类型的任务执行策略。提供了一种标准的方法将任务的提交过程域执行过程解耦开来，并用Runnable来表示任务。Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。</p><p>Executor基于生产者-消费者模式。将任务提交与任务执行解耦开来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskExecutionWebServer</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> <span class="keyword">int</span> NTHREADS=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> Executor exec= Executors.newFixedThreadPool(NTHREADS);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            ServerSocket socket=<span class="keyword">new</span> ServerSocket(<span class="number">80</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">final</span> Socket connection=socket.accept();</span><br><span class="line">                Runnable task=<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//                        handleRequest(connection;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                exec.execute(task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通常使用<strong>Executor</strong>来替代<strong>new Thread(runnable).start()  这个将任务提交与执行放在一起了</strong></p><h4 id="6-2-3-线程池"><a href="#6-2-3-线程池" class="headerlink" title="6.2.3 线程池"></a>6.2.3 线程池</h4><p><strong>线程池，管理一组同构工作线程的资源池。</strong></p><p>线程池与工作队列密切相关，在工作队列中保存了所有等待执行的任务。</p><ol><li>重用现有的线程而不是创建新的线程，可以在处理多个请求时分摊在线程创建和销毁过程中产生的巨大开销。</li><li>当请求到达时，工作线程已经存在，因此不会由于等待创建线程而延迟任务的执行，提高了响应。</li><li>适当调整线程池的大小，可以创建足够多的线程以使处理器保持忙碌状态，防止过多线程相互竞争资源而使应用程序耗尽内存或失败。</li></ol><p><strong>使用Executor中的静态工厂方法创建线程池：</strong></p><table><thead><tr><th>方法</th><th>内容</th></tr></thead><tbody><tr><td>newFixedThreadPool</td><td>创建一个固定长度的线程池</td></tr><tr><td>newCachedThreadPool</td><td>创建一个可缓存的线程池，如果当前规模超过了处理需求，回收空闲的线程，反之，则添加</td></tr><tr><td>newSingleThreadExecutor</td><td>是一个单线程的Executor，创建单个工作线程来执行任务，若发生异常，则创建一个代替</td></tr><tr><td>newScheduledThreadPool</td><td>创建一个固定长度的线程池，而且以延迟或定时的方式来执行任务。</td></tr></tbody></table><h4 id="6-2-4-Executor-的生命周期"><a href="#6-2-4-Executor-的生命周期" class="headerlink" title="6.2.4 Executor 的生命周期"></a>6.2.4 Executor 的生命周期</h4><p>Executor实现通常会创建线程来执行任务。但JVM只有在所有（非守护）线程全部终止后才会退出，因此如果无法正确地关闭Executor，JVM将无法结束。</p><p> ExecutorService扩展了Executor接口，添加了一些用于生命周期管理的方法。</p><p>ExecutorService的生命周期有3种状态：运行、关闭、已终止。</p><h4 id="6-2-5-延迟任务与周期任务"><a href="#6-2-5-延迟任务与周期任务" class="headerlink" title="6.2.5 延迟任务与周期任务"></a>6.2.5 延迟任务与周期任务</h4><p><strong>通过使用ScheduledThreadPoolExecutor来代替Timer类来实现管理延迟任务以及周期任务。</strong></p><p>Timer在执行所有定时任务时只会创建一个线程。如果某个任务的执行时间过长，那么将会破坏其他TimerTask的定时精确性。</p><p>如果有一个TimerTask抛出了一个未检查的异常，Timer线程并不捕获异常，因此当TimerTask抛出未检查异常时，将终止定时线程。Timer也不会恢复线程的执行，错误地认为整个Timer都被取消了。</p><p><strong>线程泄露：已经被调度但尚未执行的TimerTask将不会再执行，新的任务也不能被调度。</strong></p><p>Timer支持基于绝对时间而不是相对时间的调度机制，任务对系统始终变化很敏感，而ScheduledThreadPoolExecutor只支持基于相对时间的调度。</p><p>java 5.0后，很少使用Timer，如果要构建自己的调度服务，可以使用DelayQueue,实现了BlockingQueue，并为ScheduledThreadPoolExecutor提供调度功能。</p><h3 id="6-3-找出可利用的并行性"><a href="#6-3-找出可利用的并行性" class="headerlink" title="6.3 找出可利用的并行性"></a>6.3 找出可利用的并行性</h3><h4 id="6-3-2-携带结果的Callable与Future"><a href="#6-3-2-携带结果的Callable与Future" class="headerlink" title="6.3.2 携带结果的Callable与Future"></a>6.3.2 携带结果的Callable与Future</h4><p>Executor框架使用Runnbale作为其基本的任务表示形式。Runnable是一种有很大局限的抽象，它不能返回一个值或抛出一个受检查的异常。</p><p>Callable是一种更好的抽象：它认为主入口点(即call)将返回一个值，并可能抛出一个异常。</p><p>Executor执行的任务有4个生命周期阶段：创建、提交、开始和完成。</p><p>在Executor框架中，已提交但尚未开始的任务可以取消，但那些已经开始执行的任务，只有当它们能响应中断时，才能取消。</p><p><strong>Future表示一个任务的生命周期，并提供了相应的方法来判断是否已经完成或取消，以及获取任务的结果和取消任务等。</strong></p><p>get方法的行为取决于任务的状态（未开始，正在运行，已完成）。如果任务已经完成，get会立即返回或者抛出一个Execption。如果任务没有完成，那么get将会阻塞直到任务完成。</p><h4 id="6-3-5-CompletionService-Executor与BlockingQueue"><a href="#6-3-5-CompletionService-Executor与BlockingQueue" class="headerlink" title="6.3.5 CompletionService: Executor与BlockingQueue"></a>6.3.5 CompletionService: Executor与BlockingQueue</h4><p>CompletionServie 将Executor和Blocking的功能融合在一起。将Callable任务提交给他执行，然后使用类似take和pol等方法来获得已完成的结果，而这些结果会在完成时封装为Future。</p><p>计算部分交给Executor,任务完成得记录保存在BlockingQueue。在构造函数中创建一个BlockingQueue来保存计算完成得结果。计算完成时，调用FutureTask中的done方法。提交某个任务时，将将任务包装为一个QueueingFuture，这是FuntureTask的子类，改写其中的done方法，将结果放入BlockingQueue。</p><blockquote><p>继承于Executor的类如ExecutorService和CompleationService都有submit方法用来提交任务</p><p>ExecutorService有invokeAll方法，将多个任务提交到一个ExecutorService并获得结果。</p><p>实现Future接口的类如FutureTask有get方法，可以设置等待时间，若超过时间就cancled</p></blockquote><h2 id="7-取消与关闭"><a href="#7-取消与关闭" class="headerlink" title="7.取消与关闭"></a>7.取消与关闭</h2><p>java没有提供任何机制来安全地终止一个线程。但它提供了中断，这是一种协作机制，能够使一种线程终止另一个线程的工作。这种协作机制是很有必要的，我们不希望某个任务、线程或服务立即停止，<strong>停止会使共享的数据结构处于不一致的状态。</strong></p><blockquote><p>Thread.stop  和 suspend等方法有严重的缺陷，我们应该避免使用。</p></blockquote><h3 id="7-1-任务取消"><a href="#7-1-任务取消" class="headerlink" title="7.1 任务取消"></a>7.1 任务取消</h3><p>有一种机制能设置某个“已请求取消”标志，而任务将定期查看该标志。如果设置了这个标志，那么任务将提前结束。</p><h4 id="7-1-1-中断"><a href="#7-1-1-中断" class="headerlink" title="7.1.1 中断"></a>7.1.1 中断</h4><p>线程中断是一种协作机制，线程可以通过该机制通知另一个线程，告诉它在合适的或者可能的情况下停止当前工作，并转而执行其他的工作。</p><p>每个线程都有一个boolean类型的中断状态。当中断线程，这个线程的中断状态将被设置为true。Thread中包含了中断线程以及查询线程中断状态的方法。</p><blockquote><p>interrupt方法能中断目标线程</p><p>isInterrupted方法能返回目标线程的中断状态</p><p>静态的interrupted方法将清除当前线程的中断状态，并返回它之前的值。</p></blockquote><p>中断的正确理解：它并不会真正地中断一个正在运行的线程，而只是发出中断请求，然后再下一个合适的时刻中断自己。</p><p>再使用静态的interrupted时应该小心，因为它会清楚当前线程的中断状态。如果再调用interrupted时返回了true，那么除非你想屏蔽这个中断，否则必须对它进行处理——可以抛出InterruptedException，或者通过再次调用interrupt来恢复中断。</p><p><strong>使用中断来代替标志位进行任务取消</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeProducer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;BigInteger&gt; queue;</span><br><span class="line"></span><br><span class="line">    PrimeProducer(BlockingQueue&lt;BigInteger&gt; queue)&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue=queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BigInteger p=BigInteger.ONE;</span><br><span class="line">            <span class="keyword">while</span> (!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                queue.put(p=p.nextProbablePrime());;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException consumed)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        interrupt();<span class="comment">//取消 使得线程中断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-2-中断策略"><a href="#7-1-2-中断策略" class="headerlink" title="7.1.2 中断策略"></a>7.1.2 中断策略</h4><p><strong>中断策略规定线程如何解释某个中断请求——当发现中断请求时，应该做哪些工作，哪些中作单元对于中断来说时原子操作，以及以多块的速度来响应中断。</strong></p><h4 id="7-1-3-响应中断"><a href="#7-1-3-响应中断" class="headerlink" title="7.1.3 响应中断"></a>7.1.3 响应中断</h4><p>当调用可中断的阻塞函数时，如<strong>Thread.sleep或BlockingQueue.put等，有两种策略处理InterruptedException</strong>:</p><ol><li><strong>传递异常</strong>（可能再执行某个特定于任务的清除操作之后），从而使方法也成为可中断的阻塞方法。</li><li><strong>恢复中断状态</strong>，从而使调用栈中的上层代码能够对其进行处理。</li></ol><p>如果不想或无法传递InterruptedException，另一种方法就是通过调用interrupt来恢复中断状态。<strong>不能屏蔽InterruptedException，例如再catch块中捕获到异常却不做任何处理，除非在你的代码中实现了线程的中断策略。</strong></p><p><strong>通常，可中断的方法会在阻塞或进行重要的工作前首先检查中断，从而尽快响应中断。</strong></p><h4 id="7-1-5-通过Future来实现取消"><a href="#7-1-5-通过Future来实现取消" class="headerlink" title="7.1.5 通过Future来实现取消"></a>7.1.5 通过Future来实现取消</h4><p>Future拥有一个cancel方法，该方法带有一个boolean类型的参数mayInterruptIfRunning，表示取消操作是否成功。（这只表示任务是否能接受中断，而不是表示任务是否能检测并处理中断。）</p><p>如果mayInterruptIfRunning为true并且任务当前正在某个线程中运行，那么这个线程能被中断。</p><p>如果为false，表示任务还没启动，就不要运行它，这种方式应该用于哪些不处理中断的任务。</p><h4 id="7-1-7-采用newTaskFor来封装非标准的取消"><a href="#7-1-7-采用newTaskFor来封装非标准的取消" class="headerlink" title="7.1.7 采用newTaskFor来封装非标准的取消"></a>7.1.7 采用newTaskFor来封装非标准的取消</h4><h3 id="7-2-停止基于线程读服务"><a href="#7-2-停止基于线程读服务" class="headerlink" title="7.2 停止基于线程读服务"></a>7.2 停止基于线程读服务</h3><p><strong>线程由Thread对象表示，并且像其他对象一样可以被自由共享。然而，线程有一个相应的持有者，即创建该线程的类。因此线程池是其工作者线程的所有者，如果要中断这些线程，那么应该使用线程池。</strong></p><p>应用程序可以拥有服务，服务也可以拥有工作者线程，但应用程序不能拥有工作线程。<strong>服务应该提供生命周期方法来关闭它自己以及它所拥有的线程。</strong>对于持有线程的服务，只要服务的存在时间大于创建线程的方法的存在时间，那么就应该提供生命周期方法。</p><h4 id="7-2-2-关闭ExecutorService"><a href="#7-2-2-关闭ExecutorService" class="headerlink" title="7.2.2 关闭ExecutorService"></a>7.2.2 关闭ExecutorService</h4><h4 id="7-2-3-毒丸对象"><a href="#7-2-3-毒丸对象" class="headerlink" title="7.2.3 毒丸对象"></a>7.2.3 毒丸对象</h4><p>毒丸：一个放在队列上的对象，当得到这个对象，立即停止。通过该方式保证再关闭之前首先完成队列中的所有工作，生产者再提交了毒丸对象后，将不会再提交任何工作。</p><p>只有再生产者和消费者的数量都已知的情况下，才可以使用毒丸对象。只有再无界队列中，毒丸对象才能可靠地工作。</p><h4 id="7-2-5-ExecutorService中shutdown的局限"><a href="#7-2-5-ExecutorService中shutdown的局限" class="headerlink" title="7.2.5 ExecutorService中shutdown的局限"></a>7.2.5 ExecutorService中shutdown的局限</h4><p>shoutdown强行关闭executorService,尝试取消正在执行的任务，返回所有已提交尚未开始的任务(List<Runnable>)</p><p>因此我们无法知道哪些任务已经开始但是尚未结束。</p><h3 id="7-3-处理非正常的线程终止"><a href="#7-3-处理非正常的线程终止" class="headerlink" title="7.3 处理非正常的线程终止"></a>7.3 处理非正常的线程终止</h3><p>导致线程死亡的最主要原因就是RuntimeException。由于这种异常表示出现了某种编程错误或者其他不可修复的错误，因此他们通常不会捕获，他们不会再调用栈中逐层传递，而是默认地再控制台中输出栈追踪消息，并终止线程。</p><p>UncaughtExceptionHandler,能检测出某个线程由于未捕获的异常而终结的情况。<strong>通过它与主动方法来检查未检异常，就能有效的防止线程泄露情况</strong></p><h3 id="7-4-JVM关闭"><a href="#7-4-JVM关闭" class="headerlink" title="7.4 JVM关闭"></a>7.4 JVM关闭</h3><p>JVM既可以正常关闭，也可以强行关闭。</p><p>这一部分查看深入理解JVM</p><p>正常关闭：</p><ol><li>当最后一个正常（非守护）线程结束时</li><li>调用了System.exit时</li></ol><p>强行关闭：</p><ol><li>Runtime.halt</li><li>再操作系统中杀死JVM进程</li></ol><h4 id="7-4-1-关闭钩子"><a href="#7-4-1-关闭钩子" class="headerlink" title="7.4.1 关闭钩子"></a>7.4.1 关闭钩子</h4><h4 id="7-4-2-守护线程"><a href="#7-4-2-守护线程" class="headerlink" title="7.4.2 守护线程"></a>7.4.2 守护线程</h4><h2 id="8-线程池的使用"><a href="#8-线程池的使用" class="headerlink" title="8.线程池的使用"></a>8.线程池的使用</h2><h4 id="8-1-1-线程饥饿死锁"><a href="#8-1-1-线程饥饿死锁" class="headerlink" title="8.1.1 线程饥饿死锁"></a>8.1.1 线程饥饿死锁</h4><p>线程池中，如果任务依赖于其他任务，那么可能产生死锁。</p><p><strong>线程饥饿死锁</strong>：只要线程池中的任务需要无限期地等待一些必须由池中其他任务才能提供的资源或条件，除非线程池足够大，否则将发生线程饥饿死锁。</p><blockquote><p>每当提交一个由依赖性的Executor任务时，要清楚地知道可能会出现线程“饥饿”死锁，因此需要在代码或配置Executor的配置文件中记录线程池的大小限制或配置限制。</p></blockquote><h3 id="8-2设置线程池的大小"><a href="#8-2设置线程池的大小" class="headerlink" title="8.2设置线程池的大小"></a>8.2设置线程池的大小</h3><p>线程 池的大小取决于被提交任务的类型以及所部署系统的特性。代码中不会固定线程池的大小，而是应该通过某种配置机制来提供，或者<strong>通过Runtime.getRuntime().availableProcessors();来动态计算。</strong></p><h3 id="8-3-配置ThreadPoolExecutor"><a href="#8-3-配置ThreadPoolExecutor" class="headerlink" title="8.3 配置ThreadPoolExecutor"></a>8.3 配置ThreadPoolExecutor</h3><p>ThreadPoolExecutor为一些Executor提供了基本的实现。</p><p>ThreadPoolExecutor是一个灵活的、稳定的线程池，允许进行各种定制。</p><h4 id="8-3-1-线程的创建与销毁"><a href="#8-3-1-线程的创建与销毁" class="headerlink" title="8.3.1 线程的创建与销毁"></a>8.3.1 线程的创建与销毁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,//线程池的基本大小</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,//最大大小</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,//存活时间</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), handler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>基本大小也就是线程池的目标大小，即在没有任务执行时线程池的大小，并且只有在工作队列满了的情况下才会创建超出这个数量的线程。线程的最大大小表示可同时活动的线程数量。</p><p><strong>包括newFixedThreadPool工厂方法底层都是由ThreadPoolExecutor实现的。</strong></p><p>对于Executor，newCachedThreadPool工厂方法是一种很好的默认选择，能提供比固定大小的线程池更好的排队性能。只有当任务相互独立时，为线程池或工作队列设置界限才是合理的。如果任务之间存在有依赖性，那么有界的线程池或队列就可能导致线程“饥饿”死锁问题。<strong>此时应该使用无界的线程池，例如newCachedThreadPool</strong>.</p><h4 id="8-3-3-饱和策略"><a href="#8-3-3-饱和策略" class="headerlink" title="8.3.3 饱和策略"></a>8.3.3 饱和策略</h4><h4 id="8-3-4-线程工厂"><a href="#8-3-4-线程工厂" class="headerlink" title="8.3.4 线程工厂"></a>8.3.4 线程工厂</h4><p>每当线程池需要创建一个线程时，都是通过线程工厂方法来完成的。默认的线程工厂方法将创建一个新的、非守护的线程，并且不含特殊的配置信息。通过指定一个线程工厂方法，可以定制线程池的配置信息。</p><h3 id="8-4-扩展ThreadPoolExecutor"><a href="#8-4-扩展ThreadPoolExecutor" class="headerlink" title="8.4 扩展ThreadPoolExecutor"></a>8.4 扩展ThreadPoolExecutor</h3><p>ThreadPoolExecutor提供了几个可以在子类中改写的方法。</p><ol><li>beforeExecute</li><li>afterExecutor</li><li>terminated</li></ol><h2 id="10-避免活跃性危险"><a href="#10-避免活跃性危险" class="headerlink" title="10.避免活跃性危险"></a>10.避免活跃性危险</h2><p><strong>完全性问题</strong>：由于多个线程要共享相同的内存地址空间，并且是并发运行的，因此可能会访问或修改其他线程正在使用的变量。<strong>线程会由于无法预料的数据变化而发生错误。</strong></p><p><strong>活跃性问题</strong>：当某个操作无法继续执行下去时，就会发生活跃性问题。例如死锁、饥饿、活锁等问题。</p><h3 id="10-1-死锁"><a href="#10-1-死锁" class="headerlink" title="10.1 死锁"></a>10.1 死锁</h3><p><strong>死锁</strong>：每个人都拥有其他其他人需要的资源，同时又等待其他人已经拥有的资源，并且每个人在获得所有需要的资源之前都不会放弃已经拥有的资源。</p><p><strong>抱死</strong>：多线程由于存在环路的锁依赖关系而永远地等待下去。</p><p>JVM在解决死锁问题方面没有数据库那么强大。当JAVA线程发生死锁时，这些线程永远不能再使用了。</p><h4 id="10-1-1-锁顺序死锁"><a href="#10-1-1-锁顺序死锁" class="headerlink" title="10.1.1 锁顺序死锁"></a>10.1.1 锁顺序死锁</h4><p>当所有线程以固定的顺序来获得锁，那么在程序中就不会出现锁顺序死锁问题。</p><h4 id="10-1-2-动态的锁顺序死锁"><a href="#10-1-2-动态的锁顺序死锁" class="headerlink" title="10.1.2 动态的锁顺序死锁"></a>10.1.2 动态的锁顺序死锁</h4><p>所有的线程似乎都是按相同的顺序来获得锁，但事实上的锁的顺序取决于传入方法的参数顺序。这些参数顺序又取决于外部输入。</p><h4 id="10-1-3-协作对象之间发生的死锁"><a href="#10-1-3-协作对象之间发生的死锁" class="headerlink" title="10.1.3 协作对象之间发生的死锁"></a>10.1.3 协作对象之间发生的死锁</h4><p>如果在持有锁时调用某个外部方法，那么将出现活跃性问题。在这个外部方法中可能会获取其他锁，或者阻塞时间过长，导致其他线程无法及时获得当前被持有的锁。</p><h4 id="10-1-4-开放调用"><a href="#10-1-4-开放调用" class="headerlink" title="10.1.4 开放调用"></a>10.1.4 开放调用</h4><p><strong>开放调用</strong>：在调用某个方法时不需要持有锁，那么这种调用被称为开放调用。</p><p>这种通过开放调用来避免死锁的方法，类似于采用封装机制来提供线程安全的方法。</p><p><strong>单单使用同步代码块来保护那些涉及共享状态的操作，而不是在一整个方法上加锁。</strong></p><p>程序中应尽量使用开放调用。与那些在持有锁时调用外部方法的程序相比，更容易对依赖于开放调用的程序进行死锁分析。</p><h4 id="10-1-5-资源死锁"><a href="#10-1-5-资源死锁" class="headerlink" title="10.1.5 资源死锁"></a>10.1.5 资源死锁</h4><p>当多个线程在相同的资源集合上等待时，也会发生死锁。</p><p>例如等待两个任务等待两个数据库的连接，两个资源不会遵循相同的顺序，一次可能发生死锁。</p><h3 id="10-2-死锁的避免与诊断"><a href="#10-2-死锁的避免与诊断" class="headerlink" title="10.2 死锁的避免与诊断"></a>10.2 死锁的避免与诊断</h3><p>在使用细粒度锁的程序中，通过使用一种两阶段策略来检查代码中的死锁：</p><ol><li>首先，找出在什么地方将获取多个锁（使得这个集合尽量小）</li><li>对所有的实例进行全局分析，确保在整个程序中获取锁的顺序都保持一致。</li></ol><h4 id="10-2-1-支持定时的锁"><a href="#10-2-1-支持定时的锁" class="headerlink" title="10.2.1 支持定时的锁"></a>10.2.1 支持定时的锁</h4><p>显式使用Lock类中的定时tryLock功能来代替内置锁机制。当使用内置锁时，只要没有获得锁，就会永远等待下去，而显式锁则而可以指定一个超时时限，在等待超过该时间后tryLock后会返回一个失败信息。如果超时时限比获取锁的时间要长很多，那么就可以在发生某个意外情况后重新获得控制权。</p><p>这项技术只有在同时获取两个锁时才有效，如果在嵌套的 方法调用中请求多个锁，那么即使你已经持有了外层的锁，也无法释放它。</p><h3 id="10-3-其他活跃性问题"><a href="#10-3-其他活跃性问题" class="headerlink" title="10.3 其他活跃性问题"></a>10.3 其他活跃性问题</h3><h4 id="10-3-1-饥饿"><a href="#10-3-1-饥饿" class="headerlink" title="10.3.1 饥饿"></a>10.3.1 饥饿</h4><p>当线程由于无法访问它所需要的资源而不能继续执行时，就发生了饥饿。引发饥饿的最常见资源就是CPU时钟周期。</p><p>应该避免使用线程优先级，这会增加平台依赖性，导致活跃性问题。</p><h4 id="10-3-2-糟糕的响应性"><a href="#10-3-2-糟糕的响应性" class="headerlink" title="10.3.2 糟糕的响应性"></a>10.3.2 糟糕的响应性</h4><h4 id="10-3-3-活锁"><a href="#10-3-3-活锁" class="headerlink" title="10.3.3 活锁"></a>10.3.3 活锁</h4><p>当多个相互协作的线程都对彼此进行响应从而修改各自的状态。并使得任何一个线程都无法继续执行时，就发生了活锁。</p><h2 id="13-显式锁"><a href="#13-显式锁" class="headerlink" title="13.显式锁"></a>13.显式锁</h2><p>java5.0之前协调对共享对象的访问时可以使用的机制只有synchronized和volatile。<strong>JAVA5.0新增了一种新的机制：ReentrantLock</strong>。</p><p>ReentrantLock并不是一种替代内置加锁的方法，而是当内置加锁机制不适用时，作为一种可选的高级功能。</p><h3 id="13-1-Lock-与ReentrantLock"><a href="#13-1-Lock-与ReentrantLock" class="headerlink" title="13.1 Lock 与ReentrantLock"></a>13.1 Lock 与ReentrantLock</h3><p>与内置解锁机制不同的是,Lock提供了一种无条件的、可轮询的、定时的以及可中断的锁获取操作，所有加锁和解锁的方法都是显式的。</p><p>ReentrantLock实现了Lock接口，提供了与synchronized相同的互斥性和内存可见性。与synchronized一样，提供了可重入的加锁。</p><p><strong>为什么要创建一种与内置锁如此相似的新加锁机制？</strong></p><p>大多数情况下，内置锁都能很好地工作，但在功能上存在一些局限性，如：</p><ol><li>无法中断一个正在等待获取锁的线程</li><li>无法在请求获取一个锁时无限地等待下去</li><li>内置锁必须在获取锁的代码块中释放，无法实现非阻塞结构的加锁机制</li></ol><p>RenntrantLock不能完全替代synchronized的原因是：它更加危险，当程序的执行控制离开被保护的代码时，不会自动清除锁。</p><h4 id="13-1-1-轮询锁与定时锁"><a href="#13-1-1-轮询锁与定时锁" class="headerlink" title="13.1.1 轮询锁与定时锁"></a>13.1.1 轮询锁与定时锁</h4><p>可定时的与可轮询的锁获取模式是由tryLock实现的，与无条件的锁获取模式相比，它具有更完善的错误恢复机制。</p><p><strong>可以有效的避免死锁的发生。</strong></p><p>如果不能获得所有需要的锁，那么可以使用可定时的活可轮询的锁获取方式，从而使你重新获得控制权，它会释放已经获得的锁，然后重新尝试获取所有锁。</p><h4 id="13-1-2-可中断的锁获取操作"><a href="#13-1-2-可中断的锁获取操作" class="headerlink" title="13.1.2 可中断的锁获取操作"></a>13.1.2 可中断的锁获取操作</h4><p>正如定时的锁获取操作能在有时间限制的操作中使用独占锁，可中断的锁获取操作同样能在可取消的操作中使用加锁。</p><p>lockInterruptibly方法能够在获取锁的同时保持对中断的响应。</p><p>tryLock可用于实现一个定时的和可中断的锁获取操作。</p><h3 id="13-3-公平性"><a href="#13-3-公平性" class="headerlink" title="13.3 公平性"></a>13.3 公平性</h3><p>创建ReentrantLock锁时构造函数中提供了两种公平性选择：</p><ol><li><p>非公平的锁（默认）</p><p>允许插队，当一个线程请求非公平的锁时，如果在发出请求的同时该锁的状态变为可用，那么这个线程将跳过队列中所有的等待线程并获得这个锁。</p></li><li><p>公平的锁</p><p>线程将按照他们发出的请求的顺序来获得锁</p></li></ol><p>非公平的锁的性能往往高于公平锁的性能：恢复一个被挂起的线程与该线程真正开始运行之间存在着严重的延迟。</p><h3 id="13-4-synchronized和ReentrantLock之间进行选择"><a href="#13-4-synchronized和ReentrantLock之间进行选择" class="headerlink" title="13.4 synchronized和ReentrantLock之间进行选择"></a>13.4 synchronized和ReentrantLock之间进行选择</h3><p>ReentrantLock在加锁和内存上提供的语义与内置锁相同，还提供其他包括锁等待、可中断的锁等待、公平性以及实现非块结构的加锁。</p><h3 id="13-5-读——写锁"><a href="#13-5-读——写锁" class="headerlink" title="13.5 读——写锁"></a>13.5 读——写锁</h3><p>ReentrantLock实现了一种标准的互斥锁，每次最多只有一个线程能持有ReentrantLock。对于维护数据的完整性来说，不必要地限制了并发性。</p><p><strong>读——写锁</strong>：<strong>一个资源可以被多个读操作访问，或者被一个写操作访问，但两者不能同时进行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for reading.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for reading</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for writing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读——写锁允许多个读线程并发地访问被保护的对象，当访问以读取操作为主的数据结构时，它能提高程序的可伸缩性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JAVA并发编程&quot;&gt;&lt;a href=&quot;#JAVA并发编程&quot; class=&quot;headerlink&quot; title=&quot;JAVA并发编程&quot;&gt;&lt;/a&gt;JAVA并发编程&lt;/h1&gt;&lt;h2 id=&quot;2-线程安全性&quot;&gt;&lt;a href=&quot;#2-线程安全性&quot; class=&quot;header</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://a2914475618.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="并发编程" scheme="https://a2914475618.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>图解HTTP</title>
    <link href="https://a2914475618.github.io/2021/11/10/%E5%9B%BE%E8%A7%A3HTTP/"/>
    <id>https://a2914475618.github.io/2021/11/10/%E5%9B%BE%E8%A7%A3HTTP/</id>
    <published>2021-11-10T07:52:07.000Z</published>
    <updated>2021-11-14T05:50:46.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h1><p>1、URI（uniform统一+resource资源+identifier标识符）</p><p>2、RFC（Request for comments)征求修改意见书   http协议的技术标准</p><p>3、http无状态协议，为了更快的处理大量事务，确保协议的可伸缩性</p><p>4、http 1.1引入了cookie技术 管理状态</p><p>5、方法</p><ul><li>head方法获得报文首部     </li><li>options询问支持的方法     </li><li>trace方法追踪路径  </li><li>connect   隧道协议连接代理 与代理服务器通信时建立隧道，实现用隧道进行Tcp通信</li></ul><p>6、SSL(Secure Sockets layer)安全套接字</p><p>7、TLS（Transport layer  Security)  传输层安全  协议</p><p>8、为了解决TCP多次建立增加通信量开销的问题，出现了持久连接</p><p>9、<strong>持久连接</strong>： 只要任意一端没有明确提出断开连接，则保证Tcp连接</p><p>10、http1.1中所有的连接默认都是<strong>持久连接</strong></p><p>11、<strong>持久连接</strong>使得多数请求以管线化方式发送成为可能</p><p>12、<strong>管线化技术</strong>：不需等待响应就可直接发送下一个请求。</p><p>13、服务器端发送的响应报文内的一个叫做Set-cookie的首部字段信息，通知客户端保存Cookie等于该值</p><p>14、压缩传输的内容编码：</p><ol><li>gzip（GNU zip)</li><li>compress(UNIX系统的标准压缩)</li><li>deflate(zlib)</li><li>identity(不进行编码)</li></ol><p>15、<strong>分块传输编码</strong>：在传输大容量数据时，通过把数据分割成多块，能够让浏览器逐步显示页面</p><p>16、MIME(Multipurpose Internet Mail Extensions) 多用途因特网邮件扩展它允许邮件处理文本、图片、视频等多个不同类型的数据。</p><p>17、HTTP协议采纳了多部份对象集合，一部分报文主体有多类型实体。通常在图片或文本文件等上传时使用。</p><ol><li>multipart/form-data  在web表单文件上传时使用</li><li>multipart/byteranges  状态码206，响应报文包含了多个范围的内容</li></ol><p>使用多部份对象集合时，需要在首部字段里加上Content-type</p><p>18、获取部分内容的<strong>范围请求</strong>：从下载中断处恢复下载</p><p>在首部使用Range字段</p><ol><li>Range:  bytes=5001-10000</li><li>Range:   bytes=5001-   到之后全部的</li></ol><p>针对范围请求  返回206状态码</p><p>19、状态码</p><ol><li>1XX   信息性状态码    接受的请求正在处理</li><li>2XX    成功状态码        正常处理完毕</li><li>3XX    重定向状态码    需要进行附加操作完成请求</li><li>4XX      客户端错误状态码      服务器无法处理请求</li><li>5XX       服务器错误状态码       服务器处理请求出错</li></ol><p>20、通信数据转发程序：代理、网关、隧道</p><p>21、<strong>代理</strong>：服务器和客户端的中间人，接受客户端的请求转发给服务器，接受服务器返回的响应给客户端。</p><p>理由：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的。</p><p>正向代理隐藏的是客户端（我无法直接访问它，我通过中间人来访问服务器，服务器不知道是谁发来的，VPN），反向代理隐藏的服务器（我只知道发给它，具体由谁负责我不知道）</p><p>代理有多种使用方法：</p><ol><li>是否使用缓存</li><li>是否会修改报文</li></ol><p><strong>缓存代理</strong>：</p><p>代理转发响应时，缓存代理会预先将资源的副本保存在代理服务器上。</p><p>当代理再次接受到对相同资源的请求时，可以不从源服务器获取资源，将之前的资源作为响应返回。</p><p><strong>透明代理</strong>：</p><p>转发请求或者响应时，不对报文做任何加工的代理类型称为透明代理。</p><p>对报文内容加工的称为非透明代理。</p><p>22、<strong>网关</strong>：转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像拥有资源的源服务器一样对请求进行处理。</p><p><strong>代理连接的是两个或多个使用相同协议的应用程序，而网关连接的则是两个或多个使用不同协议的应用程序。</strong></p><p><strong>网关扮演的是协议转换器的角色，即使客户端和服务端使用的是不同的协议，客户端也可以通过网关来和客户端进行交互</strong></p><p>23、<strong>隧道</strong>：在相隔甚远的客户端和服务器之间进行中转，并保持双方通信连接的应用程序。</p><p>建立一条与其他服务器通信的通信线路，可以使用SSL等加密手段通信。</p><p><strong>目的</strong>：确保客户端与服务器端进行安全的通信。</p><p>隧道不会解析http，请求保持原样中转给之后的服务器。</p><p>24、<strong>缓存指代理服务器或者客户端本地磁盘内保存的资源副本</strong>。可以减少对源服务器的访问。缓存服务器是代理服务器的一种，归类在缓存代理中。</p><p>当代理转发从服务器返回的响应时，代理服务器将会保存一份资源的副本。</p><p>25、<strong>http的不足</strong></p><ol><li>通信使用明文，内容可能被窃听</li><li>不验证通信方的身份，因此可能被伪装</li><li>无法证明报文的完整性，所以有可能篡改</li></ol><p>缺点一：</p><p><strong>解决方案</strong>：</p><p>1.<strong>通信的加密</strong></p><p>http中没有加密机制，但是可以用ssl建立安全通信线路之后，在该线路进行http通信。</p><p>https    =      http    +     ssl</p><p>2.<strong>内容的加密</strong></p><p>将http报文里所含的内容进行加密。要求客户端和服务器端都必须具有加密和解密机制。但是内容仍然有被篡改的可能。</p><hr><p>缺点二：</p><p>http协议简单，不确认通信方，会有以下隐患：</p><ol><li>有可能是已经伪装的服务器</li><li>有可能是已经伪装的客户端</li><li>无法确定正在通信的对方是否具备访问权限。</li><li>即使无意义的请求也会响应。无法阻止海量下的Dos攻击。</li></ol><p><strong>解决方案</strong>：</p><p>ssl不仅提供加密处理，而且还使用了<strong>证书</strong>，用于确定方。</p><p><strong>证书</strong>由第三方机构颁发，用以证明服务器和客户端是实际存在的。</p><hr><p>缺点三：</p><p>MITM(中间人攻击)    ：请求或者相应在传输中，遭到攻击者拦截并篡改内容的攻击。</p><p><strong>解决方案</strong>：</p><p>MD5和SHA-1等散列值校验的方法，以及用来确认文件的数字签名方法。</p><p>依然无法达到百分百的安全，因为PGP和MD5本身被改写。</p><p>26、<strong>HTTP+加密处理+认证+完整性保护=HTTPS</strong></p><p>HTTPS并非是应用层的一种新的协议。只是HTTP通信接口使用SSL和TLS协议代替而已。</p><p>原本是由HTTP直接和传输层的TCP直接通信。</p><p>现在是有HTTP和SSL通信，SSL在和TCP通信，相当于HTTP和TCP中间多了一层。ssl也在应用层。</p><p><strong>SSL</strong>采用<strong>公开密钥加密</strong>的加密处理方式、也称为非对称加密方式。</p><p><strong>共享密钥加密</strong>方式就是加密和解密都用同一个密钥，也成为堆成加密方式。</p><p>https<strong>采用混合密钥加密机制</strong>，在交换密钥环节使用公开密钥加密方式，之后建立的通信交换报文阶段则使用共享密钥加密方式。</p><p>为了证明公开密钥没有被篡改，使用由数字证书认证机构和其相关机关颁发的公开密钥证书。</p><p><strong>数字证书</strong>机构在判明申请者的身份后，会对已经申请的公开密钥做数字签名，然后分配这个已经签名的公开密钥，将该公开密钥放入公钥证书后绑定在一起。</p><p>公钥证书也叫做数字证书或者证书。</p><p>客户端证书进行客户端认证，证明服务器是真实存在的服务器。</p><hr><p><strong>https安全通信机制步骤</strong></p><ol><li>客户端发送报文开始通信。报文中有客户端支持的SSL的指定版本、加密组件列表（加密的算法以及密钥长度）</li><li>服务端可进行SSL通信时，发送报文作为响应。报文中包含SSL版本以及加密组件。该加密组件是从接受到的客户端加密组件内筛选出来的</li><li>服务器发送证书报文。包含公开密钥证书。</li><li>服务器发送报文通知客户端第一次SSL握手协商结束。</li><li>客户端确认证书的有效性，取出公开密钥，向服务端发送通过公开密钥已加密的随机密码串，告知服务器之后通信会采用该随机密码串密钥加密。</li><li>服务端使用私有密钥对客户端发来的报文取出已加密的随机密码串，解密。此后<strong>公开密钥加密结束</strong></li><li>向客户端确认通信会采用该随机密码串密钥加密。也就是<strong>共享加密</strong></li><li>客户端与服务端SSL建立成功后，<strong>以后的通信就使用对随机密码串解密后的随机数进行对称加密</strong></li></ol><p>SSL的慢</p><ol><li><p>通信的慢</p><p>和使用http比，网络负载变慢2到100倍，除去和TCP连接、发送HTTP请求响应以外，还必须进行SSL通信，整体上通信量增加。</p></li><li><p>大量消耗CPU及内存等资源，导致处理速度变慢</p><p>加密和解密消耗了硬件资源。</p></li></ol><p>为何不一直使用https？</p><ol><li>加密通信会消耗更多CPU及内存资源，使得每台计算机能处理的请求必定减少</li><li>敏感数据使用https，非敏感数据http</li><li>购买证书需要开销</li></ol><hr><p>http的基本认证</p><ol><li>basic认证（基本认证）</li><li>digest认证（摘要认证）</li><li>sll客户端认证</li><li>formBase认证（基于表单认证）</li></ol><p>basic认证即使用用户名密码通过Base64进行加密传给服务端验证，在报文中头部写入Authorization:Basic MTIzOjEyMw==   但是base64不属于加密，等同于明文。</p><p>digest认证使用<strong>质询响应方式</strong>：一开始一方会先发送认证要求给另一方，接着使用从另一方那接收到的质询码计算生成响应码。最后将响应码回给对方进行认证。安全等级高于Basic</p><p>ssl客户端认证需要将客户端证书发给客户端，客户端需要安装此证书。</p><p><strong>双因素认证</strong>指在认证过程中不仅需要密码这一个因素，还需要申请认证者提供其他持有信息，从而作为另一个因素，与其组合使用的认证方式。</p><p>通过向用户发放sessionid，记录认证状态。在cookie中存储sessionid，为防止xxs跨站脚本攻击，应在cookie内加上Httponly属性。如果cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容，这样就增加了cookie的安全性</p><hr><p><strong>http的瓶颈</strong></p><ol><li>一条连接上只可发送一个请求</li><li>请求只能从客户端开始。客户端不可以接受除响应以外的指令。</li><li>请求/响应首部未经压缩就发送。首部信息越多延迟越大。</li><li>发送冗长的首部。每次互相发送发送相同的首部造成的浪费比较多。</li><li>可任意选择数据压缩格式。非强制压缩发送。</li></ol><p><strong>Ajax</strong>（Asynchronous javascript and xml）异步javascrip 与xml技术，利用javascript和Dom的操作，以达到局部web页面替换加载的异步通信手段。只更新一部分页面，响应中传输的数据量也会因此减少。</p><p>ajax仍不能解决http协议本身的问题，每次都互相发送相同的首部，有时不压缩数据直接发送。</p><p><strong>Comet</strong>一旦服务端内容更新了，comet不会让请求等待，而是直接给客户端响应。通过延迟应答，模拟实现服务器端向客户端推送的功能。仍无法解决http协议本身存在的问题。 </p><ol><li>通常服务器端收到请求，在处理完毕后就会立即返回响应，但是为了实现推送这个功能</li><li>Comett会先将响应置于挂起状态</li><li>服务器端有内容更新时，再返回该响应</li></ol><hr><p><strong>SPDY</strong>没有改写HTTP协议，而是在TCP/IP的应用层与运输层之间通过新加会话层的形式运作。同时规定通信使用SSL。SPDY控制对数据的流动，仍采用HTTP建立通信连接。</p><p>SPDY使得HTTP协议获得以下功能：</p><ol><li><p>多路复用流</p><p>通过单一的TCP连接，可以无限制处理多个HTTP请求。</p></li><li><p>赋予请求优先级</p></li><li><p>压缩HTTP首部</p></li><li><p>推送功能</p><p>支持服务器主动向客户端推送数据的功能。服务器可以直接发送数据，而不必等待客户端请求。</p></li><li><p>服务器提示功能</p><p>服务器可以制动提示客户端请求资源</p></li></ol><hr><p>WebSocket是Web浏览器与Web服务器之间全双工通信标准。 </p><ol><li>握手请求</li><li>握手响应，响应101，切换成WebSocket协议</li></ol><p>CGI（Common GateWay Interface ) 通用网关接口是指Web服务器在接收到客户端发送过来的请求后转发给程序的一组机制。</p><p><strong>xxs</strong>跨站脚本攻击，使用javascript</p><p><strong>os</strong>攻击，通过web应用执行非法的操作体统命令达到攻击的目的。通过OS注入攻击可执行sql上安装的各种应用程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Http&quot;&gt;&lt;a href=&quot;#Http&quot; class=&quot;headerlink&quot; title=&quot;Http&quot;&gt;&lt;/a&gt;Http&lt;/h1&gt;&lt;p&gt;1、URI（uniform统一+resource资源+identifier标识符）&lt;/p&gt;
&lt;p&gt;2、RFC（Request</summary>
      
    
    
    
    <category term="秋招学习" scheme="https://a2914475618.github.io/categories/%E7%A7%8B%E6%8B%9B%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="HTTP" scheme="https://a2914475618.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="https://a2914475618.github.io/2021/10/20/JVM/"/>
    <id>https://a2914475618.github.io/2021/10/20/JVM/</id>
    <published>2021-10-20T07:29:51.000Z</published>
    <updated>2022-03-10T03:07:52.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM面经"><a href="#JVM面经" class="headerlink" title="JVM面经"></a>JVM面经</h1><h2 id="一、JMM"><a href="#一、JMM" class="headerlink" title="一、JMM"></a>一、JMM</h2><p>描述的是多线程对共享内存修改后彼此之间的可见性</p><p>java内存模型主要时为了定义程序中各种变量的访问规则，即关注变量在虚拟机中把变量值存储到内存和从内存中取出变量值这样的底层细节。</p><p>java内存模型规定了所有的变量都存储在主内存中。</p><ol><li>线程的工作内存中保存了该线程使用的变量的主内存副本</li><li>线程对变量的所有操作都必须在工作内存中进行，不能直接读写主内存数据</li><li>不同线程之间页无法直接访问对方工作内存中的变量</li></ol><p>volatile:</p><ol><li>保证此变量对所有线程的可见性，但不能保证原子性。比如多线程下的i++操作，虽然能够保证拿到的i值为新值，但是在写回过程中可能会覆盖其他线程的值。因为volatile只能保证缓存一致，但是此时的i已经是从缓存里取出来再方法里了。</li><li>运算结果不依赖于变量的当前值，或者确保只有单一的线程修改了变量的值</li><li>变量不需要与其他的状态变量共同参与不变约束</li><li>禁止指令重排序优化</li><li>volatile变量读操作的性能消耗与普通变量几乎没有什么差别，写操作上可能会慢一点，因为它需要再本地代码中插入许多内存屏障来保证处理器不发生乱序执行。</li><li>每次使用前必须从内存刷新缓存，每次修改后必须同步到主内存中，被volatile修饰的变量不会被指令重排序</li></ol><p>三大性质：</p><p>原子性：</p><ol><li>基本数据类型的访问、读写都是原子性的（除了long和double的非原子协定)</li><li>synchronized关键词修饰的块之间的操作</li></ol><p>可见性：</p><ol><li><p>volatile</p></li><li><p>synchronized</p><p>基于对于一个变量执行Unlock之前,必须先把此变量同步到主内存中去</p></li><li><p>final</p><p>被final修饰的字段再构造器中一旦初始化完成，并且构造器没有把this的引用传递出去，其他线程就可以看到final字段</p></li></ol><p>有序性：</p><ol><li><p>volatile</p></li><li><p>synchronized</p><p>一个变量再同一个时刻只允许一条线程对其进行Lock操作</p><p>不保证同步代码块内的代码禁止重排序</p></li></ol><h3 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h3><ol><li>单线程规则：一个线程中，按照控制流顺序，书写在前面的操作先行发生于书写在后面的操作</li><li>监视器锁定规则：监视器的解锁动作先行发生于对同一个锁的加锁动作</li><li>volatile变量规则：对volatile字段的写入先行发生于后续对该字段的读</li><li>线程start规则：线程start方法先行发生于此线程的每个动作</li><li>线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测<ol><li>线程中断规则：对线程interrupt方法调用先行发生于被中断线程的代码检测到中断事件的发生</li></ol></li><li>对象终结规则：对象的初始化完成先行发生于它的finalize方法的开始</li><li>传递性：A先行于B，B先行于C，则A先行于C</li></ol><h2 id="二、JVM内存结构"><a href="#二、JVM内存结构" class="headerlink" title="二、JVM内存结构"></a>二、JVM内存结构</h2><p>运行时数据区包括：</p><ol><li><p>程序计数器</p><p>线程私有的，作为当前线程的行号指示器，记录当前虚拟机正在执行的线程指令地址</p></li><li><p>虚拟机栈</p><p>线程私有的，每个方法执行的时候都会创建一个栈帧，用于存储局部变量表、操作数、动态链接和方法返回等信息，当线程请求的深度超过了虚拟机最大的深度，就会抛出StackOverFlowError</p></li><li><p>本地方法栈</p><p>线程私有，保存的是native方法，调用native后，JVM不会创建栈帧，而是简单的动态链接并直接调用该方法</p></li><li><p>堆</p><p>线程共享，几乎所有对象的实例和数组都要在堆上分配内存，该区域发生垃圾回收</p></li><li><p>方法区</p><p>存放已被加载的类信息、常量、静态变量。即时编译后的代码数据。即永久代。JDK1.8以后被元数据区代替，分为了1.加载类的信息2.运行时常量池。加载的类信息存放在元数据区，运行时常量池保存在堆中。</p></li></ol><h2 id="三、Stack和Heap有什么区别？"><a href="#三、Stack和Heap有什么区别？" class="headerlink" title="三、Stack和Heap有什么区别？"></a>三、Stack和Heap有什么区别？</h2><ol><li><p>申请方式</p><p>stack：由系统自动分配</p><p>heap：需要程序员自己申请</p></li><li><p>申请后系统响应</p><p>stack：只要剩余空间大于所申请的空间，系统则为其提供内存，否则报出异常提示栈溢出</p><p>heap：操作系统有一个记录空闲内存地址的链表，系统收到程序的申请时，遍历该链表，寻找第一个空间大于所申请空间的堆结点，移除该结点，将结点空间分配给程序。系统自动将该结点剩余的空间重新放入空闲链表</p></li><li><p>申请大小的限制</p><p>stack：栈向低地址扩展，连续的内存区域。栈顶地址和栈的容量事先确定好了，栈的大小为2M，超过则栈溢出。从stack能获得的空间少</p><p>heap：堆向高地址扩展，不连续的内存区域。链表存储，不连续。堆的大小受限于虚拟内存。堆获得的空间更灵活</p></li><li><p>申请效率比较</p><p>stack:由系统自动分配，速度较快。程序员无法控制</p><p>heap：由new分配内存，一般速度较慢，容易产生碎片。</p></li><li><p>存放内容</p></li></ol><h2 id="四、栈溢出"><a href="#四、栈溢出" class="headerlink" title="四、栈溢出"></a>四、栈溢出</h2><ol><li>当线程请求的栈深度超过了虚拟机允许的最大深度时，会抛出StackOverFlowError异常，<strong>方法递归调用</strong>肯可能会出现该问题；</li><li> 调整参数-xss去调整jvm栈的大小</li></ol><h2 id="五、OOM"><a href="#五、OOM" class="headerlink" title="五、OOM"></a>五、OOM</h2><ol><li><p>Java堆溢出</p><p>JAVA堆存储对象实例，只要不断创建对象，GC之后也没有清除有可达路径的对象，随着对象的增加，总容量触及限制后产生内存溢出异常。</p><ul><li>增加两个参数 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapdump.hprof，当 OOM 发生时自动 dump 堆内存信息到指定目录，用内存映像分析工具对快照进行分析。</li><li>判断是内存泄漏还是内存溢出</li><li>若是内存泄漏，通过工具查看泄漏对象到GCroot的引用链，找到垃圾收集器无法回收它们的原因</li><li>若是内存溢出的话，就是所有对象确实必须存活，就通过(-XMX与XMS)设置，向上调整空间。检查代码的不合理</li></ul></li><li><p>虚拟机栈和本地方法栈溢出</p><ul><li>线程请求的栈深度大于虚拟机所允许的最大深度，StackOverFlowError</li><li>虚拟机栈内存允许动态扩展，当扩展栈容量无法申请足够内存时，将抛出OOM异常</li><li>HotSpot虚拟机选择是不支持扩展的，所以只有在创建线程申请内存时无法获得足够内存OOM，否则在运行时都是StackOverFlowError异常</li></ul></li><li><p>方法区</p><p>方法区的主要职责是存放类型相关的信息。因此大量动态代理生成类、Jsp等就会溢出</p><ul><li>-XX：MaxMetaspaceSize:元空间最大值</li><li>-XX：MeteSpaceSize：原空间的初始空间大小</li><li>-XX：MinMetaspaceFreeRatio：垃圾收集之后控制最小的元空间剩余容量的百分比</li></ul></li><li><p>本地直接内存溢出</p><p>涉及到 -XX:MaxDirectMemorySize 参数和 Unsafe 对象对内存的申请。</p></li></ol><p>![image-20220309105608766](C:\Users\Lu  sir\AppData\Roaming\Typora\typora-user-images\image-20220309105608766.png)</p><h2 id="六、GC-Roots"><a href="#六、GC-Roots" class="headerlink" title="六、GC Roots"></a>六、GC Roots</h2><ol><li>虚拟机栈中的引用的对象。一个方法中的局部变量，参数，临时变量</li><li>方法区中静态属性引用的对象。static</li><li>方法区中常量引用的对象</li><li>本地方法栈中引用的对象</li><li>所有被同步锁持有的对象</li><li>java虚拟机内部的引用，如基本数据类型对应的Class对象</li></ol><h2 id="七、Java中的垃圾回收算法"><a href="#七、Java中的垃圾回收算法" class="headerlink" title="七、Java中的垃圾回收算法"></a>七、Java中的垃圾回收算法</h2><p>目前只有CMS收集器有单独收集老年代的行为，标记清除+标记整理</p><p>G1收集器是混合收集</p><ol><li>标记清除法<ol><li>利用可达性分析去标记回收对象</li><li>将所有的标记对象回收掉</li><li>特点：效率不行，标记和删除的效率都不高。大量的不连续的空间片，导致之后程序运行的时候需要分配大对象而找不到连续分片不得不触发一次GC</li></ol></li><li>标记复制算法<ol><li>将内存按容量分为大小相等的两块，每次只使用一块，将存活的对象移到另一块上，把使用过的内存删除掉。</li><li>特点：产生大量的内存复制的开销，不会产生空间碎片化，但是空间的利用率极低</li></ol></li><li>标记整理法<ol><li>利用可达性分析去遍历内存，标记垃圾对象</li><li>将所有存活的对象向一端移动，将端边界以外的对象都回收掉</li><li>特点：存活对象多，垃圾少。需要移动对象，无空间碎片产生。</li></ol></li><li>分代收集算法：<ol><li>根据内存对象的存活周期不同，将内存划分为几块，虚拟机一般将内存分成新生代和老年代</li><li>新生代中有大量对象死去和少量对象存活，因此使用复制算法</li><li>老年代对象的存活率极高，没有额外的空间对他进行分配担保，所以采用标记清除或者标记整理算法</li></ol></li></ol><h2 id="八、垃圾收集器"><a href="#八、垃圾收集器" class="headerlink" title="八、垃圾收集器"></a>八、垃圾收集器</h2><ol><li><p>Serial：单线程，基于复制算法。垃圾收集时，需要STW</p></li><li><p>ParNew：Serial的多线程版本，也需要STW，复制算法</p></li><li><p>Parallel Scavenge：新生代收集器，复制算法，并发的多线程收集器，目标是保证一个可控的吞吐量。与ParNew不同的是GC自动调节策略</p></li><li><p>Serial Old：Serial收集器的老年代版本，单线程，使用标记整理</p></li><li><p>CMS：以获得最短停顿时间为目标的收集器</p><ol><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除</li></ol><p>产生大量的空间碎片，标记清除算法</p></li><li><p>G1： 标记整理算法实现，精确的控制停顿</p><ol><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ol><p>G1将堆内存大小相等的Region，G1跟踪每个区域的垃圾大小，后台维护一个优先级列表，根据用户允许的停顿时间，优先回收价值最大的区域。</p></li></ol><h2 id="九、CMS垃圾回收过程"><a href="#九、CMS垃圾回收过程" class="headerlink" title="九、CMS垃圾回收过程"></a>九、CMS垃圾回收过程</h2><p>基于标记清除</p><ol><li>初始标记。主要标记GCroot开始的下级，该过程会STW，但是根GCroot关联的对象不会很多，过程快</li><li>并发标记。多线程向下的标记所有关联的对象，耗时长但不会阻塞工作线程</li><li>重新标记。修正并发标记期间，因用户程序继续运作导致标记发生变动的那一部分对象的标记记录</li><li>并发清除。由于不需要移动存活对象，该阶段也是与用户线程同时进行，清理标记已死的对象。</li></ol><p>产生的问题：</p><ol><li>并发回收导致CPU资源紧张</li><li>无法清理浮动垃圾。并发标记和并发清理阶段，用户线程还在运行，则还会有新的垃圾产生。</li><li>并发失败。用户线程不断的生成垃圾，所以还需要预留足够的内存给用户线程使用。要是预留的内存都无法满足需要，就会并发失败。就会STW，启用Serial Old来重新进行垃圾回收，停顿时间过长</li><li>内存碎片化问题。导致大对象无法分配，不得不提前触发一次FullGc</li></ol><h2 id="十、G1垃圾回收过程"><a href="#十、G1垃圾回收过程" class="headerlink" title="十、G1垃圾回收过程"></a>十、G1垃圾回收过程</h2><p>采用面向局部收集的思路和基于Region的内存分布形式，JDK9以后默认的垃圾收集器。</p><p>从整体上看是基于标记清理算法实现，从局部上看（两个Region之间）基于标记复制算法实现。</p><ol><li>初始标记。仅仅只是标记一下GC roots能直接关联的对象，并且修改TAMS指针，让下一阶段用户线程运行时，能正确地在可用的Region中分配对象。该阶段需要停顿线程</li><li>并发标记。从GCroot开始对堆中对象进行可达性分析，找出要回收的所有对象。还要处理SATB记录下的在并发时有引用变动的对象</li><li>最终标记。对用户线程暂停，处理并发阶段结束后仍遗留下来的最后那少量的SATB记录</li><li>筛选回收。更新Region的统计数据，对Region的回收价值和成本进行排序，根据用户所期望的停顿时间来执行回收计划。然后把要回收的Region中存活对象复制到空Region中，再清理掉旧Region的全部空间。设计存活对象的移动，需要暂停用户线程。</li></ol><h2 id="十一、一次完整的GC过程"><a href="#十一、一次完整的GC过程" class="headerlink" title="十一、一次完整的GC过程"></a>十一、一次完整的GC过程</h2><p>Java堆内存划分：</p><p>堆被划分为新生代和老年代。新生代占1/3，老年代占2/3，新生代有三个分区：Eden，from survivor，to survivor  默认占比是8：1：1</p><p>新生代的垃圾回收后只有少量对象存活，所以选用复制算法，只需要少量的复制成本就可以回收</p><p>老年代的垃圾回收通常使用标记清理或标记整理算法</p><p>转化流程：</p><ul><li><p>对象优先在Eden分配。当 eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</p><ul><li><p>在 Eden 区执行了第一次 GC 之后，存活的对象会被移动到其中一个 to Survivor 分区；</p></li><li><p>Eden 区再次 GC，这时会采用复制算法，将 Eden 和 from 区一起清理，存活的对象会被复制到 to 区；</p></li><li><p>移动一次，对象年龄加 1，对象年龄大于一定阀值会直接移动到老年代。GC年龄的阀值可以通过参数 -XX:MaxTenuringThreshold 设置，默认为 15；</p></li><li><p>动态对象年龄判定：Survivor 区相同年龄所有对象大小的总和 &gt; (Survivor 区内存大小 * 这个目标使用率)时，大于或等于该年龄的对象直接进入老年代。其中这个使用率通过 -XX:TargetSurvivorRatio 指定，默认为 50%；</p></li><li><p>Survivor 区内存不足会发生担保分配，超过指定大小的对象可以直接进入老年代。</p></li></ul></li><li><p>大对象直接进入老年代，大对象就是需要大量连续内存空间的对象（比如：字符串、数组），为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。</p></li><li><p>老年代满了而<strong>无法容纳更多的对象</strong>，Minor GC 之后通常就会进行Full GC，Full GC 清理整个内存堆 – <strong>包括年轻代和老年代</strong>。</p></li></ul><h2 id="十二、Minor-GC和Full-GC有什么不同"><a href="#十二、Minor-GC和Full-GC有什么不同" class="headerlink" title="十二、Minor GC和Full GC有什么不同"></a>十二、Minor GC和Full GC有什么不同</h2><p>Minor Gc:只收集新生代的GC</p><p>Full Gc：收集整个堆，包括新生代，老年代，元空间等所有部分的模式</p><p>Minor GC触发条件：当Eden区满时，触发MinorGc</p><p>Full Gc触发条件：</p><ol><li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存。如果发现统计数据说之前Minor GC的平均晋升大小比目前old gen剩余的空间大，则不会触发Minor GC而是转为触发full GC。</li><li>老年代空间不够分配新的内存（或永久代空间不足，但只是JDK1.7有的，这也是用元空间来取代永久代的原因，可以减少Full GC的频率，减少GC负担，提升其效率）。</li><li>由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。</li><li>调用System.gc时，系统建议执行Full GC，但是不必然执行。</li></ol><h2 id="十三、空间分配担保原则"><a href="#十三、空间分配担保原则" class="headerlink" title="十三、空间分配担保原则"></a>十三、空间分配担保原则</h2><p>JVM有一个老年代空间分配担保机制来保证对象能够进入老年代</p><ol><li>每次youngGC前会先检查老年代最大可用连续空间大于新生代 所有对象</li><li>如果大于就直接YoungGC</li><li>如果不够，则检查-XX：HandlePromotionFailure参数是否允许担保失败</li><li>若允许就会判断当前老年代连续空间是否大于历次晋升到老年代对象的平均大小</li><li>如果大于就YoungGC，否则如果小于</li><li>或者不允许担保失败的化就会进行FullGc</li></ol><h2 id="十四、类加载过程"><a href="#十四、类加载过程" class="headerlink" title="十四、类加载过程"></a>十四、类加载过程</h2><p>虚拟机把描述类的数据加载到内存里面，并对数据进行校验、解析和初始化，最终变成可以被虚拟机直接使用的class对象；</p><ol><li><p>加载</p><ol><li>通过类的全限定性类名获取类的二进制流</li><li>将二进制流的静态存储结构转化为方法区的运行时数据区</li><li>在堆中为该类生成一个class对象</li></ol></li><li><p>验证</p><p>验证CLASS文件中的字节流信息符合虚拟机的要求，不会威胁到JVM</p></li><li><p>准备</p><p>为class对象的静态变量分配内存，初始化其值</p></li><li><p>解析</p><p>主要完成符号引用转化成直接引用</p></li><li><p>初始化</p><p>执行类中定义的java代码。调用类构造器的过程</p></li></ol><h2 id="十五、JVM调优"><a href="#十五、JVM调优" class="headerlink" title="十五、JVM调优"></a>十五、JVM调优</h2><p>jvisualvm</p><p>JVM调优的目的是为了减少GC，减少FULL GC也就是减少STW</p><p>对你系统程序的压力预估</p><p>调大新生代的内存，不让老年代的对象越来约多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JVM面经&quot;&gt;&lt;a href=&quot;#JVM面经&quot; class=&quot;headerlink&quot; title=&quot;JVM面经&quot;&gt;&lt;/a&gt;JVM面经&lt;/h1&gt;&lt;h2 id=&quot;一、JMM&quot;&gt;&lt;a href=&quot;#一、JMM&quot; class=&quot;headerlink&quot; title=&quot;一、J</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="JVM" scheme="https://a2914475618.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://a2914475618.github.io/2021/10/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://a2914475618.github.io/2021/10/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-10-11T12:26:35.000Z</published>
    <updated>2022-03-10T10:41:03.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式的目的：</p><p>解决耦合性，内聚性，可维护性，重用性，灵活性等问题</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><h3 id="一、单一职责原则"><a href="#一、单一职责原则" class="headerlink" title="一、单一职责原则"></a>一、单一职责原则</h3><p>⼀个类、接⼝或⽅法只负责⼀个职责，降低代码复杂度以及变更引起的⻛险。  </p><p>只要类足够简单，可以再方法级别遵守单一职责原则。</p><h3 id="二、接口隔离原则"><a href="#二、接口隔离原则" class="headerlink" title="二、接口隔离原则"></a>二、接口隔离原则</h3><p>一个类对另一个类的依赖应该建立在最小的接口上，防止实现不必要的方法。</p><p>将接口拆分为独立的最小几个接口。</p><h3 id="三、依赖倒置原则"><a href="#三、依赖倒置原则" class="headerlink" title="三、依赖倒置原则"></a>三、依赖倒置原则</h3><ol><li>高层模块不应该依赖底层模块、二者都应该依赖抽象</li><li>抽象不应该依赖于细节，细节应该依赖于抽象</li><li>依赖倒置的中心思想是面向接口编程</li></ol><p>抽象的东西要稳定的多</p><p>依赖关系传递的三种方式：</p><ol><li>接口传递</li><li>构造方法传递</li><li>setter方式传递</li></ol><p>底层模块尽量都要有抽象类或接口，或者两者都有，程序的稳定性更好</p><p>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化</p><h3 id="四、里式替换原则"><a href="#四、里式替换原则" class="headerlink" title="四、里式替换原则"></a>四、里式替换原则</h3><p>所有引用基类的地方必须能透明地使用子类的对象</p><p>在使用继承时，遵循里式替换原则，再子类中尽量不要重写父类的方法</p><p>继承实际是让两个类的耦合性增强了</p><p>解决方法：原来的父类和子类都都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合，组合等关系代替。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211014151059.png"></p><h3 id="五、开闭原则"><a href="#五、开闭原则" class="headerlink" title="五、开闭原则"></a>五、开闭原则</h3><p>对扩展（提供方）开放，对修改（使用方）关闭。</p><p>用抽象构建框架、用实现扩展细节。</p><p>软件设计的核心。</p><h3 id="六、迪米特法则"><a href="#六、迪米特法则" class="headerlink" title="六、迪米特法则"></a>六、迪米特法则</h3><p>一个对象应该对其他对象保持最少的了解，对于被以来的类不管多么复杂，都尽量将逻辑封装在类的内部。</p><p>又叫最少知道原则。只与直接的朋友进行通信</p><p><strong>直接的朋友</strong>：B类作为A类的成员变量，B类的对象作为A类方法的参数，B类作为A类方法的返回值。</p><p>让每个类都减少了不必要的依赖。</p><p>避免在类中的局部变量不是直接的朋友。</p><h3 id="七、合成复用原则"><a href="#七、合成复用原则" class="headerlink" title="七、合成复用原则"></a>七、合成复用原则</h3><p>原则是尽量使用合成、聚合的方式，而不是使用继承。</p><p>依赖：A的对象在B类方法参数里</p><p>聚合：A的实例在B的成员变量里  表示的是整体和部分的关系。整体和部分可以分开。相当于电脑类 与  鼠标类和键盘类 </p><p>组合：B的实例被创建时A的实例一同被创建。也是整体与部分的关系。整体与部分不可以分开。类似于Head类和Person类</p><p>关联关系：类与类之间的关联关系</p><ol><li>单向一对一  people对id</li><li>双向一对一  people与id  id对people</li></ol><h2 id="java设计模式"><a href="#java设计模式" class="headerlink" title="java设计模式"></a>java设计模式</h2><p>设计模式类型：</p><ol><li><p><strong>创建型模式</strong></p><p><strong>单例模式</strong>、抽象工厂模式、原型模式、建造者模式、<strong>工厂模式</strong></p></li><li><p><strong>结构性模式</strong></p><p>适配器模式、桥接模式、<strong>装饰模式</strong>、组合模式、外观模式、享元模式、<strong>代理模式</strong></p></li><li><p><strong>行为型模式</strong></p><p>模板方法模式、命令模式、访问者模式、迭代器模式、<strong>观察者模式</strong>、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式</p></li></ol><h3 id="1、创建型模式"><a href="#1、创建型模式" class="headerlink" title="1、创建型模式"></a>1、创建型模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>采取一定的方法保证软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得对象实例的方法。</p><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><p>在类装载时完成实例化。可以避免线程同步。</p><p>缺点是没有达到懒加载的效果。如果从开始至终从未使用过这个实例，会造成内存浪费。</p><p>静态常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式(静态变量)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构造器私有化, 外部能new</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构造器私有化, 外部能new</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123; <span class="comment">// 在静态代码块中，创建单例对象</span></span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><p>当用到构造方法时才会去创建，可以起到懒加载的效果</p><p>——线程不安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，当使用到该方法时，才去创建 instance</span></span><br><span class="line"><span class="comment">//即懒汉式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程不安全的原因：在多线程下，一个线程进入了if判断语句块，还没来得及往下执行，另一个线程也通过了这个判断语句，便会产生多个实例。</p><p>所以不能在多线程的环境下使用</p><p>——-线程安全，同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式(线程安全，同步方法)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line"><span class="comment">//即懒汉式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决了线程不安全的问题。</p><p>但是效率太低，每个线程在想获得类的实例的时候。执行getInstance方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该实例，直接return就行了。</p><p>————同步代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Singleton &#123;</span><br><span class="line">private static volatile Singleton instance;</span><br><span class="line"></span><br><span class="line">private Singleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static synchronized Singleton getInstance() &#123;</span><br><span class="line">if(instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">synchronized (Singleton.class) &#123;</span><br><span class="line"></span><br><span class="line">instance &#x3D; new Singleton();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接不推荐使用</p><p>只要进入到if中就会创建多个实例。</p><h5 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式(线程安全，同步方法)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题, 同时解决懒加载问题</span></span><br><span class="line"><span class="comment">//同时保证了效率, 推荐使用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用volatile使得更改后可以刷新到内存。通过两次检查，延迟加载，线程安全，效率较高。</p><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态内部类完成， 推荐使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个静态内部类,该类中有一个静态属性 Singleton</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，直接返回SingletonInstance.INSTANCE</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当外部类被装载时，静态内部类并不会被装载。</p><p>采用了类装载的机制来保证初始化实例时只有一个线程。</p><p>调用getInstance方法时，才会装载该类，从而完成Singleton的实例化。</p><p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，jvm帮我们保证了线程的安全性，在类进行初始化的时候，别的线程是无法进入的。</p><h5 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用枚举，可以实现单例, 推荐</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">INSTANCE; <span class="comment">//属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过  Singleton.INSTANCE进行调用。</span></span><br></pre></td></tr></table></figure><p>不仅能避免多线程同步的问题，还能防止反序列化重新创建新的对象。</p><p>java的作者推荐使用。Josh Bloch</p><p><strong>JDK中的Runtime类</strong></p><p>实际上是使用了饿汉式创建Runtime的类</p><p><strong>单例模式注意事项和细节说明</strong></p><p>当想要实例化一个单例类的时候，必须记住使用相应的获取对象的方法，而不是使用New</p><p><strong>单例使用的场景</strong></p><ol><li>需要频繁的进行创建和销毁的对象。</li><li>工具类对象</li><li>频繁访问数据库或文件的对象。比如数据源、session工厂</li></ol><h3 id="2、结构型模式"><a href="#2、结构型模式" class="headerlink" title="2、结构型模式"></a>2、结构型模式</h3><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>将某个类的接口转换成客户端期望的另一个接口表示，主要的目的是兼容性，让原本因接口不匹配的不能一起工作的两个类可以协同工作。别名为包装器。</p><p>属于结构型模式</p><p>分为三类：类适配器模式、对象适配器模式、接口适配器模式</p><p>src  适配器源  被适配的类</p><p>dst   目标源</p><h5 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h5><p>Adapter类  通过继承src类，实现dst类接口，完成src-&gt;dst的适配。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211013191204.png"></p><p>在我看来：类适配器模式就是通过适配器继承被适配的类，从而拿到该类的变量与方法，然后再实现一个要转换的目标接口，从而实现它的方法，重写方法时能够对被适配的类的功能进行修改，达到适配的功能。从而一个类依赖于目标接口，就可以达到适配的功能。</p><p>被适配的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line"><span class="comment">//输出220V的电压</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;电压=&quot;</span> + src + <span class="string">&quot;伏&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>适配器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">Voltage220V</span> <span class="keyword">implements</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//获取到220V电压</span></span><br><span class="line"><span class="keyword">int</span> srcV = output220V();</span><br><span class="line"><span class="keyword">int</span> dstV = srcV / <span class="number">44</span> ; <span class="comment">//转成 5v</span></span><br><span class="line"><span class="keyword">return</span> dstV;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依赖该接口的类   因为适配器类实现了该接口  所以可以直接依赖该适配器类进行适配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//充电</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IVoltage5V iVoltage5V)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(iVoltage5V.output5V() == <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;电压为5V, 可以充电~~&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (iVoltage5V.output5V() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;电压大于5V, 不能充电~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Client类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; === 类适配器模式 ====&quot;</span>);</span><br><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">phone.charging(<span class="keyword">new</span> VoltageAdapter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h5><ol><li>基本思路和类适配器相同，只是将适配器类做修改，不是继承src类，而是持有src类的实例，已解决兼容性的问题。</li><li>根据合成复用原则，再系统中尽量用关联关系来代替继承关系</li><li>对象适配器是适配器最常用的一种</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211014092444.png"></p><p>在我看来：也就是把类适配器里的继承改成了对象适配里的聚合，在适配器里引用了被适配的类的实例，其他没有改变。</p><p>被适配的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line"><span class="comment">//输出220V的电压，不变</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;电压=&quot;</span> + src + <span class="string">&quot;伏&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>适配器类  注意：这里并没有继承被适配的类，而是关联了被适配的类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span>  <span class="keyword">implements</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Voltage220V voltage220V; <span class="comment">// 关联关系-聚合</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造器，传入一个 Voltage220V 实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VoltageAdapter</span><span class="params">(Voltage220V voltage220v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.voltage220V = voltage220v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != voltage220V) &#123;</span><br><span class="line"><span class="keyword">int</span> src = voltage220V.output220V();<span class="comment">//获取220V 电压</span></span><br><span class="line">System.out.println(<span class="string">&quot;使用对象适配器，进行适配~~&quot;</span>);</span><br><span class="line">dst = src / <span class="number">44</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;适配完成，输出的电压为=&quot;</span> + dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dst;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依赖适配接口的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//充电</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IVoltage5V iVoltage5V)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(iVoltage5V.output5V() == <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;电压为5V, 可以充电~~&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (iVoltage5V.output5V() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;电压大于5V, 不能充电~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; === 对象适配器模式 ====&quot;</span>);</span><br><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">phone.charging(<span class="keyword">new</span> VoltageAdapter(<span class="keyword">new</span> Voltage220V()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h5><p>又被称为缺省适配器模式</p><p>当不需要全部实现接口提供的方法时，可以设计一个抽象类接口，并为该接口中每个方法提供一个默认实现，那么该抽象类的子类可以有选择性的覆盖父类中的某些方法来实现需求</p><p>适用于一个接口不想适用其所有的方法的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211014131230.png"></p><p>在我看来：也就是通过一个抽象的类实现接口，默认实现方法，然后子类继承重写需要的方法。这个抽象类就起到了适配的作用。</p><p>源接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器类   抽象类  对接口的方法默认实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在AbsAdapter 我们将 Interface4 的方法进行默认实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsAdapter</span> <span class="keyword">implements</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用匿名内部类重写自己关心的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">AbsAdapter absAdapter &#x3D; new AbsAdapter() &#123;</span><br><span class="line">&#x2F;&#x2F;只需要去覆盖我们 需要使用 接口方法</span><br><span class="line">@Override</span><br><span class="line">public void m1() &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;使用了m1的方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">absAdapter.m1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>适配器模式在Springmvc中Dispathche源码适用场景：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211014135033.png"></p><p>spring定义了一个适配接口就是图中的HandlerAdapter，里面核心的是support和handler两个方法。</p><p>DispathServlet从request中拿到controller类去HandlerAdapter类里找到对应的适配器类，该适配器代替controller执行相应的方法然后返回modelAndView。</p><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><ol><li>将实现与抽象放在两个不同的类层次中，使得=两个层次可以独立改变。</li><li>一种结构性设计模式</li><li>Bridge模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。主要特点就是把抽象与实现分离开来，从而可以保持各个部分的独立性</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211013165407.png"></p><p>在我看来也就是：将原来相耦合的两个类分离，然后用一个抽象类相当于桥，里面引用了一个接口，B类实现了接口的方法，A类继承了该抽象类，重写抽象类的方法。然后A类要调用B类的方法时，通过父类抽象类引用了接口，使得可以调用B类方法。从而抽象类就是桥的作用。</p><p>举个例子：</p><p>品牌 Brand  为一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>phone为一个抽象类,他聚合了Brand接口，他自己的方法本质上是调用了接口的方法，起到了桥的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合品牌</span></span><br><span class="line"><span class="keyword">private</span> Brand brand;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.brand.open();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">brand.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">brand.call();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vivo类实现了Brand类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vivo</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; Vivo手机开机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; Vivo手机关机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; Vivo手机打电话 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>折叠手机类继承了Phone类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//折叠式手机类，继承 抽象类 Phone</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FoldedPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FoldedPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(brand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.open();</span><br><span class="line">System.out.println(<span class="string">&quot; 折叠样式手机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.close();</span><br><span class="line">System.out.println(<span class="string">&quot; 折叠样式手机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.call();</span><br><span class="line">System.out.println(<span class="string">&quot; 折叠样式手机 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>桥接模式在Jdbc中源码分析</p><p>jdbc中的Driver接口，如果从桥接模式来看，Driver就是一个接口，下面可以有Mysql的Driver，Oracle的Driver，这些就是接口实现类。</p><p>Driver和Connection之间是通过DriverMannger类进行桥接的。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211013182638.png"></p><p>适用场景：对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p><p>常见的场景（可分为两个维度）：</p><ol><li>jdbc驱动程序</li><li>银行转账系统<ol><li>转账分类</li><li>转账用户类型</li></ol></li><li>消息管理<ol><li>消息类型</li><li>消息分类</li></ol></li></ol><h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><p>定义：动态的将新功能附加到对象上。在对象扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则。</p><p>方案一：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015091302.png"></p><p>尽管增加一个类是扩展，没有耦合，但是当增加一个调料时，就会增加更多的类，会引起类爆炸。</p><p>方案二：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015091552.png"></p><p>将调料内置到抽象类中，子类继承时默认带有该调料。但是有些咖啡不一定有这种调料。所以还需要添加方法判断。在增加或者删除调料种类时，代码的维护量很大。</p><p>方案三：装饰者模式</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015091939.png"></p><p>在我看来：抽象类Drink就是一个最大的超类，然后让A类和B类都是他的子孙类，装饰器类继承+组合Drink类，从而B类就可以在构造方法中传入A类，起到装饰A类的作用。</p><p>Drink类 超类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String des; <span class="comment">// 描述</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> price = <span class="number">0.0f</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(String des)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.des = des;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算费用的抽象方法</span></span><br><span class="line"><span class="comment">//子类来实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Cof类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span>  <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LongBlack类  继承Cof类  使用超类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LongBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">setDes(<span class="string">&quot; longblack &quot;</span>);</span><br><span class="line">setPrice(<span class="number">5.0f</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Drink obj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Drink obj)</span> </span>&#123; <span class="comment">//组合</span></span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"><span class="keyword">this</span>.obj = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// getPrice 自己价格</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + obj.cost();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// obj.getDes() 输出被装饰者的信息</span></span><br><span class="line"><span class="keyword">return</span> des + <span class="string">&quot; &quot;</span> + getPrice() + <span class="string">&quot; &amp;&amp; &quot;</span> + obj.getDes();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Milk类 继承装饰类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(obj);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">setDes(<span class="string">&quot; 牛奶 &quot;</span>);</span><br><span class="line">setPrice(<span class="number">2.0f</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰者模式在JDK应用的源码分析</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015103834.png"></p><p>这里的FilterInputStream就是一个装饰者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">Closeable</span></span>&#123;&#125; <span class="comment">//是一个抽象类，即Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123; <span class="comment">//是一个装饰者类Decorator</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">volatile</span> InputStream in <span class="comment">//被装饰的对象 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、行为型模式"><a href="#3、行为型模式" class="headerlink" title="3、行为型模式"></a>3、行为型模式</h3><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><ol><li><p>为一个对象提供一个替身，以控制这个对象的访问。即通过代理对象访问目标对象，这样的好处是：</p><p>可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</p></li><li><p>被代理的对象可以是远程对象，创建开销大的对象或需要安全控制的对象。</p></li><li><p>代理的形式有三种：</p><ol><li>静态代理</li><li>动态代理（JDK代理、接口代理）</li><li>Cglib代理（可以在内存动态的创建对象，而不需要实现接口，他是属于动态代理的范畴）</li></ol></li></ol><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p>在使用时，需要定义接口或者父类，被代理对象（即目标对象）与代理对象一起实现相同的接口或者是继承相同父类</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211019150046.png"></p><p>在我看来，就是让代理对象与被代理对象同时继承接口，然后代理对象在成员变量里聚合被代理对象，调用被代理对象执行方法。</p><p>代理接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>; <span class="comment">// 授课的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理目标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 老师授课中  。。。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理对象,静态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDaoProxy</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ITeacherDao target; <span class="comment">// 目标对象，通过接口来聚合</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TeacherDaoProxy</span><span class="params">(ITeacherDao target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;开始代理  完成某些操作。。。。。 &quot;</span>);<span class="comment">//方法</span></span><br><span class="line">target.teach();</span><br><span class="line">System.out.println(<span class="string">&quot;提交。。。。。&quot;</span>);<span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//创建目标对象(被代理对象)</span></span><br><span class="line">TeacherDao teacherDao = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象, 同时将被代理对象传递给代理对象</span></span><br><span class="line">TeacherDaoProxy teacherDaoProxy = <span class="keyword">new</span> TeacherDaoProxy(teacherDao);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过代理对象，调用到被代理对象的方法</span></span><br><span class="line"><span class="comment">//即：执行的是代理对象的方法，代理对象再去调用目标对象的方法 </span></span><br><span class="line">teacherDaoProxy.teach();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优点：在不修改目标对象的功能前提下，能通过代理对象对目标功能扩展。</p><p>缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类</p><p>一旦增加接口方法，目标对象与代理对象都要维护。</p><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><ol><li>代理对象不需要实现接口，目标对象需要实现接口，否则不能使用</li><li>代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象。</li><li>动态代理也叫JDK代理，接口代理。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211019153257.png"></p><p>在我看来，这个无非就是利用jdk的api，然后能够通过传入一个目标对象，动态的在内存中创建出代理对象，并在匿名内部类的事件对象里增强方法。</p><p>代理接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>; <span class="comment">// 授课方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目标对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 老师授课中.... &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//维护一个目标对象 , Object</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器 ， 对target 进行初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//给目标对象 生成一个代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                                          InvocationHandler h)</span></span><br><span class="line"><span class="comment">                                          </span></span><br><span class="line"><span class="comment">            //1. ClassLoader loader ： 指定当前目标对象使用的类加载器, 获取加载器的方法固定</span></span><br><span class="line"><span class="comment">            //2. Class&lt;?&gt;[] interfaces: 目标对象实现的接口类型，使用泛型方法确认类型</span></span><br><span class="line"><span class="comment">            //3. InvocationHandler h : 事情处理，执行目标对象的方法时，会触发事情处理器方法, 会把当前执行的目标对象方法作为参数传入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), </span><br><span class="line">target.getClass().getInterfaces(), </span><br><span class="line"><span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;JDK代理开始~~&quot;</span>);</span><br><span class="line"><span class="comment">//反射机制调用目标对象的方法</span></span><br><span class="line">Object returnVal = method.invoke(target, args);</span><br><span class="line">System.out.println(<span class="string">&quot;JDK代理提交&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//创建目标对象</span></span><br><span class="line">ITeacherDao target = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line"><span class="comment">//给目标对象，创建代理对象, 可以转成 ITeacherDao</span></span><br><span class="line">ITeacherDao proxyInstance = (ITeacherDao)<span class="keyword">new</span> ProxyFactory(target).getProxyInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// proxyInstance=class com.sun.proxy.$Proxy0 内存中动态生成了代理对象</span></span><br><span class="line">System.out.println(<span class="string">&quot;proxyInstance=&quot;</span> + proxyInstance.getClass());</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过代理对象，调用目标对象的方法</span></span><br><span class="line"><span class="comment">//proxyInstance.teach();</span></span><br><span class="line"></span><br><span class="line">proxyInstance.sayHello(<span class="string">&quot; tom &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h5><p>有时目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可使用目标对象子类来实现代理。</p><p>也叫做子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展。</p><p>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211019162904.png"></p><p>代理目标对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 老师授课中  ， 我是cglib代理，不需要实现接口 &quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//维护一个目标对象</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器，传入一个被代理的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个代理对象:  是 target 对象的代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 创建一个工具类</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">//2. 设置父类</span></span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line"><span class="comment">//3. 设置回调函数</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//4. 创建子类对象，即代理对象</span></span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重写  intercept 方法，会调用目标对象的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object arg0, Method method, Object[] args, MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;Cglib代理模式 ~~ 开始&quot;</span>);</span><br><span class="line">Object returnVal = method.invoke(target, args);</span><br><span class="line">System.out.println(<span class="string">&quot;Cglib代理模式 ~~ 提交&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//创建目标对象</span></span><br><span class="line">TeacherDao target = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"><span class="comment">//获取到代理对象，并且将目标对象传递给代理对象</span></span><br><span class="line">TeacherDao proxyInstance = (TeacherDao)<span class="keyword">new</span> ProxyFactory(target).getProxyInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行代理对象的方法，触发intecept 方法，从而实现 对目标对象的调用</span></span><br><span class="line">String res = proxyInstance.teach();</span><br><span class="line">System.out.println(<span class="string">&quot;res=&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>策略模式中，定义算法组，分别封装起来，让他们之间相互替换，此模式让算法的变化独立于使用算法的客户。</p><p>体现几个原则：</p><ol><li>把变化的代码从不变的代码中分离出来。</li><li>针对接口编程而不是具体类。</li><li>多用组合/聚合，少用继承（客户会通过组合方式使用策略）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015105854.png"></p><p>客户context 有成员变量strategy或者其他的策略接口 ,至于需要使用到哪个策略，我们可以在构造器中指定。</p><p><strong>策略模式的关键是：</strong></p><p>项目中的变化部分与不变部分</p><p><strong>核心思想是：</strong></p><p>多用组合/聚合，少用继承；用行为类组合，而不是行为的继承。更有弹性。</p><p>体现了“对修改关闭，对扩展开放”原则，客户端不用增加行为不用修改原有代码，只要添加一种策略即可。避免了使用多重转移语句。</p><p><strong>缺陷：</strong></p><p>每添加一个策略就要添加一个类，当策略过多会导致类数目庞大。</p><h4 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h4><p>外观模式也叫过程模式，外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层的接口，改接口使得系统更加容易使用。</p><p>通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，无需关心子系统的内部细节。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211225105600.png"></p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211225110246.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211225110336.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;p&gt;设计模式的目的：&lt;/p&gt;
&lt;p&gt;解决耦合性，内聚性，可维护性，重用性，灵活性等问题&lt;/p&gt;
&lt;h2 id=&quot;设计原则&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="设计模式" scheme="https://a2914475618.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mysql技术引擎</title>
    <link href="https://a2914475618.github.io/2021/10/09/Mysql%E6%8A%80%E6%9C%AF%E5%BC%95%E6%93%8E/"/>
    <id>https://a2914475618.github.io/2021/10/09/Mysql%E6%8A%80%E6%9C%AF%E5%BC%95%E6%93%8E/</id>
    <published>2021-10-09T05:54:30.000Z</published>
    <updated>2022-03-12T14:20:52.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql技术"><a href="#Mysql技术" class="headerlink" title="Mysql技术"></a>Mysql技术</h1><blockquote><p>声明：该文章为我学习Mysql技术引擎Innodb的笔记，欢迎查阅</p></blockquote><h2 id="1、Mysql体系结构和存储引擎"><a href="#1、Mysql体系结构和存储引擎" class="headerlink" title="1、Mysql体系结构和存储引擎"></a>1、Mysql体系结构和存储引擎</h2><h3 id="数据库和实例"><a href="#数据库和实例" class="headerlink" title="数据库和实例"></a>数据库和实例</h3><p>数据库：物理操作系统文件或其他形式文件类型的集合。数据库文件可以是frm、MYD、MYI、ibd结尾的文件。</p><p>实例：Mysql数据库由由后台线程以及一个共享内存区组成。共享内存可以被运行的后台线程所共享。数据库实例才是真正用于操作数据库文件的。</p><p>两者关系：</p><p>一个实例对应一个数据库，一个数据库对应一个实例。</p><p>Mysql被设计为一个单进程多线程的数据库，Mysql数据库实例在系统上的表现就是一个进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Linux通过命令ps观察数据库启动后的进程情况</span><br><span class="line">ps -ef | grep mysqlId</span><br><span class="line">&#x2F;&#x2F;Mysql数据库实例启动后，会在哪些位置查看配置文件</span><br><span class="line">mysql --help |grep my.cnf</span><br><span class="line">&#x2F;&#x2F;mysql数据库会以读取到的最后一个配置文件中的参数为准</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;找到数据文件的目录</span><br><span class="line">SHOW VARIABLES LIKE &#39;datadir&#39;\G    得到&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data&#x2F;</span><br><span class="line">&#x2F;&#x2F;查看文件夹下文件</span><br><span class="line">system ls-lh &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Mysql体系结构"><a href="#Mysql体系结构" class="headerlink" title="Mysql体系结构"></a>Mysql体系结构</h3><ol><li>数据库是文件的集合，是依照某种数据模型组织起来并存放于二级存储器中的数据集合</li><li>数据库实例是程序，是位于用户于操作系统之间的一层数据管理软件</li><li>应用程序只有通过数据库实例才能和数据库打交道</li></ol><p>mysql体系</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211009212246.png"></p><p>对应的解释：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211009212331.png"></p><p>mysql数据库区别于其他数据库的重要特点就是插件式的表存储引擎。</p><p><strong>存储引擎是基于表的，而不是数据库。</strong></p><h3 id="Mysql存储引擎"><a href="#Mysql存储引擎" class="headerlink" title="Mysql存储引擎"></a>Mysql存储引擎</h3><p><strong>存储引擎的好处</strong>：每个存储引擎都有各自的特点，能够根据具体的应用建立不同存储引擎表。</p><p><strong>常见的存储引擎：</strong></p><p>InnoDB存储引擎支持事务，主要面向在线事务处理OLTP的应用，特点是行锁设计，支持外键    ，支持类似于Oracle的非锁定读，默认读取操作不会产生锁。InnoDB存储引擎是默认的存储引擎。</p><p>InnoDB通过使用多版本并发控制（MVVC）来获得高并发性。提供了插入缓冲、二次写、自适应哈希索引、预读等高性能和高可用的功能。</p><p>对于表中的数据的存储，InnoDB采用了聚集的方式，每张表的存储按主键的顺序进行存放。如果没有显示的指定主键，InnoDB会为每一行生成一个6字节的ROWID，并以此作为主键。</p><p>=================================================================</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看当前数据库所支持的存储引擎</span><br><span class="line">SHOW ENGINES\G;</span><br></pre></td></tr></table></figure><h3 id="连接Mysql"><a href="#连接Mysql" class="headerlink" title="连接Mysql"></a>连接Mysql</h3><p>连接Mysql操作是一个连接进程和Mysql数据库实例进行通信。本质上进程通信。</p><p>常用的进程通信方式有：</p><ol><li>管道</li><li>命名管道</li><li>命名字</li><li>TCP/IP套接字</li><li>UNIX域套接字</li></ol><p>TCP/IP:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192.168.0.101 -u david -p</span><br></pre></td></tr></table></figure><p>命名管道和共享内存：</p><p>两个需要通信的进程在同一台服务器上，必须在mysql配置文件仲启用-enable-named-pipe</p><p>UNIX域套接字：</p><p>只能在Mysql客户端和数据库实例在一台服务器上的情况下使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看套接字文件路径</span><br><span class="line">SHOW VARIABLES LIKE &#39;socket&#39;</span><br><span class="line">&#x2F;&#x2F;通过套接字文件路径连接</span><br><span class="line">mysql -udavid -S &#x2F;tmp&#x2F;mysql.sock</span><br></pre></td></tr></table></figure><h2 id="2、InnoDB存储引擎"><a href="#2、InnoDB存储引擎" class="headerlink" title="2、InnoDB存储引擎"></a>2、InnoDB存储引擎</h2><p>InnoDB是事务安全的Mysql存储引擎，是OLTP应用中核心表的首选存储引擎。</p><h3 id="2-1InnoDB体系架构"><a href="#2-1InnoDB体系架构" class="headerlink" title="2.1InnoDB体系架构"></a>2.1InnoDB体系架构</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015143846.png"></p><p>后台线程主要作用：</p><ol><li>负责刷新内存池中的数据</li><li>将已经修改的数据文件刷新到磁盘文件</li><li>保证数据库异常时InnoDB能回复到正常运行状态。</li></ol><h4 id="2-1-1-后台线程"><a href="#2-1-1-后台线程" class="headerlink" title="2.1.1 后台线程"></a>2.1.1 后台线程</h4><p><strong>Master   Thread</strong></p><p>核心后台线程</p><p>主要负责将缓冲池中的数据异步刷新到磁盘，保持数据一致性</p><p>包括脏页的刷新、合并插入缓冲、UNDO页的回收等。</p><p><strong>IO Thread</strong></p><p>InnoDB中大量使用AIO（Async  IO）处理写IO请求 ，这样可以极大的提高数据库性能。</p><p>IO Thread负责这些IO请求的回调处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看当前InnoDB的版本</span></span><br><span class="line">SHOW VARIABLES LIKE <span class="string">&#x27;innodb_version&#x27;</span>\G;</span><br><span class="line"><span class="comment">//查看io thread进程的参数</span></span><br><span class="line">SHOW VARIABLES LIKE <span class="string">&#x27;innodb_%io_threads&#x27;</span>\G;</span><br><span class="line"><span class="comment">//查看INNODB的所有状态参数</span></span><br><span class="line">SHOW ENGINE INNODB STATUS\G;</span><br></pre></td></tr></table></figure><p><strong>Purge Thread</strong></p><p>事务提交后，使用的undolog不再需要，需要PurgeThread来回收已经使用并分配的undo页。</p><p>用户可以在mysql数据库的配置文件中添加命令来启用独立的Purge Thread</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqlId]</span><br><span class="line">innodb_purge_thread&#x3D;1;</span><br></pre></td></tr></table></figure><p>InnoDB支持多个Purge Thread      为了进一步加快undo页的回收。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;innodb_purge_threads&#39;\G</span><br></pre></td></tr></table></figure><p><strong>Page Cleaner Thread</strong></p><p>将版本中脏页刷新操作放在单独的线程中来完成。</p><p>进一步减轻Master Thread工作以及对于用户查询线程的阻塞。</p><h4 id="2-1-2-内存"><a href="#2-1-2-内存" class="headerlink" title="2.1.2 内存"></a>2.1.2 内存</h4><p>1.<strong>缓冲池</strong></p><p>InnoDB基于磁盘存储，按页进行管理。可将其视为磁盘的数据库系统。</p><p>缓冲池是在cpu和磁盘之间的一块内存区域，起到cache的作用。</p><p>数据库读页时：</p><ol><li>将从磁盘读到的页放在缓冲池中，称为“FIX”</li><li>下一次读取相同页时，判断该页是否再缓冲池中，若在则直接命中</li><li>否则就读取磁盘</li></ol><p>数据库修改页时：</p><ol><li>先修改再缓冲池中的页，以一定的频率刷新到磁盘上。</li><li>并不是每次页更新时，而是通过Checkpoint机制刷新回到磁盘。</li></ol><p>缓冲池大小影响数据库性能。由于32为操作系统的限制。最多将该值设为3G，建议将数据库服务器都采用64位的操作系统。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;显示缓冲池容量大小</span><br><span class="line">SHOW VARIABLES LIKE &#39;innodb_buffer_pool_size&#39;\G</span><br></pre></td></tr></table></figure><p>缓冲池中缓存的数据页类型：</p><ol><li>索引页</li><li>数据页</li><li>undo页</li><li>插入缓冲</li><li>自适应哈希索引</li><li>InnoDB存储的锁信息</li><li>数据字典信息</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015151823.png"></p><p>允许有多个缓冲池实例。根据哈希值平均分配到不同缓冲池实例中。</p><p>减少数据库内部的资源竞争，增加并发处理能力。</p><p>通过参数innodb_buffer_pool_instance进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看缓冲池实例的个数</span><br><span class="line">SHOW VARIABLES LIKE &#39;innodb_buffer_pool_instance&#39;\G</span><br></pre></td></tr></table></figure><p>当然从5.6版本以后就可以再information_schema架构下的表INNNODB_BUFFER_POOL_STATS来观察缓冲池的状态。</p><p>2.<strong>LRU Iist、Free List、Flush List</strong></p><p>缓冲池是通过LRU算法进行管理的：</p><ul><li>频繁使用的页放在LRU列表的前端，最少使用页放在LRU列表的尾端</li><li>当缓冲池不能存放新读取到的页时，首先释放LRU列表中尾端的页。</li></ul><p>InnoDB存储引擎中，缓冲池默认大小为16KB。同样使用LRU算法对缓存进行管理。再InnoDB存储引擎中，还加入了Midpoint位置。</p><p>新读取到的页，虽然是最新访问的页，但是并不是直接放入到LRU列表首部，而是放到Midpoint位置。这个算法在InnoDB存储引擎下称为midpoint insertion strategy。默认配置下，该位置在LRU列表长度的5/8处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看midpoint位置</span><br><span class="line">SHOW VARIABLES LIKE &#39;innodb_old_blocks_pct&#39;\G;</span><br></pre></td></tr></table></figure><p>midpoint之前的称为new列表，之后的称为old列表。</p><p>普通的LRU算法在执行索引或数据的扫描操作时，可能会将热点数据从LRU列表中删除。下一次则又需要从磁盘中进行访问。</p><p>InnoDB引入了一个参数进一步管理LRU列表—–innodb_old_blocks_time</p><p>表示页读取到mid位置后还需要等待多久才会被加入到LRU列表的热端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL innodb_old_blocks_time&#x3D;1000;</span><br></pre></td></tr></table></figure><hr><p>当数据库刚启动时，LRU列表是空的，没有任何的页。页都存放在Free列表中。</p><ol><li>需要从缓冲池中分页时，首先从Free列表中查找是否有可用的空闲页</li><li>若有，则将该页从Free中删除，放入到LRU列表中</li><li>否则，根据LRU算法，淘汰LRU列表末尾的页，将内存空间分配给新的页。</li><li>从old到new  称为page made young   因为innodb_old_blocks_time导致没有从old到new称为page not made young</li></ol><p>SHOW ENGINE INNODB STATUS 显示的不是当前的状态，而是过去某个时间范围内Innodb存储引擎的状态。</p><p>InnoDB支持压缩页的功能，可以将原本的16KB页压缩为1KB、2KB、4KB、8KB，对于非16KB的页，是通过unzip_LRU列表进行管理的。</p><ol><li>unzip_LRU列表中对不同压缩页大小的页进行分别管理</li><li>通过<strong>伙伴算法</strong>进行内存的分配</li></ol><p>伙伴算法：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211015165405.png"></p><hr><p>在LRU列表中页被修改后，页被称为脏页。</p><p>脏页：缓冲池中的页和磁盘中的数据产生了不一致。</p><p>这个时候通过CHECKPOINT机制将脏页刷新回到磁盘，而Flush列表中的页即为脏页列表。需要注意的是，脏页既存在于LRU列表中，也存在FLUSH列表中。LRU列表用来管理缓冲池中页的可用性，Flush列表用来管理将页刷新回磁盘。</p><p>Flush列表页可以通过SHOW ENGINE INNODB STATUS来查看。Modified db pages 就显示了脏页的数量。</p><p>3.<strong>重做日志缓冲</strong></p><p>InnoDB引擎存储的内存区除了有缓冲池外，还有重做日志缓冲。</p><ol><li>InnoDB首先将重做日志信息先放入缓冲区</li><li>按照一定频率将其刷新到重做日志文件</li></ol><p>重做日志缓冲一般不需要设置的很大，一般情况下每一秒钟会将重做日志缓冲刷新到日志文件。只需保证每秒产生的事务量在缓冲大小之内即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看日志缓冲大小</span><br><span class="line">SHOW VARIABLES LIKE &#39;innodb_log_buffer_size&#39;\G</span><br></pre></td></tr></table></figure><p>在以下三种情况下会重做日志缓冲文件中的内容刷新到外部磁盘的重做日志文件中：</p><ol><li>Master Thread每一秒将重做日志缓冲刷新到重做日志文件</li><li>每个事务提交时会将重做日志缓冲刷新到重做日志文件</li><li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件中。</li></ol><p>4.<strong>额外的内存池</strong></p><p>在InnoDB存储引擎中，对内存的管理是通过一种称为<strong>内存堆</strong>的方式进行的。在对一些数据结构本身的内存进行分配时，需要从额外的内存池中进行申请，当该区域的内存不够时，会从缓冲池中进行申请。</p><h3 id="2-2-Checkpoint技术"><a href="#2-2-Checkpoint技术" class="headerlink" title="2.2 Checkpoint技术"></a>2.2 Checkpoint技术</h3><p>为了避免发生数据丢失的问题，当前事务数据库系统普遍都采用了Write Ahead Log策略——当事务提交时，先重做日志，再修改页。当由于发生宕机导致数据库数据丢失时通过重做日志来完成数据的恢复。</p><hr><p>Cheackpoint技术解决以下几个问题：</p><ol><li>缩短数据库的恢复时间</li><li>缓冲池不够用时，将脏页刷新到磁盘。</li><li>重做日志不可用时，刷新脏页</li></ol><p>如何解决</p><ul><li>当数据库发生宕机时，数据库不需要重做所有的日志，因为Checkpoint之前的页都已经刷新回到磁盘，顾数据库只需对Checkpoint后的重做日志进行回复。</li><li>当缓冲池不够用时，根据LRU算法会溢出最近最少使用的页，若此页是脏页，需强制执行Checkpoint，将脏页刷新到磁盘。</li><li>重做日志可以被重用的部分是指这些重做日志已经不在需要，若此时重做日志还需要使用，必须强制产生Checkpoint，将缓冲池中的页至少刷新到当前重做日志的位置。</li></ul><p>InnoDB是通过LSN(log sequence number)来标记版本的。</p><p>Checkpoint做的事就是将缓冲池中的脏页刷新回到磁盘。</p><p>不同之处在于每次刷新多少页到磁盘，从哪里取脏页，什么时候触发Checkpoint。InnoDB有两种Checkpoint：</p><ol><li><p>Sharp Checkpoint</p><p>发生在数据库关闭时将所有的脏页刷新回到磁盘。参数innodb_fast_shutdown=1。若在运行时使用Sharp Checkpoint那么数据库可用性会收到很大的影响。</p></li><li><p>Fuzzy Checkpoint</p><p>InnoDB中使用Fuzzy Checkpoint进行页的刷新。</p><p>只刷新一部分脏页，而不是刷新所有的脏页到磁盘。</p><ol><li><p>Master Thread Checkpoint</p><p>每秒或每10秒从缓冲池的脏页刷新一定比例的页回磁盘</p></li><li><p>FLUSH_LRU_LIST Checkpoint</p><p>检查LRU列表中是否有足够的可用空间操作发生在用户查询线程中，倘若没有100个可用页，那么InnoDB存储引擎会将LRU列表尾端的页移除。如果页中有脏页的话，需要进行Checkpoint。</p><p>从5.6以后，该检查单独放到了Page Cleaner中 参数innodb_lru_scan_depth控制LRU列表中可用页的数量</p></li><li><p>Async/Sync Flush Checkpoint</p><p>重做日志文件不可用时，需要强制将一些页刷新回磁盘。</p></li><li><p>Dirty Page too much Checkpoint</p><p>脏页数量太多，导致INNODB强制进行Checkpoint。保证缓冲池中有足够可用的页。innodb_max_dirty_pages_pct控制 当超过对应值时进行刷新。</p></li></ol></li></ol><h3 id="2-3Master-Thread工作方式"><a href="#2-3Master-Thread工作方式" class="headerlink" title="2.3Master Thread工作方式"></a>2.3Master Thread工作方式</h3><p>Master Thread 具有最高的线程优先级别。</p><h4 id="2-3-1-InnoDB-1-0x-版本之前的Master-Thread"><a href="#2-3-1-InnoDB-1-0x-版本之前的Master-Thread" class="headerlink" title="2.3.1 InnoDB 1.0x 版本之前的Master Thread"></a>2.3.1 InnoDB 1.0x 版本之前的Master Thread</h4><p>内部有多个循环(loop)组成：</p><ol><li>主循环(loop)</li><li>后台循环(backgroup loop)</li><li>刷新循环（flush loop)</li><li>暂停循环(suspend loop)</li></ol><p>1.主循环</p><p>大多数操作在这个循环中，主要包括两部分</p><ol><li><p>每秒钟操作</p><ol><li><p>日志刷新到磁盘，即使事务还没有提交（总是）</p><p>问：再大的事务为什么提交时间也很短？</p><p>即使某个事务还未提交，InnoDB存储引擎仍然每秒会将重做日志缓冲中的内容刷新到重做日志文件。</p></li><li><p>合并插入缓冲（可能）</p><p>判断当前一秒内发生的IO次数是否小于5次</p></li><li><p>至少刷新100个InnoDB的缓冲池中的脏页到磁盘（可能）</p><p>判断当前缓冲池中脏页的比例(buf_get_modified_ratio_pct)是否超过了配置文件中的(innodb_max_dirty_pages_pct默认为90)，如果超过，InnoDB认为需要做磁盘同步的操作，将100个脏页写入磁盘中。</p></li><li><p>当前用户没有活动，切换到后台循环（可能）</p></li></ol></li><li><p>每10秒钟操作</p><ol><li><p>刷新100个脏页到磁盘（可能的情况下）</p><p>判断过去10秒之内磁盘的IO操作是否小于200次，如果是，则将100个脏页刷新到磁盘。</p></li><li><p>合并至多5个插入缓冲（总是）</p><p>这个阶段不同于1秒时操作，他总会执行</p></li><li><p>将日志缓冲刷新到磁盘（总是）</p></li><li><p>删除无用的Undo页（总是）</p><p>判断当前事务系统中已经被删除的行为是否可以删除，比如有可能还有查询操作需要读取之前的版本中的undo信息。</p></li><li><p>刷新100个或者10个脏页到磁盘（总是）</p><p>判断缓冲池中脏页的比例(buf_get_modified_ratio_pct)，如果有超过70%脏页，则刷新100个脏页到磁盘，小于70%，则只刷新10%到磁盘。</p></li></ol></li></ol><p>2.后台循环</p><p>若当前没有用户活动（数据库空闲时）或者数据库关闭，就会切换到该循环。</p><p>执行以下操作：</p><ol><li>删除无用的Undo页（总是）</li><li>合并20个插入缓冲（总是）</li><li>跳回主循环（总是）</li><li>不断刷新100个页直到符合条件（可能，跳转到flush loop中完成）</li></ol><p>若flush loop中没有什么事情可以做了，InnoD存储引擎会切换到suspend_loop，将Master Thread挂起，等待事件的发生。若启用了InnoDB存储引擎，却没有使用任何InnoDB存储引擎的表，那么Master Thread总是 处于挂起的状态。</p><h4 id="2-3-2-InnoDB1-2x之前的Master-Thread"><a href="#2-3-2-InnoDB1-2x之前的Master-Thread" class="headerlink" title="2.3.2 InnoDB1.2x之前的Master Thread"></a>2.3.2 InnoDB1.2x之前的Master Thread</h4><p>之前版本的问题：InnoDB存储引擎最大只会刷新100个脏页到磁盘，合并20个插入缓冲。在写入密集的应用程序中，每秒可能会产生大于100个的脏页，如果是产生大于20个插入缓冲的情况，Master Thread会忙不过来。当发生宕机恢复时，由于很多数据还没有刷新回磁盘，导致恢复的时间可能需要很久。</p><p><strong>解决方案：</strong></p><p>①InnoDB提供了参数<strong>innodb_io_capacity</strong>，用来表示磁盘的IO吞吐量，默认值为200。刷新到磁盘页的数量，会按照innodb_io_capacity百分比进行控制。</p><ul><li>在合并插入缓冲时，合并插入缓冲的数量innodb_io_capacity值的5%</li><li>从缓冲区刷新脏页时，刷新脏页得数量为innodb_io_capacity</li></ul><p>因此可以根据存储设备拥有更高IO速度时，将这个参数调高一点，直到符合磁盘IO的吞吐量。</p><p>②参数<strong>innodb_max_dirty_pages_pct</strong>该值的默认值为90，意味着脏页占缓冲池超过百分之90，才会刷新100个脏页。如果内存足够或者数据库服务器压力大，刷新脏页速度反而会降低。</p><p>从1.0x版本开始<strong>innodb_max_dirty_pages_pct</strong>参数的默认值变为了75。既加快刷新脏页的频率，又保证了磁盘IO的负载。</p><p>③参数<strong>innodb_adaptive_flushing</strong>（自适应地刷新），影响每秒刷新脏页地数量。</p><p>原来的刷新规则：</p><p>脏页在缓冲池所占比例小于innodb_max_dirty_pages_pct时，不刷新脏页。大于innodb_max_dirty_pages_pct时，刷新100个脏页。</p><p>引入参数后刷新规则：</p><p>InnoDB存储引擎通过一个名为buf_flush_get_desired_flush_rate函数判断刷新脏页最合适的数量。该函数通过判断产生重做日志的速度决定最合适的刷新脏页数量。因此即使党脏页的比例小于innodb_max_dirty_pages_pct时，也会刷新一定量的脏页。</p><p>④之前每次进行full purge时，最多回收20个Undo页，现在引入了参数<strong>innodb_purge_batch_size</strong> 该参数可以控制每次full purge回收undo页的数量。</p><p>默认值为20可以进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global innodb_purge_batch_size&#x3D;50;</span><br></pre></td></tr></table></figure><h4 id="2-3-3Innodb-1-2x版本的Master-Thread"><a href="#2-3-3Innodb-1-2x版本的Master-Thread" class="headerlink" title="2.3.3Innodb 1.2x版本的Master Thread"></a>2.3.3Innodb 1.2x版本的Master Thread</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if InnoDB is idle</span><br><span class="line">srv_master_do_idle_tasks();</span><br><span class="line">else </span><br><span class="line">srv_master_do_active_tasks();</span><br></pre></td></tr></table></figure><p>srv_master_do_idle_tasks()就是之前版本中10秒的操作</p><p>srv_master_do_active_tasks()处理之前每秒的操作</p><p>对于刷新脏页的操作，从Master Thread分离到一个单独的Page Cleaner Thread，从而减轻了Master Thread工作。</p><h3 id="2-4InnoDB关键特性"><a href="#2-4InnoDB关键特性" class="headerlink" title="2.4InnoDB关键特性"></a>2.4InnoDB关键特性</h3><p>包括</p><ul><li>插入缓冲（Insert Buffer）</li><li>两次写</li><li>自适应哈希索引</li><li>异步IO</li><li>刷新邻接页</li></ul><h4 id="2-4-1-插入缓冲"><a href="#2-4-1-插入缓冲" class="headerlink" title="2.4.1 插入缓冲"></a>2.4.1 插入缓冲</h4><h5 id="2-4-1-1Insert-Buffer"><a href="#2-4-1-1Insert-Buffer" class="headerlink" title="2.4.1.1Insert Buffer"></a>2.4.1.1Insert Buffer</h5><p>Insert Buffer和数据页一样，都是物理页的一个组成部分。</p><p>InnoDB中，主键是行唯一的标识符。应用程序中行记录的插入顺序是按照主键递增的顺序进行插入的。插入聚集索引一般是顺序的，不需要磁盘的随机读取。</p><p>并不是所有的主键插入都是顺序的。主键类若是UUID这样的类，那么插入和辅助索引一样，同样是随机的。即使主键自增，插入的也是指定的值，而不是null值，同样导致插入非连续。</p><p>当一张表上有多个非聚集索引时，在进行插入操作时，数据页的存放还是按照主键进行顺序存放的，对于非聚集索引叶子结点的插入不再是顺序的，需要离散的访问非聚集索引页，从而随机读取导致了插入操作性能下降。<strong>这是因为B+树的特性决定了非聚集索引插入的离散性。</strong></p><p>某些情况下辅助索引的插入依然是顺序的，或者是比较顺序的。比如购买时间。</p><hr><p>InnoDB存储引擎的Insert Buffer，对于非聚集索引的插入或更新操作，不是每一次直接插入到索引页中，而是先判断插入的非聚集索引是否在缓冲池中，若在，直接插入。若不在，则先放到一个Insert Buffer对象。然后再以一定的频率和情况进行Insert Buffer和辅助索引页子结点的merge（合并）操作，这时通常能将多个插入合并到一个操作中，大大提高了非聚集索引插入的性能。</p><p>然而Insert Buffer需要同时满足以下两个条件：</p><ol><li>索引是辅助索引</li><li>索引不是唯一的</li></ol><p>满足条件时，InnoDB会使用Insert Buffer。应考虑这种情况：</p><p>应用程序进行大量的插入操作，都涉及了不唯一的非聚集索引，使用了Insert Buffer。若此时Mysql数据库发生了宕机，就会造成大量的Insert Buffer并没有合并到实际的非聚集索引中去。因此这时恢复需要几个小时。</p><p>辅助索引不能是唯一的，因为再插入缓冲中，数据库不去查找索引页来判断插入的记录的唯一性。如果去找肯定会有离散读取的情况发生，从而导致Insert Buffer失去意义。</p><h5 id="2-4-1-2-Change-Buffer"><a href="#2-4-1-2-Change-Buffer" class="headerlink" title="2.4.1.2 Change Buffer"></a>2.4.1.2 Change Buffer</h5><p>InnoDB 1.0x版本开始引入了Change Buffer。适用对象依然是非唯一的辅助索引。</p><p>从这个版本开始，InnoDB可以对DML操作都进行缓冲——INSERT,DELETE,UPDATE,他们分别是Insert Buffer，Delete Buffer（删除标记），Purge Buffer（进行删除）。</p><p>InnoDB存储引擎提供了参数<strong>innodb_change_buffering</strong>，用来开启各种Buffer选项。该参数可选(默认为all)</p><ol><li>inserts</li><li>deletes</li><li>purges</li><li>changes</li><li>all</li><li>none</li></ol><p>1.2x版本开始，可以通过参数innodb_change_buffer_max_size控制Change Buffer最大使用内存的数量。该值表示最多使用25%的缓冲池内存空间。最大有效值为50%。</p><h5 id="2-4-1-3-Insert-Buffer的内部实现"><a href="#2-4-1-3-Insert-Buffer的内部实现" class="headerlink" title="2.4.1.3 Insert Buffer的内部实现"></a>2.4.1.3 Insert Buffer的内部实现</h5><p>Insert Buffer的数据结构是一颗B+树。在Mysql 4.1之前的版本中每张表有一颗Insert Buffer B+树。而现在的版本中，全局只有一颗Insert Buffer B+树，<strong>负责对所有的表的辅助索引进行Insert Buffer</strong>。</p><p>这棵B+树放在共享表空间中，默认也就是ibdata1中。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021151837.png"></p><p>键值占9字节，space表示待插入记录所在表的表空间Id，Innodb中每个表有一个唯一的space id，通过该值可以查询是哪张表。</p><p>space 占4字节，maker 占1字节，offest表示页所在的偏移量，占4字节。</p><p>当一个辅助索引插入到页时（space，offset），该页如果不在缓冲池中，InnoDB根据上述规则构造一个键值，查询Insert Buffer这棵B+树，然后将记录插入到Insert Buffer B+树的叶子节点中。</p><p>插入到Insert Buffer叶子结点的记录，需要根据以下的规则进行构造</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021155112.png"></p><p>space、marker、offset和之前非叶子结点含义相同，共占用9字节。</p><p>metadata占用4个字节,其存储的内容如表</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021155551.png"></p><p><strong>IBUF_REC_OFFSET_COUNT</strong>用来排序每个记录进入Insert Buffer的顺序。通过这个顺序回放(replay)才能的到记录的正确值。</p><p>从Insert Buffer第5列开始，就是实际插入记录的各个字段了。因此比较原插入记录，Insert Buffe B+树的页子结点记录需要额外13字节的开销。</p><p>启用Insert Buffer索引后，辅助索引页中的记录可能被插到Insert Buffer B+树中，为了保证每次Merge Insert Buffer页必须成功，需要一个特殊的页来标记每个辅助索引页的可用空间。这个页的类型为Insert Buffer Bitmap。</p><p>每个Insert Buffer Bitmap用来追踪16384个辅助索引页，也就是256个区。每个Insert Buffer Bitmap页都在16384个页的第二页。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021161116.png"></p><h5 id="2-4-4-Merge-Insert-Buffer"><a href="#2-4-4-Merge-Insert-Buffer" class="headerlink" title="2.4.4 Merge Insert Buffer"></a>2.4.4 Merge Insert Buffer</h5><p>可能操作的几种情况：</p><p>1.辅助索引页被读取到缓冲池中</p><ol><li>执行正常的SELECT查询操作，检查Insert Buffer Bitmap页</li><li>确认该辅助索引页是否有记录存放在INsert Buffer中</li><li>若有，则将Insert Buffer B+树中该页的记录插入到该辅助索引页中。</li><li>对该页多次的记录操作通过一次操作合并到了原有的辅助索引页中。</li></ol><p>2.Insert Buffer Bitmap 追踪到该辅助索引页已无可用空间时</p><p>Insert Buffer Bitmap页用来追踪每个辅助索引页的可用空间，并至少有1/32的空间。若插入辅助索引记录时检测到插入记录后可用空间会小于1/32页，则会强制进行一个合并操作，即强制读取辅助索引页，将Insert Buffer B+树中该页的记录及待插入的记录插入到辅助索引页中。</p><p>3.Master Thread</p><p>在Master Thread线程中每秒或者每10秒会进行一次Merge Insert Buffer的操作，不同在于merge操作的页的数量不同。</p><p>在Master Thread中，执行merge操作不止一个页，根据srv_innodb_io_capactiy百分比决定真正合并多少个辅助索引页。</p><p>在Insert Buffer B+树中，辅助索引页根据(space,offset)已经排好序，可以根据(space,offset)排序顺序进行页的选择。对于Insert Buffer页的选择，InnoDB会随机选择Insert Buffer B+树中的一个页，读取该页中的space以及之后所需数量的页。若进行merge时，要进行merge表已经删除，此时可以直接丢弃已经被Insert/Change Buffer的胡数据记录。</p><h4 id="2-4-2-两次写"><a href="#2-4-2-两次写" class="headerlink" title="2.4.2 两次写"></a>2.4.2 两次写</h4><p>Insert Buffer带给InnoDB存储引擎的时性能上提示，两次写(doublewrite)带给InnoDB存储引擎的是数据页的可靠性。</p><hr><p><strong>部分写失效</strong></p><p>数据库宕机时，InnoDB正在写某个页列表，而这个页只写了一部分。导致数据丢失。</p><p>该问题无法通过重做日志文件进行恢复。原因：重做日志文件中记录的是对页的物理操作，如偏移量800，写“aaaa”记录。如果该页已经损坏，重做没有意义。</p><p><strong>doublewrite</strong>在应用重做日志文件前，用户需要一个页的副本，当写入失效发生时，先通过页的副本还原页，再进行重做。</p><p>InnoDB存储引擎中doublewrite体系架构：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211021183011.png"></p><p>doublewrite由两部分组成</p><ol><li>内存中的doublewrite buffer   大小2MB</li><li>物理磁盘上共享空间中连续的128个页，即两个区  大小2MB</li></ol><p><strong>两次写的过程</strong></p><p>对缓冲池中的脏页进行刷新时，不直接写磁盘</p><ol><li>通过memcpy函数将脏页先复制到内存中的doublewrite buffer</li><li>通过doublewrite buffer再分两次</li><li>每次1MB顺序地写入共享表空间地物理磁盘上</li><li>马上调用fsync函数，同步磁盘，避免缓冲写带来地问题</li></ol><p>doublewrite页是连续的，在完成doublewrite页的写入后，此时的写入则是离散的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看doublewrite运行情况</span><br><span class="line">show global status like &quot;innodb_dblwr%&quot;\G;</span><br></pre></td></tr></table></figure><p>参数<strong>Innodb_buffer_pool_pages_flushed</strong>表示当前从缓冲池中刷新到磁盘页的数量。</p><p>用户若需要统计数据库在生产环境中写入的量，最安全的方法还是根据<strong>Innodb_dblwr_pages_written</strong>进行统计。</p><p>参数<strong>skip_innodb_doublewrite</strong>可以禁止使用doublewrite功能，这时可能会发生写失效的问题。</p><h4 id="2-4-3-自适应哈希索引"><a href="#2-4-3-自适应哈希索引" class="headerlink" title="2.4.3 自适应哈希索引"></a>2.4.3 自适应哈希索引</h4><p>哈希查找时间复杂度为O（1），仅需一次就能找到。B+树查找次数取决于B+树的高度，生产环境中B+树高度一般为3<del>4层，故需要3</del>4次查询。</p><p>InnoDB存储引擎监控表上各索引页的查询。如果建立哈希索引可以带来速度提升，则建立哈希索引，称之为<strong>自适应哈希索引（AHI）</strong>。</p><p>AHI通过缓冲池中B+树页构造，无需为整张表构建哈希索引。InnoDB存储引擎根据访问频率和模式自动为<strong>热点页</strong>建立哈希索引。</p><p><strong>AHI要求对这个页的连续访问模式是一样的。</strong></p><blockquote><p>例如(a,b)的联合索引页<br>访问模式可以是如下情况:<br>where a=xxx<br>where a=xxx and b=xxx</p></blockquote><p>访问模式一样指的是查询条件一样。AHI还有如下要求：</p><ol><li>以该模式访问100次</li><li>页通过该模式访问了N次，其中N=页中记录*1/16</li></ol><p>启用AHI后，读取和写入速度可以提高2倍，辅助索引连接操作性能提高5倍。AHI是非常好的优化模式，设计思想是数据库自优化。</p><p><strong>注意</strong></p><ul><li>哈希索引只能用来搜索等值的查询（=），而不能用来做范围查询的（between  and  )</li><li>默认AHI为开启状态</li><li>参数innodb_adaptive_hash_index考虑是否禁用此特性</li></ul><h4 id="2-4-4-异步IO"><a href="#2-4-4-异步IO" class="headerlink" title="2.4.4 异步IO"></a>2.4.4 异步IO</h4><p>为提高磁盘操作性能，数据库都采用异步IO方式处理磁盘操作。</p><p>**AIO（Asynchronous IO)**用户在发出一个IO请求后立即发出另一个IO请求，当全部IO请求发送完毕后，等待所有IO操作完成，这就是AIO。</p><p>AIO的另一个优势就是可以进行 IO Merge操作，多个IO合并为1个IO，提高IOPS性能。</p><p>从1.1x开始，提供了内核级别的AIO支持，称为Native AIO。</p><p>参数<strong>innodb_use_native_aio</strong>可以通过开启和关闭Native AIO比较Innodb的性能。启用Native AIO，恢复速度提高75%</p><p>磁盘的写入操作则全部由AIO完成。</p><h4 id="2-4-5-刷新邻接页"><a href="#2-4-5-刷新邻接页" class="headerlink" title="2.4.5 刷新邻接页"></a>2.4.5 刷新邻接页</h4><p>工作原理为：当刷新一个脏页时，InnoDB存储引擎检测该页所在区的所有页，如果是脏页，那么一起刷新。</p><p>通过AIO可以将多以IO写入操作合并为一个IO操作。</p><p>InnoDB存储引擎从1.2x提供参数<strong>innodb_flush_neighobrs</strong>，用来控制是否启用该特性。</p><ol><li><p>对于传统机械硬盘建议启用特性</p></li><li><p>对于固态硬盘有着超高的IOPS性能的磁盘，建议关闭特性。</p><p>原因：可能将不怎么脏的页进行写入，而该页之后又很快变成脏页</p></li></ol><h3 id="2-5-启动、关闭与恢复"><a href="#2-5-启动、关闭与恢复" class="headerlink" title="2.5 启动、关闭与恢复"></a>2.5 启动、关闭与恢复</h3><p>参数<strong>innodb_fast_shutdown</strong>影响着表的存储引擎为InnoDB的行为。默认值为1</p><ul><li>0表示在数据库关闭时，Innodb完成所有的full  purge和merge insert buffer，将所有的脏页刷新回磁盘。耗费时间，在进行Innodb升级时，需要调为0，再关闭数据库</li><li>1表示不需要上述的操作，但是再缓冲中的一些数据脏页还是会刷新回磁盘</li><li>2表示不完成full purge和merge insert buffer操作，也不将缓冲中的数据脏页写回磁盘，而是将日志都写入日志文件。下次数据库启动时，会进行恢复操作。</li></ul><p>数据库非正常关闭时，如Kill命令关闭数据库，参数设为2时，会对InnoDB存储引擎的表进行恢复操作。</p><p>参数<strong>innodb_force_recovery</strong>影响存储引擎恢复情况。默认值为0</p><ul><li>0表示恢复时进行所有的恢复操作，当不能进行有效恢复时，如数据页发生corruption，mysql发生宕机，把错误写入到错误日志中去。</li><li>1表示忽略检查到的corrupt页</li><li>2表示阻止Master Thread线程运行</li><li>3表示不进行事务的回滚操作</li><li>4表示不进行插入缓冲的合并操作</li><li>5表示不查看撤销日志，Innodb存储引擎会将未提交的事务视为已提交</li><li>6表示不进行前滚的操作</li></ul><p>当该参数设置值大于0后，用户可以对表进行select,create,drop,但是不能进行insert、update、delete这些操作。</p><h2 id="3-文件"><a href="#3-文件" class="headerlink" title="3.文件"></a>3.文件</h2><h3 id="3-1-参数文件"><a href="#3-1-参数文件" class="headerlink" title="3.1 参数文件"></a>3.1 参数文件</h3><p>mysql实例启动时，数据库会先去读配置参数文件，寻找数据库各种文件所在位置以及指定某些初始化参数，这些参数定义了某种内存结构有多大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查找指定顺序的文件</span><br><span class="line">mysql--help | grep my.cnf</span><br></pre></td></tr></table></figure><p>比较：</p><p>Oracle实例启动时找不到参数文件，不能进行装载操作。</p><p>Mysql实例可以不需要参数文件，所有的参数值取决于编译Mysql时指定的默认值和源代码指定参数的默认值。如果Mysql实例再默认的数据库目录下找不到Mysql架构，启动仍然会失败。</p><p>MySQL的mysql 架构中记录了访问该实例的权限，当找不到这个架构时，mysql不会成功。</p><h4 id="3-1-1-参数"><a href="#3-1-1-参数" class="headerlink" title="3.1.1 参数"></a>3.1.1 参数</h4><p>数据库参数是一个个键/值对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看数据库中所有的参数</span><br><span class="line">show variables;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-参数类型"><a href="#3-1-2-参数类型" class="headerlink" title="3.1.2 参数类型"></a>3.1.2 参数类型</h4><p>1.动态参数</p><p>意味着可以在mysql实例运行中进行更改。可以通过SET命令对动态的参数值进行修改<img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211022125716.png"></p><p>对变量的全局进行了修改，再这次实例生命周期都有效，但是mysql实例本身并不会对参数文件中的值进行修改。下次启动时mysql实例还是会读取参数文件。若想下次启动参数值保留，必须去修改参数文件。</p><p>2.静态参数</p><p>再整个实例声明周期内都不得进行更改，就好像是只读的。</p><h3 id="3-2-日志文件"><a href="#3-2-日志文件" class="headerlink" title="3.2 日志文件"></a>3.2 日志文件</h3><p>记录了影响mysql数据库的各种类型活动。包括：</p><ol><li>错误日志</li><li>二进制日志</li><li>慢查询日志</li><li>查询日志</li></ol><h4 id="3-2-1-错误日志"><a href="#3-2-1-错误日志" class="headerlink" title="3.2.1 错误日志"></a>3.2.1 错误日志</h4><p>错误日志文件对Mysql启用、运行、关闭过程进行了记录。在遇到问题时，应首先查看该文件以便定位问题。得到一些关于数据库优化的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看错误日志文件的位置</span><br><span class="line">show variables like &quot;log_error&quot;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-慢查询日志"><a href="#3-2-2-慢查询日志" class="headerlink" title="3.2.2 慢查询日志"></a>3.2.2 慢查询日志</h4><p>慢查询日志(slow log)定位可能存在的SQL语句，从而进行SQL语句层面的优化。</p><p>可以再mysql启动时设一个阈值，将运行时间超过该值的所有sql语句都记录到慢查询日志文件中。从而DBA可以对sql语句进行优化。</p><p>该阈值通过参数<strong>long_query_time</strong>来设置，默认值为10。</p><p>默认mysql并不启动慢查询日志，需要用户自动设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询阈值</span><br><span class="line">show variables like &quot;long_query_time&quot;</span><br><span class="line">&#x2F;&#x2F;查看慢查询日志文件打开状态</span><br><span class="line">show variables like &quot;long_slow_queries&quot;</span><br></pre></td></tr></table></figure><p>参数<strong>log_queries_not_using_indexes</strong>，运行的SQL没有使用索引，则Mysql数据库同样会将这条sql语句记录到慢查询日志文件中。</p><p>参数<strong>log_throttle_queries_not_using_indexes</strong>，用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数。默认值为0，表示没有限制。生产环境下，若没有使用索引，此类sql语句会频繁地记录到slow log。导致slow log文件不断增加，因此DBA应该配置。</p><p>当大量地sql查询记录到慢查询日志文件中，需要使用mysqldumpslow命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysqldumpslow nh122-190-slow.log</span><br><span class="line"></span><br><span class="line">-s, 是表示按照何种方式排序</span><br><span class="line">c: 访问计数</span><br><span class="line">l: 锁定时间</span><br><span class="line">r: 返回记录</span><br><span class="line">t: 查询时间</span><br><span class="line">al:平均锁定时间</span><br><span class="line">ar:平均返回记录数</span><br><span class="line">at:平均查询时间</span><br><span class="line">-t, 是top n的意思，即为返回前面多少条的数据；</span><br><span class="line">-g, 后边可以写一个正则匹配模式，大小写不敏感的；</span><br><span class="line"></span><br><span class="line">得到返回记录集最多的10个SQL。</span><br><span class="line">mysqldumpslow -s r -t 10 &#x2F;database&#x2F;mysql&#x2F;mysql06_slow.log</span><br><span class="line">得到访问次数最多的10个SQL</span><br><span class="line">mysqldumpslow -s c -t 10 &#x2F;database&#x2F;mysql&#x2F;mysql06_slow.log</span><br><span class="line">得到按照时间排序的前10条里面含有左连接的查询语句。</span><br><span class="line">mysqldumpslow -s t -t 10 -g “left join” &#x2F;database&#x2F;mysql&#x2F;mysql06_slow.log</span><br><span class="line">另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现刷屏的情况。</span><br><span class="line">mysqldumpslow -s r -t 20 &#x2F;mysqldata&#x2F;mysql&#x2F;mysql06-slow.log | more</span><br></pre></td></tr></table></figure><p>mysql 5.1开始将慢查询日志记录放在一张表中。该表再mysql架构下，名为slow_log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看表结构</span><br><span class="line">show create table mysql.slow_log\G;</span><br><span class="line">&#x2F;&#x2F;修改慢查询输出地格式，默认为FILE，将它设为TABLE</span><br><span class="line">show variables like &quot;log_output&quot;\G;</span><br><span class="line">Set global log_output&#x3D;&quot;TABLE&quot;;</span><br><span class="line">select * from mysql.slow_log\G;</span><br></pre></td></tr></table></figure><p>slow_log使用CSV引擎，对大数据量下查询效率不高。用户可以把slow_log表引擎换为MyISAM，并在start_time列上添加索引提高效率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;修改表的引擎   已经开启了慢查询会报错</span><br><span class="line">Alter table mysql.slow_log engine&#x3D;myism</span><br><span class="line">&#x2F;&#x2F;关闭慢查询</span><br><span class="line">set global slow_query_log&#x3D;off</span><br></pre></td></tr></table></figure><p>参数<strong>long_query_io</strong>将超过指定逻辑IO次数的sql语句记录到slow log中。默认值为100.</p><p>参数<strong>slow_query_type</strong>用来表示启用slow log的方式</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211022161809.png"></p><h4 id="3-2-3-查询日志"><a href="#3-2-3-查询日志" class="headerlink" title="3.2.3 查询日志"></a>3.2.3 查询日志</h4><p>记录了所有对mysql数据库请求的信息。默认文件名：主机名.log</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211022162350.png"></p><p>MySQL 5.1后 查询日志的记录放入mysql架构下的general_log表中</p><h4 id="3-2-4-二进制日志"><a href="#3-2-4-二进制日志" class="headerlink" title="3.2.4 二进制日志"></a>3.2.4 二进制日志</h4><p>记录了对mysql数据库执行更改的所有操作。不包括select和show操作。（binary log)。select 和show 只能使用查询日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看master数据库当前正在使用的二进制日志及当前执行二进制日志位置</span><br><span class="line">show master status</span><br><span class="line">&#x2F;&#x2F;查看所有二进制日志列表</span><br><span class="line">show master logs</span><br><span class="line">&#x2F;&#x2F;查看binlog内容</span><br><span class="line">show binlog events</span><br></pre></td></tr></table></figure><p>二进制日志的主要作用：</p><ol><li><strong>恢复</strong>：数据恢复使用二进制日志（通过二进制日志进行point-in-time的恢复)</li><li><strong>复制</strong>:通过复制和执行二进制日志使一台远程的Mysql数据库（一般称为slave或primary）进行实时同步。主从复制</li><li><strong>审计</strong>：通过对二进制日志中信息来进行审计，判断是否有对数据库进行注入的攻击。</li></ol><p>通过参数配置log-bin[=name]可以启动二进制日志。若不指定name，默认为二进制日志文件名为主机名，后缀为二进制日志的序列号，所在路径为数据库所在目录（datadir）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;datadir&quot;</span><br><span class="line">system ls lh 上一行输出的值</span><br></pre></td></tr></table></figure><p>bing_log.index存储过往产生的二进制日志序列号。</p><p><strong>二进制日志文件默认没有启动。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看是否打开了二进制日志文件</span><br><span class="line">show variables like &#39;log_bin&#39;;</span><br></pre></td></tr></table></figure><p>以下参数影响着二进制日志记录的信息和行为：</p><p><strong>1.max_binlog_size</strong></p><p>指定了单个二进制日志文件的最大值，超过该值，产生新的二进制日志文件，后缀名+1，记录到.index文件。默认大小为1G；</p><p><strong>2.binlog_cache_size</strong></p><p>当使用事务的表存储引擎（INNODB）时，所有未提交的二进制日志会被记录到一个缓冲中去，等待事务提交时直接将缓冲中的二进制日志写入二进制日志文件，该参数指定了缓冲的大小。默认为32K</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Binglog_cache_use记录了使用缓冲写二进制日志的次数</span><br><span class="line">show global status like &quot;binlog_cache_use&quot;\G;</span><br><span class="line">&#x2F;&#x2F;查看bing_cache_size大小</span><br><span class="line">show variables like &quot;binglog_cache_size&quot;</span><br><span class="line">&#x2F;&#x2F;查看binglog_cache状态(同时查看binlog_cache_disk_use和binlog_cache_use)</span><br><span class="line">show global status like &quot;binlog_cache%&quot;</span><br></pre></td></tr></table></figure><p><strong>3.sync_binlog</strong></p><p>二进制日志并不是每次写都同步到磁盘（缓冲写）。当数据库发生宕机时，可能有一部分数据没有写入二进制日志文件中。</p><p>该参数sync_binlog=[N] 表示每写缓冲多少次就同步到磁盘。默认为0，1表示同步写，这是写操作不适用操作系统的缓冲来写二进制日志。</p><p><strong>4.innodb_support_xa</strong></p><p>因为sync_binlog设为1后，发生同步写，但是由于一个事务还未commit，但是这时已经写入 了二进制日志，此时数据库发生宕机，当下次mysql数据库启动时，由于该事务没有提交，事务会被回滚。但是二进制日志已经记录了，出现问题。</p><p>该参数设为1，确保了二进制日志和InnoDB存储引擎数据文件的同步。</p><p><strong>5.binglog-do-db</strong></p><p>表示需要写入那些库的日志</p><p>默认为空，表示需要同步所有库的日志到二进制日志</p><p><strong>6.binlog-ignore-db</strong></p><p>表示需要忽略吸入哪些库的日志</p><p>默认为空，表示需要同步所有库的日志到二进制日志</p><p><strong>7.log-slave-update</strong></p><p>如果该数据库是主从复制中的从的话，不会从master取得并执行二进制日志写入自己的二进制日志文件中去。若需要，要设置该参数。</p><p>要搭建master=&gt;slave=&gt;slave复制，必须设置该参数。</p><p><strong>8.binlog_format</strong></p><p>影响记录二进制日志的格式。影响InnoDB存储引擎的默认事务隔离级别（REPEATABLE READ 会出现类似丢失更新的现象，从而出现主从数据库上的数据不一致)。</p><p>参数可设值有</p><ol><li><p>STATEMENT</p><p>和之前的版本一致，二进制日志文件记录的是日志逻辑SQL语句</p></li><li><p>ROW</p><p>记录表的更改情况。基于ROW格式的复制类似于Oracle的物理Standby（当然，还是有些区别）</p></li><li><p>MIXED</p><p>mysql默认采用STATEMENT格式进行二进制文件的记录，但是在某些情况下使用ROW格式</p><ol><li>表的存储引擎为NDB，对表的DML操作都会以ROW格式记录</li><li>使用UUID(),USER(),CURRENT_USER(),FOUND_ROWS(),ROW_COUNT()等不确定函数</li><li>使用了INSERT DELAY 语句</li><li>使用了用户定义函数（UDF)</li><li>使用了临时表</li></ol></li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211024125336.png"></p><p>binlog_format是动态参数，可以在数据库允许环境下进行更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;更改当前会话binlog_format设为ROW</span><br><span class="line">set @@session.binlog_format&#x3D;&#39;ROW&#39;;</span><br><span class="line">&#x2F;&#x2F;查询当前会话的binlog_format</span><br><span class="line">select @@session.binlog_format;</span><br><span class="line">&#x2F;&#x2F;设置全局的binlog_format</span><br><span class="line">set global binlog_format&#x3D;&quot;ROW&quot;</span><br></pre></td></tr></table></figure><p>参数<strong>binlog_format</strong>设置为ROW，会对磁盘空间有一定的增加。</p><p>查看二进制日志文件不能使用像<strong>错误日志文件</strong>、<strong>慢查询日志文件</strong>那样使用<strong>cat</strong>、<strong>head</strong>、<strong>tail</strong>等命令来查看。</p><p>要查看二进制日志文件需要使用mysql提供的工具<strong>mysqlbinlog</strong>，对于STATEMENT格式的二进制日志文件，使用mysqlbinlog后，看到的就是执行的逻辑SQL语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-d, --database&#x3D;name      仅显示指定数据库的转储内容。</span><br><span class="line">-o, --offset&#x3D;#           跳过前N行的日志条目。</span><br><span class="line">-r, --result-file&#x3D;name   将输入的文本格式的文件转储到指定的文件。</span><br><span class="line">-s, --short-form         使用简单格式。</span><br><span class="line">--set-charset&#x3D;name       在转储文件的开头增加&#39;SET NAMES character_set&#39;语句。</span><br><span class="line">--start-datetime&#x3D;name    转储日志的起始时间。</span><br><span class="line">--stop-datetime&#x3D;name     转储日志的截止时间。</span><br><span class="line">-j, --start-position&#x3D;#   转储日志的起始位置。</span><br><span class="line">--stop-position&#x3D;#        转储日志的截止位置。</span><br></pre></td></tr></table></figure><h3 id="3-3-套接字文件"><a href="#3-3-套接字文件" class="headerlink" title="3.3 套接字文件"></a>3.3 套接字文件</h3><p>UNIX系统下本地连接mysql可以采用UNIX域套接字方式，这种方式需要一个套接字文件。</p><p>套接字文件由参数socket控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看套接字文件路径</span><br><span class="line">show variables like &quot;socket&quot;</span><br></pre></td></tr></table></figure><h3 id="3-4-Pid文件"><a href="#3-4-Pid文件" class="headerlink" title="3.4 Pid文件"></a>3.4 Pid文件</h3><p>mysql实例启动时，将自己的进程ID写入一个文件中，该文件即为Pid文件。由参数pid_file控制，默认位于数据库目录下，文件名为主机名.pid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看Pid文件路径</span><br><span class="line">show variables like &quot;pid_file&quot;\G;</span><br><span class="line">show variables like &quot;%pid%&quot;;</span><br></pre></td></tr></table></figure><h3 id="3-5-表结构定义文件（frm文件）"><a href="#3-5-表结构定义文件（frm文件）" class="headerlink" title="3.5 表结构定义文件（frm文件）"></a>3.5 表结构定义文件（frm文件）</h3><p>mysql数据的存储时根据表进行的，每个表都有其对应的文件，无论采用什么存储引擎，后缀名为frm的文件定义了该表的结构定义。</p><p>frm文件还可以用来存放视图的定义，该文件是文本文件,可以直接用cat命令进行查看。</p><h3 id="3-6-InnoDB存储引擎文件"><a href="#3-6-InnoDB存储引擎文件" class="headerlink" title="3.6 InnoDB存储引擎文件"></a>3.6 InnoDB存储引擎文件</h3><p>每个存储引擎都有自己独有的文件。</p><h4 id="3-6-1-表空间文件"><a href="#3-6-1-表空间文件" class="headerlink" title="3.6.1 表空间文件"></a>3.6.1 表空间文件</h4><p>用来管理InnoDB的存储</p><p>InnoDB采用将存储的数据按表空间进行存放设计。默认配置下会有一个初始化大小为10MB，名为ibdatea1的文件。该文件是默认的表空间文件，用户可以通过参数innodb_data_file_path进行设置。</p><p>用户可以通过多个文件组成一个表空间，同时制定文件的属性。</p><p>设置<strong>innodb_data_file_path</strong>参数后，所有基于InnoDB存储引擎的表数据都会记录到该共享空间中。</p><p>设置<strong>innodb_file_per_table</strong>参数后，用户可以将每个基于InnoDB存储引擎的表产生一个独立表空间。独立表空间的命名为：表名.ibd。通过该方式，用户不用将所有数据都存放于默认的表空间中。</p><p>单独的idb表空间文件仅存储该表的数据、索引和插入缓冲BITMAP等信息，其余的信息还是存放在默认的表空间中。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211024143353.png"></p><h4 id="3-6-2-重做日志文件"><a href="#3-6-2-重做日志文件" class="headerlink" title="3.6.2 重做日志文件"></a>3.6.2 重做日志文件</h4><p>用来记录InnoDB的事务日志</p><p>默认情况下，InnoDB存储引擎数据目录下有两个名为ib_logfile()和ib_logfile1的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看重做日志参数情况</span><br><span class="line">show variables like &quot;innodb%log%&quot;\G;</span><br></pre></td></tr></table></figure><p>下列参数影响重做日志文件的属性：</p><p>1.innodb_log_file_size</p><p>指定了每个重做日志文件的大小</p><p>2.innodb_log_files_in_group</p><p>日志文件组中重做日志文件的数量，默认为2</p><p>3.innodb_mirrored_log_groups</p><p>指定了日志镜像文件组的数量，默认为1，表示只有一个日志文件组，没有镜像</p><p>4.innodb_log_group_home_dir</p><p>指定了日志文件组所在的路径，默认/</p><p>p101二进制日志和重做日志的区别</p><p>InnoDB存储引擎的重做日志只记录有关存储引擎本身的事务日志，而且记录的是关于每个页的更改的物理情况，事务的进行中，不断有重做日志条目被写入到重做日志文件中。</p><hr><p>InnoDB存储引擎中，对于不同的操作有着不同的重做日志格式。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211024145207.png"></p><p>redo_log_type:占用1字节，重做日志类型</p><p>space: 表空间的ID，采用压缩的方式，占用空间可能小于4字节</p><p>page_no:表示页的偏移量，同样采用压缩方式</p><p>redo_log_body:每个重做日志的数据部分，恢复时需要调用相应函数解析</p><hr><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211024145601.png"></p><p>从日志缓冲写入磁盘上的重做日志文件按一定条件进行：</p><ol><li>master thread 每秒会将重做日志缓冲写入磁盘的重做日志文件中，不论事务是否提交</li><li>由参数<strong>innodb_flush_log_at_trx_commit</strong>控制，表示在提交时，处理重做日志的方式。</li></ol><p><strong>innodb_flush_log_at_trx_commit</strong>有效值有</p><ul><li>0代表提交事务时，并不将事务的重做日志写入磁盘的日志文件，而是等待主线程每秒的刷新。</li><li>1表示在执行commit时将重做日志缓冲同步写道磁盘。伴有fsync的调用</li><li>2表示将重做日志异步写到磁盘，即写到文件系统的缓存中。不能完全保证在执行commit时肯定会写入重做日志文件。</li></ul><p>为保证事务的ADID的持久性，必须将innodb_flush_log_at_trx_commit设置为1，每当有事务提交时，必须确保事务都已经写入重做日志文件。</p><h2 id="4-表"><a href="#4-表" class="headerlink" title="4.表"></a>4.表</h2><p>数据在表中是如何组织和存放的</p><h3 id="4-1-索引组织表"><a href="#4-1-索引组织表" class="headerlink" title="4.1 索引组织表"></a>4.1 索引组织表</h3><p>在InnoDB存储引擎中，表是按主键顺序组织存放的，该存储方式为索引组织表。</p><p>创建表时若没有显示定义主键，InnoDB存储引擎按如下方式选择或创建主键</p><ol><li><p>判断表中是否有非空的唯一索引，如果有，则为主键</p></li><li><p>若没有，InnoDB引擎自动创建一个6字节大小的指针</p></li><li><p>当表中有多个非空唯一索引时，InnoDB存储引擎将选择建表时第一个定义的非空唯一索引为主键。</p><p><strong>注意</strong></p><p>主键的选择是根据定义索引的顺序，而不是建表时列的</p></li></ol><blockquote><p>唯一约束与主键约束相似的是它们都可以确保列的唯一性。不同的是，唯一约束在一个表中可有多个，并且设置唯一约束的列允许有空值，但是只能有一个空值。而主键约束在一个表中只能有一个，且不允许有空值。比如，在用户信息表中，为了避免表中用户名重名，可以把用户名设置为唯一约束。</p></blockquote><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 select 列1，列2...</span><br></pre></td></tr></table></figure><p>可以快速插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看某个表的主键</span><br><span class="line">select a,b,c,d,_rowid from z;</span><br></pre></td></tr></table></figure><p>_rowid可以显示表的主键。只能查看单个列为主键的情况，对于多列组成的主键就显得无能为力了。</p><h3 id="4-2-InnoDB逻辑存储结构"><a href="#4-2-InnoDB逻辑存储结构" class="headerlink" title="4.2 InnoDB逻辑存储结构"></a>4.2 InnoDB逻辑存储结构</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211028143947.png"></p><h4 id="4-2-1-表空间"><a href="#4-2-1-表空间" class="headerlink" title="4.2.1 表空间"></a>4.2.1 表空间</h4><p>InnoDB存储引擎逻辑结构的最高层，所有的数据存放在表空间中。</p><p>默认情况下InnoDB存储引擎下有一个共享表空间ibdata1，即所有数据都放在这个表空间内。</p><blockquote><p>Undo 页</p><p>Undo Log的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为Undo Log）。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态。</p></blockquote><p>即使在启用了innodb_file_per_table之后，共享空间还是会不断地增加大小。因为如回滚(undo)信息，插入缓冲索引页，系统事务信息，二次写缓冲还是存放在原来的共享空间内。</p><p>即使事务rollback后InnoDB存储引擎也不会去收缩这个表空间。虽然不会回收但是会将其标记为可用空间，提供下个undo使用</p><h4 id="4-2-2-段"><a href="#4-2-2-段" class="headerlink" title="4.2.2 段"></a>4.2.2 段</h4><p>表空间是由各个段组成的，常见的段由数据段、索引段、回滚段等。</p><p>InnoDB存储引擎表是索引组织的，数据即索引，索引即数据。数据段为B+树的叶子结点，索引段即为B+树的非索引结点。</p><p>Innodb存储引擎中，对段的管理都是由引擎自身完成。</p><h4 id="4-2-3-区"><a href="#4-2-3-区" class="headerlink" title="4.2.3 区"></a>4.2.3 区</h4><p>区是连续页组成的空间，任何情况下每个区的大小都为<strong>1MB</strong>。为了保证区中页的连续性，Innodb引擎一次从磁盘申请4~5个区。InnoDB存储引擎页大小为16KB，即一个区中共有64个连续的页。1MB/16kb=64</p><p>参数<strong>key_block</strong>设置每个页的大小(1.0.x版本)</p><p>参数<strong>innodb_page_size</strong>设置默认页大小(1.2.x版本)</p><h4 id="4-2-4-页"><a href="#4-2-4-页" class="headerlink" title="4.2.4 页"></a>4.2.4 页</h4><p>页是InnoDB磁盘管理的最小单位。每个页默认大小为16KB，从1.2x版本开始可以通过innodb_page_size将页额大小设置为4K,8K,16K。</p><p>页类型有：</p><ol><li>数据页</li><li>undo页</li><li>系统页</li><li>事务数据页</li><li>插入缓冲位图页</li><li>插入缓冲空闲列表页</li><li>未压缩的二进制大对象页</li><li>压缩的二进制大对象页</li></ol><h4 id="4-2-5-行"><a href="#4-2-5-行" class="headerlink" title="4.2.5 行"></a>4.2.5 行</h4><p>InnoDB存储引擎是面向列的，数据是按行进行存放的。每页最多允许存放16KB/2-200行的记录，也就是7992行。</p><h3 id="4-3-InnoDB行记录格式"><a href="#4-3-InnoDB行记录格式" class="headerlink" title="4.3 InnoDB行记录格式"></a>4.3 InnoDB行记录格式</h3><p>页中保存着一行行的数据。</p><p>行格式两种：1. Compact     2.  Redundant</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看当前表使用的行格式</span><br><span class="line">show table like status like &#39;table_name&#39;\G;</span><br></pre></td></tr></table></figure><p><strong>row_format</strong>记录了当前所使用的行记录结构类型。</p><h2 id="5-索引与算法"><a href="#5-索引与算法" class="headerlink" title="5.索引与算法"></a>5.索引与算法</h2><h3 id="5-1-Innodb存储引擎的索引概述"><a href="#5-1-Innodb存储引擎的索引概述" class="headerlink" title="5.1 Innodb存储引擎的索引概述"></a>5.1 Innodb存储引擎的索引概述</h3><p>Innodb支持以下几种常见的索引：</p><ol><li><p>B+树索引</p><p>传统意义上的索引。B+树构造类似于二叉树，根据键值快速找到数据。B代表的是balance。B+树索引并不能找到一个给定键值的具体行。<strong>B+树索引能找到被查数据所在的页。</strong>然后数据库将页读入内存，再在内存中进行查找，最后得到要查找的数据。</p></li><li><p>全文索引</p></li><li><p>哈希索引</p><p>自适应的，Innodb存储引擎会根据表的使用情况自动为表生成哈希索引，不能认为干预是否在一张表中生成哈希索引。</p></li></ol><h3 id="5-2-索引相关数据结构"><a href="#5-2-索引相关数据结构" class="headerlink" title="5.2  索引相关数据结构"></a>5.2  索引相关数据结构</h3><p><strong>平衡二叉树即ALV</strong>，首先满足二叉查找树的定义，其次必须满足任何结点的两个子树的高度最大差为1。</p><p>通过多次左旋或者右旋维持二叉树的平衡性。</p><h3 id="5-3-B-树"><a href="#5-3-B-树" class="headerlink" title="5.3 B+树"></a>5.3 B+树</h3><p>B+树是为磁盘或其他直接存取辅助设备设计的以中国平衡查找树。B+树中，所有记录结点都是按键值的大小顺序放在同一层的叶子节点上，由各叶子结点指针进行连接。</p><h4 id="5-3-1-B-树的插入操作"><a href="#5-3-1-B-树的插入操作" class="headerlink" title="5.3.1 B+树的插入操作"></a>5.3.1 B+树的插入操作</h4><p>B+树插入需要保证插入后叶子结点中的记录依然排序，需要考虑三种情况。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118201105.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118202103.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118202006.png"></p><p>直接插入</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118202020.png"></p><p>拆分叶子节点</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118202031.png"></p><p>索引页和叶子页都拆分</p><p>为了保持平衡对于新插入的键值可能需要做大量的拆分页操作。<strong>B+树结构主要用户磁盘，页的拆分意为着磁盘的操作，所以应经可能减少页的拆分操作。</strong></p><p><strong>B+树同样提供了类似于平衡二叉树的旋转操作功能。</strong></p><p>旋转发生在Leaf Page已经满，但是其的左右兄弟结点没有满的情况下。B+树不会急于去做拆分页的操作，而是将记录移到所在页的兄弟节点上。</p><h4 id="5-3-2-B-树的删除操作"><a href="#5-3-2-B-树的删除操作" class="headerlink" title="5.3.2 B+树的删除操作"></a>5.3.2 B+树的删除操作</h4><p>B+树使用填充因子来控制树的删除变化。50%是填充因子可设的最小值。B+树的删除操作同样必须保证删除后叶子结点中的记录依然排序。删除根据填充因子的变化来衡量。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118204350.png"></p><h3 id="5-4-B-树索引"><a href="#5-4-B-树索引" class="headerlink" title="5.4 B+树索引"></a>5.4 B+树索引</h3><p>B+树索引的本质就是B+树在数据库中的实现。但是B+索引在数据库中有一个特定是高扇出性。B+树的高度一般在2~4层，也就是说查找某一键值的行记录时最多需要2到4此IO。</p><p>B+树的索引可以分为<strong>聚集索引</strong>和<strong>辅助索引</strong>。<strong>聚集索引与辅助索引不同的是叶子结点存放的是否是一整行的数据</strong></p><h4 id="5-4-1-聚集索引"><a href="#5-4-1-聚集索引" class="headerlink" title="5.4.1 聚集索引"></a>5.4.1 聚集索引</h4><p>Innodb存储引擎表是索引组织表，即表中数据是按照主键顺序存放。</p><p><strong>聚集索引就是按照每张表的主键构造一颗B+树，叶子结点中存放的即为整张表的行记录数据，也将聚集索引的叶子结点称为数据页。</strong></p><p>聚集索引的这个特性决定了索引组织表<strong>中数据也是索引的一部分。同B+树数据结构一样，每个数据页都通过一个双向链表进行链接。</strong></p><p>实际的数据页只能按照一棵B+树进行排序，因此每张表中只能拥有一个聚集索引。</p><p>查询优化器倾向于采用聚集索引，因为聚集索引能够在B+树索引的叶子结点上直接找到数据。</p><p>数据页上存放的是完整的每行的记录，非数据页的索引页中，存放的仅仅是键值及指向数据页的偏移量，而不是一个完整的行记录。</p><p><strong>聚集索引的存储并不是物理上连续的，而是逻辑上连续的。</strong></p><ol><li>页通过双向链表链接，页按照主键的顺序排序。</li><li>每个页中的记录也是通过双向链表进行维护的，物理存储上可以同样不按照主键存储。</li></ol><p>好处：</p><ol><li>对主键的排序查找和范围查找速度非常快</li><li><strong>范围查询</strong>，如果想要查找主键某一范围内的数据，通过叶子节点的上层结点就可以得到页的范围，之后直接读取数据页即可。</li></ol><p>explain（execute plan)  Mysql数据库的执行计划。</p><h4 id="5-4-2-辅助索引"><a href="#5-4-2-辅助索引" class="headerlink" title="5.4.2 辅助索引"></a>5.4.2 辅助索引</h4><p><strong>叶子结点并不包含行记录的全部数据。叶子结点除了包含键值以外，每个叶子结点中的索引行还包含了一个书签。****书签用来告诉Innodb存储引擎哪里可以找到与索引相对应的行数据</strong>。由于Innodb存储引擎是索引组织表，因此Innodb存储引擎的辅助索引的书签就是响应行数据的聚集索引键。</p><p>辅助索引的存在并不影响数据在聚集索引中的组织，因此每张表上可以有多个辅助索引。</p><p>通过辅助索引寻找数据时</p><ol><li>Innodb存储引擎遍历辅助索引并通过叶级别的指针获得指向主键索引的主键</li><li>通过主键索引来找到一个完整的行记录。</li></ol><p>SQL SERVER中的<strong>堆表</strong>：行数据的存储按照插入的顺序存放。堆表的特性决定了堆表上的索引都是非聚集的，主键与非主键的区别只是是否唯一且非空。这时书签是一个<strong>行标识符</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211119144334.png"></p><h4 id="5-4-3-B-树索引的分裂"><a href="#5-4-3-B-树索引的分裂" class="headerlink" title="5.4.3 B+树索引的分裂"></a>5.4.3 B+树索引的分裂</h4><p>与B+树的分裂略有不同</p><p>B+树索引页的分裂并不总是从页的中间记录开始的，这样会导致空间的浪费。</p><p>Innodb存储引擎的Page Header中有以下几个部分用来保存插入的顺序信息：</p><ol><li><strong>PAGE_LAST_INSERT</strong></li><li><strong>PAGE_DIRECTION</strong></li><li><strong>PAGE_N_DIRECTION</strong></li></ol><p>通过这些信息，Innodb引擎决定是向左还是向右进行分裂，同时决定分裂点记录为哪一个。</p><p>INNODB存储引擎插入时，首先需要进行定位，定位到的记录为待插入记录额前一条记录。</p><h4 id="5-4-4-B-树索引的管理"><a href="#5-4-4-B-树索引的管理" class="headerlink" title="5.4.4 B+树索引的管理"></a>5.4.4 B+树索引的管理</h4><p><strong>1.索引管理</strong></p><p>Alter table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建索引</span><br><span class="line">Alter Table tbl_name</span><br><span class="line">add index|key index_name</span><br><span class="line">index_type   index_col_name</span><br><span class="line">&#x2F;&#x2F;删除索引</span><br><span class="line">alter table tbl_name</span><br><span class="line">drop primary key | drop index|key   index_name</span><br></pre></td></tr></table></figure><p>create/drop index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建索引</span><br><span class="line">create &#123;unique&#125; index index_name &#123;index_type&#125;</span><br><span class="line">on tbl_name &#123;index_col_name,..&#125;</span><br><span class="line">&#x2F;&#x2F;删除索引</span><br><span class="line">drop index index_name on tbl_name</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看某个表上的索引情况</span><br><span class="line">show index from tbl_name</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段名</th><th>字段含义</th></tr></thead><tbody><tr><td>table</td><td>索引所在的表名</td></tr><tr><td>Non_unique</td><td>非唯一的索引，可以看到primary key为0是唯一的</td></tr><tr><td>Key_name</td><td>索引的名字，通过该值来drop index</td></tr><tr><td>seq_in_index</td><td>索引中列的位置，联合索引中指示1，2…</td></tr><tr><td>column_name</td><td>索引列名称</td></tr><tr><td>collation</td><td>列的存储方式A或者NULL。B+树索引总是A，即排序的。若是Heap存储引擎，并且建立了哈希索引，就为NULL</td></tr><tr><td>cardinality</td><td>表示索引中唯一值的数目的估计值。应尽可能接近1，若非常小，用户需要考虑是否可以删除此索引。</td></tr><tr><td>sub_part</td><td>列的部分被索引。若索引整个列，字段为NULL</td></tr><tr><td>packed</td><td>关键字如何被压缩。若未压缩，则为NULL</td></tr><tr><td>NULL</td><td>是否索引的列含有Null值。</td></tr><tr><td>Index_type</td><td>索引的类型。</td></tr><tr><td>Comment</td><td>注释</td></tr></tbody></table><p>Cardinality值很关键，优化器根据这个值来判断是否使用这个索引。该值并不是实时更新的，即每次索引的更新都会更新该值，代价太大了。</p><p><strong>若要更新cardinality的信息，可以使用analyze table命令。</strong></p><p>Cardinality为NULL，某些情况下会发生索引建立了却没有用到的情况。或者两次explain会出现一次是使用了索引，一次使用的是全表扫描。这时就应该做一次analyze table操作。</p><p><strong>2.Fast Index Creation</strong>(快速索引创建)  </p><p>以前</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120160656.png"></p><p>弊端：对大表索引的添加和删除操作，需要很长的时间。</p><p>对于辅助索引的创建，Innodb存储引擎会对创建索引的表加上一个s锁。创建过程中不需要重建表。</p><p>删除辅助索引操作更简单，Innodb存储只需要更新内部视图，并将辅助索引的空间标记为可用，同时删除Mysql数据库内部视图上多该表的索引。</p><p><strong>3.Online Schema Change</strong> (在线架构改变)</p><p><strong>4.Online DDL</strong>（在线数据定义）</p><p>允许辅助索引创建的同时，还允许各类DML操作，提高了Mysql数据库的可用性。</p><p>以下几类DDL操作都可以通过在线方式操作</p><ol><li>辅助索引的创建</li><li>改变自增长值</li><li>添加或者删除外键约束</li><li>列的重命名</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120162251.png"></p><p>lock部分为索引创建或删除时对表添加锁的情况：</p><p>1）None</p><p>执行索引创建或者删除时，对目标不添加任何的锁。即事务仍然可以进行读写操作，不会受到阻塞。这种模式可以获得做大的并发度。</p><p>2）SHARE</p><p>和FIC类似，执行索引拆功能键或删除操作时，对目标表加上一个s锁。对于并发的读事务，依然可以执行，但是遇到写事务，就会发生等待。</p><p>3）EXCLUSIVE</p><p>执行时，对目标加上一个x锁。读写事务都不能进行，会阻塞所有的线程，这和copy方式运行得到的状态类似，但是不需要像copy那样创建一张临时表。</p><p>4）DEFAULT</p><p>该模式会判断当前操作是否可以使用none模式，若不能，则判断是否可以使用share模式，最后判断是否可以使用exclusive模式。<strong>也就是通过判断事务的最大并发性来判断执行DDL的新模式。</strong></p><h3 id="5-5-Cardinality值"><a href="#5-5-Cardinality值" class="headerlink" title="5.5 Cardinality值"></a>5.5 Cardinality值</h3><h4 id="5-5-1-什么是cardinality"><a href="#5-5-1-什么是cardinality" class="headerlink" title="5.5.1 什么是cardinality"></a>5.5.1 什么是cardinality</h4><p>并不是所有的查询条件中出现的列都需要添加索引。<strong>对表字段高选择性的适合使用B+树索引。</strong>也就是基本不重复的。<strong>sql语句选取表中较少行的原则。</strong></p><p><strong>通过show index中的cardinality的值来查看。表示的是索引中不重复记录数量的预估值。</strong></p><p>cardinality值尽可能地接近1，在访问高选择性的字段并从表中取出很少一部分数据时，对这个字段添加B+树索引是有必要的。</p><h4 id="5-5-2-Innodb存储引擎中的cardinality统计"><a href="#5-5-2-Innodb存储引擎中的cardinality统计" class="headerlink" title="5.5.2 Innodb存储引擎中的cardinality统计"></a>5.5.2 Innodb存储引擎中的cardinality统计</h4><p>cardinality表示选择性。<strong>建立索引的前提是列中的数据是高选择性的。</strong></p><p><strong>不同的存储引擎对于B+树索引实现是不同的，所以对cardinality的统计是放在存储引擎层进行的。</strong></p><p>数据库对于cardinality的统计是通过<strong>采样</strong>的方法来完成的。原因是索引更新频繁如果每次都统计会给数据库带来负担，而且对于大表统计时间很长。</p><p>Cardinality统计信息发生在</p><ol><li>INSERT</li><li>UPDATE</li></ol><p>InnoDB存储引擎内部对更新cardinality信息的策略为</p><ol><li><p>表中1/16的数据已经发生过变化</p></li><li><p>stat_modified_counter&gt;2 000 000 000</p><p>对第一种的弥补，防止某一行数据频繁的进行更新操作，表中的数据司机并没有增加。<strong>在INNODB存储引擎中有一个计数器sata_modified_counter，用来表示发生变化的次数。</strong></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120185003.png"></p><p>当然，当表足够小时，表的叶子结点树小于或者等于8个，这是随机采样，总会采取到这些页，因此cardinality值是相同的。</p><p>当执行</p><ol><li><strong>analyze table</strong></li><li><strong>show tables status</strong></li><li><strong>show index</strong></li><li><strong>访问information_schema架构下的表tables和statistics</strong></li></ol><p><strong>会导致Innodb存储引擎去重新计算索引的cardinality值。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120185800.png"></p><h3 id="5-6-B-树索引的使用"><a href="#5-6-B-树索引的使用" class="headerlink" title="5.6 B+树索引的使用"></a>5.6 B+树索引的使用</h3><p><strong>OLTP</strong>:on-line transaction processing）翻译为联机事务处理  主要是数据库增删改</p><p><strong>OLAP</strong>:On-Line Analytical Processing）翻译为联机分析处理   主要是查询数据</p><p><strong>OLTP应用中</strong>查询操作只取得一小部分数据，一般就是根据主键来取的用户信息，典型的OLTP应用。<strong>这时，B+树索引建立后，对索引的使用应该只是通过该索引取得表中少部分的数据。这时候建立B+树索引是有意义的。</strong>否则即使建立了，优化器也可能选择不适用索引。</p><p><strong>OLAP</strong>中情况会复杂。OLAP中需要访问表中大量数据，查询是面向分析的查询。</p><p>OLAP中不需要给用户姓名加索引，<strong>一般都会对时间字段加索引。</strong>大多数统计需要根据时间维度来进行数据的筛选。</p><h4 id="5-6-2-联合索引"><a href="#5-6-2-联合索引" class="headerlink" title="5.6.2 联合索引"></a>5.6.2 联合索引</h4><p>对表上的多个列进行索引。</p><p>从本质上来说，联合索引也是一颗B+树，不同的联合索引的键值的数量不是1，而是大于等于2。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120193223.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211120193250.png"></p><p>联合索引的第二个好处是已经对第二个键值进行了排序处理。使用联合索引可以避免多一次的排序操作，因为索引本身在叶子结点已经排好序了。</p><h4 id="5-6-3-覆盖索引"><a href="#5-6-3-覆盖索引" class="headerlink" title="5.6.3 覆盖索引"></a>5.6.3 覆盖索引</h4><p><strong>Innodb存储引擎支持覆盖索引，也称为索引覆盖，即从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录。</strong></p><p>好处：</p><p><strong>辅助索引不包含整行的所有信息，故其大小要远远小于聚集索引，因此可以减少大量的IO操作。</strong></p><p>因为Innodb存储引擎的辅助索引存放了主键值，所以常常建立联合索引，就可以在辅助索引里即拿到主键的值。</p><p>覆盖索引的另一个好处是对<strong>某些统计问题</strong>而言。<strong>因为表上有辅助索引，优化器不会选择聚集索引，因为辅助索引远小于聚集索引，选择辅助索引可以减少IO操作。</strong></p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from tbl_name</span><br></pre></td></tr></table></figure><h4 id="5-6-4-优化器选择不使用索引的情况"><a href="#5-6-4-优化器选择不使用索引的情况" class="headerlink" title="5.6.4 优化器选择不使用索引的情况"></a>5.6.4 优化器选择不使用索引的情况</h4><p>用explain命令来进行sql语句的分析时，<strong>会发现优化器并没有选择索引去查找数据</strong>，而是通过扫描聚集索引，也就是直接进行全表的扫描来得到数据。</p><p><strong>该情况多发生于范围查找、JOIN链接操作等情况。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211121143047.png"></p><p>可以使用 FORCE INDEX来强制使用某个索引</p><h4 id="5-6-5-索引提示"><a href="#5-6-5-索引提示" class="headerlink" title="5.6.5 索引提示"></a>5.6.5 索引提示</h4><p>mysql数据库支持索引提示(INDEX HINT)显式地告诉优化器使用哪个索引。</p><h4 id="5-6-6-Multi-Range-Read-优化"><a href="#5-6-6-Multi-Range-Read-优化" class="headerlink" title="5.6.6 Multi-Range Read 优化"></a>5.6.6 Multi-Range Read 优化</h4><p>mysql5.6版本开始支持MMR优化。<strong>MRR优化目的是为了减少磁盘地随机访问，并且将随机访问转化为较为顺序地数据访问</strong>。<strong>适用于range，ref，eq_ref类型的查询</strong></p><p>好处：</p><ol><li>MMR使得数据访问变得顺序。查找辅助索引时，根据查询结果，按照主键进行排序，并按照主键排序的顺序进行书签查找。</li><li>减少缓冲池中页被替换的次数</li><li>批量处理对键值的查询操作。</li></ol><p>对于Innodb和MyISAM存储引擎的范围查询和JOIN查询操作。MMR工作方式如下：</p><ol><li>将查询得到的辅助索引键值存放到一个缓存中，缓存中的数据时根据辅助索引键值排序的。</li><li>将缓存中的键值根据ROWID来进行排序</li><li>根据ROWID的排序顺序来访问实际的数据文件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211121145123.png"></p><h4 id="5-6-7-Index-Condition-Pushdown-ICP-优化"><a href="#5-6-7-Index-Condition-Pushdown-ICP-优化" class="headerlink" title="5.6.7 Index Condition Pushdown(ICP 优化)"></a>5.6.7 Index Condition Pushdown(ICP 优化)</h4><p>Mysql5.6后支持的根据索引进行查询的优化方式。</p><p><strong>在支持Index Condition Pushdown后，mysql 数据库会在取出索引的同时，判断是否可以进行where条件的过滤。也就是将where的部分过滤放在了存储引擎层。</strong></p><p><strong>ICP</strong>优化支持range,ref,eq_ref,ref_or_null类型的查询，当前支持MyISAM和Innodb存储引擎。</p><h3 id="5-7-哈希算法"><a href="#5-7-哈希算法" class="headerlink" title="5.7 哈希算法"></a>5.7 哈希算法</h3><h4 id="5-7-2-Innodb存储引擎中的哈希算法"><a href="#5-7-2-Innodb存储引擎中的哈希算法" class="headerlink" title="5.7.2 Innodb存储引擎中的哈希算法"></a>5.7.2 Innodb存储引擎中的哈希算法</h4><p><strong>Innodb存储引擎使用哈希算法来对字典进行查找，冲突采用链表方式，哈希函数采用除法散列方式。</strong></p><h4 id="5-7-3-自适应哈希索引"><a href="#5-7-3-自适应哈希索引" class="headerlink" title="5.7.3  自适应哈希索引"></a>5.7.3  自适应哈希索引</h4><p>InnoDB存储引擎会监控对表上各索引页的查询，如果监控到某个索引页被频繁查询，并诊断后发现如果为这一页的数据创建Hash索引会带来更大的性能提升，则会自动为这一页的数据创建Hash索引，并称之为<strong>自适应Hash索引。</strong></p><p>由Innodb存储引擎自己控制的，通常是对热点索引页创建哈希索引。<strong>自适应Hash索引看成是索引的索引</strong></p><p><strong>通过参数innodb_adaptive_hash_index来禁用或启动此特性。默认为开启。</strong></p><h3 id="5-8-全文检索"><a href="#5-8-全文检索" class="headerlink" title="5.8 全文检索"></a>5.8 全文检索</h3><p><strong>全文检索是将存储与数据库的整本书或整篇文章中的任意内容信息查找出来的技术。</strong>根据需要获得全文中有关章、节、段、句、词等信息，进行各种统计和分析。</p><p>5.8.2   倒排索引</p><h2 id="6-锁"><a href="#6-锁" class="headerlink" title="6.锁"></a>6.锁</h2><h3 id="6-1-锁"><a href="#6-1-锁" class="headerlink" title="6.1 锁"></a>6.1 锁</h3><p>锁是数据库系统区别于文件系统的一个关键特性。锁机制解决对共享资源的并发访问问题。</p><p>InnoDB存储引擎在行级别上对表数据上锁。</p><p>MyIsam引擎支持的是表锁设计。并发情况下的读没有问题，但是在并发插入的性能上会差一点，若插入在底部，MyISAM存储引擎有一定的并发写入操作。</p><p>InnoDB存储引擎提供一致性的非锁定读、行级锁支持。</p><h3 id="6-2-lock与latch"><a href="#6-2-lock与latch" class="headerlink" title="6.2 lock与latch"></a>6.2 lock与latch</h3><p><strong>latch</strong>是轻量级的锁。其要求锁定的时间短。在InnoDB中又分为mutex（互斥量)和rwlock（读写锁)。其目的是用来保证并发线程操作临界资源的正确性。没有思索检测机制。</p><p><strong>lock</strong>的对象是事务，锁定的是数据库中的对象。如表、页、行。在事务commit或rollback后进行释放。具有死锁机制。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211117205056.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看Innodb中的Latch,通过</span><br><span class="line">show engine innodb mutex</span><br><span class="line">&#x2F;&#x2F;在debug版本下 该命令可以查看更多信息</span><br></pre></td></tr></table></figure><h3 id="6-3-InnoDB存储引擎中的锁"><a href="#6-3-InnoDB存储引擎中的锁" class="headerlink" title="6.3 InnoDB存储引擎中的锁"></a>6.3 InnoDB存储引擎中的锁</h3><p>Innodb存储引擎实现如下两种标准的行级锁：</p><ol><li>共享锁(s)，允许事务读一行数据</li><li>排他锁(x)，允许事务删除或更新一行数据</li></ol><p>InnoDB存储引擎支持不同粒度上进行加锁操作。额外的加锁方式-&gt;<strong>意向锁</strong>（IS,IX)：将锁定的对象分为多个层次，意向锁意味着事务希望在更细粒度上进行加锁。</p><p>意向共享锁(IS LOCK):事务想要获得一张表中某几行的共享锁。</p><p>意向排他锁(IX LOCK)：事务想要获得一张表中某几行的排他锁。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211117210431.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看当前锁请求的信息</span><br><span class="line">show engine innodb status</span><br></pre></td></tr></table></figure><p>在Information_schema架构下三种表innodb_trx,innodb_locks,innodb_lock_waits</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211117211330.png"></p><p>该表只能显示当前运行的InnoDB事务，并不能直接判断锁的一些情况。若需要查看锁，还需要访问InnoDB_locks。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211117211543.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看表信息</span><br><span class="line">select * from information_schema.innodb_locks\G;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118131709.png"></p><p>Innodb_lock_waits表直观的反应了当前事务的等待。</p><h4 id="6-3-2-一致性非锁定读"><a href="#6-3-2-一致性非锁定读" class="headerlink" title="6.3.2 一致性非锁定读"></a>6.3.2 一致性非锁定读</h4><p>指InnoDB存储引擎通过行多版本控制的方式来读取当前执行时间数据库中的数据。如果读取的行正在执行delete或Update操作，这时读取操作不会因此去等待行上锁的释放。相反，InnoDB会去读取行的一个快照数据。</p><p><strong>非锁定读</strong>：因为不需要等待访问的行上x锁的释放。</p><p><strong>快照数据</strong>：指的是该行之前版本的数据，通过Undo段完成。undo用来在事务回滚数据。读取快照数据是不需要上锁的。</p><p>该机制提高了数据库的并发性。<strong>Innodb默认的读取方式</strong>，不会占用和等待表上的锁。</p><p><strong>MVCC</strong>多版本并发控制，快照数据是当前数据之前的历史版本，每行记录可能有多个版本。一行记录可能有不止一个快照数据。</p><p>在read committed和repeatable read事务隔离级别下，Innodb存储引擎使用非锁定的一致性读。</p><p>read commiteted：对于快照数据，非一致性读总是读取被锁定行的最新一份快照数据。</p><p>repeatable read：对于快照数据，非一致性读总是读取事务开始时的行数据版本。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118141409.png"></p><h4 id="6-3-3-一致性锁定读"><a href="#6-3-3-一致性锁定读" class="headerlink" title="6.3.3 一致性锁定读"></a>6.3.3 一致性锁定读</h4><p>Innodb引擎默认事务隔离级别为repeatable read模式,innodb存储引擎的select操作使用一致性非锁定读。</p><p>某些情况，用户需要显式地对数据库读取操作进行加锁以保证数据逻辑地一致性。</p><p>innodb对于select语句支持两种一致性地锁定读：</p><ol><li>select … for   update 对读取地记录加一个x锁，其他事务不能对已锁定地行加上任何锁。</li><li>select …  lock in  share mode 对读取地行记录加一个s锁，其他事务可以向被锁定地行加s锁，若加x锁，则会被阻塞。</li></ol><p>使用这两种锁定语句时，务必加上begin  ,  start  transaction  , set autocommit=0</p><p>6.3.4 自增长与锁</p><p>Innodb存储引擎地内存结构中，每个含有自增长值得表都有一个自增长计数器(auto-increment counter)。当对含有自增长得计数器得表进行插入操作时，这个计数器会被初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;得到计数器得值</span><br><span class="line">select max(auto_inc_col) from t for update</span><br></pre></td></tr></table></figure><p>插入操作会依据这个自增长得计数器值加1赋予自增长列。该方式称作<strong>auto-inc locking</strong>。<strong>该锁是一种特殊得表锁机制</strong>，为了提高插入得性能，锁不是在一个事务完成后释放得，而是在完成对自增长值插入得sql语句后立即释放得。</p><p>但是该锁会影响到大数据量的插入性能，因为另一个事务中的插入会阻塞。</p><p>从5.1.22版本开始  Innodb提供了一种轻量级互斥量的自增长实现机制。Innodb提供了一个参数Innodb_autoinc_lock_mode来控制增长的模式，默认值为1。自增长插入类型的分类：</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118144231.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118144316.png"></p><h4 id="6-3-5-外键和锁"><a href="#6-3-5-外键和锁" class="headerlink" title="6.3.5  外键和锁"></a>6.3.5  外键和锁</h4><p>外键主要引用完整性的约束检查。Innodb存储引擎中，对于一个外键列，如果没有显式地对这个列加索引，InnoDB存储引擎会自动对其加一个索引，因为这样可以避免表锁。</p><p>对于外键值得插入或更新，首先需要查询附表中得记录，即SELECT表。对于父表得SELECT操作，不是使用一致性非锁定读得方式，因为这样会发生数据不一致得问题，因此这时使用得时select … lock  in  share  mode方式，即主动对父表加一个S锁。</p><h3 id="6-4-锁算法"><a href="#6-4-锁算法" class="headerlink" title="6.4 锁算法"></a>6.4 锁算法</h3><p>行锁的三种算法：</p><p>1.Record Lock:单个记录上的锁</p><p>2.Gap Lock:间隙锁，锁定一个范围，但不包含记录本身。</p><p>3.Next-Key Lock:  Record Lock+ Gap Lock  锁定一个范围，并且锁定记录本身。</p><h3 id="6-5-锁问题"><a href="#6-5-锁问题" class="headerlink" title="6.5 锁问题"></a>6.5 锁问题</h3><h4 id="6-5-1-脏读"><a href="#6-5-1-脏读" class="headerlink" title="6.5.1 脏读"></a>6.5.1 脏读</h4><p><strong>脏页</strong>值的是在缓冲池中已经被修改的页，但是还没有刷新到磁盘中，即数据库实例内存中的页和磁盘中的页的数据是不一致的。当然在刷新到磁盘之前，日志都已经写入到了重做日志文件中。</p><p><strong>脏数据</strong>是指事务对缓冲池中行记录的修改，并且还没有被提交。</p><p>脏页的读取是正常的。脏页是因为数据库实例内存和磁盘的异步造成的，并不影响数据的一致性。脏页的刷新是异步的，提高性能。</p><p>脏数据却不一样，一个事务可以读到另一个事务未提交的数据，显然违背的数据库的隔离性。</p><p><strong>脏读</strong>指的就是在不同的事务下，当前事务可以读取到另外事务未提交的数据。即可以读取到脏数据。</p><h4 id="6-5-2-不可重复读"><a href="#6-5-2-不可重复读" class="headerlink" title="6.5.2 不可重复读"></a>6.5.2 不可重复读</h4><p><strong>不可重复度</strong>是指在一个事务内多次读取到统一数据集合。两次读取到的数据是不一样的。</p><p><strong>与脏读的区别是：</strong>脏读读取到的是未提交的数据，而不可重复读读取的是已经提交的数据，但是违反了数据库事务一致性的要求。</p><p>Mysql官方文档将不可重复的问题定义为Phantom Problem  即幻像问题。</p><p>innodB存储引擎默认事务隔离级别是READ REPEATABLE  采用Next-Key Lock算法，避免了不可重复读的现象。</p><h4 id="6-5-3-丢失更新"><a href="#6-5-3-丢失更新" class="headerlink" title="6.5.3  丢失更新"></a>6.5.3  丢失更新</h4><p><strong>丢失更新</strong>就是一个事务的更新操作会被另一个事务的更新操作所覆盖，导致数据的不一致。</p><p>但是在当前数据库中，无论是任何隔离级别下，都不会导致数据库理论意义上的丢失更新。因为需要对行或其他粗粒度级别的对象加锁。</p><p>要避免丢失更新发生，需要让事务在这种情况下的操作变成串行化，而不是并行的操作。</p><p>实际应用中使用select … for update  而不使用update是因为首先需要检测用户的余额信息，在看是否能进行修改操作。</p><h3 id="6-6-阻塞"><a href="#6-6-阻塞" class="headerlink" title="6.6 阻塞"></a>6.6 阻塞</h3><p><strong>阻塞</strong>由于不同锁之间的兼容性关系，有些时刻一个事务中的锁需要等待另一个事务中的锁释放它所占用的资源。</p><p>Innodb中参数<strong>innodb_lock_wait_timeout</strong>用来控制等待的时间（默认50秒）</p><p><strong>innodb_rollback_on_timeout</strong>用来设定是否在等待超时时对进行中的事务进行回滚操作（默认时OFF）</p><p><strong>innodb_lock_wait_timeout</strong>是动态的，通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set @@innodb_lock_wait_timeout&#x3D;60</span><br></pre></td></tr></table></figure><p><strong>innodb_rollback_on_timeout</strong>是静态的，不可再启动时进行修改。</p><p>当发生超时时，Mysql数据库会抛出一个1205的错误。</p><h3 id="6-7-死锁"><a href="#6-7-死锁" class="headerlink" title="6.7 死锁"></a>6.7 死锁</h3><p><strong>死锁时指两个或两个以上的事务再执行过程中，因争夺锁资源而造成的一种互相等待的现象。</strong>若无外力作用，事务将无法推进下去。</p><p>解决死锁的方式：</p><ol><li>不要有等待，所有的等待都转换为回滚，并且事务重新开始。但是会导致并发性能的下降，甚至任何一个事务都不能进行。</li><li>当两个事务互相等待时，当一个等接待时间超过设置的某一个阈值时，其中一个进行回滚，另一个等待的事务就能继续运行。InnoDB存储引擎中，参数innodb_lock_wait_timeout用来设置超时的时间。</li><li>除了超时机制，当前数据普遍采用wait-for graph（等待图）的方式进行死锁检测。</li></ol><p>wait-for graph要求数据库保存以下两种信息：</p><ol><li>锁的信息链表</li><li>事务等待链表</li></ol><p>通过上述列表构造出一张图，在这个图中若存在回路，就代表存在死锁，因此资源间相互发生等待。</p><p><strong>wait-for graph 是一种较为主动的死锁检测机制</strong>。每个事务请求锁并发生等待都会判断是否存在回路。若存在有死锁，通常来说InnoDB存储引擎选择回滚undo量最小的事务。</p><h4 id="6-7-2-死锁的概率"><a href="#6-7-2-死锁的概率" class="headerlink" title="6.7.2 死锁的概率"></a>6.7.2 死锁的概率</h4><p>死锁的概率与以下因素有关：</p><ol><li>系统中事务的数量，数量越多发生死锁的概率越大。</li><li>每个事务操作的数量越多，发生死锁的概率越大</li><li>操作数据的集合越小发生死锁的概率越大</li></ol><p>一个事务发生死锁的概率为</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211118184321.png"></p><p>Innodb存储引擎并不会回滚大部分的错误异常，但是死锁除外。Innodb发现死锁后，Innodb存储引擎会马上回滚一个事务。程序中捕获1213并不需要回滚。</p><h3 id="6-8-锁升级"><a href="#6-8-锁升级" class="headerlink" title="6.8 锁升级"></a>6.8 锁升级</h3><p><strong>锁升级</strong>是指将当前锁的粒度降低。</p><p>Innodb不是根据每个记录来产生行锁的。相反，其根据每个事务访问的每个页对锁进行管理，采用的是位图的方式。</p><h2 id="7-事务"><a href="#7-事务" class="headerlink" title="7.事务"></a>7.事务</h2><p>事务会把数据库从一种一致的状态转换为另一种一致状态。要么所有修改都已经保存了，要么所有修改都不保存。</p><p><strong>事务是访问并更新数据库中各种数据库项的一个程序执行单元。</strong></p><p>Atomicity(原子性)指数据库事务是不可分割的工作单位。只有事务中所有的数据库操作都执行成功，才算成功。</p><p>Consistency(一致性)指数据库从一种状态转变为下一种一致的状态。</p><p>isolation（隔离性）指每个读写事务对其他事务的操作对象能相互分离，即提交前对其他事务都不见，通常使用锁来实现。</p><p>durability（持久性）指事务一旦提交，其结果就是永久性的。即使发生宕机等故障，数据库也能教数据库恢复。</p><h4 id="7-1-2-分类"><a href="#7-1-2-分类" class="headerlink" title="7.1.2 分类"></a>7.1.2 分类</h4><p>事务的分类：</p><ol><li>扁平事务</li><li>带有保存点的扁平事务</li><li>链事务</li><li>嵌套事务</li><li>分布式事务</li></ol><p><strong>扁平事务</strong>：在实际生产环境中，最频繁的事务。</p><p>限制：<strong>不能提交或者回滚事务的某一部分，或者分几个步骤提交。</strong>回滚所有操作，代价太大，因为可能前面大多数操作是正确的，就最后操作有问题。</p><hr><p>因此，就出现了<strong>带保存点的扁平事务</strong>。可以有计划的回滚操作，不需要终止整个事务。</p><p><strong>保存点</strong>用来通知系统应该记住事务当前的状态，以便当之后发生错误时，事务能够回到保存点当时的状态。</p><p><strong>保存点用SAVE WORK来创建</strong>，通知系统记录当前的处理状态。当出现问题时，保存点能用作内部的重启动点。<strong>根据引用逻辑，决定回到哪个保存点。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211121182917.png"></p><hr><p><strong>链事务</strong>是保存点模式的一种变种。带有保存点的扁平事务，当发生系统崩溃时，所有的保存点都将消失，因为保存点是易失的(volatile)。</p><p><strong>链事务的思想是提交事务时，释放不需要的数据对象，将必要的处理上下文隐式地传给写一个要开始的事务。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211121183528.png"></p><hr><p><strong>嵌套事务</strong></p><hr><p><strong>分布事务</strong>通常在一个分布式环境下运行的扁平事务，根据数据所在位置访问网络中的不同节点。</p><h3 id="7-2-事务的实现"><a href="#7-2-事务的实现" class="headerlink" title="7.2 事务的实现"></a>7.2 事务的实现</h3><p>原子性、一致性、持久性通过数据库的redo log和Undo log来完成。</p><p><strong>redo log称为重做日志，保证事务的原子性和持久性。redo恢复提交事务修改的页操作。redo通常是物理日志，记录的是页的物理修改操作。</strong></p><p><strong>undo log用来办证事务的统一性。回滚到行记录到某个特定版本。undo是逻辑日志，根据每行记录进行记录。</strong>帮助事务回滚及MVCC功能。</p><h4 id="7-2-2-redo"><a href="#7-2-2-redo" class="headerlink" title="7.2.2 redo"></a>7.2.2 redo</h4><p>重做日志实现事务的持久性。包含两个部分：</p><ol><li>内存中的重做日志缓冲，易失的。</li><li>重做日志文件，持久的。</li></ol><p>Innodb是事务的存储引擎，通过Force log  at commit机制实现事务持久性，<strong>每当事务提交时，都会先将事务的所有日志写入到重做日志文件中。</strong></p><p>redo log顺序读写，数据库运行时不需要对redo log的文件进行读取操作。</p><p>undo log 进行随机读写。</p><p>为了确保重做日志写入磁盘，必须进行一次fsync操作。</p><p>参数innodb_flush_log_at_trx_commit用来控制重做日志刷新到磁盘的策略。</p><ul><li>默认值为1，表示事务提交时必须调用一次fsync操作</li><li>0表示提交时不进行写入重做日志操作，仅在Master thread中完成，在master thread中每1秒会进行一次重做日志文件fsync操作</li><li>2表示事务提交时讲重做日志写入重做日志文件，但是仅仅写入文件系统的缓存中，不进行fsync操作。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211122145810.png"></p><p>mysql数据库中还有一种二进制日志(binglog)。用来进行POINT-IN-TIME（PIT）的恢复及主从复制环境的建立。</p><p><strong>二进制日志和重做日志的区别</strong>：</p><ol><li>重做日志是在Innodb存储引擎上产生，二进制日志是在mysql数据库的上层产生，二进制日志不仅仅针对于Innodb存储引擎，mysql数据库中的任何存储引擎对于数据库的更改都会产生二进制日志。</li><li><strong>二进制日志是一种逻辑日志，记录的是对应的sql语句。Innodb存储引擎层面的重做日志是物理格式日志，记录的是对于每个页的修改。</strong></li><li>二者记录的时间也不同，二进制日志在事务提交完成后进行一次写入，Innodb存储引擎的重做日志在事务进行中不断地被写入。</li></ol><p><strong>2.log block</strong></p><p>InnoDB存储引擎中，重做日志以512字节进行存储。意味着重做日志缓存、重做日志文件都是以块的方式进行保存的，称为重做日志块，每块的大小为512字节。</p><p><strong>3.log group</strong></p><p>重做日志组，其中有多个重做日志文件。</p><p>4.<strong>重做日志格式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211122153945.png"></p><p>redo_log_type:重做日志的类型</p><p>space:表空间的ID</p><p>page_no:页的偏移量</p><p><strong>5.LSN</strong></p><p>log sequence number  日志序列号。LSN占用8字节，单挑递增。表示的含义有：</p><ol><li>重做日志写入的总量，单位字节</li><li>checkpoint的位置</li><li>页的版本</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211122154412.png"></p><p><strong>6.恢复</strong></p><p>Innodb’在启动时，不管上次数据库运行是否正常关闭，都会尝试进行恢复操作。重做日志记录的是物理日志，因此恢复的速度要比逻辑日志块，如二进制日志。</p><p>由于checkpoint表示已经刷新到磁盘上页的LSN，因此在恢复过程中仅需恢复checkpoint开始的日志部分。</p><h4 id="7-2-2-undo"><a href="#7-2-2-undo" class="headerlink" title="7.2.2 undo"></a>7.2.2 undo</h4><p>undo 进行事务的回滚操作。undo存放在数据库内部的一个特殊段中，该段为undo段。undo位于共享表空间内。</p><p>undo是逻辑日志，因此只是将数据库逻辑恢复到原来的样子。并不是将一个页回滚到事务开始的样子。</p><p>回滚就是执行相反的操作：Insert就是Delete，update对应相反的update</p><p>undo的另一个作用就是<strong>MVCC</strong>,<strong>即在Innodb存储引擎中MVCC的实现是通过undo来完成。</strong></p><p><strong>通过undo读取之前的版本信息来实现非锁定读取</strong></p><p><strong>undo log也会产生 redo  log，也就是Undo log的产生会伴随着redo log的产生，因为undo log也需要持久性的保护。</strong></p><p><strong>2.undo 存储管理</strong></p><p>Innodb存储对Undo的管理同样采用<strong>段</strong>的方式。和之前介绍的段不同。</p><p>可以通过以下参数对rollback segment做进一步的设置。</p><p>包括：</p><ol><li><p>innodb_undo_directory</p><p>设置rollback segment文件所在的路径，即rollback segement可以存放在共享表空间以外的位置。</p></li><li><p>innodb_undo_logs</p><p>设置rollback segement的个数，默认值为128</p></li><li><p>innodb_undo_tablespaces</p><p>设置rollback segement文件的数量。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查看innodb_undo参数</span><br><span class="line">show variables like &quot;innodb_undo%&quot;;</span><br></pre></td></tr></table></figure><p>事务提交时，Innodb存储引擎会做以下两件事情：</p><ol><li>将Undo log放入列表中，以供之后的purge操作</li><li>判断undo log所在的页是否可以重用，若可以分配给下个事务使用。</li></ol><p>事务提交后并不能马上删除Undo log及undo log所在的页。其他事务需要Undo log来得到行记录之前的版本。</p><p><strong>事务提交之后将Undo log放入一个链表中,是否可以删除Undo log以及undo log所在的页由purge线程来判断。</strong></p><p><strong>Innodb中对undo页重用</strong>：</p><ol><li>事务提交后，首先将Undo log放入链表中</li><li>判断undo页的使用空间是否小于3/4</li><li>若是则被重用，之后新的undo log记录在当前undo log的后面。</li></ol><p><strong>3.undo log格式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123152901.png"></p><p><strong>Innodb中  undo log分为</strong>：</p><ol><li>INSERT UNDO LOG</li><li>UPDATE UNDO LOG</li></ol><p><strong>1.  insert undo log</strong></p><p><strong>由insert操作产生的undo log</strong>。因为对Insert 操作的记录，只对事务本身可见，对其他事务不可见（事务隔离性的要求）。<strong>故undo Log可以在事务提交后直接删除。不需要进行purge操作。</strong></p><p><strong>2.update undo log</strong></p><p>记录的是对delete 和 update操作产生的undo log。<strong>该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。</strong></p><p>提交时放入Undo log链表。等待purge线程进行最后的删除。</p><h4 id="7-2-3-purge"><a href="#7-2-3-purge" class="headerlink" title="7.2.3 purge"></a>7.2.3 purge</h4><p>delete 和update操作可能并不直接删除原有的数据。</p><p>delete仅仅是将主键列等于1的记录delete flag设置为1，记录并没有被删除，记录还是存在于B+树的。<strong>真正删除这行记录的操作其实被延时了，最终在purge操作中完成。</strong></p><p><strong>purge用于最终完成delete 和 update操作。这样设计是为了Innodb存储引擎支持MVCC，所以记录不能再事务提交时立即进行处理。</strong>其他事务可能正在引用这行，Innodb存储引擎需要保存记录之前的版本，若该行不被任何其他事务引用，那么就可以进行正真的delete操作。</p><p>purge的执行过程：</p><ol><li>从history list中找到第一个需要被清理的记录</li><li>清理之后Innodb存储会在事务的undo log所在的页中继续寻找存在可以被清理的记录</li></ol><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123154419.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123154806.png"></p><h4 id="7-2-4-Group-commit"><a href="#7-2-4-Group-commit" class="headerlink" title="7.2.4 Group commit"></a>7.2.4 Group commit</h4><h3 id="7-3-事务控制语句"><a href="#7-3-事务控制语句" class="headerlink" title="7.3 事务控制语句"></a>7.3 事务控制语句</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>start transaction   |   begin</td><td>显示地开启一个事务</td></tr><tr><td>commit</td><td>提交事务</td></tr><tr><td>rollback</td><td>回滚事务</td></tr><tr><td>savepoint identifier</td><td>允许在事务中创建一个保存点，一个事务可以有多个保存点</td></tr><tr><td>release savepoint identifier</td><td>删除一个事务的保存点</td></tr><tr><td>rollback to identifier</td><td>回滚到目标标记点</td></tr><tr><td>set transaction</td><td>设置事务的隔离级别</td></tr></tbody></table><p>在存储过程中，只能使用start transaction语句来开启一个事务。</p><p>当<strong>completion_type</strong>参数为默认值0时，commit 和commit work是完全等价的。</p><p>当其为1时，commit word 等价于 <strong>commit and chain</strong>,表示马上自动开启一个相同隔离级别的事务。也就是事务变成了链事务。</p><p>当其为2时，等同于<strong>commit and release</strong>，在事务提交后会自动断开与服务器的连接。</p><p><strong>rollack to savepoiont命令并不真正地结束事务</strong>，也需要显示地允许commit或rollback命令。</p><h3 id="7-4-隐式提交的SQL语句"><a href="#7-4-隐式提交的SQL语句" class="headerlink" title="7.4 隐式提交的SQL语句"></a>7.4 隐式提交的SQL语句</h3><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123163016.png"></p><h3 id="7-5-对事务操作的统计"><a href="#7-5-对事务操作的统计" class="headerlink" title="7.5 对事务操作的统计"></a>7.5 对事务操作的统计</h3><h3 id="7-6-事务的隔离级别"><a href="#7-6-事务的隔离级别" class="headerlink" title="7.6 事务的隔离级别"></a>7.6 事务的隔离级别</h3><p><strong>1.Read Uncommitted</strong></p><p><strong>2.Read Committed</strong></p><p><strong>3.Repeatable Read</strong></p><p><strong>4.Serializable</strong></p><p>隔离级别越低，事务请求的锁越少或保持锁的时间就越短。这也是大多数数据库默认的事务隔离级别是Read Committed。</p><p>在Seriablable的事务隔离级别下，Innodb存储引擎会对每个select语句后自动加上loke in share mode，即为每个读取操作加一个共享锁。</p><p><strong>一般不在本地事务中使用seriablable的隔离级别，seriablable的事务隔离级别主要用于Innodb存储引擎的分布式事务。</strong></p><h3 id="7-7-分布式事务"><a href="#7-7-分布式事务" class="headerlink" title="7.7 分布式事务"></a>7.7 分布式事务</h3><h3 id="7-8-不好的事务习惯"><a href="#7-8-不好的事务习惯" class="headerlink" title="7.8 不好的事务习惯"></a>7.8 不好的事务习惯</h3><h4 id="7-8-1-在循环中提交"><a href="#7-8-1-在循环中提交" class="headerlink" title="7.8.1 在循环中提交"></a>7.8.1 在循环中提交</h4><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123210717.png"></p><p>会进行多次重做日志文件，增加消耗。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123210738.png"></p><p>只进行一次重做日志文件的写入。</p><p><strong>不应该在循环中反复进行提交操作，不论是显式地提交还是隐式地提交。</strong></p><h4 id="7-8-2-使用自动提交"><a href="#7-8-2-使用自动提交" class="headerlink" title="7.8.2  使用自动提交"></a>7.8.2  使用自动提交</h4><p>自动提交不是一个好习惯。</p><p>mysql数据库默认设置使用自动提交。</p><p>start transaction,begin显式地开启一个事务时，会默认执行set autocommit=0的命令。</p><h4 id="7-8-3-使用自动回滚"><a href="#7-8-3-使用自动回滚" class="headerlink" title="7.8.3 使用自动回滚"></a>7.8.3 使用自动回滚</h4><p>Innodb存储引擎支持通过定义一个Handler来进行自动事务的回滚操作。如在一个存储过程中发生了错误会自动对其进行回滚操作。</p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211123211509.png"></p><p>数据库开发人员应该自己正确的回滚事务，从而直到问题错在哪里。而不是交给系统。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>show命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对表中的每一个字段返回一行 包含每个字段的信息</span><br><span class="line">show columns from  table</span><br><span class="line">&#x2F;&#x2F;mysql  使用describe 作为show columns的快捷方式</span><br><span class="line">describe table 来代替 show columns from table</span><br><span class="line">&#x2F;&#x2F;显示服务器状态信息</span><br><span class="line">show status </span><br><span class="line">&#x2F;&#x2F;显示创建特定数据库或表的Mysql语句</span><br><span class="line">show create table  和   show create database</span><br><span class="line">&#x2F;&#x2F;显示授予用户的安全权限</span><br><span class="line">show grants</span><br><span class="line">&#x2F;&#x2F;显示服务器错误或者警告信息</span><br><span class="line">show  errors  和 show  warnings;</span><br></pre></td></tr></table></figure><p>select</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;限定行数</span><br><span class="line">limit 5    &#x2F;&#x2F;只要5行</span><br><span class="line">limit  5,5   &#x2F;&#x2F;从第5行开始的5行</span><br></pre></td></tr></table></figure><p>And操作符在计算次序中优先级更高，解决方法是使用圆括号明确的分组相应的操作符    </p><p>Regexp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; . 是正则表达式语言中表示匹配任意一个字符</span><br><span class="line"></span><br><span class="line">select pname</span><br><span class="line">from products</span><br><span class="line">where pname regexp &#39;.000&#39;</span><br><span class="line">order by pnmae;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; |为正则表达式的OR操作</span><br><span class="line">where pname regexp &#39;1000|2000&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; []为OR的另外一种形式</span><br><span class="line">where panme regexp &#39;[123] tom&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; -  [0-9] 代替了[12346789]  [a-z]匹配任意字母</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    \\表示的是转义  \\-  \\. 表示查找对用的字符</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211030154912.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211030155050.png"></p><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211030160113.png"></p><blockquote><p>mysql使用concat函数来拼接两个列</p><p>rtrim可以删除数据右侧多余的空格</p><p>Upper函数将文本转为大写</p><p>left 返回串左边的字符</p><p>length  返回串的长度</p><p>locate   找出串的子串</p><p>right    返回串右边的字符</p><p>soundex()    返回串的sound值   发音匹配</p><p>SubString     返回字串的字符</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/a2914475618/github-jsdelivr-@main/img/20211030162403.png"></p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql技术&quot;&gt;&lt;a href=&quot;#Mysql技术&quot; class=&quot;headerlink&quot; title=&quot;Mysql技术&quot;&gt;&lt;/a&gt;Mysql技术&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;声明：该文章为我学习Mysql技术引擎Innodb的笔记，欢迎查阅&lt;/p&gt;</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="mysql技术" scheme="https://a2914475618.github.io/tags/mysql%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>java面经</title>
    <link href="https://a2914475618.github.io/2021/10/09/java%E9%9D%A2%E7%BB%8F/"/>
    <id>https://a2914475618.github.io/2021/10/09/java%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-10-09T01:30:53.000Z</published>
    <updated>2021-11-05T12:27:28.738Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to real.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term=":面经" scheme="https://a2914475618.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu</title>
    <link href="https://a2914475618.github.io/2021/10/08/ubuntu/"/>
    <id>https://a2914475618.github.io/2021/10/08/ubuntu/</id>
    <published>2021-10-08T08:26:20.000Z</published>
    <updated>2021-10-08T08:47:05.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><blockquote><p>作为我用ubuntu踩坑的记录，大多是为了我以后容易查阅</p></blockquote><h2 id="ssh远程连接ubuntu"><a href="#ssh远程连接ubuntu" class="headerlink" title="ssh远程连接ubuntu"></a>ssh远程连接ubuntu</h2><blockquote><p>原文：<a href="https://blog.csdn.net/y22y22y/article/details/120339331">https://blog.csdn.net/y22y22y/article/details/120339331</a></p></blockquote><p>1.首先在Ubuntu上安装openssh-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><p>安装好以后，ssh server应该已经开始运行了，可以用下面的命令检查ssh server的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status sshd</span><br></pre></td></tr></table></figure><p>另外，需要的时候，还可以利用systemctl命令打开(start)/关闭(stop)/重启(restart)ssh server，例如下面的命令就可以用来重启ssh server服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure><p>2.利用Ubuntu自带的ufw 修改防火墙状态</p><p>首先开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure><p>打开传输ssh的端口（默认22） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow ssh</span><br></pre></td></tr></table></figure><p>设置ssh server开机启动 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable ssh</span><br></pre></td></tr></table></figure><p>3.现在就可以用 ssh username@IP远程连接电脑了</p><p>查询IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><p>所以ssh连接这台电脑的命令为⬇️</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh linuxconfig@192.168.1.112</span><br></pre></td></tr></table></figure><p>4.到上一步为止，其实已经可以实现连接功能了，但是为了安全着想，最好将ssh的端口从默认的22改为另一个大于1024的数字</p><p>编辑ssh server配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure><pre><code>Port 2222   #设置ssh的端口号PermitRootLogin yes   # 可以root远程登录</code></pre><p>打开设定的ssh端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 2222&#x2F;tcp</span><br></pre></td></tr></table></figure><p> 重启ssh server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart ssh</span><br></pre></td></tr></table></figure><p>现在，可以连接你的电脑了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 2222 linuxconfig@192.168.1.112</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu&quot;&gt;&lt;/a&gt;Ubuntu&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;作为我用ubuntu踩坑的记录，大多是为了我以后容易查阅&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="操作系统" scheme="https://a2914475618.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="ubuntu" scheme="https://a2914475618.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://a2914475618.github.io/2021/10/05/Docker/"/>
    <id>https://a2914475618.github.io/2021/10/05/Docker/</id>
    <published>2021-10-05T09:03:06.000Z</published>
    <updated>2021-10-08T07:33:40.076Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="docker" scheme="https://a2914475618.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>spring boot</title>
    <link href="https://a2914475618.github.io/2021/10/05/spring-boot/"/>
    <id>https://a2914475618.github.io/2021/10/05/spring-boot/</id>
    <published>2021-10-05T05:23:46.000Z</published>
    <updated>2021-10-08T07:32:57.680Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="spring boot" scheme="https://a2914475618.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>shiro</title>
    <link href="https://a2914475618.github.io/2021/10/01/shiro/"/>
    <id>https://a2914475618.github.io/2021/10/01/shiro/</id>
    <published>2021-10-01T01:44:24.000Z</published>
    <updated>2021-10-08T07:33:10.098Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="技术文档" scheme="https://a2914475618.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="shiro" scheme="https://a2914475618.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="https://a2914475618.github.io/2021/09/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>https://a2914475618.github.io/2021/09/29/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</id>
    <published>2021-09-29T10:46:09.000Z</published>
    <updated>2022-03-10T10:42:22.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h1><p>声明：该笔记内容来自清华大学软件工程<a href="https://www.xuetangx.com/course/THU08091000367/7754180?channel=i.area.recent_search">软件工程 - 清华大学 - 学堂在线 (xuetangx.com)</a></p><h2 id="软件工程概述"><a href="#软件工程概述" class="headerlink" title="软件工程概述"></a>软件工程概述</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><ul><li>软件是软件工程的研究对象，也是软件工程的产品形态与客观存在</li><li>工程是将理论和知识应用于实践的科学，其目的是经济有效的解决实际问题</li><li>软件致力解决如何以经济有效的方法开发高质量软件</li><li>包含软件和工程</li></ul><h3 id="2-本质特征"><a href="#2-本质特征" class="headerlink" title="2.本质特征"></a>2.本质特征</h3><ul><li>复杂性</li><li>一致性</li><li>可变性-》造成软件开发困难的原因</li><li>不可见性</li></ul><h3 id="3-面临的挑战"><a href="#3-面临的挑战" class="headerlink" title="3.面临的挑战"></a>3.面临的挑战</h3><ol><li>客户不满意</li><li>项目过程失控</li><li>风险与成本问题</li><li>无力管理团队</li></ol><blockquote><p>软件 能独立存在，需要依附于 定的环境（如硬件、网络以及其他软件）</p><p> 用户层次： 系列实现各种功能的图形化界面</p><p>计算机层次：软件 = 程序 + 数据 + 文档</p><p> 程序：计算机 以接受的 系列指令，运行时 以提供所要求的的功能和性能</p><p> 数据：使得程序能够适当地操作信息的数据结构</p><p> 文档：描述程序的研制过程、方法和使用的图文资料</p></blockquote><h3 id="4-基本概念"><a href="#4-基本概念" class="headerlink" title="4.基本概念"></a>4.基本概念</h3><p>将系统性的、规范化的、 定量的方法应用于软件的开发、运行和维护，即工程化应用到软件商</p><h3 id="5-基本要素"><a href="#5-基本要素" class="headerlink" title="5.基本要素"></a>5.基本要素</h3><ol><li><p>过程</p><p> 一系列开发活动，将客户需求转化成客户满意的产品</p><ol><li>问题定义</li><li>需求开发</li><li>软件设计</li><li>软件构造</li><li>软件测试</li></ol></li><li><p>方法</p><ol><li>面向过程：以算法作为基本构造单元，强调自顶向下的功能分解，将功能和数据进行一定程度的分离</li><li>面向对象：以类为基本程序单元，对象是类的实例化，对象之间以消息传递为基本手段</li><li>面向构件：寻求比类的粒度更大的且易于 用的构件，期望实现软件的再工程</li><li>面向服务：在应用表现层次上将软件构件化，即应用业务过程由服务组 ，而服务由构件组装而 </li></ol></li><li><p>工具</p><ol><li>软件构造工具</li><li>软件测试工具</li><li>软件工程管理工具</li><li>软件维护工具</li><li>软件建模工具</li></ol></li></ol><h3 id="6-软件开发基本策略"><a href="#6-软件开发基本策略" class="headerlink" title="6.软件开发基本策略"></a>6.软件开发基本策略</h3><ol><li><p>软件复用</p><p>构造一个新的系统 必从零做起，直接复用已有的构件进行组装。</p></li><li><p>分而治之</p><p>将一个大的问题分解成若干个简单的问题，然后逐个解决</p></li><li><p>逐步演进</p><p>软件开发是自底向上逐步有序的生长过程</p></li><li><p>优化折中</p></li></ol><h2 id="软件开发过程"><a href="#软件开发过程" class="headerlink" title="软件开发过程"></a>软件开发过程</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><h4 id="过程方法"><a href="#过程方法" class="headerlink" title="过程方法"></a>过程方法</h4><blockquote><p>过程方法是系统地识别和管理组织内所使用的过程，保证更有效地获得期望的结果</p></blockquote><h4 id="软件过程分类"><a href="#软件过程分类" class="headerlink" title="软件过程分类"></a>软件过程分类</h4><ol><li><p>管理过程</p><p>衡量和评价实现过程和 过程的效能建立起组织的质量管理体系</p></li><li><p>实现过程</p><p>提供有价值的产品或服务的关键性活动</p></li><li><p>支持过程</p></li></ol><h4 id="软件开发过程-1"><a href="#软件开发过程-1" class="headerlink" title="软件开发过程"></a>软件开发过程</h4><ol><li>问题提出</li><li>可行性研究</li><li>可行性分析报告</li><li>需求开发</li><li>软件设计</li><li>软件构造</li><li>软件测试</li><li>软件维护</li><li>软件项目管理</li><li>软件配置管理</li></ol><h3 id="2-软件过程模型"><a href="#2-软件过程模型" class="headerlink" title="2.软件过程模型"></a>2.软件过程模型</h3><blockquote><p>软件过程模型是对软件过程的抽象描述</p></blockquote><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><p>将基本的开发活动看做是一系列界限分明的独立阶段，这是一种计划驱动的软件过程，有利于规范软件开发活动</p><h4 id="原始化模型"><a href="#原始化模型" class="headerlink" title="原始化模型"></a>原始化模型</h4><p>原型是 一个部分开发的产品，用于加强对系统地理解，有助于明确需求和选择可行的设计策略。</p><h4 id="迭代化开发（增量）"><a href="#迭代化开发（增量）" class="headerlink" title="迭代化开发（增量）"></a>迭代化开发（增量）</h4><p>将描述、开发和验证等不同活动交织在 起，在开发过程中建立一系列版本，将系统一部分一部分地逐步交付。</p><h4 id="可转换模型"><a href="#可转换模型" class="headerlink" title="可转换模型"></a>可转换模型</h4><p>利用自动化的手段，通过一系列转换将需求规格化为一个可 交付使用的系统。</p><h2 id="用例建模"><a href="#用例建模" class="headerlink" title="用例建模"></a>用例建模</h2><p>用例是一种描述系统需求的方法，使用用例的方法来描述系统需求的过程就是用例建模。</p><p>1、基本思想：从用户的角度来看，他们并不想了解系统的内部结构和设计，他们所关心的是系统所能提供的服务，也就是被开发出来的系统将是如何被使用的。</p><p>2、用例模型的模型元素：</p><p>①参与者：参与者是指存在于被定义系统外部并与该系统发生交互的人或其他系统，他们代表的是系统的使用者或使用环境。</p><p>② 用 例：用例用于表示系统所提供的服务，它定义了系统是如何被参与者所使用的，它描述的是参与者为了使用系统所提供的某一完整功能而与系统之间发生的一段对话。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps86F9.tmp.jpg" alt="img"> </p><p>③通讯关联：通讯关联用于表示参与者和用例之间对应关系，它表示参与者使用了系统中的哪些服务（用例），或者说系统所提供的服务（用例）是被哪些参与者所使用的。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps86FA.tmp.jpg" alt="img"> </p><p>④系统边界：为了使得各个用例与子系统之间的关系更加明确，通常会使用一个系统边界来表</p><p>达一个子系统所包含的用例范围。</p><h3 id="3、两种表示形式"><a href="#3、两种表示形式" class="headerlink" title="3、两种表示形式"></a>3、两种表示形式</h3><p>①文本描述</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps870A.tmp.jpg" alt="img"> </p><p>②用例图</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps870B.tmp.jpg" alt="img"> </p><p>注：通讯关联表示的是参与者和用例之间的关系，箭头表示在这一关系，哪一方是对话的发主动发起者，箭头所指方是对话的被动接受者；如果你不想强调对话中的主动与被动关系，可以使用不带箭头的关联实线，在参与者和用例之间的信息流，不是由通讯关联来表示的，该信息流是缺省存在的（用例本身描述的就是参与者和系统之间的对话），并且信息流向是双向的，他与通讯关联箭头所指的方向毫无关系。</p><h3 id="4、用例建模过程"><a href="#4、用例建模过程" class="headerlink" title="4、用例建模过程"></a>4、用例建模过程</h3><p>用例模型主要包括：</p><p>①用例图——确定系统中所包含的参与者、用例和两者之间的对应关系，用例图描述的是关于系统功能的一个概述</p><p>②用例规约——针对每一个用例都应该有一个用例规约文档与之相对应，该文档描述用例的细节内容</p><p>（1）寻找参与者</p><p>参与者——所有存在于系统外部并与系统进行交互的人或其他系统</p><p>系统开发完成之后，有哪些人会使用这个系统？</p><p>系统需要从哪些人或其他系统中获得数据？</p><p>系统会为哪些人或其他系统提供数据？</p><p>系统会与哪些其他系统相关联？</p><p>系统是由谁来维护和管理的？</p><p>（2）识别用例</p><p>找到参与者之后，我们就可以根据参与者来确定系统的用例，主要是看各参与者需要系统提供什么样的服务，或者说参与者是如何使用系统的。</p><p>参与者为什么要使用该系统？</p><p>参与者是否会在系统中创建、修改、删除、访问、存储数据？如果是的话，参与者又是如何来完成这些操作的？</p><p>参与者是否会将外部的某些事件通知给该系统？</p><p>系统是否会将内部的某些事件通知该参与者？</p><p>（3）关联</p><p>在一般的用例图中，我们只表述参与者和用例之间的关系，即它们之间的通讯关联。除此之外，我们还可以描述参与者与参与者之间的泛化(generalization)、用例和用例之间的包含(include)、扩展(extend)和泛化(generalization)关系。我们利用这些关系来调整已有的用例模型，把一些公共的信息抽取出来重用，使得用例模型更易于维护。但是在应用中要小心选用这些关系，一般来说这些关系都会增加用例和关系的个数，从而增加用例模型的复杂度。而且一般都是在用例模型完成之后才对用例模型进行调整，所以在用例建模的初期不必要急于抽象用例之间的关系。</p><h2 id="面向对象分析及UML类图"><a href="#面向对象分析及UML类图" class="headerlink" title="面向对象分析及UML类图"></a>面向对象分析及UML类图</h2><h3 id="1、面向对象分析"><a href="#1、面向对象分析" class="headerlink" title="1、面向对象分析"></a>1、面向对象分析</h3><p>Ÿ 面向对象分析技术关注应用领域中的实体，并将其建模为对象</p><p>Ÿ 面向对象分析技术主要基于分类、泛华、聚合关系在对象集合之间建立结构</p><p>Ÿ 对象的行为是执行预定的动作（服务/活动）</p><p>Ÿ 对象通过执行动作来完成状态变迁</p><h3 id="2、面向对象分析的起源"><a href="#2、面向对象分析的起源" class="headerlink" title="2、面向对象分析的起源"></a>2、面向对象分析的起源</h3><p>Ÿ 面向对象程序设计（OPP）：将OPP中的概念上推到分析和设计阶段</p><p>Ÿ 数据库设计：将数据语义建模概念，如实体—关系、泛华、聚合和分类用于系统分析和设计</p><p>Ÿ 结构化分析：将结构化分析方法与技术，如SDAT方法等用于系统分析与建模</p><p>Ÿ 知识表示：采用基于问题框架和语义网络的知识表示方法</p><h3 id="3、面向对象分析方法举例"><a href="#3、面向对象分析方法举例" class="headerlink" title="3、面向对象分析方法举例"></a>3、面向对象分析方法举例</h3><p>Ÿ <img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB967.tmp.jpg" alt="img">Peter Coad的面向对象方法</p><p>Ÿ “对象”是问题领域中真实存在的实体，有“定义清晰的边界” </p><p>Ÿ 对象中封装有属性和行为</p><p>Ÿ 面向对象分析的五个核心概念：对象、属性、结构、服务和主题</p><h3 id="4、结构"><a href="#4、结构" class="headerlink" title="4、结构"></a>4、结构</h3><p>①结构/一般-特殊结构：一般-特殊结构将类组织成基于集成关系的分层次结构</p><p>Ÿ 自底向上是从特殊到一般的类</p><p>Ÿ 自顶向下是从一般到特殊的类</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB968.tmp.jpg" alt="img"> </p><p>②整体-部分结构</p><p>整体部分结构描述对象间的组合关系</p><p>一个交通灯对象由0-3个灯组，支撑杆和位置对象组合而成</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB969.tmp.jpg" alt="img"> </p><h3 id="5、服务"><a href="#5、服务" class="headerlink" title="5、服务"></a>5、服务</h3><p>①服务建模</p><p>对象为其周遭的其他对象提供服务，例如医生对象对外提供的服务包括体检、出体检报告等</p><p>Coad 的OAA方法中，定义了三中类型的服务：</p><p>Ÿ 瞬时服务：对象的创建、结束、修改等</p><p>Ÿ 计算服务：对象为其他对象完成计算服务等</p><p>Ÿ 监控服务：对象持续监控流程，检查预设条件是否满足</p><p>我们用带箭头的虚线来表示一个对象引用另一个对象的服务</p><p>注：从面向对象到面向服务，是看待问题的视角的切换</p><p>②服务关系</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB979.tmp.jpg" alt="img"> </p><h3 id="6、面向对象的分析方法学"><a href="#6、面向对象的分析方法学" class="headerlink" title="6、面向对象的分析方法学"></a>6、面向对象的分析方法学</h3><p>Ÿ 识别对象和类（类是对象的抽象定义）</p><p>Ÿ 识别类之间的关系，建立由继承和组合关系组成的类层次结构</p><p>Ÿ 定义主题，通过主题将对象模型组织成多个抽象层次或视角，一般来说通过继承关系或整体部分关系联系起来的类同属于一个主题</p><p>Ÿ 识别各个对象内部的属性信息，并将其赋予相应抽象层次的类</p><p>Ÿ 为每个类定义服务    </p><p>7、面向对象分析常用术语对照表</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB97A.tmp.jpg" alt="img"> </p><p>CRC卡片分拣法</p><p>1、识别类的方法</p><p>Ÿ 根据用例描述中的名词确定类的候选者</p><p>Ÿ 使用CRC卡分析法寻找类</p><p>Ÿ 根据边界类、控制类和实体类的划分来帮助发现系统中的类</p><p>Ÿ 对领域进行分析，或利用已有的领域分析结果得到类</p><p>Ÿ 参考分析、设计模式来确定类</p><p>2、CRC卡片</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB97B.tmp.jpg" alt="img"> </p><p>注：类对象通常对应一个命名实体，因此用名词表达</p><p>3、对象</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB97C.tmp.jpg" alt="img"> </p><p>4、类识别</p><p>Ÿ 从原始资料中识别类：找出干系人提交的问题描述中名词及短语（如果他描述应用领域中的信息结构或本质，则加入模型）</p><p>Ÿ 从其他来源识别：背景信息调查、用户及干系人提供、分析模式</p><p>Ÿ 最好识别处尽可能多的候选类：之后逐步按照其价值功用进行选择、明确判断后排除一个类要比不考虑来的合理</p><p>5、识别类的功能职责</p><p>功能职责关乎动作，因此是问题描述中的动词</p><p>注意：</p><p>1、并非所有动词均将成为类职责</p><p>2、有时多个动作合并为一个职责</p><p>3、随着分析过程深入会发现新的职责</p><p>4、不断修正类定义和职责定义</p><p>5、当两个类分享职责时，为二者同时添加该职责</p><p>4、类筛选</p><p>Ÿ 在候选类中排除一下类：</p><p>超出问题关注的范围的类</p><p>指代整个系统的类</p><p>功能重复的类</p><p>过于含糊或过于具体的类</p><p>可观察到的现象是，实例对象过多或过少</p><p>Ÿ Coad &amp;Yourdon’s的筛选原则：</p><p>保存对象信息：系统需要保存对象信息吗？</p><p>提供所需服务：类对象是否对外提供修改属性值的操作？</p><p>具有多个属性：只有一个属性的类，应该建模为属性</p><p>具有公共属性：类属性是否为所有实例对象共享？</p><p>具有公共操作：类操作是否为所有实例对象共享？</p><p>外部实体：如果生产或使用对象的信息，也应考虑建模为系统类</p><p>类图建模</p><p>1、什么是类</p><p>具有相同性质、相同行为、相同的对象关系、相同语义的对象的集合</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB97D.tmp.jpg" alt="img"> </p><p>2、对象</p><p>Ÿ 对象是类的实例</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB98E.tmp.jpg" alt="img"> </p><p>注：两个不同的对象可以有相同的属性取值</p><p>Ÿ 对象与其他对象之间发生关联关系</p><p>Ÿ 注意将属性划归正确的类</p><p>3、类属性定义</p><p>属性在类图标的属性分隔框中用文字串说明，UML规定属性的语法为：</p><p>[可见性]属性名[：类型]{[多样性[次序]]}[=c初始值][{约束}]</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB98F.tmp.jpg" alt="img"><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB990.tmp.jpg" alt="img"> </p><p>4、类关系</p><p>Ÿ 对象并非遗世独立，对象间存在千丝万缕的联系</p><p>UML中，关注一下几种类型的关系：</p><p>Ÿ 关联关系：聚合与组合关系</p><p>Ÿ 泛华关系</p><p>Ÿ 依赖关系</p><p>Ÿ 实现关系</p><p>Ÿ 类图描述类和他们之间的关系</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB991.tmp.jpg" alt="img"> </p><p>5、关联关系的种类</p><p>按照关联所连接的类的数量，对象类之间的关联可分为：自反关联、二元关联，N元关联</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB992.tmp.jpg" alt="img"> </p><p>关联关系图例</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB993.tmp.jpg" alt="img"> </p><p>6、关联类</p><p>有时要为关联相关信息的存储定义一个专门的类，称为“关联类”</p><p>保存与关联关系本身相关的信息</p><p>这些信息不属于关联所连接的两端的类</p><p>例：“title”类的对象中存储的是车主和车辆之间所属关系有关的信息</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A4.tmp.jpg" alt="img"> </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A5.tmp.jpg" alt="img">7、限定关联</p><p>在关联端紧靠源类图标处可以有限定符。带有限定符的关联称为限定关联。</p><p>Ÿ 限定符是关联的属性</p><p>Ÿ 限定符的作用是，给定关联一段的一个对象和限定符值，可确定另一端的一个对象或对象集</p><p>8、聚合与组合关系</p><p>Ÿ 聚合用于表达一个整体对象与其他成员对象之间的关系</p><p>Ÿ 组合用于表达一个整体对象与其组成部分之间的关系</p><p>Ÿ 组合关系所表达的整体类与部分类之间的所属关系更强</p><p>整体类的对象不存在时，部分类的对象也不存在</p><p>整体类对象撤销之前要复杂将部分类对象撤销</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A6.tmp.jpg" alt="img"> </p><p>9、继承/泛华</p><p>Ÿ 子类继承父类的属性、关联和操作</p><p>Ÿ 子类可以覆盖继承的内容</p><p>Ÿ 父类可以声明为抽象类，则将不会为它直接创建实例对象</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A7.tmp.jpg" alt="img"> </p><p>Ÿ 继承/泛华关系建模的意义在于系统环境发生变化时便于添加新的子类</p><p>Ÿ 继承/泛华关系建模的过程</p><p>自顶向下——将某个类分割为属性和操作不同的子类，或者发现关联关系定义的是分类关系</p><p>自底向上——为现有的多个具有公共属性及方法的类，定义一个父类</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A8.tmp.jpg" alt="img"> </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9A9.tmp.jpg" alt="img"> <img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9B9.tmp.jpg" alt="img"></p><p>10、类图的抽象</p><p>在软件开发的不同阶段使用的类图具有不同的抽象层次。概念类、设计说明类和实现类。最先由Steve Cook和John Daniels引入。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9BA.tmp.jpg" alt="img"> </p><p>11、类图建模风格</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsB9BB.tmp.jpg" alt="img"> </p><h2 id="软件系统设计"><a href="#软件系统设计" class="headerlink" title="软件系统设计"></a>软件系统设计</h2><h3 id="1软件体系结构概念"><a href="#1软件体系结构概念" class="headerlink" title="1软件体系结构概念"></a>1软件体系结构概念</h3><p>1.1概念</p><p>软件体系结构包括构成系统的设计元素的描述、设计元素之间的交互、设计元素的组合模式以及这这些模式中的约束。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps261D.tmp.jpg" alt="img"> </p><p>1.2目标</p><p>ž 如何将复杂的软件系统划分成模块</p><p>ž 如何规范模块的构成</p><p>ž 如何将这些模块组织成为完整的系统</p><p>ž 如何保证系统的质量要求</p><p>注：当系统的规模和复杂度不断增大的时候，构造整个系统的关键是对整个系统的结构和行为进行抽象。</p><h3 id="2-软件体系结构-构件-连接件-约束"><a href="#2-软件体系结构-构件-连接件-约束" class="headerlink" title="2.软件体系结构=构件+连接件+约束"></a>2.<strong>软件体系结构=构件+连接件+约束</strong></h3><p>2.1构件</p><p>构件是具有某种功能的可复用的软件结构单元，表示系统中主要的计算元素和数据存储</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps261E.tmp.jpg" alt="img"> </p><p>①构件组合成系统</p><p>②构件提供服务，通过结构与其他构件进行交互</p><p>2.2连接件</p><p>连接件是负责构件之间交互的专用构件，如管道</p><p>构件是软件功能设计和实现的承载体</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps261F.tmp.jpg" alt="img"> </p><p>连接机制：过程调用、中断、I/O、事件、进程、线程、共享、同步、并发、消息、远程调用、动态连接、API等等</p><p>连接协议： 对过程调用来说——参数的个数和类型、参数排列次序</p><p>​      对消息传送来说——消息的格式</p><h3 id="3-软件体系结构的目标"><a href="#3-软件体系结构的目标" class="headerlink" title="3.软件体系结构的目标"></a>3.软件体系结构的目标</h3><p>可重用性、可扩展性、可改变性、简单性、有效性</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2620.tmp.jpg" alt="img"> </p><p>4.软件体系结构的发展</p><p>面向过程的分析与设计——面向对象的分析与设计——基于构件的软件开发——面向服务的计算、面向服务的体系结构</p><p>设计的趋势：分布式、低耦合、开放</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2621.tmp.jpg" alt="img"> </p><p>5.风格、模式和框架</p><p>主程序 - 子程序，树形结构，如C程序</p><p>面向对象，网状结构，如CPP/JAVA程序</p><p>管道 - 过滤器，通过输入和输出串联，线性结构，如媒体播放器</p><p>仓库结构，以数据为中心，放射状结构，如剪贴板、编译器、数据库</p><p>层次结构</p><p>客户机 - 服务器</p><p>表示层 -（功能层）- 数据层</p><p>MVC结构：Model 模型、视图 View、控制器 Controller，前端给后端AJAX，后端返回给前端JSON</p><p>REST，RE presentational State Transfer</p><p>事件风格，以代码调试为例</p><p>调试器设置断点，作为事件源</p><p>IDE作为事件管理器，事件触发时发出消息</p><p>文本编辑器、编译器、变量监视器对断点事件进行响应，相当于event handler</p><p>具体实现分为发布订阅模式和观察者模式</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2622.tmp.jpg" alt="img"> </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2623.tmp.jpg" alt="img"> </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2624.tmp.jpg" alt="img"> </p><p>6.软件设计原则</p><p>6.1抽象——关注事物中与问题相关部分而忽略其他无关部分的一种思考方法</p><p>6.2封装和信息隐藏——每个软件单元对其他所有单元都隐藏自己的设计决策，各个单元的特性通过其外部可见的接口来描述</p><p>要求：应将单元接口设计得尽可能简单，并将单元对于环境的假设和要求降至最低</p><p>6.3模块化——在逻辑和物理上将整个系统分解成多个更小的部分，其实质是“分而治之”，即将一个复杂问题分解成若干个简单问题，然后逐个解决</p><p>系统分解的目标：高内聚、低耦合</p><p>内聚性是一个模块或子系统内部的依赖程度</p><p>耦合性是两个模块或子系统之间依赖关系的强度</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2635.tmp.jpg" alt="img"> <img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2636.tmp.jpg" alt="img"></p><p>6.4层次化——</p><p>分层：  每一层可以访问下层，不能访问上层；分层机构：每一层只能访问与其相邻的下一层；开放式结构：每一层还可以访问下面更低的层次；层次数目不应超过7±2层</p><p>划分：系统被分解成互相对等的若干模块单元；每个模块之间依赖较少，可以独立运行</p><p>注：模块单元增加了处理开销，过度分层或划分会增加复杂性</p><p>6.5复用——利用某些已开发的、对建立新系统有用的软件元素来生成新的软件系统，其好处在于提高生产效率，提高软件质量 </p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2637.tmp.jpg" alt="img"> </p><p>7.客户机/服务器结构</p><p>客户机/服务器体系结构是一种分布式系统模型，作为服务器的子系统为其他客户机的子系统提供服务，作为客户机的子系统负责与用户的交互</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2638.tmp.jpg" alt="img"> </p><p>7.1两层C/S结构（胖客户端模型）</p><p>业务逻辑的划分比重：</p><p>胖客户端：客户端执行大部分的数据处理操作</p><p>瘦客户端：客户端具有很少或没有业务逻辑</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps2639.tmp.jpg" alt="img"> </p><p>7.2三层C/S结构 </p><p>表示层：包括所有与客户机交互的边界对象，如窗口、表单、网页等</p><p>功能层：包括所有的控制和实体对象，实现应用程序的处理逻辑和规则</p><p>数据层：实现对数据库的存储、查询和更新</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps263A.tmp.jpg" alt="img"> </p><p>7.3B/S结构</p><p>浏览器/服务器结构是三层C/S风格的一种实现方式</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps263B.tmp.jpg" alt="img"> </p><p>8.Web系统架构设计</p><p>9.数据库选择策略</p><p>l 关系型，规整的表格；key-value型，灵活的内容</p><p>l 事务，即对数据库的一次操作确保原子性，完全执行或不执行</p><p>l 一致性，A发照片，好友都能看到；理想情况要求实时，现实中允许一定延迟</p><p>l 主要的数据库类型：</p><p>n MySQL，关系型数据库，支持事务操作，安全性高</p><p>n MongoDB，非关系型数据库，结构灵活，数据模型易扩展易修改，分布式，不支持事务操作，安全性一般</p><p>n Redis，内存数据库，速度快，数据安全性差</p><p>l 需要事务操作 - MySQL，发展中的业务 - MongoDB，频繁读取 - Redis</p><h2 id="UML活动图及其建模"><a href="#UML活动图及其建模" class="headerlink" title="UML活动图及其建模"></a>UML活动图及其建模</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>一个UML活动图表示一个过程中的多个顺序活动和并行活动。这些活动图有助于对业务过程、工作流、数据流和复杂算法进行建模。</p><h3 id="2、活动图基本元素"><a href="#2、活动图基本元素" class="headerlink" title="2、活动图基本元素"></a>2、活动图基本元素</h3><p><strong>初始节点和活动终点</strong></p><p>用一个实心圆表示初始节点</p><p>用一个圆圈加一个实心圆表示活动终点</p><p><strong>活动节点</strong></p><p>矩形（四角圆弧）</p><p><strong>转换</strong></p><p>当一个活动结束时，控制流就会马上传递给下一个活动节点，在活动图中称之为“转换”，用一条带箭头的直线来表示</p><p><strong>分支与监护条件</strong></p><p>分支用菱形表示，他有一个进入转换（箭头从外指向内分支符号），一个或多个离开转换（箭头从分支符号指向外）。而每个离开转换上都会有一个监护条件，用来表示满足什么条件的时候执行该转换</p><p><strong>分岔与汇合</strong></p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsF58A.tmp.jpg" alt="img"> </p><p><strong>泳道</strong></p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wpsF58B.tmp.jpg" alt="img"> </p><p>3、准则</p><p>ž 活动图通常对于设计众多参与者的非常复杂的业务过程，建模具有价值。对于简单的业务过程，用例文本就足够用了。</p><p>ž 在进行业务过程建模时，可以利用耙字符号和子活动图。</p><p>ž 与上一条相关的是，尽量保持同一张图中所有动作几点的抽象水平一致。</p><p>UML状态机图及其建模</p><p>1、简介</p><p>UML状态机图描述了某个对象的状态和感兴趣的时间以及对象响应该事件的行为。</p><p>通常我们创建一个UML状态图是为了以下的研究目的：研究类、角色、子系统、或组件的复杂行为。</p><p>2、状态机图基本元素</p><p><strong>状态</strong></p><p>状态指的是对象在其生命周期中的一种状况，处于某个特定状态中的对象必然会满足某些条件、执行某些动作或者是等待某些事件。一个状态的生命周期是一个有限的时间阶段。</p><p><strong>转换</strong></p><p>转换指的是两个不同状态之间的一种关系，表明对象在第一个状态中执行一定的动作，并且在满足某个特定条件下由某个事件触发进入第二个状态。</p><p><strong>事件</strong></p><p>事件指的是发生在时间和空间上的对状态机来讲有意义的那些事情。事件通常会引起状态的变迁，促使状态机从一种状态切换到另一种状态，如信号、对象额度创建和销毁等。</p><p><strong>活动</strong></p><p>活动指的是状态机中进行的非原子操作。</p><p><strong>动作</strong></p><p>动作指的是状态机中可以执行的哪些原子操作。所谓原子操作，指的是他们在运行的过程中不能被其他消息中断，必须一直执行下去，以至最终导致状态的变更或者返回一个值。</p><h2 id="详细设计及结构化程序"><a href="#详细设计及结构化程序" class="headerlink" title="详细设计及结构化程序"></a>详细设计及结构化程序</h2><h3 id="1、详细设计阶段——根本目标：确定应该怎样具体实现所需求的系统"><a href="#1、详细设计阶段——根本目标：确定应该怎样具体实现所需求的系统" class="headerlink" title="1、详细设计阶段——根本目标：确定应该怎样具体实现所需求的系统"></a>1、详细设计阶段——根本目标：确定应该怎样具体实现所需求的系统</h3><h3 id="2、结构化程序设计的经典定义"><a href="#2、结构化程序设计的经典定义" class="headerlink" title="2、结构化程序设计的经典定义"></a>2、结构化程序设计的经典定义</h3><p>如果一个程序的代码块仅仅通过顺序、选择和循环这三种控制结构进行连接，并且每个代码块只有一个入口和一个出口，则称这个程序是结构化的</p><h3 id="3、三种基本的控制结构"><a href="#3、三种基本的控制结构" class="headerlink" title="3、三种基本的控制结构"></a>3、三种基本的控制结构</h3><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705B.tmp.jpg" alt="img"> </p><p>4、结构化程序设计的主要原则</p><p>Ÿ 使用语言中的顺序、选择、重复等有限的基本控制结构表示程序逻辑</p><p>Ÿ 复杂结构应该用基本控制结构进行组合嵌套来实现</p><p>Ÿ 选用的控制结构只准许有一个入口和一个出口</p><p>Ÿ 严格控制GOTO语句，仅在下列情形才可使用：</p><p>1、若不使用GOTO语句就会使程序功能模糊</p><p>2、在某种可以改善而不是损害程序可读性的情况下。</p><p>5、程序流程图</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705C.tmp.jpg" alt="img"><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705D.tmp.jpg" alt="img"> </p><p>缺点：过早注重细节、过于详细、随意转换控制、不易表示数据结构</p><p>6、盒图</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705E.tmp.jpg" alt="img"> </p><p>特点</p><p>Ÿ 功能域明确</p><p>Ÿ 不能任意转换控制</p><p>Ÿ 容易确定变量的作用域</p><p>Ÿ 容易表现嵌套关系及模块的层次结构</p><p>7、判定表</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps705F.tmp.jpg" alt="img"> </p><p>特点</p><p>Ÿ 能够简洁无歧义地描述复杂处理规则</p><p>Ÿ 可以校验和化简</p><p>Ÿ 无法通程序结构直接关联</p><p>8、判定树</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps7060.tmp.jpg" alt="img"> </p><p>9、程序设计语言</p><p>Ÿ PDL也称为伪码，它是用正文形式表示数据和处理过程的设计工具</p><p>Ÿ PDL具有严格的关键字外部语法，用于定义控制结构和数据结构</p><p>Ÿ PDL是一种“混杂”语言，它使用一种语言（通常是某种自然语言）的词汇，同时却使用另一种语言的语法（某种结构化的程序设计语言）</p><p>PDL特点</p><p>Ÿ 容易与程序注释结合，容易编辑</p><p>Ÿ 可以定义数据结构</p><p>Ÿ 机器可以识别，能自动生产程序框架</p><p>Ÿ 缺乏直观性</p><h2 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h2><h3 id="1、测试用例"><a href="#1、测试用例" class="headerlink" title="1、测试用例"></a>1、测试用例</h3><p>测试数据和预期的输出结果称为测试用例</p><p>Ÿ 具体的测试目的（例如，要测试的具体功能）</p><p>Ÿ 应该输入的测试数据</p><p>Ÿ 预期的输出结果</p><h3 id="2、黑盒测试和白盒测试"><a href="#2、黑盒测试和白盒测试" class="headerlink" title="2、黑盒测试和白盒测试"></a>2、黑盒测试和白盒测试</h3><p>Ÿ 黑盒测试法把程序看成一个黑盒子，完全不考虑程序的内部结构和处理过程，黑盒测试又称为<strong>功能测试</strong></p><p>Ÿ 白盒测试法的前提是可以把程序看成装在一个透明的白盒子里，也就是完全了解程序的结构和处理过程，白盒测试又称为<strong>结构测试</strong></p><h3 id="3、相关概念"><a href="#3、相关概念" class="headerlink" title="3、相关概念"></a>3、相关概念</h3><p>逻辑覆盖：</p><p>逻辑覆盖是设计白盒测试方案的一种技术；这组测试过程逐渐进行越来越完成的通路测试；选用少量“最有效的”测试数据；尽可能完备的测试</p><p>语句覆盖：</p><p>选择足够多的测试数据，使被测程序中每个语句至少执行一次</p><p>判定覆盖（分支覆盖）：</p><p>不仅每个语句必须至少执行一次；而且每各判定的每种可能的结果都应该至少执行一次，也就是每个判定的每个分支都至少执行一次</p><p>其他逻辑覆盖</p><p>条件覆盖：不仅每个语句至少执行一次，而且使判定表达式中的每个条件都去到各种可能的结果</p><p>判定/条件覆盖：选取足够多的测试数据，使得判定表达式中的每个条件都取到各种可能的值，而且每个判定表达式也都取到各种可能的结果</p><h3 id="4、McCabe方法——流图"><a href="#4、McCabe方法——流图" class="headerlink" title="4、McCabe方法——流图"></a>4、McCabe方法——流图</h3><p>McCabe方法根据程序控制流的复杂程度定量度量程序的复杂程度，度量出的结果称为程序的<strong>环形复杂程度</strong></p><p>为了突出表示程序的控制流，人们通常使用<strong>流图</strong>（也称为程序图）</p><p>实质——“退化了的”程序流程图</p><p>Ÿ 仅仅描绘程序的控制流程</p><p>Ÿ 不表现对数据的具体操作</p><p>Ÿ 不表现分支或循环的具体条件</p><h3 id="5、流图"><a href="#5、流图" class="headerlink" title="5、流图"></a>5、流图</h3><p><strong>节点：</strong></p><p>在流图中用圆表示，一个圆代表一条或多条无分支语句</p><p><strong>边：</strong></p><p>流图中的箭头线，和程序流程图中的箭头线类似，代表控制流</p><p>在流图中一条边必须终止于一个节点，即使这个节点并不代表认识语句（实际上相当于一个空语句）</p><p><strong>区域：</strong></p><p>由边和节点围成的面积，当计算区域数时应该包括图外部未被包围起来的那个区域</p><h3 id="6、环形复杂度"><a href="#6、环形复杂度" class="headerlink" title="6、环形复杂度"></a>6、环形复杂度</h3><p>环形复杂度定量度量程序的逻辑复杂性</p><p>Ÿ V(G)=E-N+2，其中E是流图中边的条数，N是流图中节点数。</p><p>Ÿ V(G)=P+1，其中P是流图中判定节点的数目。</p><h3 id="7、基本路径测试"><a href="#7、基本路径测试" class="headerlink" title="7、基本路径测试"></a>7、基本路径测试</h3><p>概念</p><p>以流图的环形复杂度为指南定义执行路径的基本集合，从该基本集合导出的测试用例可以保证程序中的每条语句至少执行一次，而且每个条件在执行时都将分别取true和false值。</p><p>步骤</p><p>①根据过程设计结果画出相应的流图</p><p>②计算流图的环形复杂度</p><p>③确定线性独立路径的基本集合</p><p>a、程序的环形复杂度决定了程序中独立路径的数量</p><p>b、独立路径至少包含一条在定义该路径之前不曾用过的边</p><p>④设计可强制执行基本集合中每条路径的测试用例</p><p>黑盒测试</p><p>1测试</p><p>1.1测试用例的重要性——设计良好的测试用例是关键</p><p>①降低软件测试成本</p><p>②保证测试工作质量</p><p>③评估和检验测试效果</p><p>1.2测试用例的概念</p><p>Ÿ 测试用例值：完成被测软件的某个执行所需的输入值</p><p>Ÿ 期望结果：当且仅当程序满足其期望行为，执行测试时产生的结果</p><p>Ÿ 前缀值：将软件置于合适的状态来接受测试用例值的任何必要的输入</p><p>Ÿ 后缀值：测试用例值被发送以后，需要被发送到软件的任何输入</p><p>测试集——测试用例值的集合</p><p>验证值——查看测试用例值结果所要用到的值</p><p>结束命令——终止程序或返回到稳定状态所要用到的值</p><p>Eg.</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD3.tmp.jpg" alt="img"> </p><p>1.3测试用例设计的要求</p><p>①具有代表性和典型性</p><p>②寻求系统设计和功能设计的弱点</p><p>③既有正确输入也有错误或异常输入</p><p>④考虑用户交际的诸多场景</p><h2 id="黑盒测试技术"><a href="#黑盒测试技术" class="headerlink" title="黑盒测试技术"></a>黑盒测试技术</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>黑盒测试时将测试对象看作一个黑盒子，完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD4.tmp.jpg" alt="img"> </p><h3 id="2-2等价类划分"><a href="#2-2等价类划分" class="headerlink" title="2.2等价类划分"></a>2.2等价类划分</h3><p>2.2.1概念</p><p>等价类划分是将输入域划分成尽可能少的若干子域，在划分中要求每个子域两两互不相交，每个子域称为一个等价类。</p><p>注：同一输入域的等价类划分可能不唯一；只需从每一个等价类中选取一个输入作为测试用例；对于相同的等价类划分，不同测试人员选取的测试用例集可能是不同的</p><p>2.2.2等价类类型</p><p>Ÿ <strong>有效等价类</strong>是对规格说明有意义、合理的输入数据构成的集合，能够检验程序是否实现了规格说明中预先规定的功能和性能。</p><p>Ÿ <strong>无效等价类</strong>是对规格说明无意义、不合理的输入数据构成的集合，以检查程序是否具有一定的容错性。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD5.tmp.jpg" alt="img"> </p><p>2.2.3变量的等价类</p><p><strong>取值范围</strong>：在输入条件规定了取值范围的情况下，可以确定一个有效等价类和两个无效等价类。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD6.tmp.jpg" alt="img"> </p><p><strong>字符串</strong>：在规定了输入数据必须遵守的规则情况下，可确定一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD7.tmp.jpg" alt="img"> </p><p><strong>枚举</strong>：若规定输入数据是一组值（假定N个），并且程序要对每一个输入值分别处理，可确定N个有效等价类和一个无效等价类</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD8.tmp.jpg" alt="img"> </p><p><strong>数组</strong>：数组是一组具有相同类型的元素的集合，数组长度及其类型都可以作为等价类划分的依据。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CD9.tmp.jpg" alt="img"> </p><p><strong>复合数据类型</strong>：符合数据类型是包含两个或两个以上相互独立的属性的输入数据，在进行等价类划分时需要考虑输入数据的每个属性的合法和非法属性。</p><p><img src="file:///C:\Users\LUSIR~1\AppData\Local\Temp\ksohtml\wps9CDA.tmp.jpg" alt="img"> </p><p><strong>测试用例生成</strong>：测试对象通常有多个输入参数，如何对这些参数等价类进行组合测试，来保证等价类的覆盖率，是测试用例设计首先需要考虑的问题。</p><p>Ÿ 所有有效等价类的代表值都集成到测试用例中，即覆盖有效等价类的所有组合。任何一个组合都将设计成一个有效的测试用例，也称<strong>正面测试用例</strong>。</p><p>Ÿ 无效等价类的代表值只能和其他有效等价类的代表值（随意）进行组合。因此，每个无效等价类都将产生一个额外的无效测试用例，也称<strong>负面测试用例</strong>。</p><h3 id="2-3边界值分析"><a href="#2-3边界值分析" class="headerlink" title="2.3边界值分析"></a>2.3边界值分析</h3><p>2.3.1概念</p><p><strong>边界值分析</strong>是对输入或输出的边界值进行测试的一种方法，它通常作为等价类划分的补充，这种情况下的测试用例来自等价类的边界</p><p>Ÿ 先确定边界：通常输入或输出等价类的边界就是应该着重测试的边界情况</p><p>Ÿ 选取正好等于、刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值</p><p>实践表明：大多数故障往往发生在输入定义域或输出值域的边界上，而不是内部。因此，针对各种边界情况测试用例，通常会取得很好的测试效果。</p><p>2.3.2基本思想</p><p>故障往往出现在程序输入变量的边界值附近</p><p>边界值分析法是基于可靠性理论中称为<strong>“单故障”</strong>的假设，即有两个或两个以上故障同时出现而导致失效的情况很少。</p><p>对程序中的每个变量重复：每次保留一个变量，让其余的变量取正常值，被保留的变量依次取min、min+、nom、max-和max+。</p><p>3健壮性测试</p><p><strong>健壮性测试</strong>是作为边界值分析的一个简单的扩充，它除了对变量的5个边界值分析取指外，还要增加一个略大于最大值（max+）以及略小于最小值（min-）的取值，检查超过极限值时系统的情况。</p><p>4错误推测法</p><p><strong>错误推测法</strong>是人们根据经验或直觉推测程序中可能存在的各种错误，从而有针对性地编写检查这些错误的测试用例的方法。</p><p>Ÿ 软件缺陷具有空间聚集性，80%的缺陷常常存在于20%的代码中。因此，应当记住常常光临代码的高危多发“地段”，这样发现缺陷的可能性会大得多。</p><p>Ÿ 列举程序中所有可能的错误和容易发生错误的特殊情况，根据可能出现的错误情况选择测试用例。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;软件工程&quot;&gt;&lt;a href=&quot;#软件工程&quot; class=&quot;headerlink&quot; title=&quot;软件工程&quot;&gt;&lt;/a&gt;软件工程&lt;/h1&gt;&lt;p&gt;声明：该笔记内容来自清华大学软件工程&lt;a href=&quot;https://www.xuetangx.com/course/THU</summary>
      
    
    
    
    <category term="知识积累" scheme="https://a2914475618.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="软件工程" scheme="https://a2914475618.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
</feed>
